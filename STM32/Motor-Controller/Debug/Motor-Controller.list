
Motor-Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbc8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800bd68  0800bd68  0001bd68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c184  0800c184  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800c184  0800c184  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c184  0800c184  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c184  0800c184  0001c184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c188  0800c188  0001c188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c18c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0000031c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004f8  200004f8  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d39  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ce8  00000000  00000000  00037f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  0003ac30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012a8  00000000  00000000  0003c000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000231f4  00000000  00000000  0003d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000196dd  00000000  00000000  0006049c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6889  00000000  00000000  00079b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150402  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000662c  00000000  00000000  00150454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bd50 	.word	0x0800bd50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800bd50 	.word	0x0800bd50

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <Read16>:
uint16_t ina219_calibrationValue;
int16_t ina219_currentDivider_mA;
int16_t ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af04      	add	r7, sp, #16
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c10:	9302      	str	r3, [sp, #8]
 8000c12:	2302      	movs	r3, #2
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	2180      	movs	r1, #128	; 0x80
 8000c20:	f003 f9f2 	bl	8004008 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8000c24:	7b3b      	ldrb	r3, [r7, #12]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	7b7b      	ldrb	r3, [r7, #13]
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	b29b      	uxth	r3, r3
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af04      	add	r7, sp, #16
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8000c4c:	883b      	ldrh	r3, [r7, #0]
 8000c4e:	0a1b      	lsrs	r3, r3, #8
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8000c56:	883b      	ldrh	r3, [r7, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6818      	ldr	r0, [r3, #0]
 8000c60:	78fb      	ldrb	r3, [r7, #3]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c68:	9302      	str	r3, [sp, #8]
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2301      	movs	r3, #1
 8000c76:	2180      	movs	r1, #128	; 0x80
 8000c78:	f003 f8b2 	bl	8003de0 <HAL_I2C_Mem_Write>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffb2 	bl	8000bf8 <Read16>
 8000c94:	4603      	mov	r3, r0
 8000c96:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8000c98:	89fb      	ldrh	r3, [r7, #14]
 8000c9a:	08db      	lsrs	r3, r3, #3
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	b29b      	uxth	r3, r3

}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b084      	sub	sp, #16
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8000cb2:	2104      	movs	r1, #4
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff9f 	bl	8000bf8 <Read16>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	81fb      	strh	r3, [r7, #14]

	return (result );
 8000cbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ffe8 	bl	8000caa <INA219_ReadCurrent_raw>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 8000cde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <INA219_ReadCurrent+0x2c>)
 8000ce4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ce8:	fb93 f3f2 	sdiv	r3, r3, r2
 8000cec:	b21b      	sxth	r3, r3
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200001fa 	.word	0x200001fa
 8000cfc:	00000000 	.word	0x00000000

08000d00 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8000d08:	2101      	movs	r1, #1
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ff74 	bl	8000bf8 <Read16>
 8000d10:	4603      	mov	r3, r0
 8000d12:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 8000d14:	89fb      	ldrh	r3, [r7, #14]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fc0c 	bl	8000534 <__aeabi_i2d>
 8000d1c:	a308      	add	r3, pc, #32	; (adr r3, 8000d40 <INA219_ReadShuntVolage+0x40>)
 8000d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d22:	f7ff fc71 	bl	8000608 <__aeabi_dmul>
 8000d26:	4602      	mov	r2, r0
 8000d28:	460b      	mov	r3, r1
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f7ff ff43 	bl	8000bb8 <__aeabi_d2uiz>
 8000d32:	4603      	mov	r3, r0
 8000d34:	b29b      	uxth	r3, r3
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	47ae147b 	.word	0x47ae147b
 8000d44:	3f847ae1 	.word	0x3f847ae1

08000d48 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8000d50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d54:	2100      	movs	r1, #0
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ff70 	bl	8000c3c <Write16>
	HAL_Delay(1);
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f001 fa6b 	bl	8002238 <HAL_Delay>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	460b      	mov	r3, r1
 8000d74:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8000d76:	887b      	ldrh	r3, [r7, #2]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2105      	movs	r1, #5
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff5d 	bl	8000c3c <Write16>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	460b      	mov	r3, r1
 8000d94:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8000d96:	887b      	ldrh	r3, [r7, #2]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff4d 	bl	8000c3c <Write16>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8000db4:	f643 139f 	movw	r3, #14751	; 0x399f
 8000db8:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <INA219_setCalibration_32V_2A+0x40>)
 8000dbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dc0:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <INA219_setCalibration_32V_2A+0x44>)
 8000dc4:	220a      	movs	r2, #10
 8000dc6:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <INA219_setCalibration_32V_2A+0x48>)
 8000dca:	2202      	movs	r2, #2
 8000dcc:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <INA219_setCalibration_32V_2A+0x40>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ffc8 	bl	8000d6a <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8000dda:	89fb      	ldrh	r3, [r7, #14]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffd3 	bl	8000d8a <INA219_setConfig>
}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200001f8 	.word	0x200001f8
 8000df0:	200001fa 	.word	0x200001fa
 8000df4:	200001fc 	.word	0x200001fc

08000df8 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	4613      	mov	r3, r2
 8000e04:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	68ba      	ldr	r2, [r7, #8]
 8000e0a:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	79fa      	ldrb	r2, [r7, #7]
 8000e10:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <INA219_Init+0x5c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <INA219_Init+0x60>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	b299      	uxth	r1, r3
 8000e26:	2302      	movs	r3, #2
 8000e28:	2203      	movs	r2, #3
 8000e2a:	68b8      	ldr	r0, [r7, #8]
 8000e2c:	f003 fa06 	bl	800423c <HAL_I2C_IsDeviceReady>
 8000e30:	4603      	mov	r3, r0
 8000e32:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8000e34:	7dfb      	ldrb	r3, [r7, #23]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d107      	bne.n	8000e4a <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	f7ff ff84 	bl	8000d48 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f7ff ffb3 	bl	8000dac <INA219_setCalibration_32V_2A>

		return 1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <INA219_Init+0x54>
	}

	else
	{
		return 0;
 8000e4a:	2300      	movs	r3, #0
	}
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200001fa 	.word	0x200001fa
 8000e58:	200001fc 	.word	0x200001fc
 8000e5c:	00000000 	.word	0x00000000

08000e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e62:	b0bd      	sub	sp, #244	; 0xf4
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e66:	f001 f981 	bl	800216c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6a:	f000 fa93 	bl	8001394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6e:	f000 fd2d 	bl	80018cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000e72:	f000 fd0d 	bl	8001890 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e76:	f000 faf9 	bl	800146c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e7a:	f000 fbb5 	bl	80015e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e7e:	f000 fc05 	bl	800168c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000e82:	f000 fcd3 	bl	800182c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000e86:	f000 fc83 	bl	8001790 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000e8a:	f000 fb6f 	bl	800156c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	uint32_t ADC_Value[2];
	uint8_t txbuffer[200];

	uint8_t input = SLIDERS;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
	HAL_UART_Receive_IT(&huart2, UART_RX_Byte, 1);
 8000e94:	2201      	movs	r2, #1
 8000e96:	49ca      	ldr	r1, [pc, #808]	; (80011c0 <main+0x360>)
 8000e98:	48ca      	ldr	r0, [pc, #808]	; (80011c4 <main+0x364>)
 8000e9a:	f006 fe57 	bl	8007b4c <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8000e9e:	48ca      	ldr	r0, [pc, #808]	; (80011c8 <main+0x368>)
 8000ea0:	f005 fb60 	bl	8006564 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000ea4:	48c9      	ldr	r0, [pc, #804]	; (80011cc <main+0x36c>)
 8000ea6:	f005 fb5d 	bl	8006564 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, ADC_Value, 2); // start adc in DMA mode
 8000eaa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000eae:	2202      	movs	r2, #2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	48c7      	ldr	r0, [pc, #796]	; (80011d0 <main+0x370>)
 8000eb4:	f001 fbfc 	bl	80026b0 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	48c6      	ldr	r0, [pc, #792]	; (80011d4 <main+0x374>)
 8000ebc:	f005 fc24 	bl	8006708 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000ec0:	2104      	movs	r1, #4
 8000ec2:	48c4      	ldr	r0, [pc, #784]	; (80011d4 <main+0x374>)
 8000ec4:	f005 fc20 	bl	8006708 <HAL_TIM_PWM_Start>

	for (int i = 0; i < 100; i++) {
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000ece:	e00c      	b.n	8000eea <main+0x8a>
		txbuffer[i] = (uint8_t) *" ";
 8000ed0:	2120      	movs	r1, #32
 8000ed2:	f107 0208 	add.w	r2, r7, #8
 8000ed6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000eda:	4413      	add	r3, r2
 8000edc:	460a      	mov	r2, r1
 8000ede:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++) {
 8000ee0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000eea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000eee:	2b63      	cmp	r3, #99	; 0x63
 8000ef0:	ddee      	ble.n	8000ed0 <main+0x70>
	}

	while (!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS)) {
 8000ef2:	bf00      	nop
 8000ef4:	2240      	movs	r2, #64	; 0x40
 8000ef6:	49b8      	ldr	r1, [pc, #736]	; (80011d8 <main+0x378>)
 8000ef8:	48b8      	ldr	r0, [pc, #736]	; (80011dc <main+0x37c>)
 8000efa:	f7ff ff7d 	bl	8000df8 <INA219_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f7      	beq.n	8000ef4 <main+0x94>

	}

	//INA219_setPowerMode(&ina219, INA219_CONFIG_MODE_ADCOFF);

	vbus = INA219_ReadBusVoltage(&ina219);
 8000f04:	48b5      	ldr	r0, [pc, #724]	; (80011dc <main+0x37c>)
 8000f06:	f7ff febd 	bl	8000c84 <INA219_ReadBusVoltage>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	b21a      	sxth	r2, r3
 8000f0e:	4bb4      	ldr	r3, [pc, #720]	; (80011e0 <main+0x380>)
 8000f10:	801a      	strh	r2, [r3, #0]
	vshunt = INA219_ReadShuntVolage(&ina219);
 8000f12:	48b2      	ldr	r0, [pc, #712]	; (80011dc <main+0x37c>)
 8000f14:	f7ff fef4 	bl	8000d00 <INA219_ReadShuntVolage>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	4bb1      	ldr	r3, [pc, #708]	; (80011e4 <main+0x384>)
 8000f1e:	801a      	strh	r2, [r3, #0]
	current = INA219_ReadCurrent(&ina219);
 8000f20:	48ae      	ldr	r0, [pc, #696]	; (80011dc <main+0x37c>)
 8000f22:	f7ff fed3 	bl	8000ccc <INA219_ReadCurrent>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4baf      	ldr	r3, [pc, #700]	; (80011e8 <main+0x388>)
 8000f2c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		double slider1 = (ADC_Value[0] / 2047.0) - 1.0;
 8000f2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff faee 	bl	8000514 <__aeabi_ui2d>
 8000f38:	a397      	add	r3, pc, #604	; (adr r3, 8001198 <main+0x338>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	f7ff fc8d 	bl	800085c <__aeabi_ddiv>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	4ba7      	ldr	r3, [pc, #668]	; (80011ec <main+0x38c>)
 8000f50:	f7ff f9a2 	bl	8000298 <__aeabi_dsub>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		double slider2 = (ADC_Value[1] / 2047.0) - 1.0;
 8000f5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fad7 	bl	8000514 <__aeabi_ui2d>
 8000f66:	a38c      	add	r3, pc, #560	; (adr r3, 8001198 <main+0x338>)
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	f7ff fc76 	bl	800085c <__aeabi_ddiv>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	4b9b      	ldr	r3, [pc, #620]	; (80011ec <main+0x38c>)
 8000f7e:	f7ff f98b 	bl	8000298 <__aeabi_dsub>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8

		if (input == SLIDERS) {
 8000f8a:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f040 8141 	bne.w	8001216 <main+0x3b6>
			if (slider1 > THRESHOLD_OFF) {
 8000f94:	a382      	add	r3, pc, #520	; (adr r3, 80011a0 <main+0x340>)
 8000f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8000f9e:	f7ff fdc3 	bl	8000b28 <__aeabi_dcmpgt>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d02e      	beq.n	8001006 <main+0x1a6>
				HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, 1);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2180      	movs	r1, #128	; 0x80
 8000fac:	4890      	ldr	r0, [pc, #576]	; (80011f0 <main+0x390>)
 8000fae:	f002 fe6f 	bl	8003c90 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_a_rev_GPIO_Port, Motor_a_rev_Pin, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb8:	488e      	ldr	r0, [pc, #568]	; (80011f4 <main+0x394>)
 8000fba:	f002 fe69 	bl	8003c90 <HAL_GPIO_WritePin>
				TIM2->CCR1 = ((slider1 - THRESHOLD_OFF)
 8000fbe:	a378      	add	r3, pc, #480	; (adr r3, 80011a0 <main+0x340>)
 8000fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8000fc8:	f7ff f966 	bl	8000298 <__aeabi_dsub>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
						/ (THRESHOLD_FULL - THRESHOLD_OFF)) * 999.0;
 8000fd4:	a374      	add	r3, pc, #464	; (adr r3, 80011a8 <main+0x348>)
 8000fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fda:	f7ff fc3f 	bl	800085c <__aeabi_ddiv>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	a372      	add	r3, pc, #456	; (adr r3, 80011b0 <main+0x350>)
 8000fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fec:	f7ff fb0c 	bl	8000608 <__aeabi_dmul>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
				TIM2->CCR1 = ((slider1 - THRESHOLD_OFF)
 8000ff4:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f7ff fddc 	bl	8000bb8 <__aeabi_d2uiz>
 8001000:	4603      	mov	r3, r0
 8001002:	6373      	str	r3, [r6, #52]	; 0x34
 8001004:	e04d      	b.n	80010a2 <main+0x242>
			} else if (slider1 < -THRESHOLD_OFF) {
 8001006:	a36c      	add	r3, pc, #432	; (adr r3, 80011b8 <main+0x358>)
 8001008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001010:	f7ff fd6c 	bl	8000aec <__aeabi_dcmplt>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d034      	beq.n	8001084 <main+0x224>
				HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	4874      	ldr	r0, [pc, #464]	; (80011f0 <main+0x390>)
 8001020:	f002 fe36 	bl	8003c90 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_a_rev_GPIO_Port, Motor_a_rev_Pin, 1);
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102a:	4872      	ldr	r0, [pc, #456]	; (80011f4 <main+0x394>)
 800102c:	f002 fe30 	bl	8003c90 <HAL_GPIO_WritePin>
				TIM2->CCR1 = ((-slider1 - THRESHOLD_OFF)
 8001030:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8001034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001038:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800103c:	a358      	add	r3, pc, #352	; (adr r3, 80011a0 <main+0x340>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	4620      	mov	r0, r4
 8001044:	4629      	mov	r1, r5
 8001046:	f7ff f927 	bl	8000298 <__aeabi_dsub>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
						/ (THRESHOLD_FULL - THRESHOLD_OFF)) * 999.0;
 8001052:	a355      	add	r3, pc, #340	; (adr r3, 80011a8 <main+0x348>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fc00 	bl	800085c <__aeabi_ddiv>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	a352      	add	r3, pc, #328	; (adr r3, 80011b0 <main+0x350>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	f7ff facd 	bl	8000608 <__aeabi_dmul>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
				TIM2->CCR1 = ((-slider1 - THRESHOLD_OFF)
 8001072:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff fd9d 	bl	8000bb8 <__aeabi_d2uiz>
 800107e:	4603      	mov	r3, r0
 8001080:	6373      	str	r3, [r6, #52]	; 0x34
 8001082:	e00e      	b.n	80010a2 <main+0x242>
			} else {
				HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	4859      	ldr	r0, [pc, #356]	; (80011f0 <main+0x390>)
 800108a:	f002 fe01 	bl	8003c90 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_a_rev_GPIO_Port, Motor_a_rev_Pin, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001094:	4857      	ldr	r0, [pc, #348]	; (80011f4 <main+0x394>)
 8001096:	f002 fdfb 	bl	8003c90 <HAL_GPIO_WritePin>
				TIM2->CCR1 = 0;
 800109a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800109e:	2200      	movs	r2, #0
 80010a0:	635a      	str	r2, [r3, #52]	; 0x34
			}

			if (slider2 > THRESHOLD_OFF) {
 80010a2:	a33f      	add	r3, pc, #252	; (adr r3, 80011a0 <main+0x340>)
 80010a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80010ac:	f7ff fd3c 	bl	8000b28 <__aeabi_dcmpgt>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d02d      	beq.n	8001112 <main+0x2b2>
				HAL_GPIO_WritePin(Motor_b_fwd_GPIO_Port, Motor_b_fwd_Pin, 1);
 80010b6:	2201      	movs	r2, #1
 80010b8:	2104      	movs	r1, #4
 80010ba:	484e      	ldr	r0, [pc, #312]	; (80011f4 <main+0x394>)
 80010bc:	f002 fde8 	bl	8003c90 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_b_rev_GPIO_Port, Motor_b_rev_Pin, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2108      	movs	r1, #8
 80010c4:	484b      	ldr	r0, [pc, #300]	; (80011f4 <main+0x394>)
 80010c6:	f002 fde3 	bl	8003c90 <HAL_GPIO_WritePin>
				TIM2->CCR2 = ((slider2 - THRESHOLD_OFF)
 80010ca:	a335      	add	r3, pc, #212	; (adr r3, 80011a0 <main+0x340>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80010d4:	f7ff f8e0 	bl	8000298 <__aeabi_dsub>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
						/ (THRESHOLD_FULL - THRESHOLD_OFF)) * 999.0;
 80010e0:	a331      	add	r3, pc, #196	; (adr r3, 80011a8 <main+0x348>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	f7ff fbb9 	bl	800085c <__aeabi_ddiv>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	a32f      	add	r3, pc, #188	; (adr r3, 80011b0 <main+0x350>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	f7ff fa86 	bl	8000608 <__aeabi_dmul>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
				TIM2->CCR2 = ((slider2 - THRESHOLD_OFF)
 8001100:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fd56 	bl	8000bb8 <__aeabi_d2uiz>
 800110c:	4603      	mov	r3, r0
 800110e:	63b3      	str	r3, [r6, #56]	; 0x38
 8001110:	e0f6      	b.n	8001300 <main+0x4a0>
			} else if (slider2 < -THRESHOLD_OFF) {
 8001112:	a329      	add	r3, pc, #164	; (adr r3, 80011b8 <main+0x358>)
 8001114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001118:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800111c:	f7ff fce6 	bl	8000aec <__aeabi_dcmplt>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d068      	beq.n	80011f8 <main+0x398>
				HAL_GPIO_WritePin(Motor_b_fwd_GPIO_Port, Motor_b_fwd_Pin, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2104      	movs	r1, #4
 800112a:	4832      	ldr	r0, [pc, #200]	; (80011f4 <main+0x394>)
 800112c:	f002 fdb0 	bl	8003c90 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_b_rev_GPIO_Port, Motor_b_rev_Pin, 1);
 8001130:	2201      	movs	r2, #1
 8001132:	2108      	movs	r1, #8
 8001134:	482f      	ldr	r0, [pc, #188]	; (80011f4 <main+0x394>)
 8001136:	f002 fdab 	bl	8003c90 <HAL_GPIO_WritePin>
				TIM2->CCR2 = ((-slider2 - THRESHOLD_OFF)
 800113a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001144:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	a315      	add	r3, pc, #84	; (adr r3, 80011a0 <main+0x340>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001154:	f7ff f8a0 	bl	8000298 <__aeabi_dsub>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
						/ (THRESHOLD_FULL - THRESHOLD_OFF)) * 999.0;
 8001160:	a311      	add	r3, pc, #68	; (adr r3, 80011a8 <main+0x348>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff fb79 	bl	800085c <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	a30f      	add	r3, pc, #60	; (adr r3, 80011b0 <main+0x350>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	f7ff fa46 	bl	8000608 <__aeabi_dmul>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
				TIM2->CCR2 = ((-slider2 - THRESHOLD_OFF)
 8001180:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fd16 	bl	8000bb8 <__aeabi_d2uiz>
 800118c:	4603      	mov	r3, r0
 800118e:	63b3      	str	r3, [r6, #56]	; 0x38
 8001190:	e0b6      	b.n	8001300 <main+0x4a0>
 8001192:	bf00      	nop
 8001194:	f3af 8000 	nop.w
 8001198:	00000000 	.word	0x00000000
 800119c:	409ffc00 	.word	0x409ffc00
 80011a0:	9999999a 	.word	0x9999999a
 80011a4:	3fc99999 	.word	0x3fc99999
 80011a8:	66666666 	.word	0x66666666
 80011ac:	3fe66666 	.word	0x3fe66666
 80011b0:	00000000 	.word	0x00000000
 80011b4:	408f3800 	.word	0x408f3800
 80011b8:	9999999a 	.word	0x9999999a
 80011bc:	bfc99999 	.word	0xbfc99999
 80011c0:	200004bc 	.word	0x200004bc
 80011c4:	200003cc 	.word	0x200003cc
 80011c8:	200002e8 	.word	0x200002e8
 80011cc:	20000380 	.word	0x20000380
 80011d0:	20000200 	.word	0x20000200
 80011d4:	20000334 	.word	0x20000334
 80011d8:	20000294 	.word	0x20000294
 80011dc:	200004d0 	.word	0x200004d0
 80011e0:	200004d8 	.word	0x200004d8
 80011e4:	200004da 	.word	0x200004da
 80011e8:	200004dc 	.word	0x200004dc
 80011ec:	3ff00000 	.word	0x3ff00000
 80011f0:	48000400 	.word	0x48000400
 80011f4:	48000800 	.word	0x48000800
			} else {
				HAL_GPIO_WritePin(Motor_b_fwd_GPIO_Port, Motor_b_fwd_Pin, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2104      	movs	r1, #4
 80011fc:	485a      	ldr	r0, [pc, #360]	; (8001368 <main+0x508>)
 80011fe:	f002 fd47 	bl	8003c90 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_b_rev_GPIO_Port, Motor_b_rev_Pin, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2108      	movs	r1, #8
 8001206:	4858      	ldr	r0, [pc, #352]	; (8001368 <main+0x508>)
 8001208:	f002 fd42 	bl	8003c90 <HAL_GPIO_WritePin>
				TIM2->CCR2 = 0;
 800120c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001210:	2200      	movs	r2, #0
 8001212:	639a      	str	r2, [r3, #56]	; 0x38
 8001214:	e074      	b.n	8001300 <main+0x4a0>
			}
		} else if (input == UART) {
 8001216:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 800121a:	2b01      	cmp	r3, #1
 800121c:	d170      	bne.n	8001300 <main+0x4a0>

			if (UART_RX_Motor_a > 0) {
 800121e:	4b53      	ldr	r3, [pc, #332]	; (800136c <main+0x50c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	dd10      	ble.n	8001248 <main+0x3e8>
				HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, 1);
 8001226:	2201      	movs	r2, #1
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	4851      	ldr	r0, [pc, #324]	; (8001370 <main+0x510>)
 800122c:	f002 fd30 	bl	8003c90 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_a_rev_GPIO_Port, Motor_a_rev_Pin, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001236:	484c      	ldr	r0, [pc, #304]	; (8001368 <main+0x508>)
 8001238:	f002 fd2a 	bl	8003c90 <HAL_GPIO_WritePin>
				TIM2->CCR1 = UART_RX_Motor_a;
 800123c:	4b4b      	ldr	r3, [pc, #300]	; (800136c <main+0x50c>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001244:	635a      	str	r2, [r3, #52]	; 0x34
 8001246:	e024      	b.n	8001292 <main+0x432>
			} else if (UART_RX_Motor_a < 0) {
 8001248:	4b48      	ldr	r3, [pc, #288]	; (800136c <main+0x50c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	da11      	bge.n	8001274 <main+0x414>
				HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	4846      	ldr	r0, [pc, #280]	; (8001370 <main+0x510>)
 8001256:	f002 fd1b 	bl	8003c90 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_a_rev_GPIO_Port, Motor_a_rev_Pin, 1);
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001260:	4841      	ldr	r0, [pc, #260]	; (8001368 <main+0x508>)
 8001262:	f002 fd15 	bl	8003c90 <HAL_GPIO_WritePin>
				TIM2->CCR1 = -UART_RX_Motor_a;
 8001266:	4b41      	ldr	r3, [pc, #260]	; (800136c <main+0x50c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	425a      	negs	r2, r3
 800126c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001270:	635a      	str	r2, [r3, #52]	; 0x34
 8001272:	e00e      	b.n	8001292 <main+0x432>
			} else {
				HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	483d      	ldr	r0, [pc, #244]	; (8001370 <main+0x510>)
 800127a:	f002 fd09 	bl	8003c90 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_a_rev_GPIO_Port, Motor_a_rev_Pin, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001284:	4838      	ldr	r0, [pc, #224]	; (8001368 <main+0x508>)
 8001286:	f002 fd03 	bl	8003c90 <HAL_GPIO_WritePin>
				TIM2->CCR1 = 0;
 800128a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800128e:	2200      	movs	r2, #0
 8001290:	635a      	str	r2, [r3, #52]	; 0x34
			}

			if (UART_RX_Motor_b > 0) {
 8001292:	4b38      	ldr	r3, [pc, #224]	; (8001374 <main+0x514>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	dd0f      	ble.n	80012ba <main+0x45a>
				HAL_GPIO_WritePin(Motor_b_fwd_GPIO_Port, Motor_b_fwd_Pin, 1);
 800129a:	2201      	movs	r2, #1
 800129c:	2104      	movs	r1, #4
 800129e:	4832      	ldr	r0, [pc, #200]	; (8001368 <main+0x508>)
 80012a0:	f002 fcf6 	bl	8003c90 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_b_rev_GPIO_Port, Motor_b_rev_Pin, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2108      	movs	r1, #8
 80012a8:	482f      	ldr	r0, [pc, #188]	; (8001368 <main+0x508>)
 80012aa:	f002 fcf1 	bl	8003c90 <HAL_GPIO_WritePin>
				TIM2->CCR2 = UART_RX_Motor_b;
 80012ae:	4b31      	ldr	r3, [pc, #196]	; (8001374 <main+0x514>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012b6:	639a      	str	r2, [r3, #56]	; 0x38
 80012b8:	e022      	b.n	8001300 <main+0x4a0>
			} else if (UART_RX_Motor_b < 0) {
 80012ba:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <main+0x514>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	da10      	bge.n	80012e4 <main+0x484>
				HAL_GPIO_WritePin(Motor_b_fwd_GPIO_Port, Motor_b_fwd_Pin, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2104      	movs	r1, #4
 80012c6:	4828      	ldr	r0, [pc, #160]	; (8001368 <main+0x508>)
 80012c8:	f002 fce2 	bl	8003c90 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_b_rev_GPIO_Port, Motor_b_rev_Pin, 1);
 80012cc:	2201      	movs	r2, #1
 80012ce:	2108      	movs	r1, #8
 80012d0:	4825      	ldr	r0, [pc, #148]	; (8001368 <main+0x508>)
 80012d2:	f002 fcdd 	bl	8003c90 <HAL_GPIO_WritePin>
				TIM2->CCR2 = -UART_RX_Motor_b;
 80012d6:	4b27      	ldr	r3, [pc, #156]	; (8001374 <main+0x514>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	425a      	negs	r2, r3
 80012dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012e0:	639a      	str	r2, [r3, #56]	; 0x38
 80012e2:	e00d      	b.n	8001300 <main+0x4a0>
			} else {
				HAL_GPIO_WritePin(Motor_b_fwd_GPIO_Port, Motor_b_fwd_Pin, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2104      	movs	r1, #4
 80012e8:	481f      	ldr	r0, [pc, #124]	; (8001368 <main+0x508>)
 80012ea:	f002 fcd1 	bl	8003c90 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_b_rev_GPIO_Port, Motor_b_rev_Pin, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2108      	movs	r1, #8
 80012f2:	481d      	ldr	r0, [pc, #116]	; (8001368 <main+0x508>)
 80012f4:	f002 fccc 	bl	8003c90 <HAL_GPIO_WritePin>
				TIM2->CCR2 = 0;
 80012f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012fc:	2200      	movs	r2, #0
 80012fe:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}

		if (TIM3_flag == 1) {
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <main+0x518>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d126      	bne.n	8001358 <main+0x4f8>
			TIM3_flag = 0;
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <main+0x518>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
//			vbus = INA219_ReadBusVoltage(&ina219);
//			vshunt = INA219_ReadShuntVolage(&ina219);
			current = INA219_ReadCurrent(&ina219);
 8001310:	481a      	ldr	r0, [pc, #104]	; (800137c <main+0x51c>)
 8001312:	f7ff fcdb 	bl	8000ccc <INA219_ReadCurrent>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <main+0x520>)
 800131c:	801a      	strh	r2, [r3, #0]
			UART_Counter +=1;
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <main+0x524>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a17      	ldr	r2, [pc, #92]	; (8001384 <main+0x524>)
 8001326:	6013      	str	r3, [r2, #0]
//			sprintf((char*) txbuffer, "Duty Cycles: %04d, %04d\n"
//					                  "Current:     %05.1f mA, %05.1f mA\n"
//									  "Vbus:        %04d, %04d\n"
//									  "Vshunt:      %04d, %04d\n", (int) TIM2->CCR1, (int) TIM2->CCR2, currentmA, currentmA, vbus, vbus, vshunt, vshunt);
			sprintf((char*) txbuffer, "%d,%d\n", (int) UART_Counter, current);
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <main+0x524>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <main+0x520>)
 8001330:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001334:	f107 0008 	add.w	r0, r7, #8
 8001338:	4913      	ldr	r1, [pc, #76]	; (8001388 <main+0x528>)
 800133a:	f008 fa8f 	bl	800985c <siprintf>
			HAL_UART_Transmit(&huart2, txbuffer, strlen((char*) txbuffer), 50);
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	4618      	mov	r0, r3
 8001344:	f7fe ff4c 	bl	80001e0 <strlen>
 8001348:	4603      	mov	r3, r0
 800134a:	b29a      	uxth	r2, r3
 800134c:	f107 0108 	add.w	r1, r7, #8
 8001350:	2332      	movs	r3, #50	; 0x32
 8001352:	480e      	ldr	r0, [pc, #56]	; (800138c <main+0x52c>)
 8001354:	f006 fb70 	bl	8007a38 <HAL_UART_Transmit>
		}
		if (UART_RX_Flag == 1) {
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <main+0x530>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	f47f ade6 	bne.w	8000f2e <main+0xce>
			UART_RX_Handler();
 8001362:	f000 fb59 	bl	8001a18 <UART_RX_Handler>
	while (1) {
 8001366:	e5e2      	b.n	8000f2e <main+0xce>
 8001368:	48000800 	.word	0x48000800
 800136c:	200004c0 	.word	0x200004c0
 8001370:	48000400 	.word	0x48000400
 8001374:	200004c4 	.word	0x200004c4
 8001378:	200004c8 	.word	0x200004c8
 800137c:	200004d0 	.word	0x200004d0
 8001380:	200004dc 	.word	0x200004dc
 8001384:	200004cc 	.word	0x200004cc
 8001388:	0800bd68 	.word	0x0800bd68
 800138c:	200003cc 	.word	0x200003cc
 8001390:	200004bd 	.word	0x200004bd

08001394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b0a6      	sub	sp, #152	; 0x98
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800139e:	2228      	movs	r2, #40	; 0x28
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f007 fde8 	bl	8008f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2258      	movs	r2, #88	; 0x58
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f007 fdda 	bl	8008f78 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c4:	2302      	movs	r3, #2
 80013c6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c8:	2301      	movs	r3, #1
 80013ca:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013cc:	2310      	movs	r3, #16
 80013ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d2:	2302      	movs	r3, #2
 80013d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 fbb6 	bl	8004b64 <HAL_RCC_OscConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013fe:	f000 fb7b 	bl	8001af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001402:	230f      	movs	r3, #15
 8001404:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001406:	2302      	movs	r3, #2
 8001408:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800140e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001412:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001414:	2300      	movs	r3, #0
 8001416:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001418:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800141c:	2102      	movs	r1, #2
 800141e:	4618      	mov	r0, r3
 8001420:	f004 fbf4 	bl	8005c0c <HAL_RCC_ClockConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800142a:	f000 fb65 	bl	8001af8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <SystemClock_Config+0xd4>)
 8001430:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001440:	2300      	movs	r3, #0
 8001442:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001444:	2300      	movs	r3, #0
 8001446:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001448:	2300      	movs	r3, #0
 800144a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	4618      	mov	r0, r3
 8001450:	f004 fe12 	bl	8006078 <HAL_RCCEx_PeriphCLKConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800145a:	f000 fb4d 	bl	8001af8 <Error_Handler>
  }
}
 800145e:	bf00      	nop
 8001460:	3798      	adds	r7, #152	; 0x98
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	003010a2 	.word	0x003010a2

0800146c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
 800148c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800148e:	4b36      	ldr	r3, [pc, #216]	; (8001568 <MX_ADC1_Init+0xfc>)
 8001490:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001494:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001496:	4b34      	ldr	r3, [pc, #208]	; (8001568 <MX_ADC1_Init+0xfc>)
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <MX_ADC1_Init+0xfc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014a2:	4b31      	ldr	r3, [pc, #196]	; (8001568 <MX_ADC1_Init+0xfc>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <MX_ADC1_Init+0xfc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <MX_ADC1_Init+0xfc>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014b6:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <MX_ADC1_Init+0xfc>)
 80014b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80014be:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <MX_ADC1_Init+0xfc>)
 80014c0:	f44f 7210 	mov.w	r2, #576	; 0x240
 80014c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <MX_ADC1_Init+0xfc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <MX_ADC1_Init+0xfc>)
 80014ce:	2202      	movs	r2, #2
 80014d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <MX_ADC1_Init+0xfc>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <MX_ADC1_Init+0xfc>)
 80014dc:	2204      	movs	r2, #4
 80014de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014e0:	4b21      	ldr	r3, [pc, #132]	; (8001568 <MX_ADC1_Init+0xfc>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <MX_ADC1_Init+0xfc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ec:	481e      	ldr	r0, [pc, #120]	; (8001568 <MX_ADC1_Init+0xfc>)
 80014ee:	f000 fee5 	bl	80022bc <HAL_ADC_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014f8:	f000 fafe 	bl	8001af8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	4818      	ldr	r0, [pc, #96]	; (8001568 <MX_ADC1_Init+0xfc>)
 8001508:	f001 fcda 	bl	8002ec0 <HAL_ADCEx_MultiModeConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001512:	f000 faf1 	bl	8001af8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001516:	2301      	movs	r3, #1
 8001518:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800151a:	2301      	movs	r3, #1
 800151c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	4619      	mov	r1, r3
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <MX_ADC1_Init+0xfc>)
 8001534:	f001 f9d8 	bl	80028e8 <HAL_ADC_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800153e:	f000 fadb 	bl	8001af8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001542:	2302      	movs	r3, #2
 8001544:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001546:	2302      	movs	r3, #2
 8001548:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4806      	ldr	r0, [pc, #24]	; (8001568 <MX_ADC1_Init+0xfc>)
 8001550:	f001 f9ca 	bl	80028e8 <HAL_ADC_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 800155a:	f000 facd 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	3728      	adds	r7, #40	; 0x28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000200 	.word	0x20000200

0800156c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MX_I2C1_Init+0x74>)
 8001572:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <MX_I2C1_Init+0x78>)
 8001574:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_I2C1_Init+0x74>)
 8001578:	f240 220b 	movw	r2, #523	; 0x20b
 800157c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <MX_I2C1_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_I2C1_Init+0x74>)
 8001586:	2201      	movs	r2, #1
 8001588:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <MX_I2C1_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <MX_I2C1_Init+0x74>)
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <MX_I2C1_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MX_I2C1_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_I2C1_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a8:	480d      	ldr	r0, [pc, #52]	; (80015e0 <MX_I2C1_Init+0x74>)
 80015aa:	f002 fb89 	bl	8003cc0 <HAL_I2C_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b4:	f000 faa0 	bl	8001af8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015b8:	2100      	movs	r1, #0
 80015ba:	4809      	ldr	r0, [pc, #36]	; (80015e0 <MX_I2C1_Init+0x74>)
 80015bc:	f003 fa1a 	bl	80049f4 <HAL_I2CEx_ConfigAnalogFilter>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80015c6:	f000 fa97 	bl	8001af8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015ca:	2100      	movs	r1, #0
 80015cc:	4804      	ldr	r0, [pc, #16]	; (80015e0 <MX_I2C1_Init+0x74>)
 80015ce:	f003 fa5c 	bl	8004a8a <HAL_I2CEx_ConfigDigitalFilter>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80015d8:	f000 fa8e 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000294 	.word	0x20000294
 80015e4:	40005400 	.word	0x40005400

080015e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001606:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <MX_TIM1_Init+0x9c>)
 8001608:	4a1f      	ldr	r2, [pc, #124]	; (8001688 <MX_TIM1_Init+0xa0>)
 800160a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <MX_TIM1_Init+0x9c>)
 800160e:	2247      	movs	r2, #71	; 0x47
 8001610:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001612:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <MX_TIM1_Init+0x9c>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <MX_TIM1_Init+0x9c>)
 800161a:	2263      	movs	r2, #99	; 0x63
 800161c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161e:	4b19      	ldr	r3, [pc, #100]	; (8001684 <MX_TIM1_Init+0x9c>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <MX_TIM1_Init+0x9c>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <MX_TIM1_Init+0x9c>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001630:	4814      	ldr	r0, [pc, #80]	; (8001684 <MX_TIM1_Init+0x9c>)
 8001632:	f004 ff3f 	bl	80064b4 <HAL_TIM_Base_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800163c:	f000 fa5c 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001644:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	4619      	mov	r1, r3
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <MX_TIM1_Init+0x9c>)
 800164e:	f005 fb9b 	bl	8006d88 <HAL_TIM_ConfigClockSource>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001658:	f000 fa4e 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800165c:	2320      	movs	r3, #32
 800165e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_TIM1_Init+0x9c>)
 800166e:	f006 f8eb 	bl	8007848 <HAL_TIMEx_MasterConfigSynchronization>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001678:	f000 fa3e 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200002e8 	.word	0x200002e8
 8001688:	40012c00 	.word	0x40012c00

0800168c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08e      	sub	sp, #56	; 0x38
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001692:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a0:	f107 031c 	add.w	r3, r7, #28
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ac:	463b      	mov	r3, r7
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]
 80016ba:	615a      	str	r2, [r3, #20]
 80016bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016be:	4b33      	ldr	r3, [pc, #204]	; (800178c <MX_TIM2_Init+0x100>)
 80016c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 80016c6:	4b31      	ldr	r3, [pc, #196]	; (800178c <MX_TIM2_Init+0x100>)
 80016c8:	f240 22cf 	movw	r2, #719	; 0x2cf
 80016cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ce:	4b2f      	ldr	r3, [pc, #188]	; (800178c <MX_TIM2_Init+0x100>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80016d4:	4b2d      	ldr	r3, [pc, #180]	; (800178c <MX_TIM2_Init+0x100>)
 80016d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016dc:	4b2b      	ldr	r3, [pc, #172]	; (800178c <MX_TIM2_Init+0x100>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e2:	4b2a      	ldr	r3, [pc, #168]	; (800178c <MX_TIM2_Init+0x100>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016e8:	4828      	ldr	r0, [pc, #160]	; (800178c <MX_TIM2_Init+0x100>)
 80016ea:	f004 fee3 	bl	80064b4 <HAL_TIM_Base_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80016f4:	f000 fa00 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001702:	4619      	mov	r1, r3
 8001704:	4821      	ldr	r0, [pc, #132]	; (800178c <MX_TIM2_Init+0x100>)
 8001706:	f005 fb3f 	bl	8006d88 <HAL_TIM_ConfigClockSource>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001710:	f000 f9f2 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001714:	481d      	ldr	r0, [pc, #116]	; (800178c <MX_TIM2_Init+0x100>)
 8001716:	f004 ff95 	bl	8006644 <HAL_TIM_PWM_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001720:	f000 f9ea 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	4816      	ldr	r0, [pc, #88]	; (800178c <MX_TIM2_Init+0x100>)
 8001734:	f006 f888 	bl	8007848 <HAL_TIMEx_MasterConfigSynchronization>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800173e:	f000 f9db 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001742:	2360      	movs	r3, #96	; 0x60
 8001744:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001752:	463b      	mov	r3, r7
 8001754:	2200      	movs	r2, #0
 8001756:	4619      	mov	r1, r3
 8001758:	480c      	ldr	r0, [pc, #48]	; (800178c <MX_TIM2_Init+0x100>)
 800175a:	f005 fa01 	bl	8006b60 <HAL_TIM_PWM_ConfigChannel>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001764:	f000 f9c8 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001768:	463b      	mov	r3, r7
 800176a:	2204      	movs	r2, #4
 800176c:	4619      	mov	r1, r3
 800176e:	4807      	ldr	r0, [pc, #28]	; (800178c <MX_TIM2_Init+0x100>)
 8001770:	f005 f9f6 	bl	8006b60 <HAL_TIM_PWM_ConfigChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800177a:	f000 f9bd 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800177e:	4803      	ldr	r0, [pc, #12]	; (800178c <MX_TIM2_Init+0x100>)
 8001780:	f000 faf4 	bl	8001d6c <HAL_TIM_MspPostInit>

}
 8001784:	bf00      	nop
 8001786:	3738      	adds	r7, #56	; 0x38
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000334 	.word	0x20000334

08001790 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <MX_TIM3_Init+0x94>)
 80017b0:	4a1d      	ldr	r2, [pc, #116]	; (8001828 <MX_TIM3_Init+0x98>)
 80017b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <MX_TIM3_Init+0x94>)
 80017b6:	2247      	movs	r2, #71	; 0x47
 80017b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_TIM3_Init+0x94>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <MX_TIM3_Init+0x94>)
 80017c2:	f241 3287 	movw	r2, #4999	; 0x1387
 80017c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <MX_TIM3_Init+0x94>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <MX_TIM3_Init+0x94>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <MX_TIM3_Init+0x94>)
 80017d6:	f004 fe6d 	bl	80064b4 <HAL_TIM_Base_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80017e0:	f000 f98a 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017ea:	f107 0310 	add.w	r3, r7, #16
 80017ee:	4619      	mov	r1, r3
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <MX_TIM3_Init+0x94>)
 80017f2:	f005 fac9 	bl	8006d88 <HAL_TIM_ConfigClockSource>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80017fc:	f000 f97c 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	4619      	mov	r1, r3
 800180c:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_TIM3_Init+0x94>)
 800180e:	f006 f81b 	bl	8007848 <HAL_TIMEx_MasterConfigSynchronization>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001818:	f000 f96e 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000380 	.word	0x20000380
 8001828:	40000400 	.word	0x40000400

0800182c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <MX_USART2_UART_Init+0x5c>)
 8001832:	4a16      	ldr	r2, [pc, #88]	; (800188c <MX_USART2_UART_Init+0x60>)
 8001834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <MX_USART2_UART_Init+0x5c>)
 8001838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800183c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <MX_USART2_UART_Init+0x5c>)
 8001840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001844:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <MX_USART2_UART_Init+0x5c>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_USART2_UART_Init+0x5c>)
 800184e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001852:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_USART2_UART_Init+0x5c>)
 8001856:	220c      	movs	r2, #12
 8001858:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_USART2_UART_Init+0x5c>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_USART2_UART_Init+0x5c>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MX_USART2_UART_Init+0x5c>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_USART2_UART_Init+0x5c>)
 800186e:	2200      	movs	r2, #0
 8001870:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_USART2_UART_Init+0x5c>)
 8001874:	f006 f892 	bl	800799c <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800187e:	f000 f93b 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200003cc 	.word	0x200003cc
 800188c:	40004400 	.word	0x40004400

08001890 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_DMA_Init+0x38>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <MX_DMA_Init+0x38>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6153      	str	r3, [r2, #20]
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_DMA_Init+0x38>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	200b      	movs	r0, #11
 80018b4:	f001 fe01 	bl	80034ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018b8:	200b      	movs	r0, #11
 80018ba:	f001 fe1a 	bl	80034f2 <HAL_NVIC_EnableIRQ>

}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000

080018cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e2:	4b28      	ldr	r3, [pc, #160]	; (8001984 <MX_GPIO_Init+0xb8>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	4a27      	ldr	r2, [pc, #156]	; (8001984 <MX_GPIO_Init+0xb8>)
 80018e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018ec:	6153      	str	r3, [r2, #20]
 80018ee:	4b25      	ldr	r3, [pc, #148]	; (8001984 <MX_GPIO_Init+0xb8>)
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	4b22      	ldr	r3, [pc, #136]	; (8001984 <MX_GPIO_Init+0xb8>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	4a21      	ldr	r2, [pc, #132]	; (8001984 <MX_GPIO_Init+0xb8>)
 8001900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001904:	6153      	str	r3, [r2, #20]
 8001906:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <MX_GPIO_Init+0xb8>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001912:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <MX_GPIO_Init+0xb8>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	4a1b      	ldr	r2, [pc, #108]	; (8001984 <MX_GPIO_Init+0xb8>)
 8001918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191c:	6153      	str	r3, [r2, #20]
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <MX_GPIO_Init+0xb8>)
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor_a_rev_Pin|Motor_b_fwd_Pin|Motor_b_rev_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	f242 010c 	movw	r1, #8204	; 0x200c
 8001930:	4815      	ldr	r0, [pc, #84]	; (8001988 <MX_GPIO_Init+0xbc>)
 8001932:	f002 f9ad 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	4814      	ldr	r0, [pc, #80]	; (800198c <MX_GPIO_Init+0xc0>)
 800193c:	f002 f9a8 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor_a_rev_Pin Motor_b_fwd_Pin Motor_b_rev_Pin */
  GPIO_InitStruct.Pin = Motor_a_rev_Pin|Motor_b_fwd_Pin|Motor_b_rev_Pin;
 8001940:	f242 030c 	movw	r3, #8204	; 0x200c
 8001944:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001946:	2301      	movs	r3, #1
 8001948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	4619      	mov	r1, r3
 8001958:	480b      	ldr	r0, [pc, #44]	; (8001988 <MX_GPIO_Init+0xbc>)
 800195a:	f002 f80f 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_a_fwd_Pin */
  GPIO_InitStruct.Pin = Motor_a_fwd_Pin;
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	2301      	movs	r3, #1
 8001964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Motor_a_fwd_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	4619      	mov	r1, r3
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_GPIO_Init+0xc0>)
 8001976:	f002 f801 	bl	800397c <HAL_GPIO_Init>

}
 800197a:	bf00      	nop
 800197c:	3720      	adds	r7, #32
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	48000800 	.word	0x48000800
 800198c:	48000400 	.word	0x48000400

08001990 <str2num>:
	for (int i = 0; i < numdigits; i++) {
		string[numdigits - i - 1] = (num / unit) % 10 + 48;
		unit = unit * 10;
	}
}
int str2num(uint8_t *string, int numdigits) {
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
	int unit = 1;
 800199a:	2301      	movs	r3, #1
 800199c:	617b      	str	r3, [r7, #20]
	int num = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < numdigits; i++) {
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e016      	b.n	80019d6 <str2num+0x46>
		num = num + (string[numdigits - i - 1] - 48) * unit;
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	3b01      	subs	r3, #1
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	3b30      	subs	r3, #48	; 0x30
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	fb02 f303 	mul.w	r3, r2, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4413      	add	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
		unit = unit * 10;
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numdigits; i++) {
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3301      	adds	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	dbe4      	blt.n	80019a8 <str2num+0x18>
	}
	return num;
 80019de:	693b      	ldr	r3, [r7, #16]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	371c      	adds	r7, #28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	UART_RX_Flag = 1;
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_UART_RxCpltCallback+0x20>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, UART_RX_Byte, 1);
 80019fa:	2201      	movs	r2, #1
 80019fc:	4904      	ldr	r1, [pc, #16]	; (8001a10 <HAL_UART_RxCpltCallback+0x24>)
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <HAL_UART_RxCpltCallback+0x28>)
 8001a00:	f006 f8a4 	bl	8007b4c <HAL_UART_Receive_IT>
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200004bd 	.word	0x200004bd
 8001a10:	200004bc 	.word	0x200004bc
 8001a14:	200003cc 	.word	0x200003cc

08001a18 <UART_RX_Handler>:
void UART_RX_Handler(void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	UART_RX_Flag = 0;
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <UART_RX_Handler+0xbc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
	UART_RX_Message[UART_RX_Pos] = UART_RX_Byte[0];
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <UART_RX_Handler+0xc0>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <UART_RX_Handler+0xc4>)
 8001a2a:	7819      	ldrb	r1, [r3, #0]
 8001a2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <UART_RX_Handler+0xc8>)
 8001a2e:	5499      	strb	r1, [r3, r2]
	UART_RX_Pos += 1;
 8001a30:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <UART_RX_Handler+0xc0>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <UART_RX_Handler+0xc0>)
 8001a3a:	701a      	strb	r2, [r3, #0]
	if (UART_RX_Byte[0] == (uint8_t) *"\n") {
 8001a3c:	4b27      	ldr	r3, [pc, #156]	; (8001adc <UART_RX_Handler+0xc4>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	220a      	movs	r2, #10
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d144      	bne.n	8001ad0 <UART_RX_Handler+0xb8>
		if (UART_RX_Message[0] == (uint8_t) *"+") {
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <UART_RX_Handler+0xc8>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	222b      	movs	r2, #43	; 0x2b
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d107      	bne.n	8001a60 <UART_RX_Handler+0x48>
			UART_RX_Motor_a = str2num(&UART_RX_Message[1], 3);
 8001a50:	2103      	movs	r1, #3
 8001a52:	4824      	ldr	r0, [pc, #144]	; (8001ae4 <UART_RX_Handler+0xcc>)
 8001a54:	f7ff ff9c 	bl	8001990 <str2num>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4a23      	ldr	r2, [pc, #140]	; (8001ae8 <UART_RX_Handler+0xd0>)
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e00c      	b.n	8001a7a <UART_RX_Handler+0x62>
		} else if (UART_RX_Message[0] == (uint8_t) *"-") {
 8001a60:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <UART_RX_Handler+0xc8>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	222d      	movs	r2, #45	; 0x2d
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d107      	bne.n	8001a7a <UART_RX_Handler+0x62>
			UART_RX_Motor_a = -str2num(&UART_RX_Message[1], 3);
 8001a6a:	2103      	movs	r1, #3
 8001a6c:	481d      	ldr	r0, [pc, #116]	; (8001ae4 <UART_RX_Handler+0xcc>)
 8001a6e:	f7ff ff8f 	bl	8001990 <str2num>
 8001a72:	4603      	mov	r3, r0
 8001a74:	425b      	negs	r3, r3
 8001a76:	4a1c      	ldr	r2, [pc, #112]	; (8001ae8 <UART_RX_Handler+0xd0>)
 8001a78:	6013      	str	r3, [r2, #0]
		}
		if (UART_RX_Message[5] == (uint8_t) *"+") {
 8001a7a:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <UART_RX_Handler+0xc8>)
 8001a7c:	795b      	ldrb	r3, [r3, #5]
 8001a7e:	222b      	movs	r2, #43	; 0x2b
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d107      	bne.n	8001a94 <UART_RX_Handler+0x7c>
			UART_RX_Motor_b = str2num(&UART_RX_Message[6], 3);
 8001a84:	2103      	movs	r1, #3
 8001a86:	4819      	ldr	r0, [pc, #100]	; (8001aec <UART_RX_Handler+0xd4>)
 8001a88:	f7ff ff82 	bl	8001990 <str2num>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4a18      	ldr	r2, [pc, #96]	; (8001af0 <UART_RX_Handler+0xd8>)
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e00c      	b.n	8001aae <UART_RX_Handler+0x96>
		} else if (UART_RX_Message[5] == (uint8_t) *"-") {
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <UART_RX_Handler+0xc8>)
 8001a96:	795b      	ldrb	r3, [r3, #5]
 8001a98:	222d      	movs	r2, #45	; 0x2d
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d107      	bne.n	8001aae <UART_RX_Handler+0x96>
			UART_RX_Motor_b = -str2num(&UART_RX_Message[6], 3);
 8001a9e:	2103      	movs	r1, #3
 8001aa0:	4812      	ldr	r0, [pc, #72]	; (8001aec <UART_RX_Handler+0xd4>)
 8001aa2:	f7ff ff75 	bl	8001990 <str2num>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	425b      	negs	r3, r3
 8001aaa:	4a11      	ldr	r2, [pc, #68]	; (8001af0 <UART_RX_Handler+0xd8>)
 8001aac:	6013      	str	r3, [r2, #0]
		}
		if (UART_RX_Message[10] == (uint8_t) *"P") {
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <UART_RX_Handler+0xc8>)
 8001ab0:	7a9b      	ldrb	r3, [r3, #10]
 8001ab2:	2250      	movs	r2, #80	; 0x50
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d108      	bne.n	8001aca <UART_RX_Handler+0xb2>
			TIM2->PSC = str2num(&UART_RX_Message[11], 3) - 1;
 8001ab8:	2103      	movs	r1, #3
 8001aba:	480e      	ldr	r0, [pc, #56]	; (8001af4 <UART_RX_Handler+0xdc>)
 8001abc:	f7ff ff68 	bl	8001990 <str2num>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	1e5a      	subs	r2, r3, #1
 8001ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ac8:	629a      	str	r2, [r3, #40]	; 0x28
		}
		UART_RX_Pos = 0;
 8001aca:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <UART_RX_Handler+0xc0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
	}
}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200004bd 	.word	0x200004bd
 8001ad8:	20000454 	.word	0x20000454
 8001adc:	200004bc 	.word	0x200004bc
 8001ae0:	20000458 	.word	0x20000458
 8001ae4:	20000459 	.word	0x20000459
 8001ae8:	200004c0 	.word	0x200004c0
 8001aec:	2000045e 	.word	0x2000045e
 8001af0:	200004c4 	.word	0x200004c4
 8001af4:	20000463 	.word	0x20000463

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
}
 8001afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b00:	e7fe      	b.n	8001b00 <Error_Handler+0x8>
	...

08001b04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_MspInit+0x44>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <HAL_MspInit+0x44>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6193      	str	r3, [r2, #24]
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <HAL_MspInit+0x44>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_MspInit+0x44>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_MspInit+0x44>)
 8001b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	61d3      	str	r3, [r2, #28]
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_MspInit+0x44>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000

08001b4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b6c:	d14c      	bne.n	8001c08 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b6e:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <HAL_ADC_MspInit+0xc4>)
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	4a27      	ldr	r2, [pc, #156]	; (8001c10 <HAL_ADC_MspInit+0xc4>)
 8001b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b78:	6153      	str	r3, [r2, #20]
 8001b7a:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <HAL_ADC_MspInit+0xc4>)
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <HAL_ADC_MspInit+0xc4>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	4a21      	ldr	r2, [pc, #132]	; (8001c10 <HAL_ADC_MspInit+0xc4>)
 8001b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b90:	6153      	str	r3, [r2, #20]
 8001b92:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <HAL_ADC_MspInit+0xc4>)
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb4:	f001 fee2 	bl	800397c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001bb8:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001bba:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <HAL_ADC_MspInit+0xcc>)
 8001bbc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001bcc:	2280      	movs	r2, #128	; 0x80
 8001bce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bd0:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001bda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bde:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001be2:	2220      	movs	r2, #32
 8001be4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bec:	4809      	ldr	r0, [pc, #36]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001bee:	f001 fc9a 	bl	8003526 <HAL_DMA_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001bf8:	f7ff ff7e 	bl	8001af8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001c00:	639a      	str	r2, [r3, #56]	; 0x38
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c08:	bf00      	nop
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000
 8001c14:	20000250 	.word	0x20000250
 8001c18:	40020008 	.word	0x40020008

08001c1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a1f      	ldr	r2, [pc, #124]	; (8001cb8 <HAL_I2C_MspInit+0x9c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d138      	bne.n	8001cb0 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <HAL_I2C_MspInit+0xa0>)
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	4a1e      	ldr	r2, [pc, #120]	; (8001cbc <HAL_I2C_MspInit+0xa0>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c48:	6153      	str	r3, [r2, #20]
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <HAL_I2C_MspInit+0xa0>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001c56:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c5c:	2312      	movs	r3, #18
 8001c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c68:	2304      	movs	r3, #4
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4619      	mov	r1, r3
 8001c72:	4813      	ldr	r0, [pc, #76]	; (8001cc0 <HAL_I2C_MspInit+0xa4>)
 8001c74:	f001 fe82 	bl	800397c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 8001c78:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001c7c:	f002 ff52 	bl	8004b24 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB9_FMP);
 8001c80:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001c84:	f002 ff4e 	bl	8004b24 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <HAL_I2C_MspInit+0xa0>)
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <HAL_I2C_MspInit+0xa0>)
 8001c8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c92:	61d3      	str	r3, [r2, #28]
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_I2C_MspInit+0xa0>)
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	201f      	movs	r0, #31
 8001ca6:	f001 fc08 	bl	80034ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001caa:	201f      	movs	r0, #31
 8001cac:	f001 fc21 	bl	80034f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cb0:	bf00      	nop
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40005400 	.word	0x40005400
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	48000400 	.word	0x48000400

08001cc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a23      	ldr	r2, [pc, #140]	; (8001d60 <HAL_TIM_Base_MspInit+0x9c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d114      	bne.n	8001d00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cd6:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <HAL_TIM_Base_MspInit+0xa0>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	4a22      	ldr	r2, [pc, #136]	; (8001d64 <HAL_TIM_Base_MspInit+0xa0>)
 8001cdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ce0:	6193      	str	r3, [r2, #24]
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <HAL_TIM_Base_MspInit+0xa0>)
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	201a      	movs	r0, #26
 8001cf4:	f001 fbe1 	bl	80034ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001cf8:	201a      	movs	r0, #26
 8001cfa:	f001 fbfa 	bl	80034f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cfe:	e02a      	b.n	8001d56 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d08:	d10c      	bne.n	8001d24 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0a:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <HAL_TIM_Base_MspInit+0xa0>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a15      	ldr	r2, [pc, #84]	; (8001d64 <HAL_TIM_Base_MspInit+0xa0>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	61d3      	str	r3, [r2, #28]
 8001d16:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_TIM_Base_MspInit+0xa0>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
}
 8001d22:	e018      	b.n	8001d56 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <HAL_TIM_Base_MspInit+0xa4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d113      	bne.n	8001d56 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_TIM_Base_MspInit+0xa0>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	4a0c      	ldr	r2, [pc, #48]	; (8001d64 <HAL_TIM_Base_MspInit+0xa0>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	61d3      	str	r3, [r2, #28]
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_TIM_Base_MspInit+0xa0>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2100      	movs	r1, #0
 8001d4a:	201d      	movs	r0, #29
 8001d4c:	f001 fbb5 	bl	80034ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d50:	201d      	movs	r0, #29
 8001d52:	f001 fbce 	bl	80034f2 <HAL_NVIC_EnableIRQ>
}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40012c00 	.word	0x40012c00
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40000400 	.word	0x40000400

08001d6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8c:	d139      	bne.n	8001e02 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <HAL_TIM_MspPostInit+0xa0>)
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <HAL_TIM_MspPostInit+0xa0>)
 8001d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d98:	6153      	str	r3, [r2, #20]
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_TIM_MspPostInit+0xa0>)
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_TIM_MspPostInit+0xa0>)
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	4a18      	ldr	r2, [pc, #96]	; (8001e0c <HAL_TIM_MspPostInit+0xa0>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db0:	6153      	str	r3, [r2, #20]
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_TIM_MspPostInit+0xa0>)
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dde:	f001 fdcd 	bl	800397c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001de2:	2308      	movs	r3, #8
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001df2:	2301      	movs	r3, #1
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4804      	ldr	r0, [pc, #16]	; (8001e10 <HAL_TIM_MspPostInit+0xa4>)
 8001dfe:	f001 fdbd 	bl	800397c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e02:	bf00      	nop
 8001e04:	3728      	adds	r7, #40	; 0x28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	48000400 	.word	0x48000400

08001e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	; 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <HAL_UART_MspInit+0x8c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d130      	bne.n	8001e98 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e36:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a1a      	ldr	r2, [pc, #104]	; (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e40:	61d3      	str	r3, [r2, #28]
 8001e42:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e58:	6153      	str	r3, [r2, #20]
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e66:	230c      	movs	r3, #12
 8001e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e76:	2307      	movs	r3, #7
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e84:	f001 fd7a 	bl	800397c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	2026      	movs	r0, #38	; 0x26
 8001e8e:	f001 fb14 	bl	80034ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e92:	2026      	movs	r0, #38	; 0x26
 8001e94:	f001 fb2d 	bl	80034f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e98:	bf00      	nop
 8001e9a:	3728      	adds	r7, #40	; 0x28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40004400 	.word	0x40004400
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <NMI_Handler+0x4>

08001eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <HardFault_Handler+0x4>

08001eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <MemManage_Handler+0x4>

08001eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <BusFault_Handler+0x4>

08001ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <UsageFault_Handler+0x4>

08001ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef4:	f000 f980 	bl	80021f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}

08001efc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f00:	4802      	ldr	r0, [pc, #8]	; (8001f0c <DMA1_Channel1_IRQHandler+0x10>)
 8001f02:	f001 fc2d 	bl	8003760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000250 	.word	0x20000250

08001f10 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f14:	4802      	ldr	r0, [pc, #8]	; (8001f20 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001f16:	f004 fd03 	bl	8006920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	200002e8 	.word	0x200002e8

08001f24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	TIM3_flag = 1;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <TIM3_IRQHandler+0x14>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f2e:	4803      	ldr	r0, [pc, #12]	; (8001f3c <TIM3_IRQHandler+0x18>)
 8001f30:	f004 fcf6 	bl	8006920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200004c8 	.word	0x200004c8
 8001f3c:	20000380 	.word	0x20000380

08001f40 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <I2C1_EV_IRQHandler+0x10>)
 8001f46:	f002 fa82 	bl	800444e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000294 	.word	0x20000294

08001f54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <USART2_IRQHandler+0x10>)
 8001f5a:	f005 fe3b 	bl	8007bd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200003cc 	.word	0x200003cc

08001f68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return 1;
 8001f6c:	2301      	movs	r3, #1
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_kill>:

int _kill(int pid, int sig)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f82:	f006 ffcf 	bl	8008f24 <__errno>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2216      	movs	r2, #22
 8001f8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_exit>:

void _exit (int status)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ffe7 	bl	8001f78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001faa:	e7fe      	b.n	8001faa <_exit+0x12>

08001fac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	e00a      	b.n	8001fd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fbe:	f3af 8000 	nop.w
 8001fc2:	4601      	mov	r1, r0
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	60ba      	str	r2, [r7, #8]
 8001fca:	b2ca      	uxtb	r2, r1
 8001fcc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	dbf0      	blt.n	8001fbe <_read+0x12>
  }

  return len;
 8001fdc:	687b      	ldr	r3, [r7, #4]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e009      	b.n	800200c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	60ba      	str	r2, [r7, #8]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	3301      	adds	r3, #1
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	429a      	cmp	r2, r3
 8002012:	dbf1      	blt.n	8001ff8 <_write+0x12>
  }
  return len;
 8002014:	687b      	ldr	r3, [r7, #4]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <_close>:

int _close(int file)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002046:	605a      	str	r2, [r3, #4]
  return 0;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <_isatty>:

int _isatty(int file)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800205e:	2301      	movs	r3, #1
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002090:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <_sbrk+0x5c>)
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <_sbrk+0x60>)
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <_sbrk+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <_sbrk+0x64>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <_sbrk+0x68>)
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <_sbrk+0x64>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d207      	bcs.n	80020c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b8:	f006 ff34 	bl	8008f24 <__errno>
 80020bc:	4603      	mov	r3, r0
 80020be:	220c      	movs	r2, #12
 80020c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295
 80020c6:	e009      	b.n	80020dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <_sbrk+0x64>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	4a05      	ldr	r2, [pc, #20]	; (80020ec <_sbrk+0x64>)
 80020d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020da:	68fb      	ldr	r3, [r7, #12]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20010000 	.word	0x20010000
 80020e8:	00000400 	.word	0x00000400
 80020ec:	200004e0 	.word	0x200004e0
 80020f0:	200004f8 	.word	0x200004f8

080020f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <SystemInit+0x20>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fe:	4a05      	ldr	r2, [pc, #20]	; (8002114 <SystemInit+0x20>)
 8002100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002150 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800211c:	f7ff ffea 	bl	80020f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002120:	480c      	ldr	r0, [pc, #48]	; (8002154 <LoopForever+0x6>)
  ldr r1, =_edata
 8002122:	490d      	ldr	r1, [pc, #52]	; (8002158 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002124:	4a0d      	ldr	r2, [pc, #52]	; (800215c <LoopForever+0xe>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002128:	e002      	b.n	8002130 <LoopCopyDataInit>

0800212a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800212c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212e:	3304      	adds	r3, #4

08002130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002134:	d3f9      	bcc.n	800212a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002138:	4c0a      	ldr	r4, [pc, #40]	; (8002164 <LoopForever+0x16>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800213c:	e001      	b.n	8002142 <LoopFillZerobss>

0800213e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002140:	3204      	adds	r2, #4

08002142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002144:	d3fb      	bcc.n	800213e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002146:	f006 fef3 	bl	8008f30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800214a:	f7fe fe89 	bl	8000e60 <main>

0800214e <LoopForever>:

LoopForever:
    b LoopForever
 800214e:	e7fe      	b.n	800214e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002150:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002158:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800215c:	0800c18c 	.word	0x0800c18c
  ldr r2, =_sbss
 8002160:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002164:	200004f8 	.word	0x200004f8

08002168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002168:	e7fe      	b.n	8002168 <ADC1_2_IRQHandler>
	...

0800216c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_Init+0x28>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_Init+0x28>)
 8002176:	f043 0310 	orr.w	r3, r3, #16
 800217a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217c:	2003      	movs	r0, #3
 800217e:	f001 f991 	bl	80034a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002182:	200f      	movs	r0, #15
 8002184:	f000 f808 	bl	8002198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002188:	f7ff fcbc 	bl	8001b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40022000 	.word	0x40022000

08002198 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x54>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_InitTick+0x58>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f001 f9a9 	bl	800350e <HAL_SYSTICK_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00e      	b.n	80021e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b0f      	cmp	r3, #15
 80021ca:	d80a      	bhi.n	80021e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021cc:	2200      	movs	r2, #0
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	f001 f971 	bl	80034ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d8:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <HAL_InitTick+0x5c>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000000 	.word	0x20000000
 80021f0:	20000008 	.word	0x20000008
 80021f4:	20000004 	.word	0x20000004

080021f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x20>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_IncTick+0x24>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4413      	add	r3, r2
 8002208:	4a04      	ldr	r2, [pc, #16]	; (800221c <HAL_IncTick+0x24>)
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000008 	.word	0x20000008
 800221c:	200004e4 	.word	0x200004e4

08002220 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return uwTick;  
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <HAL_GetTick+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	200004e4 	.word	0x200004e4

08002238 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002240:	f7ff ffee 	bl	8002220 <HAL_GetTick>
 8002244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002250:	d005      	beq.n	800225e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_Delay+0x44>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4413      	add	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800225e:	bf00      	nop
 8002260:	f7ff ffde 	bl	8002220 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	429a      	cmp	r2, r3
 800226e:	d8f7      	bhi.n	8002260 <HAL_Delay+0x28>
  {
  }
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000008 	.word	0x20000008

08002280 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b09a      	sub	sp, #104	; 0x68
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e1e3      	b.n	80026a4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d176      	bne.n	80023dc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d152      	bne.n	800239c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff fc1b 	bl	8001b4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d13b      	bne.n	800239c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 ff87 	bl	8003238 <ADC_Disable>
 800232a:	4603      	mov	r3, r0
 800232c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b00      	cmp	r3, #0
 800233a:	d12f      	bne.n	800239c <HAL_ADC_Init+0xe0>
 800233c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002340:	2b00      	cmp	r3, #0
 8002342:	d12b      	bne.n	800239c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800234c:	f023 0302 	bic.w	r3, r3, #2
 8002350:	f043 0202 	orr.w	r2, r3, #2
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002366:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002376:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002378:	4b92      	ldr	r3, [pc, #584]	; (80025c4 <HAL_ADC_Init+0x308>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a92      	ldr	r2, [pc, #584]	; (80025c8 <HAL_ADC_Init+0x30c>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	0c9a      	lsrs	r2, r3, #18
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800238e:	e002      	b.n	8002396 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	3b01      	subs	r3, #1
 8002394:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f9      	bne.n	8002390 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80023b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023b8:	d110      	bne.n	80023dc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f023 0312 	bic.w	r3, r3, #18
 80023c2:	f043 0210 	orr.w	r2, r3, #16
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f043 0201 	orr.w	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f040 8150 	bne.w	800268a <HAL_ADC_Init+0x3ce>
 80023ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f040 814b 	bne.w	800268a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f040 8143 	bne.w	800268a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800240c:	f043 0202 	orr.w	r2, r3, #2
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800241c:	d004      	beq.n	8002428 <HAL_ADC_Init+0x16c>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a6a      	ldr	r2, [pc, #424]	; (80025cc <HAL_ADC_Init+0x310>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d101      	bne.n	800242c <HAL_ADC_Init+0x170>
 8002428:	4b69      	ldr	r3, [pc, #420]	; (80025d0 <HAL_ADC_Init+0x314>)
 800242a:	e000      	b.n	800242e <HAL_ADC_Init+0x172>
 800242c:	4b69      	ldr	r3, [pc, #420]	; (80025d4 <HAL_ADC_Init+0x318>)
 800242e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002438:	d102      	bne.n	8002440 <HAL_ADC_Init+0x184>
 800243a:	4b64      	ldr	r3, [pc, #400]	; (80025cc <HAL_ADC_Init+0x310>)
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	e01a      	b.n	8002476 <HAL_ADC_Init+0x1ba>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a61      	ldr	r2, [pc, #388]	; (80025cc <HAL_ADC_Init+0x310>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d103      	bne.n	8002452 <HAL_ADC_Init+0x196>
 800244a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	e011      	b.n	8002476 <HAL_ADC_Init+0x1ba>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a60      	ldr	r2, [pc, #384]	; (80025d8 <HAL_ADC_Init+0x31c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d102      	bne.n	8002462 <HAL_ADC_Init+0x1a6>
 800245c:	4b5f      	ldr	r3, [pc, #380]	; (80025dc <HAL_ADC_Init+0x320>)
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	e009      	b.n	8002476 <HAL_ADC_Init+0x1ba>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a5d      	ldr	r2, [pc, #372]	; (80025dc <HAL_ADC_Init+0x320>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d102      	bne.n	8002472 <HAL_ADC_Init+0x1b6>
 800246c:	4b5a      	ldr	r3, [pc, #360]	; (80025d8 <HAL_ADC_Init+0x31c>)
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	e001      	b.n	8002476 <HAL_ADC_Init+0x1ba>
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d108      	bne.n	8002496 <HAL_ADC_Init+0x1da>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_ADC_Init+0x1da>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <HAL_ADC_Init+0x1dc>
 8002496:	2300      	movs	r3, #0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d11c      	bne.n	80024d6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800249c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d010      	beq.n	80024c4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d107      	bne.n	80024be <HAL_ADC_Init+0x202>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_ADC_Init+0x202>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_ADC_Init+0x204>
 80024be:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d108      	bne.n	80024d6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80024c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	431a      	orrs	r2, r3
 80024d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024d4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7e5b      	ldrb	r3, [r3, #25]
 80024da:	035b      	lsls	r3, r3, #13
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024e0:	2a01      	cmp	r2, #1
 80024e2:	d002      	beq.n	80024ea <HAL_ADC_Init+0x22e>
 80024e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024e8:	e000      	b.n	80024ec <HAL_ADC_Init+0x230>
 80024ea:	2200      	movs	r2, #0
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024fc:	4313      	orrs	r3, r2
 80024fe:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d11b      	bne.n	8002542 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	7e5b      	ldrb	r3, [r3, #25]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	3b01      	subs	r3, #1
 8002518:	045a      	lsls	r2, r3, #17
 800251a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800251c:	4313      	orrs	r3, r2
 800251e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002522:	663b      	str	r3, [r7, #96]	; 0x60
 8002524:	e00d      	b.n	8002542 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800252e:	f043 0220 	orr.w	r2, r3, #32
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f043 0201 	orr.w	r2, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	2b01      	cmp	r3, #1
 8002548:	d054      	beq.n	80025f4 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a22      	ldr	r2, [pc, #136]	; (80025d8 <HAL_ADC_Init+0x31c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d004      	beq.n	800255e <HAL_ADC_Init+0x2a2>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a20      	ldr	r2, [pc, #128]	; (80025dc <HAL_ADC_Init+0x320>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d140      	bne.n	80025e0 <HAL_ADC_Init+0x324>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002562:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002566:	d02a      	beq.n	80025be <HAL_ADC_Init+0x302>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002570:	d022      	beq.n	80025b8 <HAL_ADC_Init+0x2fc>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800257a:	d01a      	beq.n	80025b2 <HAL_ADC_Init+0x2f6>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002584:	d012      	beq.n	80025ac <HAL_ADC_Init+0x2f0>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800258e:	d00a      	beq.n	80025a6 <HAL_ADC_Init+0x2ea>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002598:	d002      	beq.n	80025a0 <HAL_ADC_Init+0x2e4>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	e023      	b.n	80025e8 <HAL_ADC_Init+0x32c>
 80025a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80025a4:	e020      	b.n	80025e8 <HAL_ADC_Init+0x32c>
 80025a6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80025aa:	e01d      	b.n	80025e8 <HAL_ADC_Init+0x32c>
 80025ac:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80025b0:	e01a      	b.n	80025e8 <HAL_ADC_Init+0x32c>
 80025b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025b6:	e017      	b.n	80025e8 <HAL_ADC_Init+0x32c>
 80025b8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80025bc:	e014      	b.n	80025e8 <HAL_ADC_Init+0x32c>
 80025be:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80025c2:	e011      	b.n	80025e8 <HAL_ADC_Init+0x32c>
 80025c4:	20000000 	.word	0x20000000
 80025c8:	431bde83 	.word	0x431bde83
 80025cc:	50000100 	.word	0x50000100
 80025d0:	50000300 	.word	0x50000300
 80025d4:	50000700 	.word	0x50000700
 80025d8:	50000400 	.word	0x50000400
 80025dc:	50000500 	.word	0x50000500
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80025ec:	4313      	orrs	r3, r2
 80025ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025f0:	4313      	orrs	r3, r2
 80025f2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d114      	bne.n	800262c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002610:	f023 0302 	bic.w	r3, r3, #2
 8002614:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	7e1b      	ldrb	r3, [r3, #24]
 800261a:	039a      	lsls	r2, r3, #14
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4313      	orrs	r3, r2
 8002626:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002628:	4313      	orrs	r3, r2
 800262a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <HAL_ADC_Init+0x3f0>)
 8002634:	4013      	ands	r3, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800263c:	430b      	orrs	r3, r1
 800263e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d10c      	bne.n	8002662 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	f023 010f 	bic.w	r1, r3, #15
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	1e5a      	subs	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	631a      	str	r2, [r3, #48]	; 0x30
 8002660:	e007      	b.n	8002672 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 020f 	bic.w	r2, r2, #15
 8002670:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f023 0303 	bic.w	r3, r3, #3
 8002680:	f043 0201 	orr.w	r2, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
 8002688:	e00a      	b.n	80026a0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f023 0312 	bic.w	r3, r3, #18
 8002692:	f043 0210 	orr.w	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800269a:	2301      	movs	r3, #1
 800269c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80026a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3768      	adds	r7, #104	; 0x68
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	fff0c007 	.word	0xfff0c007

080026b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f040 80f7 	bne.w	80028be <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_ADC_Start_DMA+0x2e>
 80026da:	2302      	movs	r3, #2
 80026dc:	e0f2      	b.n	80028c4 <HAL_ADC_Start_DMA+0x214>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026ee:	d004      	beq.n	80026fa <HAL_ADC_Start_DMA+0x4a>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a75      	ldr	r2, [pc, #468]	; (80028cc <HAL_ADC_Start_DMA+0x21c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d109      	bne.n	800270e <HAL_ADC_Start_DMA+0x5e>
 80026fa:	4b75      	ldr	r3, [pc, #468]	; (80028d0 <HAL_ADC_Start_DMA+0x220>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf0c      	ite	eq
 8002706:	2301      	moveq	r3, #1
 8002708:	2300      	movne	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	e008      	b.n	8002720 <HAL_ADC_Start_DMA+0x70>
 800270e:	4b71      	ldr	r3, [pc, #452]	; (80028d4 <HAL_ADC_Start_DMA+0x224>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	2b00      	cmp	r3, #0
 8002718:	bf0c      	ite	eq
 800271a:	2301      	moveq	r3, #1
 800271c:	2300      	movne	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80c5 	beq.w	80028b0 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fd22 	bl	8003170 <ADC_Enable>
 800272c:	4603      	mov	r3, r0
 800272e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f040 80b7 	bne.w	80028a6 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002754:	d004      	beq.n	8002760 <HAL_ADC_Start_DMA+0xb0>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a5c      	ldr	r2, [pc, #368]	; (80028cc <HAL_ADC_Start_DMA+0x21c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d106      	bne.n	800276e <HAL_ADC_Start_DMA+0xbe>
 8002760:	4b5b      	ldr	r3, [pc, #364]	; (80028d0 <HAL_ADC_Start_DMA+0x220>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	2b00      	cmp	r3, #0
 800276a:	d010      	beq.n	800278e <HAL_ADC_Start_DMA+0xde>
 800276c:	e005      	b.n	800277a <HAL_ADC_Start_DMA+0xca>
 800276e:	4b59      	ldr	r3, [pc, #356]	; (80028d4 <HAL_ADC_Start_DMA+0x224>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <HAL_ADC_Start_DMA+0xde>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002782:	d004      	beq.n	800278e <HAL_ADC_Start_DMA+0xde>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a53      	ldr	r2, [pc, #332]	; (80028d8 <HAL_ADC_Start_DMA+0x228>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d115      	bne.n	80027ba <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d036      	beq.n	8002816 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80027b8:	e02d      	b.n	8002816 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ce:	d004      	beq.n	80027da <HAL_ADC_Start_DMA+0x12a>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a3d      	ldr	r2, [pc, #244]	; (80028cc <HAL_ADC_Start_DMA+0x21c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d10a      	bne.n	80027f0 <HAL_ADC_Start_DMA+0x140>
 80027da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf14      	ite	ne
 80027e8:	2301      	movne	r3, #1
 80027ea:	2300      	moveq	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	e008      	b.n	8002802 <HAL_ADC_Start_DMA+0x152>
 80027f0:	4b39      	ldr	r3, [pc, #228]	; (80028d8 <HAL_ADC_Start_DMA+0x228>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	bf14      	ite	ne
 80027fc:	2301      	movne	r3, #1
 80027fe:	2300      	moveq	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d007      	beq.n	8002816 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800280e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002822:	d106      	bne.n	8002832 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002828:	f023 0206 	bic.w	r2, r3, #6
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	645a      	str	r2, [r3, #68]	; 0x44
 8002830:	e002      	b.n	8002838 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	4a25      	ldr	r2, [pc, #148]	; (80028dc <HAL_ADC_Start_DMA+0x22c>)
 8002846:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	4a24      	ldr	r2, [pc, #144]	; (80028e0 <HAL_ADC_Start_DMA+0x230>)
 800284e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	4a23      	ldr	r2, [pc, #140]	; (80028e4 <HAL_ADC_Start_DMA+0x234>)
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	221c      	movs	r2, #28
 800285e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0210 	orr.w	r2, r2, #16
 800286e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3340      	adds	r3, #64	; 0x40
 800288a:	4619      	mov	r1, r3
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f000 fe90 	bl	80035b4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0204 	orr.w	r2, r2, #4
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	e00d      	b.n	80028c2 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028ae:	e008      	b.n	80028c2 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028bc:	e001      	b.n	80028c2 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028be:	2302      	movs	r3, #2
 80028c0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	50000100 	.word	0x50000100
 80028d0:	50000300 	.word	0x50000300
 80028d4:	50000700 	.word	0x50000700
 80028d8:	50000400 	.word	0x50000400
 80028dc:	080030a5 	.word	0x080030a5
 80028e0:	0800311f 	.word	0x0800311f
 80028e4:	0800313b 	.word	0x0800313b

080028e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b09b      	sub	sp, #108	; 0x6c
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_ADC_ConfigChannel+0x22>
 8002906:	2302      	movs	r3, #2
 8002908:	e2ca      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x5b8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	f040 82ae 	bne.w	8002e7e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b04      	cmp	r3, #4
 8002928:	d81c      	bhi.n	8002964 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	461a      	mov	r2, r3
 800293e:	231f      	movs	r3, #31
 8002940:	4093      	lsls	r3, r2
 8002942:	43db      	mvns	r3, r3
 8002944:	4019      	ands	r1, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	fa00 f203 	lsl.w	r2, r0, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
 8002962:	e063      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b09      	cmp	r3, #9
 800296a:	d81e      	bhi.n	80029aa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	3b1e      	subs	r3, #30
 8002980:	221f      	movs	r2, #31
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	4019      	ands	r1, r3
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	4413      	add	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	3b1e      	subs	r3, #30
 800299c:	fa00 f203 	lsl.w	r2, r0, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	635a      	str	r2, [r3, #52]	; 0x34
 80029a8:	e040      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b0e      	cmp	r3, #14
 80029b0:	d81e      	bhi.n	80029f0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	3b3c      	subs	r3, #60	; 0x3c
 80029c6:	221f      	movs	r2, #31
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	4019      	ands	r1, r3
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	3b3c      	subs	r3, #60	; 0x3c
 80029e2:	fa00 f203 	lsl.w	r2, r0, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
 80029ee:	e01d      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	3b5a      	subs	r3, #90	; 0x5a
 8002a04:	221f      	movs	r2, #31
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	4019      	ands	r1, r3
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	3b5a      	subs	r3, #90	; 0x5a
 8002a20:	fa00 f203 	lsl.w	r2, r0, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 80e5 	bne.w	8002c06 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b09      	cmp	r3, #9
 8002a42:	d91c      	bls.n	8002a7e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6999      	ldr	r1, [r3, #24]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4413      	add	r3, r2
 8002a54:	3b1e      	subs	r3, #30
 8002a56:	2207      	movs	r2, #7
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	4019      	ands	r1, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	6898      	ldr	r0, [r3, #8]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3b1e      	subs	r3, #30
 8002a70:	fa00 f203 	lsl.w	r2, r0, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	619a      	str	r2, [r3, #24]
 8002a7c:	e019      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6959      	ldr	r1, [r3, #20]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4413      	add	r3, r2
 8002a8e:	2207      	movs	r2, #7
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	4019      	ands	r1, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	6898      	ldr	r0, [r3, #8]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	695a      	ldr	r2, [r3, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	08db      	lsrs	r3, r3, #3
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d84f      	bhi.n	8002b74 <HAL_ADC_ConfigChannel+0x28c>
 8002ad4:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <HAL_ADC_ConfigChannel+0x1f4>)
 8002ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ada:	bf00      	nop
 8002adc:	08002aed 	.word	0x08002aed
 8002ae0:	08002b0f 	.word	0x08002b0f
 8002ae4:	08002b31 	.word	0x08002b31
 8002ae8:	08002b53 	.word	0x08002b53
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002af2:	4b9a      	ldr	r3, [pc, #616]	; (8002d5c <HAL_ADC_ConfigChannel+0x474>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	0691      	lsls	r1, r2, #26
 8002afc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002afe:	430a      	orrs	r2, r1
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b0a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b0c:	e07e      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b14:	4b91      	ldr	r3, [pc, #580]	; (8002d5c <HAL_ADC_ConfigChannel+0x474>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	0691      	lsls	r1, r2, #26
 8002b1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b20:	430a      	orrs	r2, r1
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b2c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b2e:	e06d      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b36:	4b89      	ldr	r3, [pc, #548]	; (8002d5c <HAL_ADC_ConfigChannel+0x474>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	0691      	lsls	r1, r2, #26
 8002b40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b42:	430a      	orrs	r2, r1
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b4e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b50:	e05c      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b58:	4b80      	ldr	r3, [pc, #512]	; (8002d5c <HAL_ADC_ConfigChannel+0x474>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	0691      	lsls	r1, r2, #26
 8002b62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b64:	430a      	orrs	r2, r1
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b70:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b72:	e04b      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	069b      	lsls	r3, r3, #26
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d107      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b96:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	069b      	lsls	r3, r3, #26
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d107      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bba:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	069b      	lsls	r3, r3, #26
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d107      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bde:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002be6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	069b      	lsls	r3, r3, #26
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d10a      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c02:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002c04:	e001      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002c06:	bf00      	nop
 8002c08:	e000      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x324>
      break;
 8002c0a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d108      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x344>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x344>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x346>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 8130 	bne.w	8002e94 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d00f      	beq.n	8002c5c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43da      	mvns	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	400a      	ands	r2, r1
 8002c56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002c5a:	e049      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b09      	cmp	r3, #9
 8002c7c:	d91c      	bls.n	8002cb8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6999      	ldr	r1, [r3, #24]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3b1b      	subs	r3, #27
 8002c90:	2207      	movs	r2, #7
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	4019      	ands	r1, r3
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6898      	ldr	r0, [r3, #8]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3b1b      	subs	r3, #27
 8002caa:	fa00 f203 	lsl.w	r2, r0, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	619a      	str	r2, [r3, #24]
 8002cb6:	e01b      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6959      	ldr	r1, [r3, #20]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	2207      	movs	r2, #7
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	4019      	ands	r1, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	6898      	ldr	r0, [r3, #8]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf8:	d004      	beq.n	8002d04 <HAL_ADC_ConfigChannel+0x41c>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a18      	ldr	r2, [pc, #96]	; (8002d60 <HAL_ADC_ConfigChannel+0x478>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d101      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x420>
 8002d04:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <HAL_ADC_ConfigChannel+0x47c>)
 8002d06:	e000      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x422>
 8002d08:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <HAL_ADC_ConfigChannel+0x480>)
 8002d0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d105      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d015      	beq.n	8002d4c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002d24:	2b11      	cmp	r3, #17
 8002d26:	d105      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00b      	beq.n	8002d4c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002d38:	2b12      	cmp	r3, #18
 8002d3a:	f040 80ab 	bne.w	8002e94 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f040 80a4 	bne.w	8002e94 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d54:	d10a      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x484>
 8002d56:	4b02      	ldr	r3, [pc, #8]	; (8002d60 <HAL_ADC_ConfigChannel+0x478>)
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	e022      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x4ba>
 8002d5c:	83fff000 	.word	0x83fff000
 8002d60:	50000100 	.word	0x50000100
 8002d64:	50000300 	.word	0x50000300
 8002d68:	50000700 	.word	0x50000700
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a4e      	ldr	r2, [pc, #312]	; (8002eac <HAL_ADC_ConfigChannel+0x5c4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d103      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x496>
 8002d76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	e011      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x4ba>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a4b      	ldr	r2, [pc, #300]	; (8002eb0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d102      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x4a6>
 8002d88:	4b4a      	ldr	r3, [pc, #296]	; (8002eb4 <HAL_ADC_ConfigChannel+0x5cc>)
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	e009      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x4ba>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a48      	ldr	r2, [pc, #288]	; (8002eb4 <HAL_ADC_ConfigChannel+0x5cc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d102      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x4b6>
 8002d98:	4b45      	ldr	r3, [pc, #276]	; (8002eb0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	e001      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x4ba>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d108      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x4da>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x4da>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x4dc>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d150      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002dc8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d010      	beq.n	8002df0 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d107      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x502>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x502>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <HAL_ADC_ConfigChannel+0x504>
 8002dea:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d13c      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	d11d      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x54c>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e00:	d118      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e0c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e0e:	4b2a      	ldr	r3, [pc, #168]	; (8002eb8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a2a      	ldr	r2, [pc, #168]	; (8002ebc <HAL_ADC_ConfigChannel+0x5d4>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	0c9a      	lsrs	r2, r3, #18
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e24:	e002      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f9      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e32:	e02e      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b11      	cmp	r3, #17
 8002e3a:	d10b      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x56c>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e44:	d106      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e50:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e52:	e01e      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b12      	cmp	r3, #18
 8002e5a:	d11a      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e66:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e68:	e013      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f043 0220 	orr.w	r2, r3, #32
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002e7c:	e00a      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f043 0220 	orr.w	r2, r3, #32
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002e90:	e000      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e92:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	376c      	adds	r7, #108	; 0x6c
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	50000100 	.word	0x50000100
 8002eb0:	50000400 	.word	0x50000400
 8002eb4:	50000500 	.word	0x50000500
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	431bde83 	.word	0x431bde83

08002ec0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b099      	sub	sp, #100	; 0x64
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ed8:	d102      	bne.n	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002eda:	4b6d      	ldr	r3, [pc, #436]	; (8003090 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	e01a      	b.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a6a      	ldr	r2, [pc, #424]	; (8003090 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d103      	bne.n	8002ef2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002eea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	e011      	b.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a67      	ldr	r2, [pc, #412]	; (8003094 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d102      	bne.n	8002f02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002efc:	4b66      	ldr	r3, [pc, #408]	; (8003098 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	e009      	b.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a64      	ldr	r2, [pc, #400]	; (8003098 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d102      	bne.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002f0c:	4b61      	ldr	r3, [pc, #388]	; (8003094 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	e001      	b.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0b0      	b.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e0a9      	b.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f040 808d 	bne.w	8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f040 8086 	bne.w	8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f5c:	d004      	beq.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a4b      	ldr	r2, [pc, #300]	; (8003090 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d101      	bne.n	8002f6c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002f68:	4b4c      	ldr	r3, [pc, #304]	; (800309c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002f6a:	e000      	b.n	8002f6e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002f6c:	4b4c      	ldr	r3, [pc, #304]	; (80030a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002f6e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d040      	beq.n	8002ffa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6859      	ldr	r1, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f8a:	035b      	lsls	r3, r3, #13
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f92:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d108      	bne.n	8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d15c      	bne.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d107      	bne.n	8002fd6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002fd6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d14b      	bne.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fe4:	f023 030f 	bic.w	r3, r3, #15
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	6811      	ldr	r1, [r2, #0]
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	6892      	ldr	r2, [r2, #8]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ff8:	e03c      	b.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003004:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d108      	bne.n	8003026 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003026:	2300      	movs	r3, #0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d123      	bne.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b01      	cmp	r3, #1
 8003036:	d107      	bne.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003048:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800304a:	2b00      	cmp	r3, #0
 800304c:	d112      	bne.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800304e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003056:	f023 030f 	bic.w	r3, r3, #15
 800305a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800305c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800305e:	e009      	b.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f043 0220 	orr.w	r2, r3, #32
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003072:	e000      	b.n	8003076 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003074:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800307e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003082:	4618      	mov	r0, r3
 8003084:	3764      	adds	r7, #100	; 0x64
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	50000100 	.word	0x50000100
 8003094:	50000400 	.word	0x50000400
 8003098:	50000500 	.word	0x50000500
 800309c:	50000300 	.word	0x50000300
 80030a0:	50000700 	.word	0x50000700

080030a4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d126      	bne.n	800310c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d115      	bne.n	8003104 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d111      	bne.n	8003104 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d105      	bne.n	8003104 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	f043 0201 	orr.w	r2, r3, #1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f7ff f8bb 	bl	8002280 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800310a:	e004      	b.n	8003116 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4798      	blx	r3
}
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f7ff f8b1 	bl	8002294 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	f043 0204 	orr.w	r2, r3, #4
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7ff f8a1 	bl	80022a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d108      	bne.n	800319c <ADC_Enable+0x2c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <ADC_Enable+0x2c>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <ADC_Enable+0x2e>
 800319c:	2300      	movs	r3, #0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d143      	bne.n	800322a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	4b22      	ldr	r3, [pc, #136]	; (8003234 <ADC_Enable+0xc4>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00d      	beq.n	80031cc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f043 0210 	orr.w	r2, r3, #16
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	f043 0201 	orr.w	r2, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e02f      	b.n	800322c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80031dc:	f7ff f820 	bl	8002220 <HAL_GetTick>
 80031e0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031e2:	e01b      	b.n	800321c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031e4:	f7ff f81c 	bl	8002220 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d914      	bls.n	800321c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d00d      	beq.n	800321c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	f043 0210 	orr.w	r2, r3, #16
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003210:	f043 0201 	orr.w	r2, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e007      	b.n	800322c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d1dc      	bne.n	80031e4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	8000003f 	.word	0x8000003f

08003238 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d108      	bne.n	8003264 <ADC_Disable+0x2c>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <ADC_Disable+0x2c>
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <ADC_Disable+0x2e>
 8003264:	2300      	movs	r3, #0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d047      	beq.n	80032fa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 030d 	and.w	r3, r3, #13
 8003274:	2b01      	cmp	r3, #1
 8003276:	d10f      	bne.n	8003298 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0202 	orr.w	r2, r2, #2
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2203      	movs	r2, #3
 800328e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003290:	f7fe ffc6 	bl	8002220 <HAL_GetTick>
 8003294:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003296:	e029      	b.n	80032ec <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	f043 0210 	orr.w	r2, r3, #16
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a8:	f043 0201 	orr.w	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e023      	b.n	80032fc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032b4:	f7fe ffb4 	bl	8002220 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d914      	bls.n	80032ec <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d10d      	bne.n	80032ec <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	f043 0210 	orr.w	r2, r3, #16
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	f043 0201 	orr.w	r2, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e007      	b.n	80032fc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d0dc      	beq.n	80032b4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003314:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <__NVIC_SetPriorityGrouping+0x44>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003320:	4013      	ands	r3, r2
 8003322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800332c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003336:	4a04      	ldr	r2, [pc, #16]	; (8003348 <__NVIC_SetPriorityGrouping+0x44>)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	60d3      	str	r3, [r2, #12]
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <__NVIC_GetPriorityGrouping+0x18>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	0a1b      	lsrs	r3, r3, #8
 8003356:	f003 0307 	and.w	r3, r3, #7
}
 800335a:	4618      	mov	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	2b00      	cmp	r3, #0
 8003378:	db0b      	blt.n	8003392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	f003 021f 	and.w	r2, r3, #31
 8003380:	4907      	ldr	r1, [pc, #28]	; (80033a0 <__NVIC_EnableIRQ+0x38>)
 8003382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	2001      	movs	r0, #1
 800338a:	fa00 f202 	lsl.w	r2, r0, r2
 800338e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000e100 	.word	0xe000e100

080033a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	6039      	str	r1, [r7, #0]
 80033ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	db0a      	blt.n	80033ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	490c      	ldr	r1, [pc, #48]	; (80033f0 <__NVIC_SetPriority+0x4c>)
 80033be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c2:	0112      	lsls	r2, r2, #4
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	440b      	add	r3, r1
 80033c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033cc:	e00a      	b.n	80033e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	4908      	ldr	r1, [pc, #32]	; (80033f4 <__NVIC_SetPriority+0x50>)
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	3b04      	subs	r3, #4
 80033dc:	0112      	lsls	r2, r2, #4
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	440b      	add	r3, r1
 80033e2:	761a      	strb	r2, [r3, #24]
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000e100 	.word	0xe000e100
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b089      	sub	sp, #36	; 0x24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f1c3 0307 	rsb	r3, r3, #7
 8003412:	2b04      	cmp	r3, #4
 8003414:	bf28      	it	cs
 8003416:	2304      	movcs	r3, #4
 8003418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3304      	adds	r3, #4
 800341e:	2b06      	cmp	r3, #6
 8003420:	d902      	bls.n	8003428 <NVIC_EncodePriority+0x30>
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3b03      	subs	r3, #3
 8003426:	e000      	b.n	800342a <NVIC_EncodePriority+0x32>
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800342c:	f04f 32ff 	mov.w	r2, #4294967295
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43da      	mvns	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	401a      	ands	r2, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003440:	f04f 31ff 	mov.w	r1, #4294967295
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	fa01 f303 	lsl.w	r3, r1, r3
 800344a:	43d9      	mvns	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003450:	4313      	orrs	r3, r2
         );
}
 8003452:	4618      	mov	r0, r3
 8003454:	3724      	adds	r7, #36	; 0x24
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
	...

08003460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3b01      	subs	r3, #1
 800346c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003470:	d301      	bcc.n	8003476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003472:	2301      	movs	r3, #1
 8003474:	e00f      	b.n	8003496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003476:	4a0a      	ldr	r2, [pc, #40]	; (80034a0 <SysTick_Config+0x40>)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3b01      	subs	r3, #1
 800347c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800347e:	210f      	movs	r1, #15
 8003480:	f04f 30ff 	mov.w	r0, #4294967295
 8003484:	f7ff ff8e 	bl	80033a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <SysTick_Config+0x40>)
 800348a:	2200      	movs	r2, #0
 800348c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800348e:	4b04      	ldr	r3, [pc, #16]	; (80034a0 <SysTick_Config+0x40>)
 8003490:	2207      	movs	r2, #7
 8003492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	e000e010 	.word	0xe000e010

080034a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff ff29 	bl	8003304 <__NVIC_SetPriorityGrouping>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b086      	sub	sp, #24
 80034be:	af00      	add	r7, sp, #0
 80034c0:	4603      	mov	r3, r0
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034cc:	f7ff ff3e 	bl	800334c <__NVIC_GetPriorityGrouping>
 80034d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	6978      	ldr	r0, [r7, #20]
 80034d8:	f7ff ff8e 	bl	80033f8 <NVIC_EncodePriority>
 80034dc:	4602      	mov	r2, r0
 80034de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e2:	4611      	mov	r1, r2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff ff5d 	bl	80033a4 <__NVIC_SetPriority>
}
 80034ea:	bf00      	nop
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4603      	mov	r3, r0
 80034fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff ff31 	bl	8003368 <__NVIC_EnableIRQ>
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff ffa2 	bl	8003460 <SysTick_Config>
 800351c:	4603      	mov	r3, r0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e037      	b.n	80035ac <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003552:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003556:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003560:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003578:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f9b8 	bl	8003904 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}  
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_DMA_Start_IT+0x20>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e04a      	b.n	800366a <HAL_DMA_Start_IT+0xb6>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d13a      	bne.n	800365c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2202      	movs	r2, #2
 80035ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f94b 	bl	80038a6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 020e 	orr.w	r2, r2, #14
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	e00f      	b.n	800364a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 020a 	orr.w	r2, r2, #10
 8003638:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0204 	bic.w	r2, r2, #4
 8003648:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0201 	orr.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	e005      	b.n	8003668 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003664:	2302      	movs	r3, #2
 8003666:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003668:	7dfb      	ldrb	r3, [r7, #23]
} 
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003680:	2b02      	cmp	r3, #2
 8003682:	d008      	beq.n	8003696 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2204      	movs	r2, #4
 8003688:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e020      	b.n	80036d8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 020e 	bic.w	r2, r2, #14
 80036a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0201 	bic.w	r2, r2, #1
 80036b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	2101      	movs	r1, #1
 80036c0:	fa01 f202 	lsl.w	r2, r1, r2
 80036c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d005      	beq.n	8003706 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2204      	movs	r2, #4
 80036fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
 8003704:	e027      	b.n	8003756 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 020e 	bic.w	r2, r2, #14
 8003714:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372e:	2101      	movs	r1, #1
 8003730:	fa01 f202 	lsl.w	r2, r1, r2
 8003734:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
    } 
  }
  return status;
 8003756:	7bfb      	ldrb	r3, [r7, #15]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	2204      	movs	r2, #4
 800377e:	409a      	lsls	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4013      	ands	r3, r2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d024      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x72>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d01f      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d107      	bne.n	80037b0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0204 	bic.w	r2, r2, #4
 80037ae:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b8:	2104      	movs	r1, #4
 80037ba:	fa01 f202 	lsl.w	r2, r1, r2
 80037be:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d06a      	beq.n	800389e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80037d0:	e065      	b.n	800389e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	2202      	movs	r2, #2
 80037d8:	409a      	lsls	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4013      	ands	r3, r2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d02c      	beq.n	800383c <HAL_DMA_IRQHandler+0xdc>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d027      	beq.n	800383c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10b      	bne.n	8003812 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 020a 	bic.w	r2, r2, #10
 8003808:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381a:	2102      	movs	r1, #2
 800381c:	fa01 f202 	lsl.w	r2, r1, r2
 8003820:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	2b00      	cmp	r3, #0
 8003830:	d035      	beq.n	800389e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800383a:	e030      	b.n	800389e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	2208      	movs	r2, #8
 8003842:	409a      	lsls	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4013      	ands	r3, r2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d028      	beq.n	800389e <HAL_DMA_IRQHandler+0x13e>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d023      	beq.n	800389e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 020e 	bic.w	r2, r2, #14
 8003864:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386e:	2101      	movs	r1, #1
 8003870:	fa01 f202 	lsl.w	r2, r1, r2
 8003874:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
    }
  }
}  
 800389c:	e7ff      	b.n	800389e <HAL_DMA_IRQHandler+0x13e>
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038bc:	2101      	movs	r1, #1
 80038be:	fa01 f202 	lsl.w	r2, r1, r2
 80038c2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b10      	cmp	r3, #16
 80038d2:	d108      	bne.n	80038e6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038e4:	e007      	b.n	80038f6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	60da      	str	r2, [r3, #12]
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	4b14      	ldr	r3, [pc, #80]	; (8003964 <DMA_CalcBaseAndBitshift+0x60>)
 8003914:	429a      	cmp	r2, r3
 8003916:	d80f      	bhi.n	8003938 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	4b12      	ldr	r3, [pc, #72]	; (8003968 <DMA_CalcBaseAndBitshift+0x64>)
 8003920:	4413      	add	r3, r2
 8003922:	4a12      	ldr	r2, [pc, #72]	; (800396c <DMA_CalcBaseAndBitshift+0x68>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	009a      	lsls	r2, r3, #2
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a0f      	ldr	r2, [pc, #60]	; (8003970 <DMA_CalcBaseAndBitshift+0x6c>)
 8003934:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003936:	e00e      	b.n	8003956 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <DMA_CalcBaseAndBitshift+0x70>)
 8003940:	4413      	add	r3, r2
 8003942:	4a0a      	ldr	r2, [pc, #40]	; (800396c <DMA_CalcBaseAndBitshift+0x68>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	091b      	lsrs	r3, r3, #4
 800394a:	009a      	lsls	r2, r3, #2
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a09      	ldr	r2, [pc, #36]	; (8003978 <DMA_CalcBaseAndBitshift+0x74>)
 8003954:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40020407 	.word	0x40020407
 8003968:	bffdfff8 	.word	0xbffdfff8
 800396c:	cccccccd 	.word	0xcccccccd
 8003970:	40020000 	.word	0x40020000
 8003974:	bffdfbf8 	.word	0xbffdfbf8
 8003978:	40020400 	.word	0x40020400

0800397c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800398a:	e160      	b.n	8003c4e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	2101      	movs	r1, #1
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	fa01 f303 	lsl.w	r3, r1, r3
 8003998:	4013      	ands	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 8152 	beq.w	8003c48 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d005      	beq.n	80039bc <HAL_GPIO_Init+0x40>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d130      	bne.n	8003a1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039f2:	2201      	movs	r2, #1
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	f003 0201 	and.w	r2, r3, #1
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d017      	beq.n	8003a5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	2203      	movs	r2, #3
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d123      	bne.n	8003aae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	08da      	lsrs	r2, r3, #3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3208      	adds	r2, #8
 8003a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	220f      	movs	r2, #15
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43db      	mvns	r3, r3
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4013      	ands	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	08da      	lsrs	r2, r3, #3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3208      	adds	r2, #8
 8003aa8:	6939      	ldr	r1, [r7, #16]
 8003aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	2203      	movs	r2, #3
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 0203 	and.w	r2, r3, #3
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80ac 	beq.w	8003c48 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003af0:	4b5e      	ldr	r3, [pc, #376]	; (8003c6c <HAL_GPIO_Init+0x2f0>)
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	4a5d      	ldr	r2, [pc, #372]	; (8003c6c <HAL_GPIO_Init+0x2f0>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	6193      	str	r3, [r2, #24]
 8003afc:	4b5b      	ldr	r3, [pc, #364]	; (8003c6c <HAL_GPIO_Init+0x2f0>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b08:	4a59      	ldr	r2, [pc, #356]	; (8003c70 <HAL_GPIO_Init+0x2f4>)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	089b      	lsrs	r3, r3, #2
 8003b0e:	3302      	adds	r3, #2
 8003b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f003 0303 	and.w	r3, r3, #3
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	220f      	movs	r2, #15
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b32:	d025      	beq.n	8003b80 <HAL_GPIO_Init+0x204>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a4f      	ldr	r2, [pc, #316]	; (8003c74 <HAL_GPIO_Init+0x2f8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d01f      	beq.n	8003b7c <HAL_GPIO_Init+0x200>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a4e      	ldr	r2, [pc, #312]	; (8003c78 <HAL_GPIO_Init+0x2fc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d019      	beq.n	8003b78 <HAL_GPIO_Init+0x1fc>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a4d      	ldr	r2, [pc, #308]	; (8003c7c <HAL_GPIO_Init+0x300>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d013      	beq.n	8003b74 <HAL_GPIO_Init+0x1f8>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a4c      	ldr	r2, [pc, #304]	; (8003c80 <HAL_GPIO_Init+0x304>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00d      	beq.n	8003b70 <HAL_GPIO_Init+0x1f4>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a4b      	ldr	r2, [pc, #300]	; (8003c84 <HAL_GPIO_Init+0x308>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d007      	beq.n	8003b6c <HAL_GPIO_Init+0x1f0>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a4a      	ldr	r2, [pc, #296]	; (8003c88 <HAL_GPIO_Init+0x30c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d101      	bne.n	8003b68 <HAL_GPIO_Init+0x1ec>
 8003b64:	2306      	movs	r3, #6
 8003b66:	e00c      	b.n	8003b82 <HAL_GPIO_Init+0x206>
 8003b68:	2307      	movs	r3, #7
 8003b6a:	e00a      	b.n	8003b82 <HAL_GPIO_Init+0x206>
 8003b6c:	2305      	movs	r3, #5
 8003b6e:	e008      	b.n	8003b82 <HAL_GPIO_Init+0x206>
 8003b70:	2304      	movs	r3, #4
 8003b72:	e006      	b.n	8003b82 <HAL_GPIO_Init+0x206>
 8003b74:	2303      	movs	r3, #3
 8003b76:	e004      	b.n	8003b82 <HAL_GPIO_Init+0x206>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e002      	b.n	8003b82 <HAL_GPIO_Init+0x206>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <HAL_GPIO_Init+0x206>
 8003b80:	2300      	movs	r3, #0
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	f002 0203 	and.w	r2, r2, #3
 8003b88:	0092      	lsls	r2, r2, #2
 8003b8a:	4093      	lsls	r3, r2
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b92:	4937      	ldr	r1, [pc, #220]	; (8003c70 <HAL_GPIO_Init+0x2f4>)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	089b      	lsrs	r3, r3, #2
 8003b98:	3302      	adds	r3, #2
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ba0:	4b3a      	ldr	r3, [pc, #232]	; (8003c8c <HAL_GPIO_Init+0x310>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4013      	ands	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003bc4:	4a31      	ldr	r2, [pc, #196]	; (8003c8c <HAL_GPIO_Init+0x310>)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bca:	4b30      	ldr	r3, [pc, #192]	; (8003c8c <HAL_GPIO_Init+0x310>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003bee:	4a27      	ldr	r2, [pc, #156]	; (8003c8c <HAL_GPIO_Init+0x310>)
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bf4:	4b25      	ldr	r3, [pc, #148]	; (8003c8c <HAL_GPIO_Init+0x310>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003c18:	4a1c      	ldr	r2, [pc, #112]	; (8003c8c <HAL_GPIO_Init+0x310>)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c1e:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <HAL_GPIO_Init+0x310>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	43db      	mvns	r3, r3
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003c42:	4a12      	ldr	r2, [pc, #72]	; (8003c8c <HAL_GPIO_Init+0x310>)
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f47f ae97 	bne.w	800398c <HAL_GPIO_Init+0x10>
  }
}
 8003c5e:	bf00      	nop
 8003c60:	bf00      	nop
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40010000 	.word	0x40010000
 8003c74:	48000400 	.word	0x48000400
 8003c78:	48000800 	.word	0x48000800
 8003c7c:	48000c00 	.word	0x48000c00
 8003c80:	48001000 	.word	0x48001000
 8003c84:	48001400 	.word	0x48001400
 8003c88:	48001800 	.word	0x48001800
 8003c8c:	40010400 	.word	0x40010400

08003c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	807b      	strh	r3, [r7, #2]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ca0:	787b      	ldrb	r3, [r7, #1]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ca6:	887a      	ldrh	r2, [r7, #2]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cac:	e002      	b.n	8003cb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cae:	887a      	ldrh	r2, [r7, #2]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e081      	b.n	8003dd6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fd ff98 	bl	8001c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2224      	movs	r2, #36	; 0x24
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d107      	bne.n	8003d3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	e006      	b.n	8003d48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d104      	bne.n	8003d5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69d9      	ldr	r1, [r3, #28]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1a      	ldr	r2, [r3, #32]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	4608      	mov	r0, r1
 8003dea:	4611      	mov	r1, r2
 8003dec:	461a      	mov	r2, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	817b      	strh	r3, [r7, #10]
 8003df2:	460b      	mov	r3, r1
 8003df4:	813b      	strh	r3, [r7, #8]
 8003df6:	4613      	mov	r3, r2
 8003df8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	f040 80f9 	bne.w	8003ffa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_I2C_Mem_Write+0x34>
 8003e0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d105      	bne.n	8003e20 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0ed      	b.n	8003ffc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d101      	bne.n	8003e2e <HAL_I2C_Mem_Write+0x4e>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e0e6      	b.n	8003ffc <HAL_I2C_Mem_Write+0x21c>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e36:	f7fe f9f3 	bl	8002220 <HAL_GetTick>
 8003e3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	2319      	movs	r3, #25
 8003e42:	2201      	movs	r2, #1
 8003e44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fbe7 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0d1      	b.n	8003ffc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2221      	movs	r2, #33	; 0x21
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2240      	movs	r2, #64	; 0x40
 8003e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a3a      	ldr	r2, [r7, #32]
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e80:	88f8      	ldrh	r0, [r7, #6]
 8003e82:	893a      	ldrh	r2, [r7, #8]
 8003e84:	8979      	ldrh	r1, [r7, #10]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	9301      	str	r3, [sp, #4]
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	4603      	mov	r3, r0
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 faf7 	bl	8004484 <I2C_RequestMemoryWrite>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0a9      	b.n	8003ffc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2bff      	cmp	r3, #255	; 0xff
 8003eb0:	d90e      	bls.n	8003ed0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	22ff      	movs	r2, #255	; 0xff
 8003eb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	8979      	ldrh	r1, [r7, #10]
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 fd61 	bl	8004990 <I2C_TransferConfig>
 8003ece:	e00f      	b.n	8003ef0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	8979      	ldrh	r1, [r7, #10]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 fd50 	bl	8004990 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 fbe0 	bl	80046ba <I2C_WaitOnTXISFlagUntilTimeout>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e07b      	b.n	8003ffc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	781a      	ldrb	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d034      	beq.n	8003fa8 <HAL_I2C_Mem_Write+0x1c8>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d130      	bne.n	8003fa8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2180      	movs	r1, #128	; 0x80
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 fb63 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e04d      	b.n	8003ffc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2bff      	cmp	r3, #255	; 0xff
 8003f68:	d90e      	bls.n	8003f88 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	22ff      	movs	r2, #255	; 0xff
 8003f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	8979      	ldrh	r1, [r7, #10]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fd05 	bl	8004990 <I2C_TransferConfig>
 8003f86:	e00f      	b.n	8003fa8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	8979      	ldrh	r1, [r7, #10]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 fcf4 	bl	8004990 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d19e      	bne.n	8003ef0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 fbc6 	bl	8004748 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e01a      	b.n	8003ffc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6859      	ldr	r1, [r3, #4]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <HAL_I2C_Mem_Write+0x224>)
 8003fda:	400b      	ands	r3, r1
 8003fdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e000      	b.n	8003ffc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003ffa:	2302      	movs	r3, #2
  }
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	fe00e800 	.word	0xfe00e800

08004008 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	4608      	mov	r0, r1
 8004012:	4611      	mov	r1, r2
 8004014:	461a      	mov	r2, r3
 8004016:	4603      	mov	r3, r0
 8004018:	817b      	strh	r3, [r7, #10]
 800401a:	460b      	mov	r3, r1
 800401c:	813b      	strh	r3, [r7, #8]
 800401e:	4613      	mov	r3, r2
 8004020:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b20      	cmp	r3, #32
 800402c:	f040 80fd 	bne.w	800422a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <HAL_I2C_Mem_Read+0x34>
 8004036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004038:	2b00      	cmp	r3, #0
 800403a:	d105      	bne.n	8004048 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004042:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0f1      	b.n	800422c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_I2C_Mem_Read+0x4e>
 8004052:	2302      	movs	r3, #2
 8004054:	e0ea      	b.n	800422c <HAL_I2C_Mem_Read+0x224>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800405e:	f7fe f8df 	bl	8002220 <HAL_GetTick>
 8004062:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	2319      	movs	r3, #25
 800406a:	2201      	movs	r2, #1
 800406c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 fad3 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0d5      	b.n	800422c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2222      	movs	r2, #34	; 0x22
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2240      	movs	r2, #64	; 0x40
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a3a      	ldr	r2, [r7, #32]
 800409a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040a8:	88f8      	ldrh	r0, [r7, #6]
 80040aa:	893a      	ldrh	r2, [r7, #8]
 80040ac:	8979      	ldrh	r1, [r7, #10]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	9301      	str	r3, [sp, #4]
 80040b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	4603      	mov	r3, r0
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fa37 	bl	800452c <I2C_RequestMemoryRead>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0ad      	b.n	800422c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2bff      	cmp	r3, #255	; 0xff
 80040d8:	d90e      	bls.n	80040f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	22ff      	movs	r2, #255	; 0xff
 80040de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	8979      	ldrh	r1, [r7, #10]
 80040e8:	4b52      	ldr	r3, [pc, #328]	; (8004234 <HAL_I2C_Mem_Read+0x22c>)
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 fc4d 	bl	8004990 <I2C_TransferConfig>
 80040f6:	e00f      	b.n	8004118 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004106:	b2da      	uxtb	r2, r3
 8004108:	8979      	ldrh	r1, [r7, #10]
 800410a:	4b4a      	ldr	r3, [pc, #296]	; (8004234 <HAL_I2C_Mem_Read+0x22c>)
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fc3c 	bl	8004990 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411e:	2200      	movs	r2, #0
 8004120:	2104      	movs	r1, #4
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 fa7a 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e07c      	b.n	800422c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d034      	beq.n	80041d8 <HAL_I2C_Mem_Read+0x1d0>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004172:	2b00      	cmp	r3, #0
 8004174:	d130      	bne.n	80041d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	2200      	movs	r2, #0
 800417e:	2180      	movs	r1, #128	; 0x80
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fa4b 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e04d      	b.n	800422c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	2bff      	cmp	r3, #255	; 0xff
 8004198:	d90e      	bls.n	80041b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	22ff      	movs	r2, #255	; 0xff
 800419e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	8979      	ldrh	r1, [r7, #10]
 80041a8:	2300      	movs	r3, #0
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fbed 	bl	8004990 <I2C_TransferConfig>
 80041b6:	e00f      	b.n	80041d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	8979      	ldrh	r1, [r7, #10]
 80041ca:	2300      	movs	r3, #0
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 fbdc 	bl	8004990 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d19a      	bne.n	8004118 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 faae 	bl	8004748 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e01a      	b.n	800422c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2220      	movs	r2, #32
 80041fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6859      	ldr	r1, [r3, #4]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_I2C_Mem_Read+0x230>)
 800420a:	400b      	ands	r3, r1
 800420c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	e000      	b.n	800422c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800422a:	2302      	movs	r3, #2
  }
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	80002400 	.word	0x80002400
 8004238:	fe00e800 	.word	0xfe00e800

0800423c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	; 0x28
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	460b      	mov	r3, r1
 800424a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b20      	cmp	r3, #32
 800425a:	f040 80f3 	bne.w	8004444 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426c:	d101      	bne.n	8004272 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800426e:	2302      	movs	r3, #2
 8004270:	e0e9      	b.n	8004446 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_I2C_IsDeviceReady+0x44>
 800427c:	2302      	movs	r3, #2
 800427e:	e0e2      	b.n	8004446 <HAL_I2C_IsDeviceReady+0x20a>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2224      	movs	r2, #36	; 0x24
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d107      	bne.n	80042ae <HAL_I2C_IsDeviceReady+0x72>
 800429e:	897b      	ldrh	r3, [r7, #10]
 80042a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042ac:	e006      	b.n	80042bc <HAL_I2C_IsDeviceReady+0x80>
 80042ae:	897b      	ldrh	r3, [r7, #10]
 80042b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042b8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80042c2:	f7fd ffad 	bl	8002220 <HAL_GetTick>
 80042c6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b20      	cmp	r3, #32
 80042d4:	bf0c      	ite	eq
 80042d6:	2301      	moveq	r3, #1
 80042d8:	2300      	movne	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	2b10      	cmp	r3, #16
 80042ea:	bf0c      	ite	eq
 80042ec:	2301      	moveq	r3, #1
 80042ee:	2300      	movne	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80042f4:	e034      	b.n	8004360 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fc:	d01a      	beq.n	8004334 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042fe:	f7fd ff8f 	bl	8002220 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d302      	bcc.n	8004314 <HAL_I2C_IsDeviceReady+0xd8>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10f      	bne.n	8004334 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004320:	f043 0220 	orr.w	r2, r3, #32
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e088      	b.n	8004446 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b20      	cmp	r3, #32
 8004340:	bf0c      	ite	eq
 8004342:	2301      	moveq	r3, #1
 8004344:	2300      	movne	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b10      	cmp	r3, #16
 8004356:	bf0c      	ite	eq
 8004358:	2301      	moveq	r3, #1
 800435a:	2300      	movne	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004360:	7ffb      	ldrb	r3, [r7, #31]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <HAL_I2C_IsDeviceReady+0x130>
 8004366:	7fbb      	ldrb	r3, [r7, #30]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0c4      	beq.n	80042f6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b10      	cmp	r3, #16
 8004378:	d01a      	beq.n	80043b0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2200      	movs	r2, #0
 8004382:	2120      	movs	r1, #32
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f949 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e058      	b.n	8004446 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2220      	movs	r2, #32
 800439a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	e04a      	b.n	8004446 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2200      	movs	r2, #0
 80043b8:	2120      	movs	r1, #32
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f92e 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e03d      	b.n	8004446 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2210      	movs	r2, #16
 80043d0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2220      	movs	r2, #32
 80043d8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d118      	bne.n	8004414 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043f0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2200      	movs	r2, #0
 80043fa:	2120      	movs	r1, #32
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 f90d 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e01c      	b.n	8004446 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2220      	movs	r2, #32
 8004412:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	3301      	adds	r3, #1
 8004418:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	429a      	cmp	r2, r3
 8004420:	f63f af39 	bhi.w	8004296 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004430:	f043 0220 	orr.w	r2, r3, #32
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8004444:	2302      	movs	r3, #2
  }
}
 8004446:	4618      	mov	r0, r3
 8004448:	3720      	adds	r7, #32
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	68f9      	ldr	r1, [r7, #12]
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	4798      	blx	r3
  }
}
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	4608      	mov	r0, r1
 800448e:	4611      	mov	r1, r2
 8004490:	461a      	mov	r2, r3
 8004492:	4603      	mov	r3, r0
 8004494:	817b      	strh	r3, [r7, #10]
 8004496:	460b      	mov	r3, r1
 8004498:	813b      	strh	r3, [r7, #8]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	8979      	ldrh	r1, [r7, #10]
 80044a4:	4b20      	ldr	r3, [pc, #128]	; (8004528 <I2C_RequestMemoryWrite+0xa4>)
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fa6f 	bl	8004990 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	69b9      	ldr	r1, [r7, #24]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 f8ff 	bl	80046ba <I2C_WaitOnTXISFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e02c      	b.n	8004520 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d105      	bne.n	80044d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044cc:	893b      	ldrh	r3, [r7, #8]
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	629a      	str	r2, [r3, #40]	; 0x28
 80044d6:	e015      	b.n	8004504 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044d8:	893b      	ldrh	r3, [r7, #8]
 80044da:	0a1b      	lsrs	r3, r3, #8
 80044dc:	b29b      	uxth	r3, r3
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	69b9      	ldr	r1, [r7, #24]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f8e5 	bl	80046ba <I2C_WaitOnTXISFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e012      	b.n	8004520 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044fa:	893b      	ldrh	r3, [r7, #8]
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	2200      	movs	r2, #0
 800450c:	2180      	movs	r1, #128	; 0x80
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 f884 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	80002000 	.word	0x80002000

0800452c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	4608      	mov	r0, r1
 8004536:	4611      	mov	r1, r2
 8004538:	461a      	mov	r2, r3
 800453a:	4603      	mov	r3, r0
 800453c:	817b      	strh	r3, [r7, #10]
 800453e:	460b      	mov	r3, r1
 8004540:	813b      	strh	r3, [r7, #8]
 8004542:	4613      	mov	r3, r2
 8004544:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004546:	88fb      	ldrh	r3, [r7, #6]
 8004548:	b2da      	uxtb	r2, r3
 800454a:	8979      	ldrh	r1, [r7, #10]
 800454c:	4b20      	ldr	r3, [pc, #128]	; (80045d0 <I2C_RequestMemoryRead+0xa4>)
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	2300      	movs	r3, #0
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 fa1c 	bl	8004990 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	69b9      	ldr	r1, [r7, #24]
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f8ac 	bl	80046ba <I2C_WaitOnTXISFlagUntilTimeout>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e02c      	b.n	80045c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800456c:	88fb      	ldrh	r3, [r7, #6]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d105      	bne.n	800457e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004572:	893b      	ldrh	r3, [r7, #8]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	629a      	str	r2, [r3, #40]	; 0x28
 800457c:	e015      	b.n	80045aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800457e:	893b      	ldrh	r3, [r7, #8]
 8004580:	0a1b      	lsrs	r3, r3, #8
 8004582:	b29b      	uxth	r3, r3
 8004584:	b2da      	uxtb	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	69b9      	ldr	r1, [r7, #24]
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 f892 	bl	80046ba <I2C_WaitOnTXISFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e012      	b.n	80045c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045a0:	893b      	ldrh	r3, [r7, #8]
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2200      	movs	r2, #0
 80045b2:	2140      	movs	r1, #64	; 0x40
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f831 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e000      	b.n	80045c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	80002000 	.word	0x80002000

080045d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d103      	bne.n	80045f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2200      	movs	r2, #0
 80045f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d007      	beq.n	8004610 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699a      	ldr	r2, [r3, #24]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	619a      	str	r2, [r3, #24]
  }
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	4613      	mov	r3, r2
 800462a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800462c:	e031      	b.n	8004692 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004634:	d02d      	beq.n	8004692 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004636:	f7fd fdf3 	bl	8002220 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d302      	bcc.n	800464c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d122      	bne.n	8004692 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699a      	ldr	r2, [r3, #24]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4013      	ands	r3, r2
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	429a      	cmp	r2, r3
 800465a:	bf0c      	ite	eq
 800465c:	2301      	moveq	r3, #1
 800465e:	2300      	movne	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	429a      	cmp	r2, r3
 8004668:	d113      	bne.n	8004692 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466e:	f043 0220 	orr.w	r2, r3, #32
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2220      	movs	r2, #32
 800467a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e00f      	b.n	80046b2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699a      	ldr	r2, [r3, #24]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4013      	ands	r3, r2
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	429a      	cmp	r2, r3
 80046a0:	bf0c      	ite	eq
 80046a2:	2301      	moveq	r3, #1
 80046a4:	2300      	movne	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d0be      	beq.n	800462e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b084      	sub	sp, #16
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046c6:	e033      	b.n	8004730 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	68b9      	ldr	r1, [r7, #8]
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f87f 	bl	80047d0 <I2C_IsErrorOccurred>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e031      	b.n	8004740 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e2:	d025      	beq.n	8004730 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e4:	f7fd fd9c 	bl	8002220 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d302      	bcc.n	80046fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d11a      	bne.n	8004730 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b02      	cmp	r3, #2
 8004706:	d013      	beq.n	8004730 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470c:	f043 0220 	orr.w	r2, r3, #32
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e007      	b.n	8004740 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b02      	cmp	r3, #2
 800473c:	d1c4      	bne.n	80046c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004754:	e02f      	b.n	80047b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f838 	bl	80047d0 <I2C_IsErrorOccurred>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e02d      	b.n	80047c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476a:	f7fd fd59 	bl	8002220 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	429a      	cmp	r2, r3
 8004778:	d302      	bcc.n	8004780 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d11a      	bne.n	80047b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b20      	cmp	r3, #32
 800478c:	d013      	beq.n	80047b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004792:	f043 0220 	orr.w	r2, r3, #32
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e007      	b.n	80047c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d1c8      	bne.n	8004756 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08a      	sub	sp, #40	; 0x28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d068      	beq.n	80048ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2210      	movs	r2, #16
 8004802:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004804:	e049      	b.n	800489a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480c:	d045      	beq.n	800489a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800480e:	f7fd fd07 	bl	8002220 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	429a      	cmp	r2, r3
 800481c:	d302      	bcc.n	8004824 <I2C_IsErrorOccurred+0x54>
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d13a      	bne.n	800489a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800482e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004836:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004846:	d121      	bne.n	800488c <I2C_IsErrorOccurred+0xbc>
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800484e:	d01d      	beq.n	800488c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004850:	7cfb      	ldrb	r3, [r7, #19]
 8004852:	2b20      	cmp	r3, #32
 8004854:	d01a      	beq.n	800488c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004864:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004866:	f7fd fcdb 	bl	8002220 <HAL_GetTick>
 800486a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800486c:	e00e      	b.n	800488c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800486e:	f7fd fcd7 	bl	8002220 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b19      	cmp	r3, #25
 800487a:	d907      	bls.n	800488c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	f043 0320 	orr.w	r3, r3, #32
 8004882:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800488a:	e006      	b.n	800489a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b20      	cmp	r3, #32
 8004898:	d1e9      	bne.n	800486e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d003      	beq.n	80048b0 <I2C_IsErrorOccurred+0xe0>
 80048a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0aa      	beq.n	8004806 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80048b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d103      	bne.n	80048c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2220      	movs	r2, #32
 80048be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	f043 0304 	orr.w	r3, r3, #4
 80048c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00b      	beq.n	80048f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00b      	beq.n	800491a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	f043 0308 	orr.w	r3, r3, #8
 8004908:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004912:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00b      	beq.n	800493c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	f043 0302 	orr.w	r3, r3, #2
 800492a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004934:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800493c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01c      	beq.n	800497e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f7ff fe45 	bl	80045d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6859      	ldr	r1, [r3, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	4b0d      	ldr	r3, [pc, #52]	; (800498c <I2C_IsErrorOccurred+0x1bc>)
 8004956:	400b      	ands	r3, r1
 8004958:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	431a      	orrs	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800497e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004982:	4618      	mov	r0, r3
 8004984:	3728      	adds	r7, #40	; 0x28
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	fe00e800 	.word	0xfe00e800

08004990 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	607b      	str	r3, [r7, #4]
 800499a:	460b      	mov	r3, r1
 800499c:	817b      	strh	r3, [r7, #10]
 800499e:	4613      	mov	r3, r2
 80049a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049a2:	897b      	ldrh	r3, [r7, #10]
 80049a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049a8:	7a7b      	ldrb	r3, [r7, #9]
 80049aa:	041b      	lsls	r3, r3, #16
 80049ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	0d5b      	lsrs	r3, r3, #21
 80049ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80049ce:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <I2C_TransferConfig+0x60>)
 80049d0:	430b      	orrs	r3, r1
 80049d2:	43db      	mvns	r3, r3
 80049d4:	ea02 0103 	and.w	r1, r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	430a      	orrs	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	03ff63ff 	.word	0x03ff63ff

080049f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b20      	cmp	r3, #32
 8004a08:	d138      	bne.n	8004a7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e032      	b.n	8004a7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2224      	movs	r2, #36	; 0x24
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0201 	bic.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6819      	ldr	r1, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	e000      	b.n	8004a7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a7c:	2302      	movs	r3, #2
  }
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b085      	sub	sp, #20
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d139      	bne.n	8004b14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e033      	b.n	8004b16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2224      	movs	r2, #36	; 0x24
 8004aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004adc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	021b      	lsls	r3, r3, #8
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	e000      	b.n	8004b16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b14:	2302      	movs	r3, #2
  }
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	4a0a      	ldr	r2, [pc, #40]	; (8004b5c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	6193      	str	r3, [r2, #24]
 8004b38:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8004b44:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4905      	ldr	r1, [pc, #20]	; (8004b60 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	600b      	str	r3, [r1, #0]
}
 8004b50:	bf00      	nop
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	40010000 	.word	0x40010000

08004b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b74:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d102      	bne.n	8004b8a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	f001 b83a 	b.w	8005bfe <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 816f 	beq.w	8004e7e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004ba0:	4bb5      	ldr	r3, [pc, #724]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f003 030c 	and.w	r3, r3, #12
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d00c      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bac:	4bb2      	ldr	r3, [pc, #712]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f003 030c 	and.w	r3, r3, #12
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d15c      	bne.n	8004c72 <HAL_RCC_OscConfig+0x10e>
 8004bb8:	4baf      	ldr	r3, [pc, #700]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc4:	d155      	bne.n	8004c72 <HAL_RCC_OscConfig+0x10e>
 8004bc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004bd2:	fa93 f3a3 	rbit	r3, r3
 8004bd6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004bda:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bde:	fab3 f383 	clz	r3, r3
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	f043 0301 	orr.w	r3, r3, #1
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d102      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x94>
 8004bf2:	4ba1      	ldr	r3, [pc, #644]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	e015      	b.n	8004c24 <HAL_RCC_OscConfig+0xc0>
 8004bf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bfc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c00:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004c04:	fa93 f3a3 	rbit	r3, r3
 8004c08:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004c0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c10:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004c14:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004c18:	fa93 f3a3 	rbit	r3, r3
 8004c1c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004c20:	4b95      	ldr	r3, [pc, #596]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c28:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004c2c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004c30:	fa92 f2a2 	rbit	r2, r2
 8004c34:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004c38:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004c3c:	fab2 f282 	clz	r2, r2
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	f042 0220 	orr.w	r2, r2, #32
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	f002 021f 	and.w	r2, r2, #31
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c52:	4013      	ands	r3, r2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8111 	beq.w	8004e7c <HAL_RCC_OscConfig+0x318>
 8004c5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f040 8108 	bne.w	8004e7c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	f000 bfc6 	b.w	8005bfe <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c82:	d106      	bne.n	8004c92 <HAL_RCC_OscConfig+0x12e>
 8004c84:	4b7c      	ldr	r3, [pc, #496]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a7b      	ldr	r2, [pc, #492]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	e036      	b.n	8004d00 <HAL_RCC_OscConfig+0x19c>
 8004c92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10c      	bne.n	8004cbc <HAL_RCC_OscConfig+0x158>
 8004ca2:	4b75      	ldr	r3, [pc, #468]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a74      	ldr	r2, [pc, #464]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	4b72      	ldr	r3, [pc, #456]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a71      	ldr	r2, [pc, #452]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004cb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	e021      	b.n	8004d00 <HAL_RCC_OscConfig+0x19c>
 8004cbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ccc:	d10c      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x184>
 8004cce:	4b6a      	ldr	r3, [pc, #424]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a69      	ldr	r2, [pc, #420]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	4b67      	ldr	r3, [pc, #412]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a66      	ldr	r2, [pc, #408]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	e00b      	b.n	8004d00 <HAL_RCC_OscConfig+0x19c>
 8004ce8:	4b63      	ldr	r3, [pc, #396]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a62      	ldr	r2, [pc, #392]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	4b60      	ldr	r3, [pc, #384]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a5f      	ldr	r2, [pc, #380]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cfe:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d059      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d10:	f7fd fa86 	bl	8002220 <HAL_GetTick>
 8004d14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d18:	e00a      	b.n	8004d30 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d1a:	f7fd fa81 	bl	8002220 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b64      	cmp	r3, #100	; 0x64
 8004d28:	d902      	bls.n	8004d30 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	f000 bf67 	b.w	8005bfe <HAL_RCC_OscConfig+0x109a>
 8004d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d34:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d38:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004d3c:	fa93 f3a3 	rbit	r3, r3
 8004d40:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004d44:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d48:	fab3 f383 	clz	r3, r3
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d102      	bne.n	8004d62 <HAL_RCC_OscConfig+0x1fe>
 8004d5c:	4b46      	ldr	r3, [pc, #280]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	e015      	b.n	8004d8e <HAL_RCC_OscConfig+0x22a>
 8004d62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d66:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004d6e:	fa93 f3a3 	rbit	r3, r3
 8004d72:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004d76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d7a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004d7e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004d82:	fa93 f3a3 	rbit	r3, r3
 8004d86:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004d8a:	4b3b      	ldr	r3, [pc, #236]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d92:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004d96:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004d9a:	fa92 f2a2 	rbit	r2, r2
 8004d9e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004da2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004da6:	fab2 f282 	clz	r2, r2
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	f042 0220 	orr.w	r2, r2, #32
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	f002 021f 	and.w	r2, r2, #31
 8004db6:	2101      	movs	r1, #1
 8004db8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0ab      	beq.n	8004d1a <HAL_RCC_OscConfig+0x1b6>
 8004dc2:	e05c      	b.n	8004e7e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc4:	f7fd fa2c 	bl	8002220 <HAL_GetTick>
 8004dc8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dcc:	e00a      	b.n	8004de4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dce:	f7fd fa27 	bl	8002220 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b64      	cmp	r3, #100	; 0x64
 8004ddc:	d902      	bls.n	8004de4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	f000 bf0d 	b.w	8005bfe <HAL_RCC_OscConfig+0x109a>
 8004de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004de8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004df0:	fa93 f3a3 	rbit	r3, r3
 8004df4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004df8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dfc:	fab3 f383 	clz	r3, r3
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	f043 0301 	orr.w	r3, r3, #1
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d102      	bne.n	8004e16 <HAL_RCC_OscConfig+0x2b2>
 8004e10:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	e015      	b.n	8004e42 <HAL_RCC_OscConfig+0x2de>
 8004e16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e1a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004e22:	fa93 f3a3 	rbit	r3, r3
 8004e26:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004e2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e2e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004e32:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004e36:	fa93 f3a3 	rbit	r3, r3
 8004e3a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004e3e:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <HAL_RCC_OscConfig+0x314>)
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e46:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004e4a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004e4e:	fa92 f2a2 	rbit	r2, r2
 8004e52:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004e56:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004e5a:	fab2 f282 	clz	r2, r2
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	f042 0220 	orr.w	r2, r2, #32
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	f002 021f 	and.w	r2, r2, #31
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e70:	4013      	ands	r3, r2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1ab      	bne.n	8004dce <HAL_RCC_OscConfig+0x26a>
 8004e76:	e002      	b.n	8004e7e <HAL_RCC_OscConfig+0x31a>
 8004e78:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 817f 	beq.w	8005192 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004e94:	4ba7      	ldr	r3, [pc, #668]	; (8005134 <HAL_RCC_OscConfig+0x5d0>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 030c 	and.w	r3, r3, #12
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00c      	beq.n	8004eba <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004ea0:	4ba4      	ldr	r3, [pc, #656]	; (8005134 <HAL_RCC_OscConfig+0x5d0>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f003 030c 	and.w	r3, r3, #12
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d173      	bne.n	8004f94 <HAL_RCC_OscConfig+0x430>
 8004eac:	4ba1      	ldr	r3, [pc, #644]	; (8005134 <HAL_RCC_OscConfig+0x5d0>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb8:	d16c      	bne.n	8004f94 <HAL_RCC_OscConfig+0x430>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004ec4:	fa93 f3a3 	rbit	r3, r3
 8004ec8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004ecc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ed0:	fab3 f383 	clz	r3, r3
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d102      	bne.n	8004eea <HAL_RCC_OscConfig+0x386>
 8004ee4:	4b93      	ldr	r3, [pc, #588]	; (8005134 <HAL_RCC_OscConfig+0x5d0>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	e013      	b.n	8004f12 <HAL_RCC_OscConfig+0x3ae>
 8004eea:	2302      	movs	r3, #2
 8004eec:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004ef4:	fa93 f3a3 	rbit	r3, r3
 8004ef8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004efc:	2302      	movs	r3, #2
 8004efe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004f02:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004f06:	fa93 f3a3 	rbit	r3, r3
 8004f0a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004f0e:	4b89      	ldr	r3, [pc, #548]	; (8005134 <HAL_RCC_OscConfig+0x5d0>)
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	2202      	movs	r2, #2
 8004f14:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004f18:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004f1c:	fa92 f2a2 	rbit	r2, r2
 8004f20:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004f24:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004f28:	fab2 f282 	clz	r2, r2
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	f042 0220 	orr.w	r2, r2, #32
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	f002 021f 	and.w	r2, r2, #31
 8004f38:	2101      	movs	r1, #1
 8004f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f3e:	4013      	ands	r3, r2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00a      	beq.n	8004f5a <HAL_RCC_OscConfig+0x3f6>
 8004f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d002      	beq.n	8004f5a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f000 be52 	b.w	8005bfe <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f5a:	4b76      	ldr	r3, [pc, #472]	; (8005134 <HAL_RCC_OscConfig+0x5d0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	21f8      	movs	r1, #248	; 0xf8
 8004f70:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f74:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004f78:	fa91 f1a1 	rbit	r1, r1
 8004f7c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004f80:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004f84:	fab1 f181 	clz	r1, r1
 8004f88:	b2c9      	uxtb	r1, r1
 8004f8a:	408b      	lsls	r3, r1
 8004f8c:	4969      	ldr	r1, [pc, #420]	; (8005134 <HAL_RCC_OscConfig+0x5d0>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f92:	e0fe      	b.n	8005192 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 8088 	beq.w	80050b6 <HAL_RCC_OscConfig+0x552>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fac:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004fb0:	fa93 f3a3 	rbit	r3, r3
 8004fb4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004fb8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fbc:	fab3 f383 	clz	r3, r3
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fc6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	461a      	mov	r2, r3
 8004fce:	2301      	movs	r3, #1
 8004fd0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd2:	f7fd f925 	bl	8002220 <HAL_GetTick>
 8004fd6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fda:	e00a      	b.n	8004ff2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fdc:	f7fd f920 	bl	8002220 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d902      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	f000 be06 	b.w	8005bfe <HAL_RCC_OscConfig+0x109a>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004ffc:	fa93 f3a3 	rbit	r3, r3
 8005000:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005004:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005008:	fab3 f383 	clz	r3, r3
 800500c:	b2db      	uxtb	r3, r3
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	b2db      	uxtb	r3, r3
 8005012:	f043 0301 	orr.w	r3, r3, #1
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	d102      	bne.n	8005022 <HAL_RCC_OscConfig+0x4be>
 800501c:	4b45      	ldr	r3, [pc, #276]	; (8005134 <HAL_RCC_OscConfig+0x5d0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	e013      	b.n	800504a <HAL_RCC_OscConfig+0x4e6>
 8005022:	2302      	movs	r3, #2
 8005024:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005028:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800502c:	fa93 f3a3 	rbit	r3, r3
 8005030:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005034:	2302      	movs	r3, #2
 8005036:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800503a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800503e:	fa93 f3a3 	rbit	r3, r3
 8005042:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005046:	4b3b      	ldr	r3, [pc, #236]	; (8005134 <HAL_RCC_OscConfig+0x5d0>)
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	2202      	movs	r2, #2
 800504c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8005050:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005054:	fa92 f2a2 	rbit	r2, r2
 8005058:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800505c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005060:	fab2 f282 	clz	r2, r2
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	f042 0220 	orr.w	r2, r2, #32
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	f002 021f 	and.w	r2, r2, #31
 8005070:	2101      	movs	r1, #1
 8005072:	fa01 f202 	lsl.w	r2, r1, r2
 8005076:	4013      	ands	r3, r2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0af      	beq.n	8004fdc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507c:	4b2d      	ldr	r3, [pc, #180]	; (8005134 <HAL_RCC_OscConfig+0x5d0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005084:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005088:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	21f8      	movs	r1, #248	; 0xf8
 8005092:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005096:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800509a:	fa91 f1a1 	rbit	r1, r1
 800509e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80050a2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80050a6:	fab1 f181 	clz	r1, r1
 80050aa:	b2c9      	uxtb	r1, r1
 80050ac:	408b      	lsls	r3, r1
 80050ae:	4921      	ldr	r1, [pc, #132]	; (8005134 <HAL_RCC_OscConfig+0x5d0>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	600b      	str	r3, [r1, #0]
 80050b4:	e06d      	b.n	8005192 <HAL_RCC_OscConfig+0x62e>
 80050b6:	2301      	movs	r3, #1
 80050b8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80050c0:	fa93 f3a3 	rbit	r3, r3
 80050c4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80050c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050cc:	fab3 f383 	clz	r3, r3
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	461a      	mov	r2, r3
 80050de:	2300      	movs	r3, #0
 80050e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e2:	f7fd f89d 	bl	8002220 <HAL_GetTick>
 80050e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ea:	e00a      	b.n	8005102 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ec:	f7fd f898 	bl	8002220 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d902      	bls.n	8005102 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	f000 bd7e 	b.w	8005bfe <HAL_RCC_OscConfig+0x109a>
 8005102:	2302      	movs	r3, #2
 8005104:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005108:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800510c:	fa93 f3a3 	rbit	r3, r3
 8005110:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005114:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005118:	fab3 f383 	clz	r3, r3
 800511c:	b2db      	uxtb	r3, r3
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	b2db      	uxtb	r3, r3
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b01      	cmp	r3, #1
 800512a:	d105      	bne.n	8005138 <HAL_RCC_OscConfig+0x5d4>
 800512c:	4b01      	ldr	r3, [pc, #4]	; (8005134 <HAL_RCC_OscConfig+0x5d0>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	e016      	b.n	8005160 <HAL_RCC_OscConfig+0x5fc>
 8005132:	bf00      	nop
 8005134:	40021000 	.word	0x40021000
 8005138:	2302      	movs	r3, #2
 800513a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005142:	fa93 f3a3 	rbit	r3, r3
 8005146:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800514a:	2302      	movs	r3, #2
 800514c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005150:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005154:	fa93 f3a3 	rbit	r3, r3
 8005158:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800515c:	4bbf      	ldr	r3, [pc, #764]	; (800545c <HAL_RCC_OscConfig+0x8f8>)
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	2202      	movs	r2, #2
 8005162:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005166:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800516a:	fa92 f2a2 	rbit	r2, r2
 800516e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8005172:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005176:	fab2 f282 	clz	r2, r2
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	f042 0220 	orr.w	r2, r2, #32
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	f002 021f 	and.w	r2, r2, #31
 8005186:	2101      	movs	r1, #1
 8005188:	fa01 f202 	lsl.w	r2, r1, r2
 800518c:	4013      	ands	r3, r2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1ac      	bne.n	80050ec <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005196:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 8113 	beq.w	80053ce <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d07c      	beq.n	80052b2 <HAL_RCC_OscConfig+0x74e>
 80051b8:	2301      	movs	r3, #1
 80051ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c2:	fa93 f3a3 	rbit	r3, r3
 80051c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80051ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ce:	fab3 f383 	clz	r3, r3
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	461a      	mov	r2, r3
 80051d6:	4ba2      	ldr	r3, [pc, #648]	; (8005460 <HAL_RCC_OscConfig+0x8fc>)
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	461a      	mov	r2, r3
 80051de:	2301      	movs	r3, #1
 80051e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e2:	f7fd f81d 	bl	8002220 <HAL_GetTick>
 80051e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ea:	e00a      	b.n	8005202 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ec:	f7fd f818 	bl	8002220 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d902      	bls.n	8005202 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	f000 bcfe 	b.w	8005bfe <HAL_RCC_OscConfig+0x109a>
 8005202:	2302      	movs	r3, #2
 8005204:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800520c:	fa93 f2a3 	rbit	r2, r3
 8005210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005214:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800521e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005222:	2202      	movs	r2, #2
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800522a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	fa93 f2a3 	rbit	r2, r3
 8005234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005242:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005246:	2202      	movs	r2, #2
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800524e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	fa93 f2a3 	rbit	r2, r3
 8005258:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800525c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005260:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005262:	4b7e      	ldr	r3, [pc, #504]	; (800545c <HAL_RCC_OscConfig+0x8f8>)
 8005264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005266:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800526a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800526e:	2102      	movs	r1, #2
 8005270:	6019      	str	r1, [r3, #0]
 8005272:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005276:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	fa93 f1a3 	rbit	r1, r3
 8005280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005284:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005288:	6019      	str	r1, [r3, #0]
  return result;
 800528a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800528e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	fab3 f383 	clz	r3, r3
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	f003 031f 	and.w	r3, r3, #31
 80052a4:	2101      	movs	r1, #1
 80052a6:	fa01 f303 	lsl.w	r3, r1, r3
 80052aa:	4013      	ands	r3, r2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d09d      	beq.n	80051ec <HAL_RCC_OscConfig+0x688>
 80052b0:	e08d      	b.n	80053ce <HAL_RCC_OscConfig+0x86a>
 80052b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052ba:	2201      	movs	r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	fa93 f2a3 	rbit	r2, r3
 80052cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052d0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80052d4:	601a      	str	r2, [r3, #0]
  return result;
 80052d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052da:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80052de:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052e0:	fab3 f383 	clz	r3, r3
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	4b5d      	ldr	r3, [pc, #372]	; (8005460 <HAL_RCC_OscConfig+0x8fc>)
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	461a      	mov	r2, r3
 80052f0:	2300      	movs	r3, #0
 80052f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f4:	f7fc ff94 	bl	8002220 <HAL_GetTick>
 80052f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052fc:	e00a      	b.n	8005314 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052fe:	f7fc ff8f 	bl	8002220 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d902      	bls.n	8005314 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	f000 bc75 	b.w	8005bfe <HAL_RCC_OscConfig+0x109a>
 8005314:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005318:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800531c:	2202      	movs	r2, #2
 800531e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005320:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005324:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	fa93 f2a3 	rbit	r2, r3
 800532e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005332:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800533c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005340:	2202      	movs	r2, #2
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005348:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	fa93 f2a3 	rbit	r2, r3
 8005352:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005360:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005364:	2202      	movs	r2, #2
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800536c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	fa93 f2a3 	rbit	r2, r3
 8005376:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800537a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800537e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005380:	4b36      	ldr	r3, [pc, #216]	; (800545c <HAL_RCC_OscConfig+0x8f8>)
 8005382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005388:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800538c:	2102      	movs	r1, #2
 800538e:	6019      	str	r1, [r3, #0]
 8005390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005394:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	fa93 f1a3 	rbit	r1, r3
 800539e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053a2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80053a6:	6019      	str	r1, [r3, #0]
  return result;
 80053a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053ac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	fab3 f383 	clz	r3, r3
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	f003 031f 	and.w	r3, r3, #31
 80053c2:	2101      	movs	r1, #1
 80053c4:	fa01 f303 	lsl.w	r3, r1, r3
 80053c8:	4013      	ands	r3, r2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d197      	bne.n	80052fe <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 81a5 	beq.w	800572e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053e4:	2300      	movs	r3, #0
 80053e6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ea:	4b1c      	ldr	r3, [pc, #112]	; (800545c <HAL_RCC_OscConfig+0x8f8>)
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d116      	bne.n	8005424 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f6:	4b19      	ldr	r3, [pc, #100]	; (800545c <HAL_RCC_OscConfig+0x8f8>)
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	4a18      	ldr	r2, [pc, #96]	; (800545c <HAL_RCC_OscConfig+0x8f8>)
 80053fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005400:	61d3      	str	r3, [r2, #28]
 8005402:	4b16      	ldr	r3, [pc, #88]	; (800545c <HAL_RCC_OscConfig+0x8f8>)
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800540a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800540e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005418:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800541c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800541e:	2301      	movs	r3, #1
 8005420:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005424:	4b0f      	ldr	r3, [pc, #60]	; (8005464 <HAL_RCC_OscConfig+0x900>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542c:	2b00      	cmp	r3, #0
 800542e:	d121      	bne.n	8005474 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <HAL_RCC_OscConfig+0x900>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a0b      	ldr	r2, [pc, #44]	; (8005464 <HAL_RCC_OscConfig+0x900>)
 8005436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800543a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800543c:	f7fc fef0 	bl	8002220 <HAL_GetTick>
 8005440:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005444:	e010      	b.n	8005468 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005446:	f7fc feeb 	bl	8002220 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b64      	cmp	r3, #100	; 0x64
 8005454:	d908      	bls.n	8005468 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e3d1      	b.n	8005bfe <HAL_RCC_OscConfig+0x109a>
 800545a:	bf00      	nop
 800545c:	40021000 	.word	0x40021000
 8005460:	10908120 	.word	0x10908120
 8005464:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005468:	4b8d      	ldr	r3, [pc, #564]	; (80056a0 <HAL_RCC_OscConfig+0xb3c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0e8      	beq.n	8005446 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005474:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005478:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d106      	bne.n	8005492 <HAL_RCC_OscConfig+0x92e>
 8005484:	4b87      	ldr	r3, [pc, #540]	; (80056a4 <HAL_RCC_OscConfig+0xb40>)
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	4a86      	ldr	r2, [pc, #536]	; (80056a4 <HAL_RCC_OscConfig+0xb40>)
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	6213      	str	r3, [r2, #32]
 8005490:	e035      	b.n	80054fe <HAL_RCC_OscConfig+0x99a>
 8005492:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005496:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10c      	bne.n	80054bc <HAL_RCC_OscConfig+0x958>
 80054a2:	4b80      	ldr	r3, [pc, #512]	; (80056a4 <HAL_RCC_OscConfig+0xb40>)
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	4a7f      	ldr	r2, [pc, #508]	; (80056a4 <HAL_RCC_OscConfig+0xb40>)
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	6213      	str	r3, [r2, #32]
 80054ae:	4b7d      	ldr	r3, [pc, #500]	; (80056a4 <HAL_RCC_OscConfig+0xb40>)
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	4a7c      	ldr	r2, [pc, #496]	; (80056a4 <HAL_RCC_OscConfig+0xb40>)
 80054b4:	f023 0304 	bic.w	r3, r3, #4
 80054b8:	6213      	str	r3, [r2, #32]
 80054ba:	e020      	b.n	80054fe <HAL_RCC_OscConfig+0x99a>
 80054bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2b05      	cmp	r3, #5
 80054ca:	d10c      	bne.n	80054e6 <HAL_RCC_OscConfig+0x982>
 80054cc:	4b75      	ldr	r3, [pc, #468]	; (80056a4 <HAL_RCC_OscConfig+0xb40>)
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	4a74      	ldr	r2, [pc, #464]	; (80056a4 <HAL_RCC_OscConfig+0xb40>)
 80054d2:	f043 0304 	orr.w	r3, r3, #4
 80054d6:	6213      	str	r3, [r2, #32]
 80054d8:	4b72      	ldr	r3, [pc, #456]	; (80056a4 <HAL_RCC_OscConfig+0xb40>)
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	4a71      	ldr	r2, [pc, #452]	; (80056a4 <HAL_RCC_OscConfig+0xb40>)
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	6213      	str	r3, [r2, #32]
 80054e4:	e00b      	b.n	80054fe <HAL_RCC_OscConfig+0x99a>
 80054e6:	4b6f      	ldr	r3, [pc, #444]	; (80056a4 <HAL_RCC_OscConfig+0xb40>)
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	4a6e      	ldr	r2, [pc, #440]	; (80056a4 <HAL_RCC_OscConfig+0xb40>)
 80054ec:	f023 0301 	bic.w	r3, r3, #1
 80054f0:	6213      	str	r3, [r2, #32]
 80054f2:	4b6c      	ldr	r3, [pc, #432]	; (80056a4 <HAL_RCC_OscConfig+0xb40>)
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	4a6b      	ldr	r2, [pc, #428]	; (80056a4 <HAL_RCC_OscConfig+0xb40>)
 80054f8:	f023 0304 	bic.w	r3, r3, #4
 80054fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005502:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 8081 	beq.w	8005612 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005510:	f7fc fe86 	bl	8002220 <HAL_GetTick>
 8005514:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005518:	e00b      	b.n	8005532 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800551a:	f7fc fe81 	bl	8002220 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	f241 3288 	movw	r2, #5000	; 0x1388
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e365      	b.n	8005bfe <HAL_RCC_OscConfig+0x109a>
 8005532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005536:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800553a:	2202      	movs	r2, #2
 800553c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005542:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	fa93 f2a3 	rbit	r2, r3
 800554c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005550:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800555a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800555e:	2202      	movs	r2, #2
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005566:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	fa93 f2a3 	rbit	r2, r3
 8005570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005574:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005578:	601a      	str	r2, [r3, #0]
  return result;
 800557a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800557e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005582:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005584:	fab3 f383 	clz	r3, r3
 8005588:	b2db      	uxtb	r3, r3
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	b2db      	uxtb	r3, r3
 800558e:	f043 0302 	orr.w	r3, r3, #2
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d102      	bne.n	800559e <HAL_RCC_OscConfig+0xa3a>
 8005598:	4b42      	ldr	r3, [pc, #264]	; (80056a4 <HAL_RCC_OscConfig+0xb40>)
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	e013      	b.n	80055c6 <HAL_RCC_OscConfig+0xa62>
 800559e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80055a6:	2202      	movs	r2, #2
 80055a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	fa93 f2a3 	rbit	r2, r3
 80055b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055bc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	4b38      	ldr	r3, [pc, #224]	; (80056a4 <HAL_RCC_OscConfig+0xb40>)
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80055ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80055ce:	2102      	movs	r1, #2
 80055d0:	6011      	str	r1, [r2, #0]
 80055d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80055d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	fa92 f1a2 	rbit	r1, r2
 80055e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80055e4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80055e8:	6011      	str	r1, [r2, #0]
  return result;
 80055ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80055ee:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80055f2:	6812      	ldr	r2, [r2, #0]
 80055f4:	fab2 f282 	clz	r2, r2
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055fe:	b2d2      	uxtb	r2, r2
 8005600:	f002 021f 	and.w	r2, r2, #31
 8005604:	2101      	movs	r1, #1
 8005606:	fa01 f202 	lsl.w	r2, r1, r2
 800560a:	4013      	ands	r3, r2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d084      	beq.n	800551a <HAL_RCC_OscConfig+0x9b6>
 8005610:	e083      	b.n	800571a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005612:	f7fc fe05 	bl	8002220 <HAL_GetTick>
 8005616:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800561a:	e00b      	b.n	8005634 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800561c:	f7fc fe00 	bl	8002220 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	f241 3288 	movw	r2, #5000	; 0x1388
 800562c:	4293      	cmp	r3, r2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e2e4      	b.n	8005bfe <HAL_RCC_OscConfig+0x109a>
 8005634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005638:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800563c:	2202      	movs	r2, #2
 800563e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005644:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	fa93 f2a3 	rbit	r2, r3
 800564e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005652:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800565c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005660:	2202      	movs	r2, #2
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005668:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	fa93 f2a3 	rbit	r2, r3
 8005672:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005676:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800567a:	601a      	str	r2, [r3, #0]
  return result;
 800567c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005680:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005684:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005686:	fab3 f383 	clz	r3, r3
 800568a:	b2db      	uxtb	r3, r3
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	b2db      	uxtb	r3, r3
 8005690:	f043 0302 	orr.w	r3, r3, #2
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d106      	bne.n	80056a8 <HAL_RCC_OscConfig+0xb44>
 800569a:	4b02      	ldr	r3, [pc, #8]	; (80056a4 <HAL_RCC_OscConfig+0xb40>)
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	e017      	b.n	80056d0 <HAL_RCC_OscConfig+0xb6c>
 80056a0:	40007000 	.word	0x40007000
 80056a4:	40021000 	.word	0x40021000
 80056a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056ac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80056b0:	2202      	movs	r2, #2
 80056b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056b8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	fa93 f2a3 	rbit	r2, r3
 80056c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056c6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	4bb3      	ldr	r3, [pc, #716]	; (800599c <HAL_RCC_OscConfig+0xe38>)
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80056d4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80056d8:	2102      	movs	r1, #2
 80056da:	6011      	str	r1, [r2, #0]
 80056dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80056e0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80056e4:	6812      	ldr	r2, [r2, #0]
 80056e6:	fa92 f1a2 	rbit	r1, r2
 80056ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80056ee:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80056f2:	6011      	str	r1, [r2, #0]
  return result;
 80056f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80056f8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80056fc:	6812      	ldr	r2, [r2, #0]
 80056fe:	fab2 f282 	clz	r2, r2
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	f002 021f 	and.w	r2, r2, #31
 800570e:	2101      	movs	r1, #1
 8005710:	fa01 f202 	lsl.w	r2, r1, r2
 8005714:	4013      	ands	r3, r2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d180      	bne.n	800561c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800571a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800571e:	2b01      	cmp	r3, #1
 8005720:	d105      	bne.n	800572e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005722:	4b9e      	ldr	r3, [pc, #632]	; (800599c <HAL_RCC_OscConfig+0xe38>)
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	4a9d      	ldr	r2, [pc, #628]	; (800599c <HAL_RCC_OscConfig+0xe38>)
 8005728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800572c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800572e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005732:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 825e 	beq.w	8005bfc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005740:	4b96      	ldr	r3, [pc, #600]	; (800599c <HAL_RCC_OscConfig+0xe38>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f003 030c 	and.w	r3, r3, #12
 8005748:	2b08      	cmp	r3, #8
 800574a:	f000 821f 	beq.w	8005b8c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800574e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005752:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	2b02      	cmp	r3, #2
 800575c:	f040 8170 	bne.w	8005a40 <HAL_RCC_OscConfig+0xedc>
 8005760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005764:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005768:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800576c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005772:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	fa93 f2a3 	rbit	r2, r3
 800577c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005780:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005784:	601a      	str	r2, [r3, #0]
  return result;
 8005786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800578a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800578e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005790:	fab3 f383 	clz	r3, r3
 8005794:	b2db      	uxtb	r3, r3
 8005796:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800579a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	461a      	mov	r2, r3
 80057a2:	2300      	movs	r3, #0
 80057a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a6:	f7fc fd3b 	bl	8002220 <HAL_GetTick>
 80057aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ae:	e009      	b.n	80057c4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057b0:	f7fc fd36 	bl	8002220 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e21c      	b.n	8005bfe <HAL_RCC_OscConfig+0x109a>
 80057c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80057cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057d6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	fa93 f2a3 	rbit	r2, r3
 80057e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057e4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80057e8:	601a      	str	r2, [r3, #0]
  return result;
 80057ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057ee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80057f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057f4:	fab3 f383 	clz	r3, r3
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	095b      	lsrs	r3, r3, #5
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	d102      	bne.n	800580e <HAL_RCC_OscConfig+0xcaa>
 8005808:	4b64      	ldr	r3, [pc, #400]	; (800599c <HAL_RCC_OscConfig+0xe38>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	e027      	b.n	800585e <HAL_RCC_OscConfig+0xcfa>
 800580e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005812:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005816:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800581a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005820:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	fa93 f2a3 	rbit	r2, r3
 800582a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800582e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005838:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800583c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005846:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	fa93 f2a3 	rbit	r2, r3
 8005850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005854:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	4b50      	ldr	r3, [pc, #320]	; (800599c <HAL_RCC_OscConfig+0xe38>)
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005862:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005866:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800586a:	6011      	str	r1, [r2, #0]
 800586c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005870:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	fa92 f1a2 	rbit	r1, r2
 800587a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800587e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005882:	6011      	str	r1, [r2, #0]
  return result;
 8005884:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005888:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800588c:	6812      	ldr	r2, [r2, #0]
 800588e:	fab2 f282 	clz	r2, r2
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	f042 0220 	orr.w	r2, r2, #32
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	f002 021f 	and.w	r2, r2, #31
 800589e:	2101      	movs	r1, #1
 80058a0:	fa01 f202 	lsl.w	r2, r1, r2
 80058a4:	4013      	ands	r3, r2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d182      	bne.n	80057b0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058aa:	4b3c      	ldr	r3, [pc, #240]	; (800599c <HAL_RCC_OscConfig+0xe38>)
 80058ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ae:	f023 020f 	bic.w	r2, r3, #15
 80058b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	4937      	ldr	r1, [pc, #220]	; (800599c <HAL_RCC_OscConfig+0xe38>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80058c4:	4b35      	ldr	r3, [pc, #212]	; (800599c <HAL_RCC_OscConfig+0xe38>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80058cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6a19      	ldr	r1, [r3, #32]
 80058d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	430b      	orrs	r3, r1
 80058e6:	492d      	ldr	r1, [pc, #180]	; (800599c <HAL_RCC_OscConfig+0xe38>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	604b      	str	r3, [r1, #4]
 80058ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058f0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80058f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058fe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	fa93 f2a3 	rbit	r2, r3
 8005908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800590c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005910:	601a      	str	r2, [r3, #0]
  return result;
 8005912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005916:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800591a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800591c:	fab3 f383 	clz	r3, r3
 8005920:	b2db      	uxtb	r3, r3
 8005922:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005926:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	461a      	mov	r2, r3
 800592e:	2301      	movs	r3, #1
 8005930:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005932:	f7fc fc75 	bl	8002220 <HAL_GetTick>
 8005936:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800593a:	e009      	b.n	8005950 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800593c:	f7fc fc70 	bl	8002220 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d901      	bls.n	8005950 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e156      	b.n	8005bfe <HAL_RCC_OscConfig+0x109a>
 8005950:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005954:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005958:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800595c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800595e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005962:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	fa93 f2a3 	rbit	r2, r3
 800596c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005970:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005974:	601a      	str	r2, [r3, #0]
  return result;
 8005976:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800597a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800597e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005980:	fab3 f383 	clz	r3, r3
 8005984:	b2db      	uxtb	r3, r3
 8005986:	095b      	lsrs	r3, r3, #5
 8005988:	b2db      	uxtb	r3, r3
 800598a:	f043 0301 	orr.w	r3, r3, #1
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b01      	cmp	r3, #1
 8005992:	d105      	bne.n	80059a0 <HAL_RCC_OscConfig+0xe3c>
 8005994:	4b01      	ldr	r3, [pc, #4]	; (800599c <HAL_RCC_OscConfig+0xe38>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	e02a      	b.n	80059f0 <HAL_RCC_OscConfig+0xe8c>
 800599a:	bf00      	nop
 800599c:	40021000 	.word	0x40021000
 80059a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059a4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80059a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059b2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	fa93 f2a3 	rbit	r2, r3
 80059bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059c0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059ca:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80059ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059d8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	fa93 f2a3 	rbit	r2, r3
 80059e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059e6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	4b86      	ldr	r3, [pc, #536]	; (8005c08 <HAL_RCC_OscConfig+0x10a4>)
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80059f4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80059f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80059fc:	6011      	str	r1, [r2, #0]
 80059fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005a02:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	fa92 f1a2 	rbit	r1, r2
 8005a0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005a10:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005a14:	6011      	str	r1, [r2, #0]
  return result;
 8005a16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005a1a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	fab2 f282 	clz	r2, r2
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	f042 0220 	orr.w	r2, r2, #32
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	f002 021f 	and.w	r2, r2, #31
 8005a30:	2101      	movs	r1, #1
 8005a32:	fa01 f202 	lsl.w	r2, r1, r2
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f43f af7f 	beq.w	800593c <HAL_RCC_OscConfig+0xdd8>
 8005a3e:	e0dd      	b.n	8005bfc <HAL_RCC_OscConfig+0x1098>
 8005a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a44:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005a48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a52:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	fa93 f2a3 	rbit	r2, r3
 8005a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a60:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005a64:	601a      	str	r2, [r3, #0]
  return result;
 8005a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a6a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005a6e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a70:	fab3 f383 	clz	r3, r3
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	461a      	mov	r2, r3
 8005a82:	2300      	movs	r3, #0
 8005a84:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a86:	f7fc fbcb 	bl	8002220 <HAL_GetTick>
 8005a8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a8e:	e009      	b.n	8005aa4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a90:	f7fc fbc6 	bl	8002220 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e0ac      	b.n	8005bfe <HAL_RCC_OscConfig+0x109a>
 8005aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005aa8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005aac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ab6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	fa93 f2a3 	rbit	r2, r3
 8005ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ac4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005ac8:	601a      	str	r2, [r3, #0]
  return result;
 8005aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ace:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005ad2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ad4:	fab3 f383 	clz	r3, r3
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	095b      	lsrs	r3, r3, #5
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	f043 0301 	orr.w	r3, r3, #1
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d102      	bne.n	8005aee <HAL_RCC_OscConfig+0xf8a>
 8005ae8:	4b47      	ldr	r3, [pc, #284]	; (8005c08 <HAL_RCC_OscConfig+0x10a4>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	e027      	b.n	8005b3e <HAL_RCC_OscConfig+0xfda>
 8005aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005af2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005af6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b00:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	fa93 f2a3 	rbit	r2, r3
 8005b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b0e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b18:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005b1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b26:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	fa93 f2a3 	rbit	r2, r3
 8005b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b34:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	4b33      	ldr	r3, [pc, #204]	; (8005c08 <HAL_RCC_OscConfig+0x10a4>)
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b42:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005b46:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005b4a:	6011      	str	r1, [r2, #0]
 8005b4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b50:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005b54:	6812      	ldr	r2, [r2, #0]
 8005b56:	fa92 f1a2 	rbit	r1, r2
 8005b5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b5e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005b62:	6011      	str	r1, [r2, #0]
  return result;
 8005b64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b68:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005b6c:	6812      	ldr	r2, [r2, #0]
 8005b6e:	fab2 f282 	clz	r2, r2
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	f042 0220 	orr.w	r2, r2, #32
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	f002 021f 	and.w	r2, r2, #31
 8005b7e:	2101      	movs	r1, #1
 8005b80:	fa01 f202 	lsl.w	r2, r1, r2
 8005b84:	4013      	ands	r3, r2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d182      	bne.n	8005a90 <HAL_RCC_OscConfig+0xf2c>
 8005b8a:	e037      	b.n	8005bfc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e02e      	b.n	8005bfe <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ba0:	4b19      	ldr	r3, [pc, #100]	; (8005c08 <HAL_RCC_OscConfig+0x10a4>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005ba8:	4b17      	ldr	r3, [pc, #92]	; (8005c08 <HAL_RCC_OscConfig+0x10a4>)
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005bb0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005bb4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d117      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005bc8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005bcc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d10b      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005be0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005be4:	f003 020f 	and.w	r2, r3, #15
 8005be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d001      	beq.n	8005bfc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e000      	b.n	8005bfe <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	40021000 	.word	0x40021000

08005c0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b09e      	sub	sp, #120	; 0x78
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e162      	b.n	8005eea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c24:	4b90      	ldr	r3, [pc, #576]	; (8005e68 <HAL_RCC_ClockConfig+0x25c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d910      	bls.n	8005c54 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c32:	4b8d      	ldr	r3, [pc, #564]	; (8005e68 <HAL_RCC_ClockConfig+0x25c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f023 0207 	bic.w	r2, r3, #7
 8005c3a:	498b      	ldr	r1, [pc, #556]	; (8005e68 <HAL_RCC_ClockConfig+0x25c>)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c42:	4b89      	ldr	r3, [pc, #548]	; (8005e68 <HAL_RCC_ClockConfig+0x25c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d001      	beq.n	8005c54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e14a      	b.n	8005eea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c60:	4b82      	ldr	r3, [pc, #520]	; (8005e6c <HAL_RCC_ClockConfig+0x260>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	497f      	ldr	r1, [pc, #508]	; (8005e6c <HAL_RCC_ClockConfig+0x260>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 80dc 	beq.w	8005e38 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d13c      	bne.n	8005d02 <HAL_RCC_ClockConfig+0xf6>
 8005c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c8c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c90:	fa93 f3a3 	rbit	r3, r3
 8005c94:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c98:	fab3 f383 	clz	r3, r3
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	f043 0301 	orr.w	r3, r3, #1
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d102      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0xa6>
 8005cac:	4b6f      	ldr	r3, [pc, #444]	; (8005e6c <HAL_RCC_ClockConfig+0x260>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	e00f      	b.n	8005cd2 <HAL_RCC_ClockConfig+0xc6>
 8005cb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cba:	fa93 f3a3 	rbit	r3, r3
 8005cbe:	667b      	str	r3, [r7, #100]	; 0x64
 8005cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cc4:	663b      	str	r3, [r7, #96]	; 0x60
 8005cc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cc8:	fa93 f3a3 	rbit	r3, r3
 8005ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cce:	4b67      	ldr	r3, [pc, #412]	; (8005e6c <HAL_RCC_ClockConfig+0x260>)
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005cd6:	65ba      	str	r2, [r7, #88]	; 0x58
 8005cd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cda:	fa92 f2a2 	rbit	r2, r2
 8005cde:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005ce0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ce2:	fab2 f282 	clz	r2, r2
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	f042 0220 	orr.w	r2, r2, #32
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	f002 021f 	and.w	r2, r2, #31
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d17b      	bne.n	8005df6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e0f3      	b.n	8005eea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d13c      	bne.n	8005d84 <HAL_RCC_ClockConfig+0x178>
 8005d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d12:	fa93 f3a3 	rbit	r3, r3
 8005d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d1a:	fab3 f383 	clz	r3, r3
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	095b      	lsrs	r3, r3, #5
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f043 0301 	orr.w	r3, r3, #1
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d102      	bne.n	8005d34 <HAL_RCC_ClockConfig+0x128>
 8005d2e:	4b4f      	ldr	r3, [pc, #316]	; (8005e6c <HAL_RCC_ClockConfig+0x260>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	e00f      	b.n	8005d54 <HAL_RCC_ClockConfig+0x148>
 8005d34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d3c:	fa93 f3a3 	rbit	r3, r3
 8005d40:	647b      	str	r3, [r7, #68]	; 0x44
 8005d42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d46:	643b      	str	r3, [r7, #64]	; 0x40
 8005d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d4a:	fa93 f3a3 	rbit	r3, r3
 8005d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d50:	4b46      	ldr	r3, [pc, #280]	; (8005e6c <HAL_RCC_ClockConfig+0x260>)
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d58:	63ba      	str	r2, [r7, #56]	; 0x38
 8005d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d5c:	fa92 f2a2 	rbit	r2, r2
 8005d60:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d64:	fab2 f282 	clz	r2, r2
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	f042 0220 	orr.w	r2, r2, #32
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	f002 021f 	and.w	r2, r2, #31
 8005d74:	2101      	movs	r1, #1
 8005d76:	fa01 f202 	lsl.w	r2, r1, r2
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d13a      	bne.n	8005df6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0b2      	b.n	8005eea <HAL_RCC_ClockConfig+0x2de>
 8005d84:	2302      	movs	r3, #2
 8005d86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8a:	fa93 f3a3 	rbit	r3, r3
 8005d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d92:	fab3 f383 	clz	r3, r3
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	095b      	lsrs	r3, r3, #5
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	f043 0301 	orr.w	r3, r3, #1
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d102      	bne.n	8005dac <HAL_RCC_ClockConfig+0x1a0>
 8005da6:	4b31      	ldr	r3, [pc, #196]	; (8005e6c <HAL_RCC_ClockConfig+0x260>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	e00d      	b.n	8005dc8 <HAL_RCC_ClockConfig+0x1bc>
 8005dac:	2302      	movs	r3, #2
 8005dae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db2:	fa93 f3a3 	rbit	r3, r3
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
 8005db8:	2302      	movs	r3, #2
 8005dba:	623b      	str	r3, [r7, #32]
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	fa93 f3a3 	rbit	r3, r3
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	4b29      	ldr	r3, [pc, #164]	; (8005e6c <HAL_RCC_ClockConfig+0x260>)
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2202      	movs	r2, #2
 8005dca:	61ba      	str	r2, [r7, #24]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	fa92 f2a2 	rbit	r2, r2
 8005dd2:	617a      	str	r2, [r7, #20]
  return result;
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	fab2 f282 	clz	r2, r2
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	f042 0220 	orr.w	r2, r2, #32
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	f002 021f 	and.w	r2, r2, #31
 8005de6:	2101      	movs	r1, #1
 8005de8:	fa01 f202 	lsl.w	r2, r1, r2
 8005dec:	4013      	ands	r3, r2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e079      	b.n	8005eea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005df6:	4b1d      	ldr	r3, [pc, #116]	; (8005e6c <HAL_RCC_ClockConfig+0x260>)
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f023 0203 	bic.w	r2, r3, #3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	491a      	ldr	r1, [pc, #104]	; (8005e6c <HAL_RCC_ClockConfig+0x260>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e08:	f7fc fa0a 	bl	8002220 <HAL_GetTick>
 8005e0c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e0e:	e00a      	b.n	8005e26 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e10:	f7fc fa06 	bl	8002220 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e061      	b.n	8005eea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e26:	4b11      	ldr	r3, [pc, #68]	; (8005e6c <HAL_RCC_ClockConfig+0x260>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f003 020c 	and.w	r2, r3, #12
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d1eb      	bne.n	8005e10 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e38:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <HAL_RCC_ClockConfig+0x25c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0307 	and.w	r3, r3, #7
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d214      	bcs.n	8005e70 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e46:	4b08      	ldr	r3, [pc, #32]	; (8005e68 <HAL_RCC_ClockConfig+0x25c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f023 0207 	bic.w	r2, r3, #7
 8005e4e:	4906      	ldr	r1, [pc, #24]	; (8005e68 <HAL_RCC_ClockConfig+0x25c>)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e56:	4b04      	ldr	r3, [pc, #16]	; (8005e68 <HAL_RCC_ClockConfig+0x25c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d005      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e040      	b.n	8005eea <HAL_RCC_ClockConfig+0x2de>
 8005e68:	40022000 	.word	0x40022000
 8005e6c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d008      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e7c:	4b1d      	ldr	r3, [pc, #116]	; (8005ef4 <HAL_RCC_ClockConfig+0x2e8>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	491a      	ldr	r1, [pc, #104]	; (8005ef4 <HAL_RCC_ClockConfig+0x2e8>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d009      	beq.n	8005eae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e9a:	4b16      	ldr	r3, [pc, #88]	; (8005ef4 <HAL_RCC_ClockConfig+0x2e8>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	4912      	ldr	r1, [pc, #72]	; (8005ef4 <HAL_RCC_ClockConfig+0x2e8>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005eae:	f000 f829 	bl	8005f04 <HAL_RCC_GetSysClockFreq>
 8005eb2:	4601      	mov	r1, r0
 8005eb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <HAL_RCC_ClockConfig+0x2e8>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ebc:	22f0      	movs	r2, #240	; 0xf0
 8005ebe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	fa92 f2a2 	rbit	r2, r2
 8005ec6:	60fa      	str	r2, [r7, #12]
  return result;
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	fab2 f282 	clz	r2, r2
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	40d3      	lsrs	r3, r2
 8005ed2:	4a09      	ldr	r2, [pc, #36]	; (8005ef8 <HAL_RCC_ClockConfig+0x2ec>)
 8005ed4:	5cd3      	ldrb	r3, [r2, r3]
 8005ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8005eda:	4a08      	ldr	r2, [pc, #32]	; (8005efc <HAL_RCC_ClockConfig+0x2f0>)
 8005edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005ede:	4b08      	ldr	r3, [pc, #32]	; (8005f00 <HAL_RCC_ClockConfig+0x2f4>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fc f958 	bl	8002198 <HAL_InitTick>
  
  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3778      	adds	r7, #120	; 0x78
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	0800bd70 	.word	0x0800bd70
 8005efc:	20000000 	.word	0x20000000
 8005f00:	20000004 	.word	0x20000004

08005f04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b08b      	sub	sp, #44	; 0x2c
 8005f08:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61fb      	str	r3, [r7, #28]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	61bb      	str	r3, [r7, #24]
 8005f12:	2300      	movs	r3, #0
 8005f14:	627b      	str	r3, [r7, #36]	; 0x24
 8005f16:	2300      	movs	r3, #0
 8005f18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005f1e:	4b2a      	ldr	r3, [pc, #168]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f003 030c 	and.w	r3, r3, #12
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d002      	beq.n	8005f34 <HAL_RCC_GetSysClockFreq+0x30>
 8005f2e:	2b08      	cmp	r3, #8
 8005f30:	d003      	beq.n	8005f3a <HAL_RCC_GetSysClockFreq+0x36>
 8005f32:	e03f      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f34:	4b25      	ldr	r3, [pc, #148]	; (8005fcc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005f36:	623b      	str	r3, [r7, #32]
      break;
 8005f38:	e03f      	b.n	8005fba <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005f40:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005f44:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	fa92 f2a2 	rbit	r2, r2
 8005f4c:	607a      	str	r2, [r7, #4]
  return result;
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	fab2 f282 	clz	r2, r2
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	40d3      	lsrs	r3, r2
 8005f58:	4a1d      	ldr	r2, [pc, #116]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005f5a:	5cd3      	ldrb	r3, [r2, r3]
 8005f5c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005f5e:	4b1a      	ldr	r3, [pc, #104]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	220f      	movs	r2, #15
 8005f68:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	fa92 f2a2 	rbit	r2, r2
 8005f70:	60fa      	str	r2, [r7, #12]
  return result;
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	fab2 f282 	clz	r2, r2
 8005f78:	b2d2      	uxtb	r2, r2
 8005f7a:	40d3      	lsrs	r3, r2
 8005f7c:	4a15      	ldr	r2, [pc, #84]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005f7e:	5cd3      	ldrb	r3, [r2, r3]
 8005f80:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d008      	beq.n	8005f9e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005f8c:	4a0f      	ldr	r2, [pc, #60]	; (8005fcc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	fb02 f303 	mul.w	r3, r2, r3
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9c:	e007      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005f9e:	4a0b      	ldr	r2, [pc, #44]	; (8005fcc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	fb02 f303 	mul.w	r3, r2, r3
 8005fac:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	623b      	str	r3, [r7, #32]
      break;
 8005fb2:	e002      	b.n	8005fba <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005fb4:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005fb6:	623b      	str	r3, [r7, #32]
      break;
 8005fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fba:	6a3b      	ldr	r3, [r7, #32]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	372c      	adds	r7, #44	; 0x2c
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	007a1200 	.word	0x007a1200
 8005fd0:	0800bd88 	.word	0x0800bd88
 8005fd4:	0800bd98 	.word	0x0800bd98

08005fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fdc:	4b03      	ldr	r3, [pc, #12]	; (8005fec <HAL_RCC_GetHCLKFreq+0x14>)
 8005fde:	681b      	ldr	r3, [r3, #0]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	20000000 	.word	0x20000000

08005ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005ff6:	f7ff ffef 	bl	8005fd8 <HAL_RCC_GetHCLKFreq>
 8005ffa:	4601      	mov	r1, r0
 8005ffc:	4b0b      	ldr	r3, [pc, #44]	; (800602c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006004:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006008:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	fa92 f2a2 	rbit	r2, r2
 8006010:	603a      	str	r2, [r7, #0]
  return result;
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	fab2 f282 	clz	r2, r2
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	40d3      	lsrs	r3, r2
 800601c:	4a04      	ldr	r2, [pc, #16]	; (8006030 <HAL_RCC_GetPCLK1Freq+0x40>)
 800601e:	5cd3      	ldrb	r3, [r2, r3]
 8006020:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40021000 	.word	0x40021000
 8006030:	0800bd80 	.word	0x0800bd80

08006034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800603a:	f7ff ffcd 	bl	8005fd8 <HAL_RCC_GetHCLKFreq>
 800603e:	4601      	mov	r1, r0
 8006040:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006048:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800604c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	fa92 f2a2 	rbit	r2, r2
 8006054:	603a      	str	r2, [r7, #0]
  return result;
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	fab2 f282 	clz	r2, r2
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	40d3      	lsrs	r3, r2
 8006060:	4a04      	ldr	r2, [pc, #16]	; (8006074 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006062:	5cd3      	ldrb	r3, [r2, r3]
 8006064:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40021000 	.word	0x40021000
 8006074:	0800bd80 	.word	0x0800bd80

08006078 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b092      	sub	sp, #72	; 0x48
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006088:	2300      	movs	r3, #0
 800608a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 80d4 	beq.w	8006244 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800609c:	4b4e      	ldr	r3, [pc, #312]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10e      	bne.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060a8:	4b4b      	ldr	r3, [pc, #300]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	4a4a      	ldr	r2, [pc, #296]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060b2:	61d3      	str	r3, [r2, #28]
 80060b4:	4b48      	ldr	r3, [pc, #288]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060bc:	60bb      	str	r3, [r7, #8]
 80060be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060c0:	2301      	movs	r3, #1
 80060c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060c6:	4b45      	ldr	r3, [pc, #276]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d118      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060d2:	4b42      	ldr	r3, [pc, #264]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a41      	ldr	r2, [pc, #260]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060de:	f7fc f89f 	bl	8002220 <HAL_GetTick>
 80060e2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e4:	e008      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060e6:	f7fc f89b 	bl	8002220 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	2b64      	cmp	r3, #100	; 0x64
 80060f2:	d901      	bls.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e1d6      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f8:	4b38      	ldr	r3, [pc, #224]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0f0      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006104:	4b34      	ldr	r3, [pc, #208]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800610c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800610e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8084 	beq.w	800621e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800611e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006120:	429a      	cmp	r2, r3
 8006122:	d07c      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006124:	4b2c      	ldr	r3, [pc, #176]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800612c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800612e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006132:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006136:	fa93 f3a3 	rbit	r3, r3
 800613a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800613e:	fab3 f383 	clz	r3, r3
 8006142:	b2db      	uxtb	r3, r3
 8006144:	461a      	mov	r2, r3
 8006146:	4b26      	ldr	r3, [pc, #152]	; (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	461a      	mov	r2, r3
 800614e:	2301      	movs	r3, #1
 8006150:	6013      	str	r3, [r2, #0]
 8006152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006156:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615a:	fa93 f3a3 	rbit	r3, r3
 800615e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006162:	fab3 f383 	clz	r3, r3
 8006166:	b2db      	uxtb	r3, r3
 8006168:	461a      	mov	r2, r3
 800616a:	4b1d      	ldr	r3, [pc, #116]	; (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	461a      	mov	r2, r3
 8006172:	2300      	movs	r3, #0
 8006174:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006176:	4a18      	ldr	r2, [pc, #96]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800617c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d04b      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006186:	f7fc f84b 	bl	8002220 <HAL_GetTick>
 800618a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800618c:	e00a      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800618e:	f7fc f847 	bl	8002220 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	f241 3288 	movw	r2, #5000	; 0x1388
 800619c:	4293      	cmp	r3, r2
 800619e:	d901      	bls.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e180      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80061a4:	2302      	movs	r3, #2
 80061a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061aa:	fa93 f3a3 	rbit	r3, r3
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
 80061b0:	2302      	movs	r3, #2
 80061b2:	623b      	str	r3, [r7, #32]
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	fa93 f3a3 	rbit	r3, r3
 80061ba:	61fb      	str	r3, [r7, #28]
  return result;
 80061bc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061be:	fab3 f383 	clz	r3, r3
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	095b      	lsrs	r3, r3, #5
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	f043 0302 	orr.w	r3, r3, #2
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d108      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80061d2:	4b01      	ldr	r3, [pc, #4]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	e00d      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80061d8:	40021000 	.word	0x40021000
 80061dc:	40007000 	.word	0x40007000
 80061e0:	10908100 	.word	0x10908100
 80061e4:	2302      	movs	r3, #2
 80061e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	fa93 f3a3 	rbit	r3, r3
 80061ee:	617b      	str	r3, [r7, #20]
 80061f0:	4b9a      	ldr	r3, [pc, #616]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	2202      	movs	r2, #2
 80061f6:	613a      	str	r2, [r7, #16]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	fa92 f2a2 	rbit	r2, r2
 80061fe:	60fa      	str	r2, [r7, #12]
  return result;
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	fab2 f282 	clz	r2, r2
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	f002 021f 	and.w	r2, r2, #31
 8006212:	2101      	movs	r1, #1
 8006214:	fa01 f202 	lsl.w	r2, r1, r2
 8006218:	4013      	ands	r3, r2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d0b7      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800621e:	4b8f      	ldr	r3, [pc, #572]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	498c      	ldr	r1, [pc, #560]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800622c:	4313      	orrs	r3, r2
 800622e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006230:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006234:	2b01      	cmp	r3, #1
 8006236:	d105      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006238:	4b88      	ldr	r3, [pc, #544]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	4a87      	ldr	r2, [pc, #540]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800623e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006242:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d008      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006250:	4b82      	ldr	r3, [pc, #520]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006254:	f023 0203 	bic.w	r2, r3, #3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	497f      	ldr	r1, [pc, #508]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800625e:	4313      	orrs	r3, r2
 8006260:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d008      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800626e:	4b7b      	ldr	r3, [pc, #492]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006272:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	4978      	ldr	r1, [pc, #480]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800627c:	4313      	orrs	r3, r2
 800627e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800628c:	4b73      	ldr	r3, [pc, #460]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800628e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006290:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	4970      	ldr	r1, [pc, #448]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800629a:	4313      	orrs	r3, r2
 800629c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d008      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062aa:	4b6c      	ldr	r3, [pc, #432]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	f023 0210 	bic.w	r2, r3, #16
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	4969      	ldr	r1, [pc, #420]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d008      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80062c8:	4b64      	ldr	r3, [pc, #400]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d4:	4961      	ldr	r1, [pc, #388]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d008      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062e6:	4b5d      	ldr	r3, [pc, #372]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ea:	f023 0220 	bic.w	r2, r3, #32
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	495a      	ldr	r1, [pc, #360]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d008      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006304:	4b55      	ldr	r3, [pc, #340]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006308:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	4952      	ldr	r1, [pc, #328]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006312:	4313      	orrs	r3, r2
 8006314:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0308 	and.w	r3, r3, #8
 800631e:	2b00      	cmp	r3, #0
 8006320:	d008      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006322:	4b4e      	ldr	r3, [pc, #312]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006326:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	494b      	ldr	r1, [pc, #300]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006330:	4313      	orrs	r3, r2
 8006332:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0310 	and.w	r3, r3, #16
 800633c:	2b00      	cmp	r3, #0
 800633e:	d008      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006340:	4b46      	ldr	r3, [pc, #280]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006344:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	4943      	ldr	r1, [pc, #268]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800634e:	4313      	orrs	r3, r2
 8006350:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800635a:	2b00      	cmp	r3, #0
 800635c:	d008      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800635e:	4b3f      	ldr	r3, [pc, #252]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	493c      	ldr	r1, [pc, #240]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800636c:	4313      	orrs	r3, r2
 800636e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006378:	2b00      	cmp	r3, #0
 800637a:	d008      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800637c:	4b37      	ldr	r3, [pc, #220]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800637e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006380:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006388:	4934      	ldr	r1, [pc, #208]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800638a:	4313      	orrs	r3, r2
 800638c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006396:	2b00      	cmp	r3, #0
 8006398:	d008      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800639a:	4b30      	ldr	r3, [pc, #192]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a6:	492d      	ldr	r1, [pc, #180]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d008      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80063b8:	4b28      	ldr	r3, [pc, #160]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c4:	4925      	ldr	r1, [pc, #148]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d008      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80063d6:	4b21      	ldr	r3, [pc, #132]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063da:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	491e      	ldr	r1, [pc, #120]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d008      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80063f4:	4b19      	ldr	r3, [pc, #100]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	4916      	ldr	r1, [pc, #88]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006402:	4313      	orrs	r3, r2
 8006404:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d008      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006412:	4b12      	ldr	r3, [pc, #72]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006416:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641e:	490f      	ldr	r1, [pc, #60]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006420:	4313      	orrs	r3, r2
 8006422:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d008      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006430:	4b0a      	ldr	r3, [pc, #40]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006434:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643c:	4907      	ldr	r1, [pc, #28]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800643e:	4313      	orrs	r3, r2
 8006440:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00c      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800644e:	4b03      	ldr	r3, [pc, #12]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006452:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	e002      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800645a:	bf00      	nop
 800645c:	40021000 	.word	0x40021000
 8006460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006462:	4913      	ldr	r1, [pc, #76]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006464:	4313      	orrs	r3, r2
 8006466:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d008      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006474:	4b0e      	ldr	r3, [pc, #56]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006478:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006480:	490b      	ldr	r1, [pc, #44]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006482:	4313      	orrs	r3, r2
 8006484:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d008      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006492:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006496:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649e:	4904      	ldr	r1, [pc, #16]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3748      	adds	r7, #72	; 0x48
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	40021000 	.word	0x40021000

080064b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e049      	b.n	800655a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fb fbf2 	bl	8001cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3304      	adds	r3, #4
 80064f0:	4619      	mov	r1, r3
 80064f2:	4610      	mov	r0, r2
 80064f4:	f000 fd44 	bl	8006f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
	...

08006564 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b01      	cmp	r3, #1
 8006576:	d001      	beq.n	800657c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e04f      	b.n	800661c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0201 	orr.w	r2, r2, #1
 8006592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a23      	ldr	r2, [pc, #140]	; (8006628 <HAL_TIM_Base_Start_IT+0xc4>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d01d      	beq.n	80065da <HAL_TIM_Base_Start_IT+0x76>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a6:	d018      	beq.n	80065da <HAL_TIM_Base_Start_IT+0x76>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a1f      	ldr	r2, [pc, #124]	; (800662c <HAL_TIM_Base_Start_IT+0xc8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d013      	beq.n	80065da <HAL_TIM_Base_Start_IT+0x76>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1e      	ldr	r2, [pc, #120]	; (8006630 <HAL_TIM_Base_Start_IT+0xcc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00e      	beq.n	80065da <HAL_TIM_Base_Start_IT+0x76>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a1c      	ldr	r2, [pc, #112]	; (8006634 <HAL_TIM_Base_Start_IT+0xd0>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d009      	beq.n	80065da <HAL_TIM_Base_Start_IT+0x76>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a1b      	ldr	r2, [pc, #108]	; (8006638 <HAL_TIM_Base_Start_IT+0xd4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d004      	beq.n	80065da <HAL_TIM_Base_Start_IT+0x76>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a19      	ldr	r2, [pc, #100]	; (800663c <HAL_TIM_Base_Start_IT+0xd8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d115      	bne.n	8006606 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	4b17      	ldr	r3, [pc, #92]	; (8006640 <HAL_TIM_Base_Start_IT+0xdc>)
 80065e2:	4013      	ands	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b06      	cmp	r3, #6
 80065ea:	d015      	beq.n	8006618 <HAL_TIM_Base_Start_IT+0xb4>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f2:	d011      	beq.n	8006618 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0201 	orr.w	r2, r2, #1
 8006602:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006604:	e008      	b.n	8006618 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f042 0201 	orr.w	r2, r2, #1
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	e000      	b.n	800661a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006618:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	40012c00 	.word	0x40012c00
 800662c:	40000400 	.word	0x40000400
 8006630:	40000800 	.word	0x40000800
 8006634:	40013400 	.word	0x40013400
 8006638:	40014000 	.word	0x40014000
 800663c:	40015000 	.word	0x40015000
 8006640:	00010007 	.word	0x00010007

08006644 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e049      	b.n	80066ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d106      	bne.n	8006670 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f841 	bl	80066f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3304      	adds	r3, #4
 8006680:	4619      	mov	r1, r3
 8006682:	4610      	mov	r0, r2
 8006684:	f000 fc7c 	bl	8006f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066fa:	bf00      	nop
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
	...

08006708 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d109      	bne.n	800672c <HAL_TIM_PWM_Start+0x24>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b01      	cmp	r3, #1
 8006722:	bf14      	ite	ne
 8006724:	2301      	movne	r3, #1
 8006726:	2300      	moveq	r3, #0
 8006728:	b2db      	uxtb	r3, r3
 800672a:	e03c      	b.n	80067a6 <HAL_TIM_PWM_Start+0x9e>
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2b04      	cmp	r3, #4
 8006730:	d109      	bne.n	8006746 <HAL_TIM_PWM_Start+0x3e>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b01      	cmp	r3, #1
 800673c:	bf14      	ite	ne
 800673e:	2301      	movne	r3, #1
 8006740:	2300      	moveq	r3, #0
 8006742:	b2db      	uxtb	r3, r3
 8006744:	e02f      	b.n	80067a6 <HAL_TIM_PWM_Start+0x9e>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b08      	cmp	r3, #8
 800674a:	d109      	bne.n	8006760 <HAL_TIM_PWM_Start+0x58>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b01      	cmp	r3, #1
 8006756:	bf14      	ite	ne
 8006758:	2301      	movne	r3, #1
 800675a:	2300      	moveq	r3, #0
 800675c:	b2db      	uxtb	r3, r3
 800675e:	e022      	b.n	80067a6 <HAL_TIM_PWM_Start+0x9e>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b0c      	cmp	r3, #12
 8006764:	d109      	bne.n	800677a <HAL_TIM_PWM_Start+0x72>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b01      	cmp	r3, #1
 8006770:	bf14      	ite	ne
 8006772:	2301      	movne	r3, #1
 8006774:	2300      	moveq	r3, #0
 8006776:	b2db      	uxtb	r3, r3
 8006778:	e015      	b.n	80067a6 <HAL_TIM_PWM_Start+0x9e>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b10      	cmp	r3, #16
 800677e:	d109      	bne.n	8006794 <HAL_TIM_PWM_Start+0x8c>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b01      	cmp	r3, #1
 800678a:	bf14      	ite	ne
 800678c:	2301      	movne	r3, #1
 800678e:	2300      	moveq	r3, #0
 8006790:	b2db      	uxtb	r3, r3
 8006792:	e008      	b.n	80067a6 <HAL_TIM_PWM_Start+0x9e>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b01      	cmp	r3, #1
 800679e:	bf14      	ite	ne
 80067a0:	2301      	movne	r3, #1
 80067a2:	2300      	moveq	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e0a1      	b.n	80068f2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d104      	bne.n	80067be <HAL_TIM_PWM_Start+0xb6>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067bc:	e023      	b.n	8006806 <HAL_TIM_PWM_Start+0xfe>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d104      	bne.n	80067ce <HAL_TIM_PWM_Start+0xc6>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067cc:	e01b      	b.n	8006806 <HAL_TIM_PWM_Start+0xfe>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d104      	bne.n	80067de <HAL_TIM_PWM_Start+0xd6>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067dc:	e013      	b.n	8006806 <HAL_TIM_PWM_Start+0xfe>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b0c      	cmp	r3, #12
 80067e2:	d104      	bne.n	80067ee <HAL_TIM_PWM_Start+0xe6>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067ec:	e00b      	b.n	8006806 <HAL_TIM_PWM_Start+0xfe>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b10      	cmp	r3, #16
 80067f2:	d104      	bne.n	80067fe <HAL_TIM_PWM_Start+0xf6>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067fc:	e003      	b.n	8006806 <HAL_TIM_PWM_Start+0xfe>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2202      	movs	r2, #2
 8006802:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2201      	movs	r2, #1
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f000 fff4 	bl	80077fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a38      	ldr	r2, [pc, #224]	; (80068fc <HAL_TIM_PWM_Start+0x1f4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d018      	beq.n	8006850 <HAL_TIM_PWM_Start+0x148>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a37      	ldr	r2, [pc, #220]	; (8006900 <HAL_TIM_PWM_Start+0x1f8>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d013      	beq.n	8006850 <HAL_TIM_PWM_Start+0x148>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a35      	ldr	r2, [pc, #212]	; (8006904 <HAL_TIM_PWM_Start+0x1fc>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00e      	beq.n	8006850 <HAL_TIM_PWM_Start+0x148>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a34      	ldr	r2, [pc, #208]	; (8006908 <HAL_TIM_PWM_Start+0x200>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d009      	beq.n	8006850 <HAL_TIM_PWM_Start+0x148>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a32      	ldr	r2, [pc, #200]	; (800690c <HAL_TIM_PWM_Start+0x204>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d004      	beq.n	8006850 <HAL_TIM_PWM_Start+0x148>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a31      	ldr	r2, [pc, #196]	; (8006910 <HAL_TIM_PWM_Start+0x208>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d101      	bne.n	8006854 <HAL_TIM_PWM_Start+0x14c>
 8006850:	2301      	movs	r3, #1
 8006852:	e000      	b.n	8006856 <HAL_TIM_PWM_Start+0x14e>
 8006854:	2300      	movs	r3, #0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d007      	beq.n	800686a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006868:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a23      	ldr	r2, [pc, #140]	; (80068fc <HAL_TIM_PWM_Start+0x1f4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d01d      	beq.n	80068b0 <HAL_TIM_PWM_Start+0x1a8>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800687c:	d018      	beq.n	80068b0 <HAL_TIM_PWM_Start+0x1a8>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a24      	ldr	r2, [pc, #144]	; (8006914 <HAL_TIM_PWM_Start+0x20c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d013      	beq.n	80068b0 <HAL_TIM_PWM_Start+0x1a8>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a22      	ldr	r2, [pc, #136]	; (8006918 <HAL_TIM_PWM_Start+0x210>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00e      	beq.n	80068b0 <HAL_TIM_PWM_Start+0x1a8>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a1a      	ldr	r2, [pc, #104]	; (8006900 <HAL_TIM_PWM_Start+0x1f8>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d009      	beq.n	80068b0 <HAL_TIM_PWM_Start+0x1a8>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a18      	ldr	r2, [pc, #96]	; (8006904 <HAL_TIM_PWM_Start+0x1fc>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d004      	beq.n	80068b0 <HAL_TIM_PWM_Start+0x1a8>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a19      	ldr	r2, [pc, #100]	; (8006910 <HAL_TIM_PWM_Start+0x208>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d115      	bne.n	80068dc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	4b19      	ldr	r3, [pc, #100]	; (800691c <HAL_TIM_PWM_Start+0x214>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b06      	cmp	r3, #6
 80068c0:	d015      	beq.n	80068ee <HAL_TIM_PWM_Start+0x1e6>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c8:	d011      	beq.n	80068ee <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f042 0201 	orr.w	r2, r2, #1
 80068d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068da:	e008      	b.n	80068ee <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	e000      	b.n	80068f0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	40012c00 	.word	0x40012c00
 8006900:	40013400 	.word	0x40013400
 8006904:	40014000 	.word	0x40014000
 8006908:	40014400 	.word	0x40014400
 800690c:	40014800 	.word	0x40014800
 8006910:	40015000 	.word	0x40015000
 8006914:	40000400 	.word	0x40000400
 8006918:	40000800 	.word	0x40000800
 800691c:	00010007 	.word	0x00010007

08006920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b02      	cmp	r3, #2
 8006934:	d122      	bne.n	800697c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b02      	cmp	r3, #2
 8006942:	d11b      	bne.n	800697c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0202 	mvn.w	r2, #2
 800694c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 faed 	bl	8006f42 <HAL_TIM_IC_CaptureCallback>
 8006968:	e005      	b.n	8006976 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fadf 	bl	8006f2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 faf0 	bl	8006f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	2b04      	cmp	r3, #4
 8006988:	d122      	bne.n	80069d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b04      	cmp	r3, #4
 8006996:	d11b      	bne.n	80069d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0204 	mvn.w	r2, #4
 80069a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2202      	movs	r2, #2
 80069a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fac3 	bl	8006f42 <HAL_TIM_IC_CaptureCallback>
 80069bc:	e005      	b.n	80069ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fab5 	bl	8006f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fac6 	bl	8006f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0308 	and.w	r3, r3, #8
 80069da:	2b08      	cmp	r3, #8
 80069dc:	d122      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f003 0308 	and.w	r3, r3, #8
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d11b      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f06f 0208 	mvn.w	r2, #8
 80069f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2204      	movs	r2, #4
 80069fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	f003 0303 	and.w	r3, r3, #3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fa99 	bl	8006f42 <HAL_TIM_IC_CaptureCallback>
 8006a10:	e005      	b.n	8006a1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fa8b 	bl	8006f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fa9c 	bl	8006f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f003 0310 	and.w	r3, r3, #16
 8006a2e:	2b10      	cmp	r3, #16
 8006a30:	d122      	bne.n	8006a78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f003 0310 	and.w	r3, r3, #16
 8006a3c:	2b10      	cmp	r3, #16
 8006a3e:	d11b      	bne.n	8006a78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0210 	mvn.w	r2, #16
 8006a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa6f 	bl	8006f42 <HAL_TIM_IC_CaptureCallback>
 8006a64:	e005      	b.n	8006a72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fa61 	bl	8006f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fa72 	bl	8006f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d10e      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d107      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f06f 0201 	mvn.w	r2, #1
 8006a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fa3b 	bl	8006f1a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aae:	2b80      	cmp	r3, #128	; 0x80
 8006ab0:	d10e      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006abc:	2b80      	cmp	r3, #128	; 0x80
 8006abe:	d107      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 ff52 	bl	8007974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ade:	d10e      	bne.n	8006afe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aea:	2b80      	cmp	r3, #128	; 0x80
 8006aec:	d107      	bne.n	8006afe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 ff45 	bl	8007988 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b08:	2b40      	cmp	r3, #64	; 0x40
 8006b0a:	d10e      	bne.n	8006b2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	d107      	bne.n	8006b2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fa20 	bl	8006f6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d10e      	bne.n	8006b56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d107      	bne.n	8006b56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f06f 0220 	mvn.w	r2, #32
 8006b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 ff05 	bl	8007960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d101      	bne.n	8006b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e0ff      	b.n	8006d7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b14      	cmp	r3, #20
 8006b8a:	f200 80f0 	bhi.w	8006d6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b8e:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b94:	08006be9 	.word	0x08006be9
 8006b98:	08006d6f 	.word	0x08006d6f
 8006b9c:	08006d6f 	.word	0x08006d6f
 8006ba0:	08006d6f 	.word	0x08006d6f
 8006ba4:	08006c29 	.word	0x08006c29
 8006ba8:	08006d6f 	.word	0x08006d6f
 8006bac:	08006d6f 	.word	0x08006d6f
 8006bb0:	08006d6f 	.word	0x08006d6f
 8006bb4:	08006c6b 	.word	0x08006c6b
 8006bb8:	08006d6f 	.word	0x08006d6f
 8006bbc:	08006d6f 	.word	0x08006d6f
 8006bc0:	08006d6f 	.word	0x08006d6f
 8006bc4:	08006cab 	.word	0x08006cab
 8006bc8:	08006d6f 	.word	0x08006d6f
 8006bcc:	08006d6f 	.word	0x08006d6f
 8006bd0:	08006d6f 	.word	0x08006d6f
 8006bd4:	08006ced 	.word	0x08006ced
 8006bd8:	08006d6f 	.word	0x08006d6f
 8006bdc:	08006d6f 	.word	0x08006d6f
 8006be0:	08006d6f 	.word	0x08006d6f
 8006be4:	08006d2d 	.word	0x08006d2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68b9      	ldr	r1, [r7, #8]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fa64 	bl	80070bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699a      	ldr	r2, [r3, #24]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f042 0208 	orr.w	r2, r2, #8
 8006c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699a      	ldr	r2, [r3, #24]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 0204 	bic.w	r2, r2, #4
 8006c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6999      	ldr	r1, [r3, #24]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	691a      	ldr	r2, [r3, #16]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	619a      	str	r2, [r3, #24]
      break;
 8006c26:	e0a5      	b.n	8006d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68b9      	ldr	r1, [r7, #8]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fade 	bl	80071f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699a      	ldr	r2, [r3, #24]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699a      	ldr	r2, [r3, #24]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6999      	ldr	r1, [r3, #24]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	021a      	lsls	r2, r3, #8
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	619a      	str	r2, [r3, #24]
      break;
 8006c68:	e084      	b.n	8006d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68b9      	ldr	r1, [r7, #8]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 fb51 	bl	8007318 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69da      	ldr	r2, [r3, #28]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f042 0208 	orr.w	r2, r2, #8
 8006c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	69da      	ldr	r2, [r3, #28]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 0204 	bic.w	r2, r2, #4
 8006c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69d9      	ldr	r1, [r3, #28]
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	691a      	ldr	r2, [r3, #16]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	61da      	str	r2, [r3, #28]
      break;
 8006ca8:	e064      	b.n	8006d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68b9      	ldr	r1, [r7, #8]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fbc3 	bl	800743c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69da      	ldr	r2, [r3, #28]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69da      	ldr	r2, [r3, #28]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69d9      	ldr	r1, [r3, #28]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	021a      	lsls	r2, r3, #8
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	61da      	str	r2, [r3, #28]
      break;
 8006cea:	e043      	b.n	8006d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68b9      	ldr	r1, [r7, #8]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 fc12 	bl	800751c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0208 	orr.w	r2, r2, #8
 8006d06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 0204 	bic.w	r2, r2, #4
 8006d16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	691a      	ldr	r2, [r3, #16]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d2a:	e023      	b.n	8006d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68b9      	ldr	r1, [r7, #8]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 fc5c 	bl	80075f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	021a      	lsls	r2, r3, #8
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d6c:	e002      	b.n	8006d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	75fb      	strb	r3, [r7, #23]
      break;
 8006d72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop

08006d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d101      	bne.n	8006da4 <HAL_TIM_ConfigClockSource+0x1c>
 8006da0:	2302      	movs	r3, #2
 8006da2:	e0b6      	b.n	8006f12 <HAL_TIM_ConfigClockSource+0x18a>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006de0:	d03e      	beq.n	8006e60 <HAL_TIM_ConfigClockSource+0xd8>
 8006de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006de6:	f200 8087 	bhi.w	8006ef8 <HAL_TIM_ConfigClockSource+0x170>
 8006dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dee:	f000 8086 	beq.w	8006efe <HAL_TIM_ConfigClockSource+0x176>
 8006df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df6:	d87f      	bhi.n	8006ef8 <HAL_TIM_ConfigClockSource+0x170>
 8006df8:	2b70      	cmp	r3, #112	; 0x70
 8006dfa:	d01a      	beq.n	8006e32 <HAL_TIM_ConfigClockSource+0xaa>
 8006dfc:	2b70      	cmp	r3, #112	; 0x70
 8006dfe:	d87b      	bhi.n	8006ef8 <HAL_TIM_ConfigClockSource+0x170>
 8006e00:	2b60      	cmp	r3, #96	; 0x60
 8006e02:	d050      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0x11e>
 8006e04:	2b60      	cmp	r3, #96	; 0x60
 8006e06:	d877      	bhi.n	8006ef8 <HAL_TIM_ConfigClockSource+0x170>
 8006e08:	2b50      	cmp	r3, #80	; 0x50
 8006e0a:	d03c      	beq.n	8006e86 <HAL_TIM_ConfigClockSource+0xfe>
 8006e0c:	2b50      	cmp	r3, #80	; 0x50
 8006e0e:	d873      	bhi.n	8006ef8 <HAL_TIM_ConfigClockSource+0x170>
 8006e10:	2b40      	cmp	r3, #64	; 0x40
 8006e12:	d058      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x13e>
 8006e14:	2b40      	cmp	r3, #64	; 0x40
 8006e16:	d86f      	bhi.n	8006ef8 <HAL_TIM_ConfigClockSource+0x170>
 8006e18:	2b30      	cmp	r3, #48	; 0x30
 8006e1a:	d064      	beq.n	8006ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8006e1c:	2b30      	cmp	r3, #48	; 0x30
 8006e1e:	d86b      	bhi.n	8006ef8 <HAL_TIM_ConfigClockSource+0x170>
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	d060      	beq.n	8006ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8006e24:	2b20      	cmp	r3, #32
 8006e26:	d867      	bhi.n	8006ef8 <HAL_TIM_ConfigClockSource+0x170>
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d05c      	beq.n	8006ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8006e2c:	2b10      	cmp	r3, #16
 8006e2e:	d05a      	beq.n	8006ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8006e30:	e062      	b.n	8006ef8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6818      	ldr	r0, [r3, #0]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	6899      	ldr	r1, [r3, #8]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	f000 fcbb 	bl	80077bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	609a      	str	r2, [r3, #8]
      break;
 8006e5e:	e04f      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6818      	ldr	r0, [r3, #0]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	6899      	ldr	r1, [r3, #8]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f000 fca4 	bl	80077bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689a      	ldr	r2, [r3, #8]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e82:	609a      	str	r2, [r3, #8]
      break;
 8006e84:	e03c      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6859      	ldr	r1, [r3, #4]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	461a      	mov	r2, r3
 8006e94:	f000 fc18 	bl	80076c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2150      	movs	r1, #80	; 0x50
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fc71 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 8006ea4:	e02c      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	6859      	ldr	r1, [r3, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f000 fc37 	bl	8007726 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2160      	movs	r1, #96	; 0x60
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fc61 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 8006ec4:	e01c      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6818      	ldr	r0, [r3, #0]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	6859      	ldr	r1, [r3, #4]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f000 fbf8 	bl	80076c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2140      	movs	r1, #64	; 0x40
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fc51 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 8006ee4:	e00c      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	f000 fc48 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 8006ef6:	e003      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	73fb      	strb	r3, [r7, #15]
      break;
 8006efc:	e000      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006efe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b083      	sub	sp, #12
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f22:	bf00      	nop
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f36:	bf00      	nop
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f4a:	bf00      	nop
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
	...

08006f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a42      	ldr	r2, [pc, #264]	; (800709c <TIM_Base_SetConfig+0x11c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d013      	beq.n	8006fc0 <TIM_Base_SetConfig+0x40>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9e:	d00f      	beq.n	8006fc0 <TIM_Base_SetConfig+0x40>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a3f      	ldr	r2, [pc, #252]	; (80070a0 <TIM_Base_SetConfig+0x120>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00b      	beq.n	8006fc0 <TIM_Base_SetConfig+0x40>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a3e      	ldr	r2, [pc, #248]	; (80070a4 <TIM_Base_SetConfig+0x124>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d007      	beq.n	8006fc0 <TIM_Base_SetConfig+0x40>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a3d      	ldr	r2, [pc, #244]	; (80070a8 <TIM_Base_SetConfig+0x128>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d003      	beq.n	8006fc0 <TIM_Base_SetConfig+0x40>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a3c      	ldr	r2, [pc, #240]	; (80070ac <TIM_Base_SetConfig+0x12c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d108      	bne.n	8006fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a31      	ldr	r2, [pc, #196]	; (800709c <TIM_Base_SetConfig+0x11c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d01f      	beq.n	800701a <TIM_Base_SetConfig+0x9a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe0:	d01b      	beq.n	800701a <TIM_Base_SetConfig+0x9a>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a2e      	ldr	r2, [pc, #184]	; (80070a0 <TIM_Base_SetConfig+0x120>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d017      	beq.n	800701a <TIM_Base_SetConfig+0x9a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a2d      	ldr	r2, [pc, #180]	; (80070a4 <TIM_Base_SetConfig+0x124>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d013      	beq.n	800701a <TIM_Base_SetConfig+0x9a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a2c      	ldr	r2, [pc, #176]	; (80070a8 <TIM_Base_SetConfig+0x128>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00f      	beq.n	800701a <TIM_Base_SetConfig+0x9a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a2c      	ldr	r2, [pc, #176]	; (80070b0 <TIM_Base_SetConfig+0x130>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d00b      	beq.n	800701a <TIM_Base_SetConfig+0x9a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a2b      	ldr	r2, [pc, #172]	; (80070b4 <TIM_Base_SetConfig+0x134>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d007      	beq.n	800701a <TIM_Base_SetConfig+0x9a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a2a      	ldr	r2, [pc, #168]	; (80070b8 <TIM_Base_SetConfig+0x138>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d003      	beq.n	800701a <TIM_Base_SetConfig+0x9a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a25      	ldr	r2, [pc, #148]	; (80070ac <TIM_Base_SetConfig+0x12c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d108      	bne.n	800702c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	4313      	orrs	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	689a      	ldr	r2, [r3, #8]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a12      	ldr	r2, [pc, #72]	; (800709c <TIM_Base_SetConfig+0x11c>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d013      	beq.n	8007080 <TIM_Base_SetConfig+0x100>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a13      	ldr	r2, [pc, #76]	; (80070a8 <TIM_Base_SetConfig+0x128>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00f      	beq.n	8007080 <TIM_Base_SetConfig+0x100>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a13      	ldr	r2, [pc, #76]	; (80070b0 <TIM_Base_SetConfig+0x130>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d00b      	beq.n	8007080 <TIM_Base_SetConfig+0x100>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a12      	ldr	r2, [pc, #72]	; (80070b4 <TIM_Base_SetConfig+0x134>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d007      	beq.n	8007080 <TIM_Base_SetConfig+0x100>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a11      	ldr	r2, [pc, #68]	; (80070b8 <TIM_Base_SetConfig+0x138>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d003      	beq.n	8007080 <TIM_Base_SetConfig+0x100>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a0c      	ldr	r2, [pc, #48]	; (80070ac <TIM_Base_SetConfig+0x12c>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d103      	bne.n	8007088 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	691a      	ldr	r2, [r3, #16]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	615a      	str	r2, [r3, #20]
}
 800708e:	bf00      	nop
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	40012c00 	.word	0x40012c00
 80070a0:	40000400 	.word	0x40000400
 80070a4:	40000800 	.word	0x40000800
 80070a8:	40013400 	.word	0x40013400
 80070ac:	40015000 	.word	0x40015000
 80070b0:	40014000 	.word	0x40014000
 80070b4:	40014400 	.word	0x40014400
 80070b8:	40014800 	.word	0x40014800

080070bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	f023 0201 	bic.w	r2, r3, #1
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f023 0303 	bic.w	r3, r3, #3
 80070f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	4313      	orrs	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f023 0302 	bic.w	r3, r3, #2
 8007108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	4313      	orrs	r3, r2
 8007112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a30      	ldr	r2, [pc, #192]	; (80071d8 <TIM_OC1_SetConfig+0x11c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d013      	beq.n	8007144 <TIM_OC1_SetConfig+0x88>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a2f      	ldr	r2, [pc, #188]	; (80071dc <TIM_OC1_SetConfig+0x120>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00f      	beq.n	8007144 <TIM_OC1_SetConfig+0x88>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a2e      	ldr	r2, [pc, #184]	; (80071e0 <TIM_OC1_SetConfig+0x124>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00b      	beq.n	8007144 <TIM_OC1_SetConfig+0x88>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a2d      	ldr	r2, [pc, #180]	; (80071e4 <TIM_OC1_SetConfig+0x128>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d007      	beq.n	8007144 <TIM_OC1_SetConfig+0x88>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a2c      	ldr	r2, [pc, #176]	; (80071e8 <TIM_OC1_SetConfig+0x12c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d003      	beq.n	8007144 <TIM_OC1_SetConfig+0x88>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a2b      	ldr	r2, [pc, #172]	; (80071ec <TIM_OC1_SetConfig+0x130>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d10c      	bne.n	800715e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f023 0308 	bic.w	r3, r3, #8
 800714a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	4313      	orrs	r3, r2
 8007154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f023 0304 	bic.w	r3, r3, #4
 800715c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a1d      	ldr	r2, [pc, #116]	; (80071d8 <TIM_OC1_SetConfig+0x11c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d013      	beq.n	800718e <TIM_OC1_SetConfig+0xd2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a1c      	ldr	r2, [pc, #112]	; (80071dc <TIM_OC1_SetConfig+0x120>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00f      	beq.n	800718e <TIM_OC1_SetConfig+0xd2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a1b      	ldr	r2, [pc, #108]	; (80071e0 <TIM_OC1_SetConfig+0x124>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00b      	beq.n	800718e <TIM_OC1_SetConfig+0xd2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a1a      	ldr	r2, [pc, #104]	; (80071e4 <TIM_OC1_SetConfig+0x128>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d007      	beq.n	800718e <TIM_OC1_SetConfig+0xd2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a19      	ldr	r2, [pc, #100]	; (80071e8 <TIM_OC1_SetConfig+0x12c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d003      	beq.n	800718e <TIM_OC1_SetConfig+0xd2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a18      	ldr	r2, [pc, #96]	; (80071ec <TIM_OC1_SetConfig+0x130>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d111      	bne.n	80071b2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800719c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	621a      	str	r2, [r3, #32]
}
 80071cc:	bf00      	nop
 80071ce:	371c      	adds	r7, #28
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	40012c00 	.word	0x40012c00
 80071dc:	40013400 	.word	0x40013400
 80071e0:	40014000 	.word	0x40014000
 80071e4:	40014400 	.word	0x40014400
 80071e8:	40014800 	.word	0x40014800
 80071ec:	40015000 	.word	0x40015000

080071f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	f023 0210 	bic.w	r2, r3, #16
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800721e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800722a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	021b      	lsls	r3, r3, #8
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	4313      	orrs	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f023 0320 	bic.w	r3, r3, #32
 800723e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	011b      	lsls	r3, r3, #4
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a2c      	ldr	r2, [pc, #176]	; (8007300 <TIM_OC2_SetConfig+0x110>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d007      	beq.n	8007264 <TIM_OC2_SetConfig+0x74>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a2b      	ldr	r2, [pc, #172]	; (8007304 <TIM_OC2_SetConfig+0x114>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d003      	beq.n	8007264 <TIM_OC2_SetConfig+0x74>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a2a      	ldr	r2, [pc, #168]	; (8007308 <TIM_OC2_SetConfig+0x118>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d10d      	bne.n	8007280 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800726a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	4313      	orrs	r3, r2
 8007276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800727e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a1f      	ldr	r2, [pc, #124]	; (8007300 <TIM_OC2_SetConfig+0x110>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d013      	beq.n	80072b0 <TIM_OC2_SetConfig+0xc0>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a1e      	ldr	r2, [pc, #120]	; (8007304 <TIM_OC2_SetConfig+0x114>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d00f      	beq.n	80072b0 <TIM_OC2_SetConfig+0xc0>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a1e      	ldr	r2, [pc, #120]	; (800730c <TIM_OC2_SetConfig+0x11c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00b      	beq.n	80072b0 <TIM_OC2_SetConfig+0xc0>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a1d      	ldr	r2, [pc, #116]	; (8007310 <TIM_OC2_SetConfig+0x120>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d007      	beq.n	80072b0 <TIM_OC2_SetConfig+0xc0>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a1c      	ldr	r2, [pc, #112]	; (8007314 <TIM_OC2_SetConfig+0x124>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d003      	beq.n	80072b0 <TIM_OC2_SetConfig+0xc0>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a17      	ldr	r2, [pc, #92]	; (8007308 <TIM_OC2_SetConfig+0x118>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d113      	bne.n	80072d8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072b6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072be:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	621a      	str	r2, [r3, #32]
}
 80072f2:	bf00      	nop
 80072f4:	371c      	adds	r7, #28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	40012c00 	.word	0x40012c00
 8007304:	40013400 	.word	0x40013400
 8007308:	40015000 	.word	0x40015000
 800730c:	40014000 	.word	0x40014000
 8007310:	40014400 	.word	0x40014400
 8007314:	40014800 	.word	0x40014800

08007318 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800734a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f023 0303 	bic.w	r3, r3, #3
 8007352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	021b      	lsls	r3, r3, #8
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	4313      	orrs	r3, r2
 8007370:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a2b      	ldr	r2, [pc, #172]	; (8007424 <TIM_OC3_SetConfig+0x10c>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d007      	beq.n	800738a <TIM_OC3_SetConfig+0x72>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a2a      	ldr	r2, [pc, #168]	; (8007428 <TIM_OC3_SetConfig+0x110>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d003      	beq.n	800738a <TIM_OC3_SetConfig+0x72>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a29      	ldr	r2, [pc, #164]	; (800742c <TIM_OC3_SetConfig+0x114>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d10d      	bne.n	80073a6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	021b      	lsls	r3, r3, #8
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	4313      	orrs	r3, r2
 800739c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073a4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a1e      	ldr	r2, [pc, #120]	; (8007424 <TIM_OC3_SetConfig+0x10c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d013      	beq.n	80073d6 <TIM_OC3_SetConfig+0xbe>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a1d      	ldr	r2, [pc, #116]	; (8007428 <TIM_OC3_SetConfig+0x110>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d00f      	beq.n	80073d6 <TIM_OC3_SetConfig+0xbe>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a1d      	ldr	r2, [pc, #116]	; (8007430 <TIM_OC3_SetConfig+0x118>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d00b      	beq.n	80073d6 <TIM_OC3_SetConfig+0xbe>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a1c      	ldr	r2, [pc, #112]	; (8007434 <TIM_OC3_SetConfig+0x11c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d007      	beq.n	80073d6 <TIM_OC3_SetConfig+0xbe>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a1b      	ldr	r2, [pc, #108]	; (8007438 <TIM_OC3_SetConfig+0x120>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d003      	beq.n	80073d6 <TIM_OC3_SetConfig+0xbe>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a16      	ldr	r2, [pc, #88]	; (800742c <TIM_OC3_SetConfig+0x114>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d113      	bne.n	80073fe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	011b      	lsls	r3, r3, #4
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	621a      	str	r2, [r3, #32]
}
 8007418:	bf00      	nop
 800741a:	371c      	adds	r7, #28
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	40012c00 	.word	0x40012c00
 8007428:	40013400 	.word	0x40013400
 800742c:	40015000 	.word	0x40015000
 8007430:	40014000 	.word	0x40014000
 8007434:	40014400 	.word	0x40014400
 8007438:	40014800 	.word	0x40014800

0800743c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800743c:	b480      	push	{r7}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800746a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800746e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	021b      	lsls	r3, r3, #8
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	4313      	orrs	r3, r2
 8007482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800748a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	031b      	lsls	r3, r3, #12
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	4313      	orrs	r3, r2
 8007496:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a1a      	ldr	r2, [pc, #104]	; (8007504 <TIM_OC4_SetConfig+0xc8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d013      	beq.n	80074c8 <TIM_OC4_SetConfig+0x8c>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a19      	ldr	r2, [pc, #100]	; (8007508 <TIM_OC4_SetConfig+0xcc>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d00f      	beq.n	80074c8 <TIM_OC4_SetConfig+0x8c>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a18      	ldr	r2, [pc, #96]	; (800750c <TIM_OC4_SetConfig+0xd0>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d00b      	beq.n	80074c8 <TIM_OC4_SetConfig+0x8c>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a17      	ldr	r2, [pc, #92]	; (8007510 <TIM_OC4_SetConfig+0xd4>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d007      	beq.n	80074c8 <TIM_OC4_SetConfig+0x8c>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a16      	ldr	r2, [pc, #88]	; (8007514 <TIM_OC4_SetConfig+0xd8>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d003      	beq.n	80074c8 <TIM_OC4_SetConfig+0x8c>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a15      	ldr	r2, [pc, #84]	; (8007518 <TIM_OC4_SetConfig+0xdc>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d109      	bne.n	80074dc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	019b      	lsls	r3, r3, #6
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	621a      	str	r2, [r3, #32]
}
 80074f6:	bf00      	nop
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	40012c00 	.word	0x40012c00
 8007508:	40013400 	.word	0x40013400
 800750c:	40014000 	.word	0x40014000
 8007510:	40014400 	.word	0x40014400
 8007514:	40014800 	.word	0x40014800
 8007518:	40015000 	.word	0x40015000

0800751c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800754a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007560:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	041b      	lsls	r3, r3, #16
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	4313      	orrs	r3, r2
 800756c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a19      	ldr	r2, [pc, #100]	; (80075d8 <TIM_OC5_SetConfig+0xbc>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d013      	beq.n	800759e <TIM_OC5_SetConfig+0x82>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a18      	ldr	r2, [pc, #96]	; (80075dc <TIM_OC5_SetConfig+0xc0>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00f      	beq.n	800759e <TIM_OC5_SetConfig+0x82>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a17      	ldr	r2, [pc, #92]	; (80075e0 <TIM_OC5_SetConfig+0xc4>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d00b      	beq.n	800759e <TIM_OC5_SetConfig+0x82>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a16      	ldr	r2, [pc, #88]	; (80075e4 <TIM_OC5_SetConfig+0xc8>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d007      	beq.n	800759e <TIM_OC5_SetConfig+0x82>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a15      	ldr	r2, [pc, #84]	; (80075e8 <TIM_OC5_SetConfig+0xcc>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d003      	beq.n	800759e <TIM_OC5_SetConfig+0x82>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a14      	ldr	r2, [pc, #80]	; (80075ec <TIM_OC5_SetConfig+0xd0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d109      	bne.n	80075b2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	021b      	lsls	r3, r3, #8
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	621a      	str	r2, [r3, #32]
}
 80075cc:	bf00      	nop
 80075ce:	371c      	adds	r7, #28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	40012c00 	.word	0x40012c00
 80075dc:	40013400 	.word	0x40013400
 80075e0:	40014000 	.word	0x40014000
 80075e4:	40014400 	.word	0x40014400
 80075e8:	40014800 	.word	0x40014800
 80075ec:	40015000 	.word	0x40015000

080075f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b087      	sub	sp, #28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800761e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	021b      	lsls	r3, r3, #8
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	4313      	orrs	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	051b      	lsls	r3, r3, #20
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	4313      	orrs	r3, r2
 8007642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a1a      	ldr	r2, [pc, #104]	; (80076b0 <TIM_OC6_SetConfig+0xc0>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d013      	beq.n	8007674 <TIM_OC6_SetConfig+0x84>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a19      	ldr	r2, [pc, #100]	; (80076b4 <TIM_OC6_SetConfig+0xc4>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d00f      	beq.n	8007674 <TIM_OC6_SetConfig+0x84>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a18      	ldr	r2, [pc, #96]	; (80076b8 <TIM_OC6_SetConfig+0xc8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d00b      	beq.n	8007674 <TIM_OC6_SetConfig+0x84>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a17      	ldr	r2, [pc, #92]	; (80076bc <TIM_OC6_SetConfig+0xcc>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d007      	beq.n	8007674 <TIM_OC6_SetConfig+0x84>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a16      	ldr	r2, [pc, #88]	; (80076c0 <TIM_OC6_SetConfig+0xd0>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d003      	beq.n	8007674 <TIM_OC6_SetConfig+0x84>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a15      	ldr	r2, [pc, #84]	; (80076c4 <TIM_OC6_SetConfig+0xd4>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d109      	bne.n	8007688 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800767a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	029b      	lsls	r3, r3, #10
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	4313      	orrs	r3, r2
 8007686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	621a      	str	r2, [r3, #32]
}
 80076a2:	bf00      	nop
 80076a4:	371c      	adds	r7, #28
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	40012c00 	.word	0x40012c00
 80076b4:	40013400 	.word	0x40013400
 80076b8:	40014000 	.word	0x40014000
 80076bc:	40014400 	.word	0x40014400
 80076c0:	40014800 	.word	0x40014800
 80076c4:	40015000 	.word	0x40015000

080076c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	f023 0201 	bic.w	r2, r3, #1
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	011b      	lsls	r3, r3, #4
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f023 030a 	bic.w	r3, r3, #10
 8007704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4313      	orrs	r3, r2
 800770c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	621a      	str	r2, [r3, #32]
}
 800771a:	bf00      	nop
 800771c:	371c      	adds	r7, #28
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007726:	b480      	push	{r7}
 8007728:	b087      	sub	sp, #28
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	f023 0210 	bic.w	r2, r3, #16
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007750:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	031b      	lsls	r3, r3, #12
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	4313      	orrs	r3, r2
 800775a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007762:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	621a      	str	r2, [r3, #32]
}
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007786:	b480      	push	{r7}
 8007788:	b085      	sub	sp, #20
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800779c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	f043 0307 	orr.w	r3, r3, #7
 80077a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	609a      	str	r2, [r3, #8]
}
 80077b0:	bf00      	nop
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	021a      	lsls	r2, r3, #8
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	431a      	orrs	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	609a      	str	r2, [r3, #8]
}
 80077f0:	bf00      	nop
 80077f2:	371c      	adds	r7, #28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f003 031f 	and.w	r3, r3, #31
 800780e:	2201      	movs	r2, #1
 8007810:	fa02 f303 	lsl.w	r3, r2, r3
 8007814:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6a1a      	ldr	r2, [r3, #32]
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	43db      	mvns	r3, r3
 800781e:	401a      	ands	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a1a      	ldr	r2, [r3, #32]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f003 031f 	and.w	r3, r3, #31
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	fa01 f303 	lsl.w	r3, r1, r3
 8007834:	431a      	orrs	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	621a      	str	r2, [r3, #32]
}
 800783a:	bf00      	nop
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
	...

08007848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800785c:	2302      	movs	r3, #2
 800785e:	e06d      	b.n	800793c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a30      	ldr	r2, [pc, #192]	; (8007948 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d009      	beq.n	800789e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a2f      	ldr	r2, [pc, #188]	; (800794c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d004      	beq.n	800789e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a2d      	ldr	r2, [pc, #180]	; (8007950 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d108      	bne.n	80078b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80078a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	4313      	orrs	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a1e      	ldr	r2, [pc, #120]	; (8007948 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d01d      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078dc:	d018      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a1c      	ldr	r2, [pc, #112]	; (8007954 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d013      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a1a      	ldr	r2, [pc, #104]	; (8007958 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00e      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a15      	ldr	r2, [pc, #84]	; (800794c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d009      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a16      	ldr	r2, [pc, #88]	; (800795c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d004      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a11      	ldr	r2, [pc, #68]	; (8007950 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d10c      	bne.n	800792a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007916:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	4313      	orrs	r3, r2
 8007920:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	40012c00 	.word	0x40012c00
 800794c:	40013400 	.word	0x40013400
 8007950:	40015000 	.word	0x40015000
 8007954:	40000400 	.word	0x40000400
 8007958:	40000800 	.word	0x40000800
 800795c:	40014000 	.word	0x40014000

08007960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e040      	b.n	8007a30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d106      	bne.n	80079c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7fa fa28 	bl	8001e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2224      	movs	r2, #36	; 0x24
 80079c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f022 0201 	bic.w	r2, r2, #1
 80079d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fc00 	bl	80081e0 <UART_SetConfig>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d101      	bne.n	80079ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e022      	b.n	8007a30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d002      	beq.n	80079f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fdc8 	bl	8008588 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	689a      	ldr	r2, [r3, #8]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0201 	orr.w	r2, r2, #1
 8007a26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fe4f 	bl	80086cc <UART_CheckIdleState>
 8007a2e:	4603      	mov	r3, r0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08a      	sub	sp, #40	; 0x28
 8007a3c:	af02      	add	r7, sp, #8
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	603b      	str	r3, [r7, #0]
 8007a44:	4613      	mov	r3, r2
 8007a46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a4c:	2b20      	cmp	r3, #32
 8007a4e:	d178      	bne.n	8007b42 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <HAL_UART_Transmit+0x24>
 8007a56:	88fb      	ldrh	r3, [r7, #6]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e071      	b.n	8007b44 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2221      	movs	r2, #33	; 0x21
 8007a6c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a6e:	f7fa fbd7 	bl	8002220 <HAL_GetTick>
 8007a72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	88fa      	ldrh	r2, [r7, #6]
 8007a78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	88fa      	ldrh	r2, [r7, #6]
 8007a80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a8c:	d108      	bne.n	8007aa0 <HAL_UART_Transmit+0x68>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d104      	bne.n	8007aa0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007a96:	2300      	movs	r3, #0
 8007a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	61bb      	str	r3, [r7, #24]
 8007a9e:	e003      	b.n	8007aa8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007aa8:	e030      	b.n	8007b0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	2180      	movs	r1, #128	; 0x80
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f000 feb1 	bl	800881c <UART_WaitOnFlagUntilTimeout>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d004      	beq.n	8007aca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e03c      	b.n	8007b44 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10b      	bne.n	8007ae8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	881a      	ldrh	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007adc:	b292      	uxth	r2, r2
 8007ade:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	3302      	adds	r3, #2
 8007ae4:	61bb      	str	r3, [r7, #24]
 8007ae6:	e008      	b.n	8007afa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	781a      	ldrb	r2, [r3, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	b292      	uxth	r2, r2
 8007af2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	3301      	adds	r3, #1
 8007af8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	3b01      	subs	r3, #1
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1c8      	bne.n	8007aaa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	2140      	movs	r1, #64	; 0x40
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f000 fe7a 	bl	800881c <UART_WaitOnFlagUntilTimeout>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d004      	beq.n	8007b38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2220      	movs	r2, #32
 8007b32:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e005      	b.n	8007b44 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	e000      	b.n	8007b44 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007b42:	2302      	movs	r3, #2
  }
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3720      	adds	r7, #32
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b08a      	sub	sp, #40	; 0x28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	4613      	mov	r3, r2
 8007b58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b60:	2b20      	cmp	r3, #32
 8007b62:	d132      	bne.n	8007bca <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <HAL_UART_Receive_IT+0x24>
 8007b6a:	88fb      	ldrh	r3, [r7, #6]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e02b      	b.n	8007bcc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d018      	beq.n	8007bba <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	e853 3f00 	ldrex	r3, [r3]
 8007b94:	613b      	str	r3, [r7, #16]
   return(result);
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	623b      	str	r3, [r7, #32]
 8007ba8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	69f9      	ldr	r1, [r7, #28]
 8007bac:	6a3a      	ldr	r2, [r7, #32]
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1e6      	bne.n	8007b88 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007bba:	88fb      	ldrh	r3, [r7, #6]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	68b9      	ldr	r1, [r7, #8]
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 fe93 	bl	80088ec <UART_Start_Receive_IT>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	e000      	b.n	8007bcc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007bca:	2302      	movs	r3, #2
  }
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3728      	adds	r7, #40	; 0x28
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b0ba      	sub	sp, #232	; 0xe8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007bfa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007bfe:	f640 030f 	movw	r3, #2063	; 0x80f
 8007c02:	4013      	ands	r3, r2
 8007c04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007c08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d115      	bne.n	8007c3c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c14:	f003 0320 	and.w	r3, r3, #32
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00f      	beq.n	8007c3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c20:	f003 0320 	and.w	r3, r3, #32
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d009      	beq.n	8007c3c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 82ab 	beq.w	8008188 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	4798      	blx	r3
      }
      return;
 8007c3a:	e2a5      	b.n	8008188 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 8117 	beq.w	8007e74 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d106      	bne.n	8007c60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007c52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007c56:	4b85      	ldr	r3, [pc, #532]	; (8007e6c <HAL_UART_IRQHandler+0x298>)
 8007c58:	4013      	ands	r3, r2
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 810a 	beq.w	8007e74 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d011      	beq.n	8007c90 <HAL_UART_IRQHandler+0xbc>
 8007c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00b      	beq.n	8007c90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c86:	f043 0201 	orr.w	r2, r3, #1
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c94:	f003 0302 	and.w	r3, r3, #2
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d011      	beq.n	8007cc0 <HAL_UART_IRQHandler+0xec>
 8007c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2202      	movs	r2, #2
 8007cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cb6:	f043 0204 	orr.w	r2, r3, #4
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc4:	f003 0304 	and.w	r3, r3, #4
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d011      	beq.n	8007cf0 <HAL_UART_IRQHandler+0x11c>
 8007ccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00b      	beq.n	8007cf0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2204      	movs	r2, #4
 8007cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ce6:	f043 0202 	orr.w	r2, r3, #2
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cf4:	f003 0308 	and.w	r3, r3, #8
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d017      	beq.n	8007d2c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d00:	f003 0320 	and.w	r3, r3, #32
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d105      	bne.n	8007d14 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00b      	beq.n	8007d2c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2208      	movs	r2, #8
 8007d1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d22:	f043 0208 	orr.w	r2, r3, #8
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d012      	beq.n	8007d5e <HAL_UART_IRQHandler+0x18a>
 8007d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00c      	beq.n	8007d5e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d54:	f043 0220 	orr.w	r2, r3, #32
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 8211 	beq.w	800818c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d6e:	f003 0320 	and.w	r3, r3, #32
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00d      	beq.n	8007d92 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d007      	beq.n	8007d92 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da6:	2b40      	cmp	r3, #64	; 0x40
 8007da8:	d005      	beq.n	8007db6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d04f      	beq.n	8007e56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fe5e 	bl	8008a78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc6:	2b40      	cmp	r3, #64	; 0x40
 8007dc8:	d141      	bne.n	8007e4e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3308      	adds	r3, #8
 8007dd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3308      	adds	r3, #8
 8007df2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007df6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1d9      	bne.n	8007dca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d013      	beq.n	8007e46 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e22:	4a13      	ldr	r2, [pc, #76]	; (8007e70 <HAL_UART_IRQHandler+0x29c>)
 8007e24:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fb fc5a 	bl	80036e4 <HAL_DMA_Abort_IT>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d017      	beq.n	8007e66 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007e40:	4610      	mov	r0, r2
 8007e42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e44:	e00f      	b.n	8007e66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f9b4 	bl	80081b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e4c:	e00b      	b.n	8007e66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f9b0 	bl	80081b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e54:	e007      	b.n	8007e66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f9ac 	bl	80081b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007e64:	e192      	b.n	800818c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e66:	bf00      	nop
    return;
 8007e68:	e190      	b.n	800818c <HAL_UART_IRQHandler+0x5b8>
 8007e6a:	bf00      	nop
 8007e6c:	04000120 	.word	0x04000120
 8007e70:	08008b41 	.word	0x08008b41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	f040 814b 	bne.w	8008114 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e82:	f003 0310 	and.w	r3, r3, #16
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 8144 	beq.w	8008114 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e90:	f003 0310 	and.w	r3, r3, #16
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 813d 	beq.w	8008114 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2210      	movs	r2, #16
 8007ea0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eac:	2b40      	cmp	r3, #64	; 0x40
 8007eae:	f040 80b5 	bne.w	800801c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ebe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 8164 	beq.w	8008190 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ece:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	f080 815c 	bcs.w	8008190 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ede:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	2b20      	cmp	r3, #32
 8007eea:	f000 8086 	beq.w	8007ffa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007efa:	e853 3f00 	ldrex	r3, [r3]
 8007efe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f1c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f20:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f28:	e841 2300 	strex	r3, r2, [r1]
 8007f2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1da      	bne.n	8007eee <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3308      	adds	r3, #8
 8007f3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f42:	e853 3f00 	ldrex	r3, [r3]
 8007f46:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f4a:	f023 0301 	bic.w	r3, r3, #1
 8007f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3308      	adds	r3, #8
 8007f58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007f60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007f64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f68:	e841 2300 	strex	r3, r2, [r1]
 8007f6c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1e1      	bne.n	8007f38 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	3308      	adds	r3, #8
 8007f7a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f7e:	e853 3f00 	ldrex	r3, [r3]
 8007f82:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3308      	adds	r3, #8
 8007f94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f98:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fa0:	e841 2300 	strex	r3, r2, [r1]
 8007fa4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007fa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e3      	bne.n	8007f74 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc2:	e853 3f00 	ldrex	r3, [r3]
 8007fc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fca:	f023 0310 	bic.w	r3, r3, #16
 8007fce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fde:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fe2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fe4:	e841 2300 	strex	r3, r2, [r1]
 8007fe8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e4      	bne.n	8007fba <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fb fb3c 	bl	8003672 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800800c:	b29b      	uxth	r3, r3
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	b29b      	uxth	r3, r3
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f8d7 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800801a:	e0b9      	b.n	8008190 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008028:	b29b      	uxth	r3, r3
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008036:	b29b      	uxth	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 80ab 	beq.w	8008194 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800803e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 80a6 	beq.w	8008194 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008058:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800805c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	461a      	mov	r2, r3
 8008066:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800806a:	647b      	str	r3, [r7, #68]	; 0x44
 800806c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008070:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008072:	e841 2300 	strex	r3, r2, [r1]
 8008076:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1e4      	bne.n	8008048 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3308      	adds	r3, #8
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	e853 3f00 	ldrex	r3, [r3]
 800808c:	623b      	str	r3, [r7, #32]
   return(result);
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	f023 0301 	bic.w	r3, r3, #1
 8008094:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3308      	adds	r3, #8
 800809e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80080a2:	633a      	str	r2, [r7, #48]	; 0x30
 80080a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080aa:	e841 2300 	strex	r3, r2, [r1]
 80080ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1e3      	bne.n	800807e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2220      	movs	r2, #32
 80080ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f023 0310 	bic.w	r3, r3, #16
 80080de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080ec:	61fb      	str	r3, [r7, #28]
 80080ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f0:	69b9      	ldr	r1, [r7, #24]
 80080f2:	69fa      	ldr	r2, [r7, #28]
 80080f4:	e841 2300 	strex	r3, r2, [r1]
 80080f8:	617b      	str	r3, [r7, #20]
   return(result);
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1e4      	bne.n	80080ca <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2202      	movs	r2, #2
 8008104:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008106:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f85b 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008112:	e03f      	b.n	8008194 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00e      	beq.n	800813e <HAL_UART_IRQHandler+0x56a>
 8008120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d008      	beq.n	800813e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008134:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 feea 	bl	8008f10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800813c:	e02d      	b.n	800819a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800813e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00e      	beq.n	8008168 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800814a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800814e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008152:	2b00      	cmp	r3, #0
 8008154:	d008      	beq.n	8008168 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800815a:	2b00      	cmp	r3, #0
 800815c:	d01c      	beq.n	8008198 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	4798      	blx	r3
    }
    return;
 8008166:	e017      	b.n	8008198 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800816c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008170:	2b00      	cmp	r3, #0
 8008172:	d012      	beq.n	800819a <HAL_UART_IRQHandler+0x5c6>
 8008174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00c      	beq.n	800819a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fcf3 	bl	8008b6c <UART_EndTransmit_IT>
    return;
 8008186:	e008      	b.n	800819a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008188:	bf00      	nop
 800818a:	e006      	b.n	800819a <HAL_UART_IRQHandler+0x5c6>
    return;
 800818c:	bf00      	nop
 800818e:	e004      	b.n	800819a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008190:	bf00      	nop
 8008192:	e002      	b.n	800819a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008194:	bf00      	nop
 8008196:	e000      	b.n	800819a <HAL_UART_IRQHandler+0x5c6>
    return;
 8008198:	bf00      	nop
  }

}
 800819a:	37e8      	adds	r7, #232	; 0xe8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	431a      	orrs	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	431a      	orrs	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	69db      	ldr	r3, [r3, #28]
 8008200:	4313      	orrs	r3, r2
 8008202:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	4b92      	ldr	r3, [pc, #584]	; (8008454 <UART_SetConfig+0x274>)
 800820c:	4013      	ands	r3, r2
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	6812      	ldr	r2, [r2, #0]
 8008212:	6979      	ldr	r1, [r7, #20]
 8008214:	430b      	orrs	r3, r1
 8008216:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a1b      	ldr	r3, [r3, #32]
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	4313      	orrs	r3, r2
 800823c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	430a      	orrs	r2, r1
 8008250:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a80      	ldr	r2, [pc, #512]	; (8008458 <UART_SetConfig+0x278>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d120      	bne.n	800829e <UART_SetConfig+0xbe>
 800825c:	4b7f      	ldr	r3, [pc, #508]	; (800845c <UART_SetConfig+0x27c>)
 800825e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008260:	f003 0303 	and.w	r3, r3, #3
 8008264:	2b03      	cmp	r3, #3
 8008266:	d817      	bhi.n	8008298 <UART_SetConfig+0xb8>
 8008268:	a201      	add	r2, pc, #4	; (adr r2, 8008270 <UART_SetConfig+0x90>)
 800826a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826e:	bf00      	nop
 8008270:	08008281 	.word	0x08008281
 8008274:	0800828d 	.word	0x0800828d
 8008278:	08008293 	.word	0x08008293
 800827c:	08008287 	.word	0x08008287
 8008280:	2301      	movs	r3, #1
 8008282:	77fb      	strb	r3, [r7, #31]
 8008284:	e0b5      	b.n	80083f2 <UART_SetConfig+0x212>
 8008286:	2302      	movs	r3, #2
 8008288:	77fb      	strb	r3, [r7, #31]
 800828a:	e0b2      	b.n	80083f2 <UART_SetConfig+0x212>
 800828c:	2304      	movs	r3, #4
 800828e:	77fb      	strb	r3, [r7, #31]
 8008290:	e0af      	b.n	80083f2 <UART_SetConfig+0x212>
 8008292:	2308      	movs	r3, #8
 8008294:	77fb      	strb	r3, [r7, #31]
 8008296:	e0ac      	b.n	80083f2 <UART_SetConfig+0x212>
 8008298:	2310      	movs	r3, #16
 800829a:	77fb      	strb	r3, [r7, #31]
 800829c:	e0a9      	b.n	80083f2 <UART_SetConfig+0x212>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a6f      	ldr	r2, [pc, #444]	; (8008460 <UART_SetConfig+0x280>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d124      	bne.n	80082f2 <UART_SetConfig+0x112>
 80082a8:	4b6c      	ldr	r3, [pc, #432]	; (800845c <UART_SetConfig+0x27c>)
 80082aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80082b4:	d011      	beq.n	80082da <UART_SetConfig+0xfa>
 80082b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80082ba:	d817      	bhi.n	80082ec <UART_SetConfig+0x10c>
 80082bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082c0:	d011      	beq.n	80082e6 <UART_SetConfig+0x106>
 80082c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082c6:	d811      	bhi.n	80082ec <UART_SetConfig+0x10c>
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <UART_SetConfig+0xf4>
 80082cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082d0:	d006      	beq.n	80082e0 <UART_SetConfig+0x100>
 80082d2:	e00b      	b.n	80082ec <UART_SetConfig+0x10c>
 80082d4:	2300      	movs	r3, #0
 80082d6:	77fb      	strb	r3, [r7, #31]
 80082d8:	e08b      	b.n	80083f2 <UART_SetConfig+0x212>
 80082da:	2302      	movs	r3, #2
 80082dc:	77fb      	strb	r3, [r7, #31]
 80082de:	e088      	b.n	80083f2 <UART_SetConfig+0x212>
 80082e0:	2304      	movs	r3, #4
 80082e2:	77fb      	strb	r3, [r7, #31]
 80082e4:	e085      	b.n	80083f2 <UART_SetConfig+0x212>
 80082e6:	2308      	movs	r3, #8
 80082e8:	77fb      	strb	r3, [r7, #31]
 80082ea:	e082      	b.n	80083f2 <UART_SetConfig+0x212>
 80082ec:	2310      	movs	r3, #16
 80082ee:	77fb      	strb	r3, [r7, #31]
 80082f0:	e07f      	b.n	80083f2 <UART_SetConfig+0x212>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a5b      	ldr	r2, [pc, #364]	; (8008464 <UART_SetConfig+0x284>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d124      	bne.n	8008346 <UART_SetConfig+0x166>
 80082fc:	4b57      	ldr	r3, [pc, #348]	; (800845c <UART_SetConfig+0x27c>)
 80082fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008300:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008304:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008308:	d011      	beq.n	800832e <UART_SetConfig+0x14e>
 800830a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800830e:	d817      	bhi.n	8008340 <UART_SetConfig+0x160>
 8008310:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008314:	d011      	beq.n	800833a <UART_SetConfig+0x15a>
 8008316:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800831a:	d811      	bhi.n	8008340 <UART_SetConfig+0x160>
 800831c:	2b00      	cmp	r3, #0
 800831e:	d003      	beq.n	8008328 <UART_SetConfig+0x148>
 8008320:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008324:	d006      	beq.n	8008334 <UART_SetConfig+0x154>
 8008326:	e00b      	b.n	8008340 <UART_SetConfig+0x160>
 8008328:	2300      	movs	r3, #0
 800832a:	77fb      	strb	r3, [r7, #31]
 800832c:	e061      	b.n	80083f2 <UART_SetConfig+0x212>
 800832e:	2302      	movs	r3, #2
 8008330:	77fb      	strb	r3, [r7, #31]
 8008332:	e05e      	b.n	80083f2 <UART_SetConfig+0x212>
 8008334:	2304      	movs	r3, #4
 8008336:	77fb      	strb	r3, [r7, #31]
 8008338:	e05b      	b.n	80083f2 <UART_SetConfig+0x212>
 800833a:	2308      	movs	r3, #8
 800833c:	77fb      	strb	r3, [r7, #31]
 800833e:	e058      	b.n	80083f2 <UART_SetConfig+0x212>
 8008340:	2310      	movs	r3, #16
 8008342:	77fb      	strb	r3, [r7, #31]
 8008344:	e055      	b.n	80083f2 <UART_SetConfig+0x212>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a47      	ldr	r2, [pc, #284]	; (8008468 <UART_SetConfig+0x288>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d124      	bne.n	800839a <UART_SetConfig+0x1ba>
 8008350:	4b42      	ldr	r3, [pc, #264]	; (800845c <UART_SetConfig+0x27c>)
 8008352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008354:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008358:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800835c:	d011      	beq.n	8008382 <UART_SetConfig+0x1a2>
 800835e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008362:	d817      	bhi.n	8008394 <UART_SetConfig+0x1b4>
 8008364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008368:	d011      	beq.n	800838e <UART_SetConfig+0x1ae>
 800836a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800836e:	d811      	bhi.n	8008394 <UART_SetConfig+0x1b4>
 8008370:	2b00      	cmp	r3, #0
 8008372:	d003      	beq.n	800837c <UART_SetConfig+0x19c>
 8008374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008378:	d006      	beq.n	8008388 <UART_SetConfig+0x1a8>
 800837a:	e00b      	b.n	8008394 <UART_SetConfig+0x1b4>
 800837c:	2300      	movs	r3, #0
 800837e:	77fb      	strb	r3, [r7, #31]
 8008380:	e037      	b.n	80083f2 <UART_SetConfig+0x212>
 8008382:	2302      	movs	r3, #2
 8008384:	77fb      	strb	r3, [r7, #31]
 8008386:	e034      	b.n	80083f2 <UART_SetConfig+0x212>
 8008388:	2304      	movs	r3, #4
 800838a:	77fb      	strb	r3, [r7, #31]
 800838c:	e031      	b.n	80083f2 <UART_SetConfig+0x212>
 800838e:	2308      	movs	r3, #8
 8008390:	77fb      	strb	r3, [r7, #31]
 8008392:	e02e      	b.n	80083f2 <UART_SetConfig+0x212>
 8008394:	2310      	movs	r3, #16
 8008396:	77fb      	strb	r3, [r7, #31]
 8008398:	e02b      	b.n	80083f2 <UART_SetConfig+0x212>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a33      	ldr	r2, [pc, #204]	; (800846c <UART_SetConfig+0x28c>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d124      	bne.n	80083ee <UART_SetConfig+0x20e>
 80083a4:	4b2d      	ldr	r3, [pc, #180]	; (800845c <UART_SetConfig+0x27c>)
 80083a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80083ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80083b0:	d011      	beq.n	80083d6 <UART_SetConfig+0x1f6>
 80083b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80083b6:	d817      	bhi.n	80083e8 <UART_SetConfig+0x208>
 80083b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083bc:	d011      	beq.n	80083e2 <UART_SetConfig+0x202>
 80083be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083c2:	d811      	bhi.n	80083e8 <UART_SetConfig+0x208>
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d003      	beq.n	80083d0 <UART_SetConfig+0x1f0>
 80083c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083cc:	d006      	beq.n	80083dc <UART_SetConfig+0x1fc>
 80083ce:	e00b      	b.n	80083e8 <UART_SetConfig+0x208>
 80083d0:	2300      	movs	r3, #0
 80083d2:	77fb      	strb	r3, [r7, #31]
 80083d4:	e00d      	b.n	80083f2 <UART_SetConfig+0x212>
 80083d6:	2302      	movs	r3, #2
 80083d8:	77fb      	strb	r3, [r7, #31]
 80083da:	e00a      	b.n	80083f2 <UART_SetConfig+0x212>
 80083dc:	2304      	movs	r3, #4
 80083de:	77fb      	strb	r3, [r7, #31]
 80083e0:	e007      	b.n	80083f2 <UART_SetConfig+0x212>
 80083e2:	2308      	movs	r3, #8
 80083e4:	77fb      	strb	r3, [r7, #31]
 80083e6:	e004      	b.n	80083f2 <UART_SetConfig+0x212>
 80083e8:	2310      	movs	r3, #16
 80083ea:	77fb      	strb	r3, [r7, #31]
 80083ec:	e001      	b.n	80083f2 <UART_SetConfig+0x212>
 80083ee:	2310      	movs	r3, #16
 80083f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	69db      	ldr	r3, [r3, #28]
 80083f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083fa:	d16b      	bne.n	80084d4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80083fc:	7ffb      	ldrb	r3, [r7, #31]
 80083fe:	2b08      	cmp	r3, #8
 8008400:	d838      	bhi.n	8008474 <UART_SetConfig+0x294>
 8008402:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <UART_SetConfig+0x228>)
 8008404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008408:	0800842d 	.word	0x0800842d
 800840c:	08008435 	.word	0x08008435
 8008410:	0800843d 	.word	0x0800843d
 8008414:	08008475 	.word	0x08008475
 8008418:	08008443 	.word	0x08008443
 800841c:	08008475 	.word	0x08008475
 8008420:	08008475 	.word	0x08008475
 8008424:	08008475 	.word	0x08008475
 8008428:	0800844b 	.word	0x0800844b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800842c:	f7fd fde0 	bl	8005ff0 <HAL_RCC_GetPCLK1Freq>
 8008430:	61b8      	str	r0, [r7, #24]
        break;
 8008432:	e024      	b.n	800847e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008434:	f7fd fdfe 	bl	8006034 <HAL_RCC_GetPCLK2Freq>
 8008438:	61b8      	str	r0, [r7, #24]
        break;
 800843a:	e020      	b.n	800847e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800843c:	4b0c      	ldr	r3, [pc, #48]	; (8008470 <UART_SetConfig+0x290>)
 800843e:	61bb      	str	r3, [r7, #24]
        break;
 8008440:	e01d      	b.n	800847e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008442:	f7fd fd5f 	bl	8005f04 <HAL_RCC_GetSysClockFreq>
 8008446:	61b8      	str	r0, [r7, #24]
        break;
 8008448:	e019      	b.n	800847e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800844a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800844e:	61bb      	str	r3, [r7, #24]
        break;
 8008450:	e015      	b.n	800847e <UART_SetConfig+0x29e>
 8008452:	bf00      	nop
 8008454:	efff69f3 	.word	0xefff69f3
 8008458:	40013800 	.word	0x40013800
 800845c:	40021000 	.word	0x40021000
 8008460:	40004400 	.word	0x40004400
 8008464:	40004800 	.word	0x40004800
 8008468:	40004c00 	.word	0x40004c00
 800846c:	40005000 	.word	0x40005000
 8008470:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8008474:	2300      	movs	r3, #0
 8008476:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	77bb      	strb	r3, [r7, #30]
        break;
 800847c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d073      	beq.n	800856c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	005a      	lsls	r2, r3, #1
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	085b      	lsrs	r3, r3, #1
 800848e:	441a      	add	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	fbb2 f3f3 	udiv	r3, r2, r3
 8008498:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	2b0f      	cmp	r3, #15
 800849e:	d916      	bls.n	80084ce <UART_SetConfig+0x2ee>
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084a6:	d212      	bcs.n	80084ce <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	f023 030f 	bic.w	r3, r3, #15
 80084b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	085b      	lsrs	r3, r3, #1
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	f003 0307 	and.w	r3, r3, #7
 80084bc:	b29a      	uxth	r2, r3
 80084be:	89fb      	ldrh	r3, [r7, #14]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	89fa      	ldrh	r2, [r7, #14]
 80084ca:	60da      	str	r2, [r3, #12]
 80084cc:	e04e      	b.n	800856c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	77bb      	strb	r3, [r7, #30]
 80084d2:	e04b      	b.n	800856c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084d4:	7ffb      	ldrb	r3, [r7, #31]
 80084d6:	2b08      	cmp	r3, #8
 80084d8:	d827      	bhi.n	800852a <UART_SetConfig+0x34a>
 80084da:	a201      	add	r2, pc, #4	; (adr r2, 80084e0 <UART_SetConfig+0x300>)
 80084dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e0:	08008505 	.word	0x08008505
 80084e4:	0800850d 	.word	0x0800850d
 80084e8:	08008515 	.word	0x08008515
 80084ec:	0800852b 	.word	0x0800852b
 80084f0:	0800851b 	.word	0x0800851b
 80084f4:	0800852b 	.word	0x0800852b
 80084f8:	0800852b 	.word	0x0800852b
 80084fc:	0800852b 	.word	0x0800852b
 8008500:	08008523 	.word	0x08008523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008504:	f7fd fd74 	bl	8005ff0 <HAL_RCC_GetPCLK1Freq>
 8008508:	61b8      	str	r0, [r7, #24]
        break;
 800850a:	e013      	b.n	8008534 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800850c:	f7fd fd92 	bl	8006034 <HAL_RCC_GetPCLK2Freq>
 8008510:	61b8      	str	r0, [r7, #24]
        break;
 8008512:	e00f      	b.n	8008534 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008514:	4b1b      	ldr	r3, [pc, #108]	; (8008584 <UART_SetConfig+0x3a4>)
 8008516:	61bb      	str	r3, [r7, #24]
        break;
 8008518:	e00c      	b.n	8008534 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800851a:	f7fd fcf3 	bl	8005f04 <HAL_RCC_GetSysClockFreq>
 800851e:	61b8      	str	r0, [r7, #24]
        break;
 8008520:	e008      	b.n	8008534 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008526:	61bb      	str	r3, [r7, #24]
        break;
 8008528:	e004      	b.n	8008534 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800852a:	2300      	movs	r3, #0
 800852c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	77bb      	strb	r3, [r7, #30]
        break;
 8008532:	bf00      	nop
    }

    if (pclk != 0U)
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d018      	beq.n	800856c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	085a      	lsrs	r2, r3, #1
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	441a      	add	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	fbb2 f3f3 	udiv	r3, r2, r3
 800854c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	2b0f      	cmp	r3, #15
 8008552:	d909      	bls.n	8008568 <UART_SetConfig+0x388>
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800855a:	d205      	bcs.n	8008568 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	b29a      	uxth	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	60da      	str	r2, [r3, #12]
 8008566:	e001      	b.n	800856c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008578:	7fbb      	ldrb	r3, [r7, #30]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3720      	adds	r7, #32
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	007a1200 	.word	0x007a1200

08008588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00a      	beq.n	80085b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00a      	beq.n	80085f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	430a      	orrs	r2, r1
 80085f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fa:	f003 0308 	and.w	r3, r3, #8
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00a      	beq.n	8008618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	430a      	orrs	r2, r1
 8008616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	f003 0310 	and.w	r3, r3, #16
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00a      	beq.n	800863a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863e:	f003 0320 	and.w	r3, r3, #32
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00a      	beq.n	800865c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	430a      	orrs	r2, r1
 800865a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	d01a      	beq.n	800869e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008686:	d10a      	bne.n	800869e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	430a      	orrs	r2, r1
 80086be:	605a      	str	r2, [r3, #4]
  }
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b098      	sub	sp, #96	; 0x60
 80086d0:	af02      	add	r7, sp, #8
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086dc:	f7f9 fda0 	bl	8002220 <HAL_GetTick>
 80086e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0308 	and.w	r3, r3, #8
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d12e      	bne.n	800874e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086f8:	2200      	movs	r2, #0
 80086fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f88c 	bl	800881c <UART_WaitOnFlagUntilTimeout>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d021      	beq.n	800874e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	e853 3f00 	ldrex	r3, [r3]
 8008716:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800871e:	653b      	str	r3, [r7, #80]	; 0x50
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	461a      	mov	r2, r3
 8008726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008728:	647b      	str	r3, [r7, #68]	; 0x44
 800872a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800872e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008730:	e841 2300 	strex	r3, r2, [r1]
 8008734:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1e6      	bne.n	800870a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2220      	movs	r2, #32
 8008740:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e062      	b.n	8008814 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b04      	cmp	r3, #4
 800875a:	d149      	bne.n	80087f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800875c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008764:	2200      	movs	r2, #0
 8008766:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f856 	bl	800881c <UART_WaitOnFlagUntilTimeout>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d03c      	beq.n	80087f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	623b      	str	r3, [r7, #32]
   return(result);
 8008784:	6a3b      	ldr	r3, [r7, #32]
 8008786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800878a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008794:	633b      	str	r3, [r7, #48]	; 0x30
 8008796:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800879a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e6      	bne.n	8008776 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3308      	adds	r3, #8
 80087ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	e853 3f00 	ldrex	r3, [r3]
 80087b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f023 0301 	bic.w	r3, r3, #1
 80087be:	64bb      	str	r3, [r7, #72]	; 0x48
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3308      	adds	r3, #8
 80087c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087c8:	61fa      	str	r2, [r7, #28]
 80087ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	69b9      	ldr	r1, [r7, #24]
 80087ce:	69fa      	ldr	r2, [r7, #28]
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	617b      	str	r3, [r7, #20]
   return(result);
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e5      	bne.n	80087a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2220      	movs	r2, #32
 80087e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e011      	b.n	8008814 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2220      	movs	r2, #32
 80087f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2220      	movs	r2, #32
 80087fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3758      	adds	r7, #88	; 0x58
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	603b      	str	r3, [r7, #0]
 8008828:	4613      	mov	r3, r2
 800882a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800882c:	e049      	b.n	80088c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008834:	d045      	beq.n	80088c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008836:	f7f9 fcf3 	bl	8002220 <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	69ba      	ldr	r2, [r7, #24]
 8008842:	429a      	cmp	r2, r3
 8008844:	d302      	bcc.n	800884c <UART_WaitOnFlagUntilTimeout+0x30>
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e048      	b.n	80088e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0304 	and.w	r3, r3, #4
 800885a:	2b00      	cmp	r3, #0
 800885c:	d031      	beq.n	80088c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	69db      	ldr	r3, [r3, #28]
 8008864:	f003 0308 	and.w	r3, r3, #8
 8008868:	2b08      	cmp	r3, #8
 800886a:	d110      	bne.n	800888e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2208      	movs	r2, #8
 8008872:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 f8ff 	bl	8008a78 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2208      	movs	r2, #8
 800887e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e029      	b.n	80088e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	69db      	ldr	r3, [r3, #28]
 8008894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800889c:	d111      	bne.n	80088c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 f8e5 	bl	8008a78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2220      	movs	r2, #32
 80088b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e00f      	b.n	80088e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	69da      	ldr	r2, [r3, #28]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	4013      	ands	r3, r2
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	bf0c      	ite	eq
 80088d2:	2301      	moveq	r3, #1
 80088d4:	2300      	movne	r3, #0
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	461a      	mov	r2, r3
 80088da:	79fb      	ldrb	r3, [r7, #7]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d0a6      	beq.n	800882e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
	...

080088ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b097      	sub	sp, #92	; 0x5c
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	4613      	mov	r3, r2
 80088f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	88fa      	ldrh	r2, [r7, #6]
 8008904:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	88fa      	ldrh	r2, [r7, #6]
 800890c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800891e:	d10e      	bne.n	800893e <UART_Start_Receive_IT+0x52>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d105      	bne.n	8008934 <UART_Start_Receive_IT+0x48>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800892e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008932:	e02d      	b.n	8008990 <UART_Start_Receive_IT+0xa4>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	22ff      	movs	r2, #255	; 0xff
 8008938:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800893c:	e028      	b.n	8008990 <UART_Start_Receive_IT+0xa4>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10d      	bne.n	8008962 <UART_Start_Receive_IT+0x76>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d104      	bne.n	8008958 <UART_Start_Receive_IT+0x6c>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	22ff      	movs	r2, #255	; 0xff
 8008952:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008956:	e01b      	b.n	8008990 <UART_Start_Receive_IT+0xa4>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	227f      	movs	r2, #127	; 0x7f
 800895c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008960:	e016      	b.n	8008990 <UART_Start_Receive_IT+0xa4>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800896a:	d10d      	bne.n	8008988 <UART_Start_Receive_IT+0x9c>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d104      	bne.n	800897e <UART_Start_Receive_IT+0x92>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	227f      	movs	r2, #127	; 0x7f
 8008978:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800897c:	e008      	b.n	8008990 <UART_Start_Receive_IT+0xa4>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	223f      	movs	r2, #63	; 0x3f
 8008982:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008986:	e003      	b.n	8008990 <UART_Start_Receive_IT+0xa4>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2222      	movs	r2, #34	; 0x22
 800899c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3308      	adds	r3, #8
 80089a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089aa:	e853 3f00 	ldrex	r3, [r3]
 80089ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b2:	f043 0301 	orr.w	r3, r3, #1
 80089b6:	657b      	str	r3, [r7, #84]	; 0x54
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3308      	adds	r3, #8
 80089be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80089c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089c8:	e841 2300 	strex	r3, r2, [r1]
 80089cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80089ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1e5      	bne.n	80089a0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089dc:	d107      	bne.n	80089ee <UART_Start_Receive_IT+0x102>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d103      	bne.n	80089ee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	4a21      	ldr	r2, [pc, #132]	; (8008a70 <UART_Start_Receive_IT+0x184>)
 80089ea:	669a      	str	r2, [r3, #104]	; 0x68
 80089ec:	e002      	b.n	80089f4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	4a20      	ldr	r2, [pc, #128]	; (8008a74 <UART_Start_Receive_IT+0x188>)
 80089f2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d019      	beq.n	8008a30 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a04:	e853 3f00 	ldrex	r3, [r3]
 8008a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008a10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	461a      	mov	r2, r3
 8008a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a1c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1e6      	bne.n	80089fc <UART_Start_Receive_IT+0x110>
 8008a2e:	e018      	b.n	8008a62 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	e853 3f00 	ldrex	r3, [r3]
 8008a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f043 0320 	orr.w	r3, r3, #32
 8008a44:	653b      	str	r3, [r7, #80]	; 0x50
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a4e:	623b      	str	r3, [r7, #32]
 8008a50:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a52:	69f9      	ldr	r1, [r7, #28]
 8008a54:	6a3a      	ldr	r2, [r7, #32]
 8008a56:	e841 2300 	strex	r3, r2, [r1]
 8008a5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1e6      	bne.n	8008a30 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	375c      	adds	r7, #92	; 0x5c
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	08008d69 	.word	0x08008d69
 8008a74:	08008bc1 	.word	0x08008bc1

08008a78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b095      	sub	sp, #84	; 0x54
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a88:	e853 3f00 	ldrex	r3, [r3]
 8008a8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a9e:	643b      	str	r3, [r7, #64]	; 0x40
 8008aa0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008aa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008aa6:	e841 2300 	strex	r3, r2, [r1]
 8008aaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1e6      	bne.n	8008a80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3308      	adds	r3, #8
 8008ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	f023 0301 	bic.w	r3, r3, #1
 8008ac8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3308      	adds	r3, #8
 8008ad0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ad2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ad4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ada:	e841 2300 	strex	r3, r2, [r1]
 8008ade:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1e5      	bne.n	8008ab2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d118      	bne.n	8008b20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	e853 3f00 	ldrex	r3, [r3]
 8008afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	f023 0310 	bic.w	r3, r3, #16
 8008b02:	647b      	str	r3, [r7, #68]	; 0x44
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b0c:	61bb      	str	r3, [r7, #24]
 8008b0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b10:	6979      	ldr	r1, [r7, #20]
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	e841 2300 	strex	r3, r2, [r1]
 8008b18:	613b      	str	r3, [r7, #16]
   return(result);
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e6      	bne.n	8008aee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2220      	movs	r2, #32
 8008b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008b34:	bf00      	nop
 8008b36:	3754      	adds	r7, #84	; 0x54
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f7ff fb28 	bl	80081b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b64:	bf00      	nop
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b088      	sub	sp, #32
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	e853 3f00 	ldrex	r3, [r3]
 8008b80:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b88:	61fb      	str	r3, [r7, #28]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	61bb      	str	r3, [r7, #24]
 8008b94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	6979      	ldr	r1, [r7, #20]
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	613b      	str	r3, [r7, #16]
   return(result);
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e6      	bne.n	8008b74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2220      	movs	r2, #32
 8008baa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7ff faf4 	bl	80081a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bb8:	bf00      	nop
 8008bba:	3720      	adds	r7, #32
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b09c      	sub	sp, #112	; 0x70
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bd8:	2b22      	cmp	r3, #34	; 0x22
 8008bda:	f040 80b9 	bne.w	8008d50 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008be4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008be8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008bec:	b2d9      	uxtb	r1, r3
 8008bee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf8:	400a      	ands	r2, r1
 8008bfa:	b2d2      	uxtb	r2, r2
 8008bfc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	3b01      	subs	r3, #1
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f040 809c 	bne.w	8008d60 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c30:	e853 3f00 	ldrex	r3, [r3]
 8008c34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c46:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c48:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c4e:	e841 2300 	strex	r3, r2, [r1]
 8008c52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1e6      	bne.n	8008c28 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3308      	adds	r3, #8
 8008c60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c64:	e853 3f00 	ldrex	r3, [r3]
 8008c68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6c:	f023 0301 	bic.w	r3, r3, #1
 8008c70:	667b      	str	r3, [r7, #100]	; 0x64
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3308      	adds	r3, #8
 8008c78:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c7a:	647a      	str	r2, [r7, #68]	; 0x44
 8008c7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c82:	e841 2300 	strex	r3, r2, [r1]
 8008c86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1e5      	bne.n	8008c5a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2220      	movs	r2, #32
 8008c92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d018      	beq.n	8008ce2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb8:	e853 3f00 	ldrex	r3, [r3]
 8008cbc:	623b      	str	r3, [r7, #32]
   return(result);
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008cc4:	663b      	str	r3, [r7, #96]	; 0x60
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cce:	633b      	str	r3, [r7, #48]	; 0x30
 8008cd0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cd6:	e841 2300 	strex	r3, r2, [r1]
 8008cda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1e6      	bne.n	8008cb0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d12e      	bne.n	8008d48 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	e853 3f00 	ldrex	r3, [r3]
 8008cfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f023 0310 	bic.w	r3, r3, #16
 8008d04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d0e:	61fb      	str	r3, [r7, #28]
 8008d10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d12:	69b9      	ldr	r1, [r7, #24]
 8008d14:	69fa      	ldr	r2, [r7, #28]
 8008d16:	e841 2300 	strex	r3, r2, [r1]
 8008d1a:	617b      	str	r3, [r7, #20]
   return(result);
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1e6      	bne.n	8008cf0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	f003 0310 	and.w	r3, r3, #16
 8008d2c:	2b10      	cmp	r3, #16
 8008d2e:	d103      	bne.n	8008d38 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2210      	movs	r2, #16
 8008d36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7ff fa41 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d46:	e00b      	b.n	8008d60 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7f8 fe4f 	bl	80019ec <HAL_UART_RxCpltCallback>
}
 8008d4e:	e007      	b.n	8008d60 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	699a      	ldr	r2, [r3, #24]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f042 0208 	orr.w	r2, r2, #8
 8008d5e:	619a      	str	r2, [r3, #24]
}
 8008d60:	bf00      	nop
 8008d62:	3770      	adds	r7, #112	; 0x70
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b09c      	sub	sp, #112	; 0x70
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d76:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d80:	2b22      	cmp	r3, #34	; 0x22
 8008d82:	f040 80b9 	bne.w	8008ef8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008d8c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d94:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008d96:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008d9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008d9e:	4013      	ands	r3, r2
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008da4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008daa:	1c9a      	adds	r2, r3, #2
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	3b01      	subs	r3, #1
 8008dba:	b29a      	uxth	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f040 809c 	bne.w	8008f08 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dd8:	e853 3f00 	ldrex	r3, [r3]
 8008ddc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008de0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008de4:	667b      	str	r3, [r7, #100]	; 0x64
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	461a      	mov	r2, r3
 8008dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dee:	657b      	str	r3, [r7, #84]	; 0x54
 8008df0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008df4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008df6:	e841 2300 	strex	r3, r2, [r1]
 8008dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1e6      	bne.n	8008dd0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3308      	adds	r3, #8
 8008e08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e0c:	e853 3f00 	ldrex	r3, [r3]
 8008e10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	f023 0301 	bic.w	r3, r3, #1
 8008e18:	663b      	str	r3, [r7, #96]	; 0x60
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3308      	adds	r3, #8
 8008e20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e22:	643a      	str	r2, [r7, #64]	; 0x40
 8008e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e2a:	e841 2300 	strex	r3, r2, [r1]
 8008e2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1e5      	bne.n	8008e02 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d018      	beq.n	8008e8a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e78:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e6      	bne.n	8008e58 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d12e      	bne.n	8008ef0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	e853 3f00 	ldrex	r3, [r3]
 8008ea4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	f023 0310 	bic.w	r3, r3, #16
 8008eac:	65bb      	str	r3, [r7, #88]	; 0x58
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008eb6:	61bb      	str	r3, [r7, #24]
 8008eb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eba:	6979      	ldr	r1, [r7, #20]
 8008ebc:	69ba      	ldr	r2, [r7, #24]
 8008ebe:	e841 2300 	strex	r3, r2, [r1]
 8008ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1e6      	bne.n	8008e98 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	69db      	ldr	r3, [r3, #28]
 8008ed0:	f003 0310 	and.w	r3, r3, #16
 8008ed4:	2b10      	cmp	r3, #16
 8008ed6:	d103      	bne.n	8008ee0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2210      	movs	r2, #16
 8008ede:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7ff f96d 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008eee:	e00b      	b.n	8008f08 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7f8 fd7b 	bl	80019ec <HAL_UART_RxCpltCallback>
}
 8008ef6:	e007      	b.n	8008f08 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	699a      	ldr	r2, [r3, #24]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f042 0208 	orr.w	r2, r2, #8
 8008f06:	619a      	str	r2, [r3, #24]
}
 8008f08:	bf00      	nop
 8008f0a:	3770      	adds	r7, #112	; 0x70
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <__errno>:
 8008f24:	4b01      	ldr	r3, [pc, #4]	; (8008f2c <__errno+0x8>)
 8008f26:	6818      	ldr	r0, [r3, #0]
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	2000000c 	.word	0x2000000c

08008f30 <__libc_init_array>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	4d0d      	ldr	r5, [pc, #52]	; (8008f68 <__libc_init_array+0x38>)
 8008f34:	4c0d      	ldr	r4, [pc, #52]	; (8008f6c <__libc_init_array+0x3c>)
 8008f36:	1b64      	subs	r4, r4, r5
 8008f38:	10a4      	asrs	r4, r4, #2
 8008f3a:	2600      	movs	r6, #0
 8008f3c:	42a6      	cmp	r6, r4
 8008f3e:	d109      	bne.n	8008f54 <__libc_init_array+0x24>
 8008f40:	4d0b      	ldr	r5, [pc, #44]	; (8008f70 <__libc_init_array+0x40>)
 8008f42:	4c0c      	ldr	r4, [pc, #48]	; (8008f74 <__libc_init_array+0x44>)
 8008f44:	f002 ff04 	bl	800bd50 <_init>
 8008f48:	1b64      	subs	r4, r4, r5
 8008f4a:	10a4      	asrs	r4, r4, #2
 8008f4c:	2600      	movs	r6, #0
 8008f4e:	42a6      	cmp	r6, r4
 8008f50:	d105      	bne.n	8008f5e <__libc_init_array+0x2e>
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f58:	4798      	blx	r3
 8008f5a:	3601      	adds	r6, #1
 8008f5c:	e7ee      	b.n	8008f3c <__libc_init_array+0xc>
 8008f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f62:	4798      	blx	r3
 8008f64:	3601      	adds	r6, #1
 8008f66:	e7f2      	b.n	8008f4e <__libc_init_array+0x1e>
 8008f68:	0800c184 	.word	0x0800c184
 8008f6c:	0800c184 	.word	0x0800c184
 8008f70:	0800c184 	.word	0x0800c184
 8008f74:	0800c188 	.word	0x0800c188

08008f78 <memset>:
 8008f78:	4402      	add	r2, r0
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d100      	bne.n	8008f82 <memset+0xa>
 8008f80:	4770      	bx	lr
 8008f82:	f803 1b01 	strb.w	r1, [r3], #1
 8008f86:	e7f9      	b.n	8008f7c <memset+0x4>

08008f88 <__cvt>:
 8008f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f8c:	ec55 4b10 	vmov	r4, r5, d0
 8008f90:	2d00      	cmp	r5, #0
 8008f92:	460e      	mov	r6, r1
 8008f94:	4619      	mov	r1, r3
 8008f96:	462b      	mov	r3, r5
 8008f98:	bfbb      	ittet	lt
 8008f9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f9e:	461d      	movlt	r5, r3
 8008fa0:	2300      	movge	r3, #0
 8008fa2:	232d      	movlt	r3, #45	; 0x2d
 8008fa4:	700b      	strb	r3, [r1, #0]
 8008fa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fa8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008fac:	4691      	mov	r9, r2
 8008fae:	f023 0820 	bic.w	r8, r3, #32
 8008fb2:	bfbc      	itt	lt
 8008fb4:	4622      	movlt	r2, r4
 8008fb6:	4614      	movlt	r4, r2
 8008fb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fbc:	d005      	beq.n	8008fca <__cvt+0x42>
 8008fbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008fc2:	d100      	bne.n	8008fc6 <__cvt+0x3e>
 8008fc4:	3601      	adds	r6, #1
 8008fc6:	2102      	movs	r1, #2
 8008fc8:	e000      	b.n	8008fcc <__cvt+0x44>
 8008fca:	2103      	movs	r1, #3
 8008fcc:	ab03      	add	r3, sp, #12
 8008fce:	9301      	str	r3, [sp, #4]
 8008fd0:	ab02      	add	r3, sp, #8
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	ec45 4b10 	vmov	d0, r4, r5
 8008fd8:	4653      	mov	r3, sl
 8008fda:	4632      	mov	r2, r6
 8008fdc:	f000 fcec 	bl	80099b8 <_dtoa_r>
 8008fe0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008fe4:	4607      	mov	r7, r0
 8008fe6:	d102      	bne.n	8008fee <__cvt+0x66>
 8008fe8:	f019 0f01 	tst.w	r9, #1
 8008fec:	d022      	beq.n	8009034 <__cvt+0xac>
 8008fee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ff2:	eb07 0906 	add.w	r9, r7, r6
 8008ff6:	d110      	bne.n	800901a <__cvt+0x92>
 8008ff8:	783b      	ldrb	r3, [r7, #0]
 8008ffa:	2b30      	cmp	r3, #48	; 0x30
 8008ffc:	d10a      	bne.n	8009014 <__cvt+0x8c>
 8008ffe:	2200      	movs	r2, #0
 8009000:	2300      	movs	r3, #0
 8009002:	4620      	mov	r0, r4
 8009004:	4629      	mov	r1, r5
 8009006:	f7f7 fd67 	bl	8000ad8 <__aeabi_dcmpeq>
 800900a:	b918      	cbnz	r0, 8009014 <__cvt+0x8c>
 800900c:	f1c6 0601 	rsb	r6, r6, #1
 8009010:	f8ca 6000 	str.w	r6, [sl]
 8009014:	f8da 3000 	ldr.w	r3, [sl]
 8009018:	4499      	add	r9, r3
 800901a:	2200      	movs	r2, #0
 800901c:	2300      	movs	r3, #0
 800901e:	4620      	mov	r0, r4
 8009020:	4629      	mov	r1, r5
 8009022:	f7f7 fd59 	bl	8000ad8 <__aeabi_dcmpeq>
 8009026:	b108      	cbz	r0, 800902c <__cvt+0xa4>
 8009028:	f8cd 900c 	str.w	r9, [sp, #12]
 800902c:	2230      	movs	r2, #48	; 0x30
 800902e:	9b03      	ldr	r3, [sp, #12]
 8009030:	454b      	cmp	r3, r9
 8009032:	d307      	bcc.n	8009044 <__cvt+0xbc>
 8009034:	9b03      	ldr	r3, [sp, #12]
 8009036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009038:	1bdb      	subs	r3, r3, r7
 800903a:	4638      	mov	r0, r7
 800903c:	6013      	str	r3, [r2, #0]
 800903e:	b004      	add	sp, #16
 8009040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009044:	1c59      	adds	r1, r3, #1
 8009046:	9103      	str	r1, [sp, #12]
 8009048:	701a      	strb	r2, [r3, #0]
 800904a:	e7f0      	b.n	800902e <__cvt+0xa6>

0800904c <__exponent>:
 800904c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800904e:	4603      	mov	r3, r0
 8009050:	2900      	cmp	r1, #0
 8009052:	bfb8      	it	lt
 8009054:	4249      	neglt	r1, r1
 8009056:	f803 2b02 	strb.w	r2, [r3], #2
 800905a:	bfb4      	ite	lt
 800905c:	222d      	movlt	r2, #45	; 0x2d
 800905e:	222b      	movge	r2, #43	; 0x2b
 8009060:	2909      	cmp	r1, #9
 8009062:	7042      	strb	r2, [r0, #1]
 8009064:	dd2a      	ble.n	80090bc <__exponent+0x70>
 8009066:	f10d 0407 	add.w	r4, sp, #7
 800906a:	46a4      	mov	ip, r4
 800906c:	270a      	movs	r7, #10
 800906e:	46a6      	mov	lr, r4
 8009070:	460a      	mov	r2, r1
 8009072:	fb91 f6f7 	sdiv	r6, r1, r7
 8009076:	fb07 1516 	mls	r5, r7, r6, r1
 800907a:	3530      	adds	r5, #48	; 0x30
 800907c:	2a63      	cmp	r2, #99	; 0x63
 800907e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009082:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009086:	4631      	mov	r1, r6
 8009088:	dcf1      	bgt.n	800906e <__exponent+0x22>
 800908a:	3130      	adds	r1, #48	; 0x30
 800908c:	f1ae 0502 	sub.w	r5, lr, #2
 8009090:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009094:	1c44      	adds	r4, r0, #1
 8009096:	4629      	mov	r1, r5
 8009098:	4561      	cmp	r1, ip
 800909a:	d30a      	bcc.n	80090b2 <__exponent+0x66>
 800909c:	f10d 0209 	add.w	r2, sp, #9
 80090a0:	eba2 020e 	sub.w	r2, r2, lr
 80090a4:	4565      	cmp	r5, ip
 80090a6:	bf88      	it	hi
 80090a8:	2200      	movhi	r2, #0
 80090aa:	4413      	add	r3, r2
 80090ac:	1a18      	subs	r0, r3, r0
 80090ae:	b003      	add	sp, #12
 80090b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80090ba:	e7ed      	b.n	8009098 <__exponent+0x4c>
 80090bc:	2330      	movs	r3, #48	; 0x30
 80090be:	3130      	adds	r1, #48	; 0x30
 80090c0:	7083      	strb	r3, [r0, #2]
 80090c2:	70c1      	strb	r1, [r0, #3]
 80090c4:	1d03      	adds	r3, r0, #4
 80090c6:	e7f1      	b.n	80090ac <__exponent+0x60>

080090c8 <_printf_float>:
 80090c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090cc:	ed2d 8b02 	vpush	{d8}
 80090d0:	b08d      	sub	sp, #52	; 0x34
 80090d2:	460c      	mov	r4, r1
 80090d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80090d8:	4616      	mov	r6, r2
 80090da:	461f      	mov	r7, r3
 80090dc:	4605      	mov	r5, r0
 80090de:	f001 fa59 	bl	800a594 <_localeconv_r>
 80090e2:	f8d0 a000 	ldr.w	sl, [r0]
 80090e6:	4650      	mov	r0, sl
 80090e8:	f7f7 f87a 	bl	80001e0 <strlen>
 80090ec:	2300      	movs	r3, #0
 80090ee:	930a      	str	r3, [sp, #40]	; 0x28
 80090f0:	6823      	ldr	r3, [r4, #0]
 80090f2:	9305      	str	r3, [sp, #20]
 80090f4:	f8d8 3000 	ldr.w	r3, [r8]
 80090f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80090fc:	3307      	adds	r3, #7
 80090fe:	f023 0307 	bic.w	r3, r3, #7
 8009102:	f103 0208 	add.w	r2, r3, #8
 8009106:	f8c8 2000 	str.w	r2, [r8]
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009112:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009116:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800911a:	9307      	str	r3, [sp, #28]
 800911c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009120:	ee08 0a10 	vmov	s16, r0
 8009124:	4b9f      	ldr	r3, [pc, #636]	; (80093a4 <_printf_float+0x2dc>)
 8009126:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800912a:	f04f 32ff 	mov.w	r2, #4294967295
 800912e:	f7f7 fd05 	bl	8000b3c <__aeabi_dcmpun>
 8009132:	bb88      	cbnz	r0, 8009198 <_printf_float+0xd0>
 8009134:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009138:	4b9a      	ldr	r3, [pc, #616]	; (80093a4 <_printf_float+0x2dc>)
 800913a:	f04f 32ff 	mov.w	r2, #4294967295
 800913e:	f7f7 fcdf 	bl	8000b00 <__aeabi_dcmple>
 8009142:	bb48      	cbnz	r0, 8009198 <_printf_float+0xd0>
 8009144:	2200      	movs	r2, #0
 8009146:	2300      	movs	r3, #0
 8009148:	4640      	mov	r0, r8
 800914a:	4649      	mov	r1, r9
 800914c:	f7f7 fcce 	bl	8000aec <__aeabi_dcmplt>
 8009150:	b110      	cbz	r0, 8009158 <_printf_float+0x90>
 8009152:	232d      	movs	r3, #45	; 0x2d
 8009154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009158:	4b93      	ldr	r3, [pc, #588]	; (80093a8 <_printf_float+0x2e0>)
 800915a:	4894      	ldr	r0, [pc, #592]	; (80093ac <_printf_float+0x2e4>)
 800915c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009160:	bf94      	ite	ls
 8009162:	4698      	movls	r8, r3
 8009164:	4680      	movhi	r8, r0
 8009166:	2303      	movs	r3, #3
 8009168:	6123      	str	r3, [r4, #16]
 800916a:	9b05      	ldr	r3, [sp, #20]
 800916c:	f023 0204 	bic.w	r2, r3, #4
 8009170:	6022      	str	r2, [r4, #0]
 8009172:	f04f 0900 	mov.w	r9, #0
 8009176:	9700      	str	r7, [sp, #0]
 8009178:	4633      	mov	r3, r6
 800917a:	aa0b      	add	r2, sp, #44	; 0x2c
 800917c:	4621      	mov	r1, r4
 800917e:	4628      	mov	r0, r5
 8009180:	f000 f9d8 	bl	8009534 <_printf_common>
 8009184:	3001      	adds	r0, #1
 8009186:	f040 8090 	bne.w	80092aa <_printf_float+0x1e2>
 800918a:	f04f 30ff 	mov.w	r0, #4294967295
 800918e:	b00d      	add	sp, #52	; 0x34
 8009190:	ecbd 8b02 	vpop	{d8}
 8009194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009198:	4642      	mov	r2, r8
 800919a:	464b      	mov	r3, r9
 800919c:	4640      	mov	r0, r8
 800919e:	4649      	mov	r1, r9
 80091a0:	f7f7 fccc 	bl	8000b3c <__aeabi_dcmpun>
 80091a4:	b140      	cbz	r0, 80091b8 <_printf_float+0xf0>
 80091a6:	464b      	mov	r3, r9
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	bfbc      	itt	lt
 80091ac:	232d      	movlt	r3, #45	; 0x2d
 80091ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80091b2:	487f      	ldr	r0, [pc, #508]	; (80093b0 <_printf_float+0x2e8>)
 80091b4:	4b7f      	ldr	r3, [pc, #508]	; (80093b4 <_printf_float+0x2ec>)
 80091b6:	e7d1      	b.n	800915c <_printf_float+0x94>
 80091b8:	6863      	ldr	r3, [r4, #4]
 80091ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80091be:	9206      	str	r2, [sp, #24]
 80091c0:	1c5a      	adds	r2, r3, #1
 80091c2:	d13f      	bne.n	8009244 <_printf_float+0x17c>
 80091c4:	2306      	movs	r3, #6
 80091c6:	6063      	str	r3, [r4, #4]
 80091c8:	9b05      	ldr	r3, [sp, #20]
 80091ca:	6861      	ldr	r1, [r4, #4]
 80091cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80091d0:	2300      	movs	r3, #0
 80091d2:	9303      	str	r3, [sp, #12]
 80091d4:	ab0a      	add	r3, sp, #40	; 0x28
 80091d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80091da:	ab09      	add	r3, sp, #36	; 0x24
 80091dc:	ec49 8b10 	vmov	d0, r8, r9
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	6022      	str	r2, [r4, #0]
 80091e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80091e8:	4628      	mov	r0, r5
 80091ea:	f7ff fecd 	bl	8008f88 <__cvt>
 80091ee:	9b06      	ldr	r3, [sp, #24]
 80091f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091f2:	2b47      	cmp	r3, #71	; 0x47
 80091f4:	4680      	mov	r8, r0
 80091f6:	d108      	bne.n	800920a <_printf_float+0x142>
 80091f8:	1cc8      	adds	r0, r1, #3
 80091fa:	db02      	blt.n	8009202 <_printf_float+0x13a>
 80091fc:	6863      	ldr	r3, [r4, #4]
 80091fe:	4299      	cmp	r1, r3
 8009200:	dd41      	ble.n	8009286 <_printf_float+0x1be>
 8009202:	f1ab 0b02 	sub.w	fp, fp, #2
 8009206:	fa5f fb8b 	uxtb.w	fp, fp
 800920a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800920e:	d820      	bhi.n	8009252 <_printf_float+0x18a>
 8009210:	3901      	subs	r1, #1
 8009212:	465a      	mov	r2, fp
 8009214:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009218:	9109      	str	r1, [sp, #36]	; 0x24
 800921a:	f7ff ff17 	bl	800904c <__exponent>
 800921e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009220:	1813      	adds	r3, r2, r0
 8009222:	2a01      	cmp	r2, #1
 8009224:	4681      	mov	r9, r0
 8009226:	6123      	str	r3, [r4, #16]
 8009228:	dc02      	bgt.n	8009230 <_printf_float+0x168>
 800922a:	6822      	ldr	r2, [r4, #0]
 800922c:	07d2      	lsls	r2, r2, #31
 800922e:	d501      	bpl.n	8009234 <_printf_float+0x16c>
 8009230:	3301      	adds	r3, #1
 8009232:	6123      	str	r3, [r4, #16]
 8009234:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009238:	2b00      	cmp	r3, #0
 800923a:	d09c      	beq.n	8009176 <_printf_float+0xae>
 800923c:	232d      	movs	r3, #45	; 0x2d
 800923e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009242:	e798      	b.n	8009176 <_printf_float+0xae>
 8009244:	9a06      	ldr	r2, [sp, #24]
 8009246:	2a47      	cmp	r2, #71	; 0x47
 8009248:	d1be      	bne.n	80091c8 <_printf_float+0x100>
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1bc      	bne.n	80091c8 <_printf_float+0x100>
 800924e:	2301      	movs	r3, #1
 8009250:	e7b9      	b.n	80091c6 <_printf_float+0xfe>
 8009252:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009256:	d118      	bne.n	800928a <_printf_float+0x1c2>
 8009258:	2900      	cmp	r1, #0
 800925a:	6863      	ldr	r3, [r4, #4]
 800925c:	dd0b      	ble.n	8009276 <_printf_float+0x1ae>
 800925e:	6121      	str	r1, [r4, #16]
 8009260:	b913      	cbnz	r3, 8009268 <_printf_float+0x1a0>
 8009262:	6822      	ldr	r2, [r4, #0]
 8009264:	07d0      	lsls	r0, r2, #31
 8009266:	d502      	bpl.n	800926e <_printf_float+0x1a6>
 8009268:	3301      	adds	r3, #1
 800926a:	440b      	add	r3, r1
 800926c:	6123      	str	r3, [r4, #16]
 800926e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009270:	f04f 0900 	mov.w	r9, #0
 8009274:	e7de      	b.n	8009234 <_printf_float+0x16c>
 8009276:	b913      	cbnz	r3, 800927e <_printf_float+0x1b6>
 8009278:	6822      	ldr	r2, [r4, #0]
 800927a:	07d2      	lsls	r2, r2, #31
 800927c:	d501      	bpl.n	8009282 <_printf_float+0x1ba>
 800927e:	3302      	adds	r3, #2
 8009280:	e7f4      	b.n	800926c <_printf_float+0x1a4>
 8009282:	2301      	movs	r3, #1
 8009284:	e7f2      	b.n	800926c <_printf_float+0x1a4>
 8009286:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800928a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800928c:	4299      	cmp	r1, r3
 800928e:	db05      	blt.n	800929c <_printf_float+0x1d4>
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	6121      	str	r1, [r4, #16]
 8009294:	07d8      	lsls	r0, r3, #31
 8009296:	d5ea      	bpl.n	800926e <_printf_float+0x1a6>
 8009298:	1c4b      	adds	r3, r1, #1
 800929a:	e7e7      	b.n	800926c <_printf_float+0x1a4>
 800929c:	2900      	cmp	r1, #0
 800929e:	bfd4      	ite	le
 80092a0:	f1c1 0202 	rsble	r2, r1, #2
 80092a4:	2201      	movgt	r2, #1
 80092a6:	4413      	add	r3, r2
 80092a8:	e7e0      	b.n	800926c <_printf_float+0x1a4>
 80092aa:	6823      	ldr	r3, [r4, #0]
 80092ac:	055a      	lsls	r2, r3, #21
 80092ae:	d407      	bmi.n	80092c0 <_printf_float+0x1f8>
 80092b0:	6923      	ldr	r3, [r4, #16]
 80092b2:	4642      	mov	r2, r8
 80092b4:	4631      	mov	r1, r6
 80092b6:	4628      	mov	r0, r5
 80092b8:	47b8      	blx	r7
 80092ba:	3001      	adds	r0, #1
 80092bc:	d12c      	bne.n	8009318 <_printf_float+0x250>
 80092be:	e764      	b.n	800918a <_printf_float+0xc2>
 80092c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092c4:	f240 80e0 	bls.w	8009488 <_printf_float+0x3c0>
 80092c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092cc:	2200      	movs	r2, #0
 80092ce:	2300      	movs	r3, #0
 80092d0:	f7f7 fc02 	bl	8000ad8 <__aeabi_dcmpeq>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d034      	beq.n	8009342 <_printf_float+0x27a>
 80092d8:	4a37      	ldr	r2, [pc, #220]	; (80093b8 <_printf_float+0x2f0>)
 80092da:	2301      	movs	r3, #1
 80092dc:	4631      	mov	r1, r6
 80092de:	4628      	mov	r0, r5
 80092e0:	47b8      	blx	r7
 80092e2:	3001      	adds	r0, #1
 80092e4:	f43f af51 	beq.w	800918a <_printf_float+0xc2>
 80092e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092ec:	429a      	cmp	r2, r3
 80092ee:	db02      	blt.n	80092f6 <_printf_float+0x22e>
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	07d8      	lsls	r0, r3, #31
 80092f4:	d510      	bpl.n	8009318 <_printf_float+0x250>
 80092f6:	ee18 3a10 	vmov	r3, s16
 80092fa:	4652      	mov	r2, sl
 80092fc:	4631      	mov	r1, r6
 80092fe:	4628      	mov	r0, r5
 8009300:	47b8      	blx	r7
 8009302:	3001      	adds	r0, #1
 8009304:	f43f af41 	beq.w	800918a <_printf_float+0xc2>
 8009308:	f04f 0800 	mov.w	r8, #0
 800930c:	f104 091a 	add.w	r9, r4, #26
 8009310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009312:	3b01      	subs	r3, #1
 8009314:	4543      	cmp	r3, r8
 8009316:	dc09      	bgt.n	800932c <_printf_float+0x264>
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	079b      	lsls	r3, r3, #30
 800931c:	f100 8105 	bmi.w	800952a <_printf_float+0x462>
 8009320:	68e0      	ldr	r0, [r4, #12]
 8009322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009324:	4298      	cmp	r0, r3
 8009326:	bfb8      	it	lt
 8009328:	4618      	movlt	r0, r3
 800932a:	e730      	b.n	800918e <_printf_float+0xc6>
 800932c:	2301      	movs	r3, #1
 800932e:	464a      	mov	r2, r9
 8009330:	4631      	mov	r1, r6
 8009332:	4628      	mov	r0, r5
 8009334:	47b8      	blx	r7
 8009336:	3001      	adds	r0, #1
 8009338:	f43f af27 	beq.w	800918a <_printf_float+0xc2>
 800933c:	f108 0801 	add.w	r8, r8, #1
 8009340:	e7e6      	b.n	8009310 <_printf_float+0x248>
 8009342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009344:	2b00      	cmp	r3, #0
 8009346:	dc39      	bgt.n	80093bc <_printf_float+0x2f4>
 8009348:	4a1b      	ldr	r2, [pc, #108]	; (80093b8 <_printf_float+0x2f0>)
 800934a:	2301      	movs	r3, #1
 800934c:	4631      	mov	r1, r6
 800934e:	4628      	mov	r0, r5
 8009350:	47b8      	blx	r7
 8009352:	3001      	adds	r0, #1
 8009354:	f43f af19 	beq.w	800918a <_printf_float+0xc2>
 8009358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800935c:	4313      	orrs	r3, r2
 800935e:	d102      	bne.n	8009366 <_printf_float+0x29e>
 8009360:	6823      	ldr	r3, [r4, #0]
 8009362:	07d9      	lsls	r1, r3, #31
 8009364:	d5d8      	bpl.n	8009318 <_printf_float+0x250>
 8009366:	ee18 3a10 	vmov	r3, s16
 800936a:	4652      	mov	r2, sl
 800936c:	4631      	mov	r1, r6
 800936e:	4628      	mov	r0, r5
 8009370:	47b8      	blx	r7
 8009372:	3001      	adds	r0, #1
 8009374:	f43f af09 	beq.w	800918a <_printf_float+0xc2>
 8009378:	f04f 0900 	mov.w	r9, #0
 800937c:	f104 0a1a 	add.w	sl, r4, #26
 8009380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009382:	425b      	negs	r3, r3
 8009384:	454b      	cmp	r3, r9
 8009386:	dc01      	bgt.n	800938c <_printf_float+0x2c4>
 8009388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800938a:	e792      	b.n	80092b2 <_printf_float+0x1ea>
 800938c:	2301      	movs	r3, #1
 800938e:	4652      	mov	r2, sl
 8009390:	4631      	mov	r1, r6
 8009392:	4628      	mov	r0, r5
 8009394:	47b8      	blx	r7
 8009396:	3001      	adds	r0, #1
 8009398:	f43f aef7 	beq.w	800918a <_printf_float+0xc2>
 800939c:	f109 0901 	add.w	r9, r9, #1
 80093a0:	e7ee      	b.n	8009380 <_printf_float+0x2b8>
 80093a2:	bf00      	nop
 80093a4:	7fefffff 	.word	0x7fefffff
 80093a8:	0800bdac 	.word	0x0800bdac
 80093ac:	0800bdb0 	.word	0x0800bdb0
 80093b0:	0800bdb8 	.word	0x0800bdb8
 80093b4:	0800bdb4 	.word	0x0800bdb4
 80093b8:	0800bdbc 	.word	0x0800bdbc
 80093bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093c0:	429a      	cmp	r2, r3
 80093c2:	bfa8      	it	ge
 80093c4:	461a      	movge	r2, r3
 80093c6:	2a00      	cmp	r2, #0
 80093c8:	4691      	mov	r9, r2
 80093ca:	dc37      	bgt.n	800943c <_printf_float+0x374>
 80093cc:	f04f 0b00 	mov.w	fp, #0
 80093d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093d4:	f104 021a 	add.w	r2, r4, #26
 80093d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093da:	9305      	str	r3, [sp, #20]
 80093dc:	eba3 0309 	sub.w	r3, r3, r9
 80093e0:	455b      	cmp	r3, fp
 80093e2:	dc33      	bgt.n	800944c <_printf_float+0x384>
 80093e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093e8:	429a      	cmp	r2, r3
 80093ea:	db3b      	blt.n	8009464 <_printf_float+0x39c>
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	07da      	lsls	r2, r3, #31
 80093f0:	d438      	bmi.n	8009464 <_printf_float+0x39c>
 80093f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f4:	9a05      	ldr	r2, [sp, #20]
 80093f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093f8:	1a9a      	subs	r2, r3, r2
 80093fa:	eba3 0901 	sub.w	r9, r3, r1
 80093fe:	4591      	cmp	r9, r2
 8009400:	bfa8      	it	ge
 8009402:	4691      	movge	r9, r2
 8009404:	f1b9 0f00 	cmp.w	r9, #0
 8009408:	dc35      	bgt.n	8009476 <_printf_float+0x3ae>
 800940a:	f04f 0800 	mov.w	r8, #0
 800940e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009412:	f104 0a1a 	add.w	sl, r4, #26
 8009416:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800941a:	1a9b      	subs	r3, r3, r2
 800941c:	eba3 0309 	sub.w	r3, r3, r9
 8009420:	4543      	cmp	r3, r8
 8009422:	f77f af79 	ble.w	8009318 <_printf_float+0x250>
 8009426:	2301      	movs	r3, #1
 8009428:	4652      	mov	r2, sl
 800942a:	4631      	mov	r1, r6
 800942c:	4628      	mov	r0, r5
 800942e:	47b8      	blx	r7
 8009430:	3001      	adds	r0, #1
 8009432:	f43f aeaa 	beq.w	800918a <_printf_float+0xc2>
 8009436:	f108 0801 	add.w	r8, r8, #1
 800943a:	e7ec      	b.n	8009416 <_printf_float+0x34e>
 800943c:	4613      	mov	r3, r2
 800943e:	4631      	mov	r1, r6
 8009440:	4642      	mov	r2, r8
 8009442:	4628      	mov	r0, r5
 8009444:	47b8      	blx	r7
 8009446:	3001      	adds	r0, #1
 8009448:	d1c0      	bne.n	80093cc <_printf_float+0x304>
 800944a:	e69e      	b.n	800918a <_printf_float+0xc2>
 800944c:	2301      	movs	r3, #1
 800944e:	4631      	mov	r1, r6
 8009450:	4628      	mov	r0, r5
 8009452:	9205      	str	r2, [sp, #20]
 8009454:	47b8      	blx	r7
 8009456:	3001      	adds	r0, #1
 8009458:	f43f ae97 	beq.w	800918a <_printf_float+0xc2>
 800945c:	9a05      	ldr	r2, [sp, #20]
 800945e:	f10b 0b01 	add.w	fp, fp, #1
 8009462:	e7b9      	b.n	80093d8 <_printf_float+0x310>
 8009464:	ee18 3a10 	vmov	r3, s16
 8009468:	4652      	mov	r2, sl
 800946a:	4631      	mov	r1, r6
 800946c:	4628      	mov	r0, r5
 800946e:	47b8      	blx	r7
 8009470:	3001      	adds	r0, #1
 8009472:	d1be      	bne.n	80093f2 <_printf_float+0x32a>
 8009474:	e689      	b.n	800918a <_printf_float+0xc2>
 8009476:	9a05      	ldr	r2, [sp, #20]
 8009478:	464b      	mov	r3, r9
 800947a:	4442      	add	r2, r8
 800947c:	4631      	mov	r1, r6
 800947e:	4628      	mov	r0, r5
 8009480:	47b8      	blx	r7
 8009482:	3001      	adds	r0, #1
 8009484:	d1c1      	bne.n	800940a <_printf_float+0x342>
 8009486:	e680      	b.n	800918a <_printf_float+0xc2>
 8009488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800948a:	2a01      	cmp	r2, #1
 800948c:	dc01      	bgt.n	8009492 <_printf_float+0x3ca>
 800948e:	07db      	lsls	r3, r3, #31
 8009490:	d538      	bpl.n	8009504 <_printf_float+0x43c>
 8009492:	2301      	movs	r3, #1
 8009494:	4642      	mov	r2, r8
 8009496:	4631      	mov	r1, r6
 8009498:	4628      	mov	r0, r5
 800949a:	47b8      	blx	r7
 800949c:	3001      	adds	r0, #1
 800949e:	f43f ae74 	beq.w	800918a <_printf_float+0xc2>
 80094a2:	ee18 3a10 	vmov	r3, s16
 80094a6:	4652      	mov	r2, sl
 80094a8:	4631      	mov	r1, r6
 80094aa:	4628      	mov	r0, r5
 80094ac:	47b8      	blx	r7
 80094ae:	3001      	adds	r0, #1
 80094b0:	f43f ae6b 	beq.w	800918a <_printf_float+0xc2>
 80094b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094b8:	2200      	movs	r2, #0
 80094ba:	2300      	movs	r3, #0
 80094bc:	f7f7 fb0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80094c0:	b9d8      	cbnz	r0, 80094fa <_printf_float+0x432>
 80094c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c4:	f108 0201 	add.w	r2, r8, #1
 80094c8:	3b01      	subs	r3, #1
 80094ca:	4631      	mov	r1, r6
 80094cc:	4628      	mov	r0, r5
 80094ce:	47b8      	blx	r7
 80094d0:	3001      	adds	r0, #1
 80094d2:	d10e      	bne.n	80094f2 <_printf_float+0x42a>
 80094d4:	e659      	b.n	800918a <_printf_float+0xc2>
 80094d6:	2301      	movs	r3, #1
 80094d8:	4652      	mov	r2, sl
 80094da:	4631      	mov	r1, r6
 80094dc:	4628      	mov	r0, r5
 80094de:	47b8      	blx	r7
 80094e0:	3001      	adds	r0, #1
 80094e2:	f43f ae52 	beq.w	800918a <_printf_float+0xc2>
 80094e6:	f108 0801 	add.w	r8, r8, #1
 80094ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ec:	3b01      	subs	r3, #1
 80094ee:	4543      	cmp	r3, r8
 80094f0:	dcf1      	bgt.n	80094d6 <_printf_float+0x40e>
 80094f2:	464b      	mov	r3, r9
 80094f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80094f8:	e6dc      	b.n	80092b4 <_printf_float+0x1ec>
 80094fa:	f04f 0800 	mov.w	r8, #0
 80094fe:	f104 0a1a 	add.w	sl, r4, #26
 8009502:	e7f2      	b.n	80094ea <_printf_float+0x422>
 8009504:	2301      	movs	r3, #1
 8009506:	4642      	mov	r2, r8
 8009508:	e7df      	b.n	80094ca <_printf_float+0x402>
 800950a:	2301      	movs	r3, #1
 800950c:	464a      	mov	r2, r9
 800950e:	4631      	mov	r1, r6
 8009510:	4628      	mov	r0, r5
 8009512:	47b8      	blx	r7
 8009514:	3001      	adds	r0, #1
 8009516:	f43f ae38 	beq.w	800918a <_printf_float+0xc2>
 800951a:	f108 0801 	add.w	r8, r8, #1
 800951e:	68e3      	ldr	r3, [r4, #12]
 8009520:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009522:	1a5b      	subs	r3, r3, r1
 8009524:	4543      	cmp	r3, r8
 8009526:	dcf0      	bgt.n	800950a <_printf_float+0x442>
 8009528:	e6fa      	b.n	8009320 <_printf_float+0x258>
 800952a:	f04f 0800 	mov.w	r8, #0
 800952e:	f104 0919 	add.w	r9, r4, #25
 8009532:	e7f4      	b.n	800951e <_printf_float+0x456>

08009534 <_printf_common>:
 8009534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009538:	4616      	mov	r6, r2
 800953a:	4699      	mov	r9, r3
 800953c:	688a      	ldr	r2, [r1, #8]
 800953e:	690b      	ldr	r3, [r1, #16]
 8009540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009544:	4293      	cmp	r3, r2
 8009546:	bfb8      	it	lt
 8009548:	4613      	movlt	r3, r2
 800954a:	6033      	str	r3, [r6, #0]
 800954c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009550:	4607      	mov	r7, r0
 8009552:	460c      	mov	r4, r1
 8009554:	b10a      	cbz	r2, 800955a <_printf_common+0x26>
 8009556:	3301      	adds	r3, #1
 8009558:	6033      	str	r3, [r6, #0]
 800955a:	6823      	ldr	r3, [r4, #0]
 800955c:	0699      	lsls	r1, r3, #26
 800955e:	bf42      	ittt	mi
 8009560:	6833      	ldrmi	r3, [r6, #0]
 8009562:	3302      	addmi	r3, #2
 8009564:	6033      	strmi	r3, [r6, #0]
 8009566:	6825      	ldr	r5, [r4, #0]
 8009568:	f015 0506 	ands.w	r5, r5, #6
 800956c:	d106      	bne.n	800957c <_printf_common+0x48>
 800956e:	f104 0a19 	add.w	sl, r4, #25
 8009572:	68e3      	ldr	r3, [r4, #12]
 8009574:	6832      	ldr	r2, [r6, #0]
 8009576:	1a9b      	subs	r3, r3, r2
 8009578:	42ab      	cmp	r3, r5
 800957a:	dc26      	bgt.n	80095ca <_printf_common+0x96>
 800957c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009580:	1e13      	subs	r3, r2, #0
 8009582:	6822      	ldr	r2, [r4, #0]
 8009584:	bf18      	it	ne
 8009586:	2301      	movne	r3, #1
 8009588:	0692      	lsls	r2, r2, #26
 800958a:	d42b      	bmi.n	80095e4 <_printf_common+0xb0>
 800958c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009590:	4649      	mov	r1, r9
 8009592:	4638      	mov	r0, r7
 8009594:	47c0      	blx	r8
 8009596:	3001      	adds	r0, #1
 8009598:	d01e      	beq.n	80095d8 <_printf_common+0xa4>
 800959a:	6823      	ldr	r3, [r4, #0]
 800959c:	68e5      	ldr	r5, [r4, #12]
 800959e:	6832      	ldr	r2, [r6, #0]
 80095a0:	f003 0306 	and.w	r3, r3, #6
 80095a4:	2b04      	cmp	r3, #4
 80095a6:	bf08      	it	eq
 80095a8:	1aad      	subeq	r5, r5, r2
 80095aa:	68a3      	ldr	r3, [r4, #8]
 80095ac:	6922      	ldr	r2, [r4, #16]
 80095ae:	bf0c      	ite	eq
 80095b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095b4:	2500      	movne	r5, #0
 80095b6:	4293      	cmp	r3, r2
 80095b8:	bfc4      	itt	gt
 80095ba:	1a9b      	subgt	r3, r3, r2
 80095bc:	18ed      	addgt	r5, r5, r3
 80095be:	2600      	movs	r6, #0
 80095c0:	341a      	adds	r4, #26
 80095c2:	42b5      	cmp	r5, r6
 80095c4:	d11a      	bne.n	80095fc <_printf_common+0xc8>
 80095c6:	2000      	movs	r0, #0
 80095c8:	e008      	b.n	80095dc <_printf_common+0xa8>
 80095ca:	2301      	movs	r3, #1
 80095cc:	4652      	mov	r2, sl
 80095ce:	4649      	mov	r1, r9
 80095d0:	4638      	mov	r0, r7
 80095d2:	47c0      	blx	r8
 80095d4:	3001      	adds	r0, #1
 80095d6:	d103      	bne.n	80095e0 <_printf_common+0xac>
 80095d8:	f04f 30ff 	mov.w	r0, #4294967295
 80095dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e0:	3501      	adds	r5, #1
 80095e2:	e7c6      	b.n	8009572 <_printf_common+0x3e>
 80095e4:	18e1      	adds	r1, r4, r3
 80095e6:	1c5a      	adds	r2, r3, #1
 80095e8:	2030      	movs	r0, #48	; 0x30
 80095ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095ee:	4422      	add	r2, r4
 80095f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095f8:	3302      	adds	r3, #2
 80095fa:	e7c7      	b.n	800958c <_printf_common+0x58>
 80095fc:	2301      	movs	r3, #1
 80095fe:	4622      	mov	r2, r4
 8009600:	4649      	mov	r1, r9
 8009602:	4638      	mov	r0, r7
 8009604:	47c0      	blx	r8
 8009606:	3001      	adds	r0, #1
 8009608:	d0e6      	beq.n	80095d8 <_printf_common+0xa4>
 800960a:	3601      	adds	r6, #1
 800960c:	e7d9      	b.n	80095c2 <_printf_common+0x8e>
	...

08009610 <_printf_i>:
 8009610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009614:	7e0f      	ldrb	r7, [r1, #24]
 8009616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009618:	2f78      	cmp	r7, #120	; 0x78
 800961a:	4691      	mov	r9, r2
 800961c:	4680      	mov	r8, r0
 800961e:	460c      	mov	r4, r1
 8009620:	469a      	mov	sl, r3
 8009622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009626:	d807      	bhi.n	8009638 <_printf_i+0x28>
 8009628:	2f62      	cmp	r7, #98	; 0x62
 800962a:	d80a      	bhi.n	8009642 <_printf_i+0x32>
 800962c:	2f00      	cmp	r7, #0
 800962e:	f000 80d8 	beq.w	80097e2 <_printf_i+0x1d2>
 8009632:	2f58      	cmp	r7, #88	; 0x58
 8009634:	f000 80a3 	beq.w	800977e <_printf_i+0x16e>
 8009638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800963c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009640:	e03a      	b.n	80096b8 <_printf_i+0xa8>
 8009642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009646:	2b15      	cmp	r3, #21
 8009648:	d8f6      	bhi.n	8009638 <_printf_i+0x28>
 800964a:	a101      	add	r1, pc, #4	; (adr r1, 8009650 <_printf_i+0x40>)
 800964c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009650:	080096a9 	.word	0x080096a9
 8009654:	080096bd 	.word	0x080096bd
 8009658:	08009639 	.word	0x08009639
 800965c:	08009639 	.word	0x08009639
 8009660:	08009639 	.word	0x08009639
 8009664:	08009639 	.word	0x08009639
 8009668:	080096bd 	.word	0x080096bd
 800966c:	08009639 	.word	0x08009639
 8009670:	08009639 	.word	0x08009639
 8009674:	08009639 	.word	0x08009639
 8009678:	08009639 	.word	0x08009639
 800967c:	080097c9 	.word	0x080097c9
 8009680:	080096ed 	.word	0x080096ed
 8009684:	080097ab 	.word	0x080097ab
 8009688:	08009639 	.word	0x08009639
 800968c:	08009639 	.word	0x08009639
 8009690:	080097eb 	.word	0x080097eb
 8009694:	08009639 	.word	0x08009639
 8009698:	080096ed 	.word	0x080096ed
 800969c:	08009639 	.word	0x08009639
 80096a0:	08009639 	.word	0x08009639
 80096a4:	080097b3 	.word	0x080097b3
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	1d1a      	adds	r2, r3, #4
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	602a      	str	r2, [r5, #0]
 80096b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096b8:	2301      	movs	r3, #1
 80096ba:	e0a3      	b.n	8009804 <_printf_i+0x1f4>
 80096bc:	6820      	ldr	r0, [r4, #0]
 80096be:	6829      	ldr	r1, [r5, #0]
 80096c0:	0606      	lsls	r6, r0, #24
 80096c2:	f101 0304 	add.w	r3, r1, #4
 80096c6:	d50a      	bpl.n	80096de <_printf_i+0xce>
 80096c8:	680e      	ldr	r6, [r1, #0]
 80096ca:	602b      	str	r3, [r5, #0]
 80096cc:	2e00      	cmp	r6, #0
 80096ce:	da03      	bge.n	80096d8 <_printf_i+0xc8>
 80096d0:	232d      	movs	r3, #45	; 0x2d
 80096d2:	4276      	negs	r6, r6
 80096d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096d8:	485e      	ldr	r0, [pc, #376]	; (8009854 <_printf_i+0x244>)
 80096da:	230a      	movs	r3, #10
 80096dc:	e019      	b.n	8009712 <_printf_i+0x102>
 80096de:	680e      	ldr	r6, [r1, #0]
 80096e0:	602b      	str	r3, [r5, #0]
 80096e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80096e6:	bf18      	it	ne
 80096e8:	b236      	sxthne	r6, r6
 80096ea:	e7ef      	b.n	80096cc <_printf_i+0xbc>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	6820      	ldr	r0, [r4, #0]
 80096f0:	1d19      	adds	r1, r3, #4
 80096f2:	6029      	str	r1, [r5, #0]
 80096f4:	0601      	lsls	r1, r0, #24
 80096f6:	d501      	bpl.n	80096fc <_printf_i+0xec>
 80096f8:	681e      	ldr	r6, [r3, #0]
 80096fa:	e002      	b.n	8009702 <_printf_i+0xf2>
 80096fc:	0646      	lsls	r6, r0, #25
 80096fe:	d5fb      	bpl.n	80096f8 <_printf_i+0xe8>
 8009700:	881e      	ldrh	r6, [r3, #0]
 8009702:	4854      	ldr	r0, [pc, #336]	; (8009854 <_printf_i+0x244>)
 8009704:	2f6f      	cmp	r7, #111	; 0x6f
 8009706:	bf0c      	ite	eq
 8009708:	2308      	moveq	r3, #8
 800970a:	230a      	movne	r3, #10
 800970c:	2100      	movs	r1, #0
 800970e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009712:	6865      	ldr	r5, [r4, #4]
 8009714:	60a5      	str	r5, [r4, #8]
 8009716:	2d00      	cmp	r5, #0
 8009718:	bfa2      	ittt	ge
 800971a:	6821      	ldrge	r1, [r4, #0]
 800971c:	f021 0104 	bicge.w	r1, r1, #4
 8009720:	6021      	strge	r1, [r4, #0]
 8009722:	b90e      	cbnz	r6, 8009728 <_printf_i+0x118>
 8009724:	2d00      	cmp	r5, #0
 8009726:	d04d      	beq.n	80097c4 <_printf_i+0x1b4>
 8009728:	4615      	mov	r5, r2
 800972a:	fbb6 f1f3 	udiv	r1, r6, r3
 800972e:	fb03 6711 	mls	r7, r3, r1, r6
 8009732:	5dc7      	ldrb	r7, [r0, r7]
 8009734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009738:	4637      	mov	r7, r6
 800973a:	42bb      	cmp	r3, r7
 800973c:	460e      	mov	r6, r1
 800973e:	d9f4      	bls.n	800972a <_printf_i+0x11a>
 8009740:	2b08      	cmp	r3, #8
 8009742:	d10b      	bne.n	800975c <_printf_i+0x14c>
 8009744:	6823      	ldr	r3, [r4, #0]
 8009746:	07de      	lsls	r6, r3, #31
 8009748:	d508      	bpl.n	800975c <_printf_i+0x14c>
 800974a:	6923      	ldr	r3, [r4, #16]
 800974c:	6861      	ldr	r1, [r4, #4]
 800974e:	4299      	cmp	r1, r3
 8009750:	bfde      	ittt	le
 8009752:	2330      	movle	r3, #48	; 0x30
 8009754:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009758:	f105 35ff 	addle.w	r5, r5, #4294967295
 800975c:	1b52      	subs	r2, r2, r5
 800975e:	6122      	str	r2, [r4, #16]
 8009760:	f8cd a000 	str.w	sl, [sp]
 8009764:	464b      	mov	r3, r9
 8009766:	aa03      	add	r2, sp, #12
 8009768:	4621      	mov	r1, r4
 800976a:	4640      	mov	r0, r8
 800976c:	f7ff fee2 	bl	8009534 <_printf_common>
 8009770:	3001      	adds	r0, #1
 8009772:	d14c      	bne.n	800980e <_printf_i+0x1fe>
 8009774:	f04f 30ff 	mov.w	r0, #4294967295
 8009778:	b004      	add	sp, #16
 800977a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800977e:	4835      	ldr	r0, [pc, #212]	; (8009854 <_printf_i+0x244>)
 8009780:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009784:	6829      	ldr	r1, [r5, #0]
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	f851 6b04 	ldr.w	r6, [r1], #4
 800978c:	6029      	str	r1, [r5, #0]
 800978e:	061d      	lsls	r5, r3, #24
 8009790:	d514      	bpl.n	80097bc <_printf_i+0x1ac>
 8009792:	07df      	lsls	r7, r3, #31
 8009794:	bf44      	itt	mi
 8009796:	f043 0320 	orrmi.w	r3, r3, #32
 800979a:	6023      	strmi	r3, [r4, #0]
 800979c:	b91e      	cbnz	r6, 80097a6 <_printf_i+0x196>
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	f023 0320 	bic.w	r3, r3, #32
 80097a4:	6023      	str	r3, [r4, #0]
 80097a6:	2310      	movs	r3, #16
 80097a8:	e7b0      	b.n	800970c <_printf_i+0xfc>
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	f043 0320 	orr.w	r3, r3, #32
 80097b0:	6023      	str	r3, [r4, #0]
 80097b2:	2378      	movs	r3, #120	; 0x78
 80097b4:	4828      	ldr	r0, [pc, #160]	; (8009858 <_printf_i+0x248>)
 80097b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097ba:	e7e3      	b.n	8009784 <_printf_i+0x174>
 80097bc:	0659      	lsls	r1, r3, #25
 80097be:	bf48      	it	mi
 80097c0:	b2b6      	uxthmi	r6, r6
 80097c2:	e7e6      	b.n	8009792 <_printf_i+0x182>
 80097c4:	4615      	mov	r5, r2
 80097c6:	e7bb      	b.n	8009740 <_printf_i+0x130>
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	6826      	ldr	r6, [r4, #0]
 80097cc:	6961      	ldr	r1, [r4, #20]
 80097ce:	1d18      	adds	r0, r3, #4
 80097d0:	6028      	str	r0, [r5, #0]
 80097d2:	0635      	lsls	r5, r6, #24
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	d501      	bpl.n	80097dc <_printf_i+0x1cc>
 80097d8:	6019      	str	r1, [r3, #0]
 80097da:	e002      	b.n	80097e2 <_printf_i+0x1d2>
 80097dc:	0670      	lsls	r0, r6, #25
 80097de:	d5fb      	bpl.n	80097d8 <_printf_i+0x1c8>
 80097e0:	8019      	strh	r1, [r3, #0]
 80097e2:	2300      	movs	r3, #0
 80097e4:	6123      	str	r3, [r4, #16]
 80097e6:	4615      	mov	r5, r2
 80097e8:	e7ba      	b.n	8009760 <_printf_i+0x150>
 80097ea:	682b      	ldr	r3, [r5, #0]
 80097ec:	1d1a      	adds	r2, r3, #4
 80097ee:	602a      	str	r2, [r5, #0]
 80097f0:	681d      	ldr	r5, [r3, #0]
 80097f2:	6862      	ldr	r2, [r4, #4]
 80097f4:	2100      	movs	r1, #0
 80097f6:	4628      	mov	r0, r5
 80097f8:	f7f6 fcfa 	bl	80001f0 <memchr>
 80097fc:	b108      	cbz	r0, 8009802 <_printf_i+0x1f2>
 80097fe:	1b40      	subs	r0, r0, r5
 8009800:	6060      	str	r0, [r4, #4]
 8009802:	6863      	ldr	r3, [r4, #4]
 8009804:	6123      	str	r3, [r4, #16]
 8009806:	2300      	movs	r3, #0
 8009808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800980c:	e7a8      	b.n	8009760 <_printf_i+0x150>
 800980e:	6923      	ldr	r3, [r4, #16]
 8009810:	462a      	mov	r2, r5
 8009812:	4649      	mov	r1, r9
 8009814:	4640      	mov	r0, r8
 8009816:	47d0      	blx	sl
 8009818:	3001      	adds	r0, #1
 800981a:	d0ab      	beq.n	8009774 <_printf_i+0x164>
 800981c:	6823      	ldr	r3, [r4, #0]
 800981e:	079b      	lsls	r3, r3, #30
 8009820:	d413      	bmi.n	800984a <_printf_i+0x23a>
 8009822:	68e0      	ldr	r0, [r4, #12]
 8009824:	9b03      	ldr	r3, [sp, #12]
 8009826:	4298      	cmp	r0, r3
 8009828:	bfb8      	it	lt
 800982a:	4618      	movlt	r0, r3
 800982c:	e7a4      	b.n	8009778 <_printf_i+0x168>
 800982e:	2301      	movs	r3, #1
 8009830:	4632      	mov	r2, r6
 8009832:	4649      	mov	r1, r9
 8009834:	4640      	mov	r0, r8
 8009836:	47d0      	blx	sl
 8009838:	3001      	adds	r0, #1
 800983a:	d09b      	beq.n	8009774 <_printf_i+0x164>
 800983c:	3501      	adds	r5, #1
 800983e:	68e3      	ldr	r3, [r4, #12]
 8009840:	9903      	ldr	r1, [sp, #12]
 8009842:	1a5b      	subs	r3, r3, r1
 8009844:	42ab      	cmp	r3, r5
 8009846:	dcf2      	bgt.n	800982e <_printf_i+0x21e>
 8009848:	e7eb      	b.n	8009822 <_printf_i+0x212>
 800984a:	2500      	movs	r5, #0
 800984c:	f104 0619 	add.w	r6, r4, #25
 8009850:	e7f5      	b.n	800983e <_printf_i+0x22e>
 8009852:	bf00      	nop
 8009854:	0800bdbe 	.word	0x0800bdbe
 8009858:	0800bdcf 	.word	0x0800bdcf

0800985c <siprintf>:
 800985c:	b40e      	push	{r1, r2, r3}
 800985e:	b500      	push	{lr}
 8009860:	b09c      	sub	sp, #112	; 0x70
 8009862:	ab1d      	add	r3, sp, #116	; 0x74
 8009864:	9002      	str	r0, [sp, #8]
 8009866:	9006      	str	r0, [sp, #24]
 8009868:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800986c:	4809      	ldr	r0, [pc, #36]	; (8009894 <siprintf+0x38>)
 800986e:	9107      	str	r1, [sp, #28]
 8009870:	9104      	str	r1, [sp, #16]
 8009872:	4909      	ldr	r1, [pc, #36]	; (8009898 <siprintf+0x3c>)
 8009874:	f853 2b04 	ldr.w	r2, [r3], #4
 8009878:	9105      	str	r1, [sp, #20]
 800987a:	6800      	ldr	r0, [r0, #0]
 800987c:	9301      	str	r3, [sp, #4]
 800987e:	a902      	add	r1, sp, #8
 8009880:	f001 fb78 	bl	800af74 <_svfiprintf_r>
 8009884:	9b02      	ldr	r3, [sp, #8]
 8009886:	2200      	movs	r2, #0
 8009888:	701a      	strb	r2, [r3, #0]
 800988a:	b01c      	add	sp, #112	; 0x70
 800988c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009890:	b003      	add	sp, #12
 8009892:	4770      	bx	lr
 8009894:	2000000c 	.word	0x2000000c
 8009898:	ffff0208 	.word	0xffff0208

0800989c <quorem>:
 800989c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a0:	6903      	ldr	r3, [r0, #16]
 80098a2:	690c      	ldr	r4, [r1, #16]
 80098a4:	42a3      	cmp	r3, r4
 80098a6:	4607      	mov	r7, r0
 80098a8:	f2c0 8081 	blt.w	80099ae <quorem+0x112>
 80098ac:	3c01      	subs	r4, #1
 80098ae:	f101 0814 	add.w	r8, r1, #20
 80098b2:	f100 0514 	add.w	r5, r0, #20
 80098b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098ba:	9301      	str	r3, [sp, #4]
 80098bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098c4:	3301      	adds	r3, #1
 80098c6:	429a      	cmp	r2, r3
 80098c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80098cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80098d4:	d331      	bcc.n	800993a <quorem+0x9e>
 80098d6:	f04f 0e00 	mov.w	lr, #0
 80098da:	4640      	mov	r0, r8
 80098dc:	46ac      	mov	ip, r5
 80098de:	46f2      	mov	sl, lr
 80098e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80098e4:	b293      	uxth	r3, r2
 80098e6:	fb06 e303 	mla	r3, r6, r3, lr
 80098ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	ebaa 0303 	sub.w	r3, sl, r3
 80098f4:	f8dc a000 	ldr.w	sl, [ip]
 80098f8:	0c12      	lsrs	r2, r2, #16
 80098fa:	fa13 f38a 	uxtah	r3, r3, sl
 80098fe:	fb06 e202 	mla	r2, r6, r2, lr
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	9b00      	ldr	r3, [sp, #0]
 8009906:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800990a:	b292      	uxth	r2, r2
 800990c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009910:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009914:	f8bd 3000 	ldrh.w	r3, [sp]
 8009918:	4581      	cmp	r9, r0
 800991a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800991e:	f84c 3b04 	str.w	r3, [ip], #4
 8009922:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009926:	d2db      	bcs.n	80098e0 <quorem+0x44>
 8009928:	f855 300b 	ldr.w	r3, [r5, fp]
 800992c:	b92b      	cbnz	r3, 800993a <quorem+0x9e>
 800992e:	9b01      	ldr	r3, [sp, #4]
 8009930:	3b04      	subs	r3, #4
 8009932:	429d      	cmp	r5, r3
 8009934:	461a      	mov	r2, r3
 8009936:	d32e      	bcc.n	8009996 <quorem+0xfa>
 8009938:	613c      	str	r4, [r7, #16]
 800993a:	4638      	mov	r0, r7
 800993c:	f001 f8c6 	bl	800aacc <__mcmp>
 8009940:	2800      	cmp	r0, #0
 8009942:	db24      	blt.n	800998e <quorem+0xf2>
 8009944:	3601      	adds	r6, #1
 8009946:	4628      	mov	r0, r5
 8009948:	f04f 0c00 	mov.w	ip, #0
 800994c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009950:	f8d0 e000 	ldr.w	lr, [r0]
 8009954:	b293      	uxth	r3, r2
 8009956:	ebac 0303 	sub.w	r3, ip, r3
 800995a:	0c12      	lsrs	r2, r2, #16
 800995c:	fa13 f38e 	uxtah	r3, r3, lr
 8009960:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009964:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009968:	b29b      	uxth	r3, r3
 800996a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800996e:	45c1      	cmp	r9, r8
 8009970:	f840 3b04 	str.w	r3, [r0], #4
 8009974:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009978:	d2e8      	bcs.n	800994c <quorem+0xb0>
 800997a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800997e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009982:	b922      	cbnz	r2, 800998e <quorem+0xf2>
 8009984:	3b04      	subs	r3, #4
 8009986:	429d      	cmp	r5, r3
 8009988:	461a      	mov	r2, r3
 800998a:	d30a      	bcc.n	80099a2 <quorem+0x106>
 800998c:	613c      	str	r4, [r7, #16]
 800998e:	4630      	mov	r0, r6
 8009990:	b003      	add	sp, #12
 8009992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009996:	6812      	ldr	r2, [r2, #0]
 8009998:	3b04      	subs	r3, #4
 800999a:	2a00      	cmp	r2, #0
 800999c:	d1cc      	bne.n	8009938 <quorem+0x9c>
 800999e:	3c01      	subs	r4, #1
 80099a0:	e7c7      	b.n	8009932 <quorem+0x96>
 80099a2:	6812      	ldr	r2, [r2, #0]
 80099a4:	3b04      	subs	r3, #4
 80099a6:	2a00      	cmp	r2, #0
 80099a8:	d1f0      	bne.n	800998c <quorem+0xf0>
 80099aa:	3c01      	subs	r4, #1
 80099ac:	e7eb      	b.n	8009986 <quorem+0xea>
 80099ae:	2000      	movs	r0, #0
 80099b0:	e7ee      	b.n	8009990 <quorem+0xf4>
 80099b2:	0000      	movs	r0, r0
 80099b4:	0000      	movs	r0, r0
	...

080099b8 <_dtoa_r>:
 80099b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099bc:	ed2d 8b04 	vpush	{d8-d9}
 80099c0:	ec57 6b10 	vmov	r6, r7, d0
 80099c4:	b093      	sub	sp, #76	; 0x4c
 80099c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80099cc:	9106      	str	r1, [sp, #24]
 80099ce:	ee10 aa10 	vmov	sl, s0
 80099d2:	4604      	mov	r4, r0
 80099d4:	9209      	str	r2, [sp, #36]	; 0x24
 80099d6:	930c      	str	r3, [sp, #48]	; 0x30
 80099d8:	46bb      	mov	fp, r7
 80099da:	b975      	cbnz	r5, 80099fa <_dtoa_r+0x42>
 80099dc:	2010      	movs	r0, #16
 80099de:	f000 fddd 	bl	800a59c <malloc>
 80099e2:	4602      	mov	r2, r0
 80099e4:	6260      	str	r0, [r4, #36]	; 0x24
 80099e6:	b920      	cbnz	r0, 80099f2 <_dtoa_r+0x3a>
 80099e8:	4ba7      	ldr	r3, [pc, #668]	; (8009c88 <_dtoa_r+0x2d0>)
 80099ea:	21ea      	movs	r1, #234	; 0xea
 80099ec:	48a7      	ldr	r0, [pc, #668]	; (8009c8c <_dtoa_r+0x2d4>)
 80099ee:	f001 fbd1 	bl	800b194 <__assert_func>
 80099f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80099f6:	6005      	str	r5, [r0, #0]
 80099f8:	60c5      	str	r5, [r0, #12]
 80099fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099fc:	6819      	ldr	r1, [r3, #0]
 80099fe:	b151      	cbz	r1, 8009a16 <_dtoa_r+0x5e>
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	604a      	str	r2, [r1, #4]
 8009a04:	2301      	movs	r3, #1
 8009a06:	4093      	lsls	r3, r2
 8009a08:	608b      	str	r3, [r1, #8]
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f000 fe1c 	bl	800a648 <_Bfree>
 8009a10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a12:	2200      	movs	r2, #0
 8009a14:	601a      	str	r2, [r3, #0]
 8009a16:	1e3b      	subs	r3, r7, #0
 8009a18:	bfaa      	itet	ge
 8009a1a:	2300      	movge	r3, #0
 8009a1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009a20:	f8c8 3000 	strge.w	r3, [r8]
 8009a24:	4b9a      	ldr	r3, [pc, #616]	; (8009c90 <_dtoa_r+0x2d8>)
 8009a26:	bfbc      	itt	lt
 8009a28:	2201      	movlt	r2, #1
 8009a2a:	f8c8 2000 	strlt.w	r2, [r8]
 8009a2e:	ea33 030b 	bics.w	r3, r3, fp
 8009a32:	d11b      	bne.n	8009a6c <_dtoa_r+0xb4>
 8009a34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a36:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a3a:	6013      	str	r3, [r2, #0]
 8009a3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a40:	4333      	orrs	r3, r6
 8009a42:	f000 8592 	beq.w	800a56a <_dtoa_r+0xbb2>
 8009a46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a48:	b963      	cbnz	r3, 8009a64 <_dtoa_r+0xac>
 8009a4a:	4b92      	ldr	r3, [pc, #584]	; (8009c94 <_dtoa_r+0x2dc>)
 8009a4c:	e022      	b.n	8009a94 <_dtoa_r+0xdc>
 8009a4e:	4b92      	ldr	r3, [pc, #584]	; (8009c98 <_dtoa_r+0x2e0>)
 8009a50:	9301      	str	r3, [sp, #4]
 8009a52:	3308      	adds	r3, #8
 8009a54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a56:	6013      	str	r3, [r2, #0]
 8009a58:	9801      	ldr	r0, [sp, #4]
 8009a5a:	b013      	add	sp, #76	; 0x4c
 8009a5c:	ecbd 8b04 	vpop	{d8-d9}
 8009a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a64:	4b8b      	ldr	r3, [pc, #556]	; (8009c94 <_dtoa_r+0x2dc>)
 8009a66:	9301      	str	r3, [sp, #4]
 8009a68:	3303      	adds	r3, #3
 8009a6a:	e7f3      	b.n	8009a54 <_dtoa_r+0x9c>
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	2300      	movs	r3, #0
 8009a70:	4650      	mov	r0, sl
 8009a72:	4659      	mov	r1, fp
 8009a74:	f7f7 f830 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a78:	ec4b ab19 	vmov	d9, sl, fp
 8009a7c:	4680      	mov	r8, r0
 8009a7e:	b158      	cbz	r0, 8009a98 <_dtoa_r+0xe0>
 8009a80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a82:	2301      	movs	r3, #1
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 856b 	beq.w	800a564 <_dtoa_r+0xbac>
 8009a8e:	4883      	ldr	r0, [pc, #524]	; (8009c9c <_dtoa_r+0x2e4>)
 8009a90:	6018      	str	r0, [r3, #0]
 8009a92:	1e43      	subs	r3, r0, #1
 8009a94:	9301      	str	r3, [sp, #4]
 8009a96:	e7df      	b.n	8009a58 <_dtoa_r+0xa0>
 8009a98:	ec4b ab10 	vmov	d0, sl, fp
 8009a9c:	aa10      	add	r2, sp, #64	; 0x40
 8009a9e:	a911      	add	r1, sp, #68	; 0x44
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f001 f8b9 	bl	800ac18 <__d2b>
 8009aa6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009aaa:	ee08 0a10 	vmov	s16, r0
 8009aae:	2d00      	cmp	r5, #0
 8009ab0:	f000 8084 	beq.w	8009bbc <_dtoa_r+0x204>
 8009ab4:	ee19 3a90 	vmov	r3, s19
 8009ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009abc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009ac0:	4656      	mov	r6, sl
 8009ac2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009ac6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009aca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009ace:	4b74      	ldr	r3, [pc, #464]	; (8009ca0 <_dtoa_r+0x2e8>)
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	4639      	mov	r1, r7
 8009ad6:	f7f6 fbdf 	bl	8000298 <__aeabi_dsub>
 8009ada:	a365      	add	r3, pc, #404	; (adr r3, 8009c70 <_dtoa_r+0x2b8>)
 8009adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae0:	f7f6 fd92 	bl	8000608 <__aeabi_dmul>
 8009ae4:	a364      	add	r3, pc, #400	; (adr r3, 8009c78 <_dtoa_r+0x2c0>)
 8009ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aea:	f7f6 fbd7 	bl	800029c <__adddf3>
 8009aee:	4606      	mov	r6, r0
 8009af0:	4628      	mov	r0, r5
 8009af2:	460f      	mov	r7, r1
 8009af4:	f7f6 fd1e 	bl	8000534 <__aeabi_i2d>
 8009af8:	a361      	add	r3, pc, #388	; (adr r3, 8009c80 <_dtoa_r+0x2c8>)
 8009afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afe:	f7f6 fd83 	bl	8000608 <__aeabi_dmul>
 8009b02:	4602      	mov	r2, r0
 8009b04:	460b      	mov	r3, r1
 8009b06:	4630      	mov	r0, r6
 8009b08:	4639      	mov	r1, r7
 8009b0a:	f7f6 fbc7 	bl	800029c <__adddf3>
 8009b0e:	4606      	mov	r6, r0
 8009b10:	460f      	mov	r7, r1
 8009b12:	f7f7 f829 	bl	8000b68 <__aeabi_d2iz>
 8009b16:	2200      	movs	r2, #0
 8009b18:	9000      	str	r0, [sp, #0]
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	4639      	mov	r1, r7
 8009b20:	f7f6 ffe4 	bl	8000aec <__aeabi_dcmplt>
 8009b24:	b150      	cbz	r0, 8009b3c <_dtoa_r+0x184>
 8009b26:	9800      	ldr	r0, [sp, #0]
 8009b28:	f7f6 fd04 	bl	8000534 <__aeabi_i2d>
 8009b2c:	4632      	mov	r2, r6
 8009b2e:	463b      	mov	r3, r7
 8009b30:	f7f6 ffd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b34:	b910      	cbnz	r0, 8009b3c <_dtoa_r+0x184>
 8009b36:	9b00      	ldr	r3, [sp, #0]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	9b00      	ldr	r3, [sp, #0]
 8009b3e:	2b16      	cmp	r3, #22
 8009b40:	d85a      	bhi.n	8009bf8 <_dtoa_r+0x240>
 8009b42:	9a00      	ldr	r2, [sp, #0]
 8009b44:	4b57      	ldr	r3, [pc, #348]	; (8009ca4 <_dtoa_r+0x2ec>)
 8009b46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4e:	ec51 0b19 	vmov	r0, r1, d9
 8009b52:	f7f6 ffcb 	bl	8000aec <__aeabi_dcmplt>
 8009b56:	2800      	cmp	r0, #0
 8009b58:	d050      	beq.n	8009bfc <_dtoa_r+0x244>
 8009b5a:	9b00      	ldr	r3, [sp, #0]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	2300      	movs	r3, #0
 8009b62:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b66:	1b5d      	subs	r5, r3, r5
 8009b68:	1e6b      	subs	r3, r5, #1
 8009b6a:	9305      	str	r3, [sp, #20]
 8009b6c:	bf45      	ittet	mi
 8009b6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009b72:	9304      	strmi	r3, [sp, #16]
 8009b74:	2300      	movpl	r3, #0
 8009b76:	2300      	movmi	r3, #0
 8009b78:	bf4c      	ite	mi
 8009b7a:	9305      	strmi	r3, [sp, #20]
 8009b7c:	9304      	strpl	r3, [sp, #16]
 8009b7e:	9b00      	ldr	r3, [sp, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	db3d      	blt.n	8009c00 <_dtoa_r+0x248>
 8009b84:	9b05      	ldr	r3, [sp, #20]
 8009b86:	9a00      	ldr	r2, [sp, #0]
 8009b88:	920a      	str	r2, [sp, #40]	; 0x28
 8009b8a:	4413      	add	r3, r2
 8009b8c:	9305      	str	r3, [sp, #20]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	9307      	str	r3, [sp, #28]
 8009b92:	9b06      	ldr	r3, [sp, #24]
 8009b94:	2b09      	cmp	r3, #9
 8009b96:	f200 8089 	bhi.w	8009cac <_dtoa_r+0x2f4>
 8009b9a:	2b05      	cmp	r3, #5
 8009b9c:	bfc4      	itt	gt
 8009b9e:	3b04      	subgt	r3, #4
 8009ba0:	9306      	strgt	r3, [sp, #24]
 8009ba2:	9b06      	ldr	r3, [sp, #24]
 8009ba4:	f1a3 0302 	sub.w	r3, r3, #2
 8009ba8:	bfcc      	ite	gt
 8009baa:	2500      	movgt	r5, #0
 8009bac:	2501      	movle	r5, #1
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	f200 8087 	bhi.w	8009cc2 <_dtoa_r+0x30a>
 8009bb4:	e8df f003 	tbb	[pc, r3]
 8009bb8:	59383a2d 	.word	0x59383a2d
 8009bbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009bc0:	441d      	add	r5, r3
 8009bc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009bc6:	2b20      	cmp	r3, #32
 8009bc8:	bfc1      	itttt	gt
 8009bca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009bce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009bd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8009bd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009bda:	bfda      	itte	le
 8009bdc:	f1c3 0320 	rsble	r3, r3, #32
 8009be0:	fa06 f003 	lslle.w	r0, r6, r3
 8009be4:	4318      	orrgt	r0, r3
 8009be6:	f7f6 fc95 	bl	8000514 <__aeabi_ui2d>
 8009bea:	2301      	movs	r3, #1
 8009bec:	4606      	mov	r6, r0
 8009bee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009bf2:	3d01      	subs	r5, #1
 8009bf4:	930e      	str	r3, [sp, #56]	; 0x38
 8009bf6:	e76a      	b.n	8009ace <_dtoa_r+0x116>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e7b2      	b.n	8009b62 <_dtoa_r+0x1aa>
 8009bfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8009bfe:	e7b1      	b.n	8009b64 <_dtoa_r+0x1ac>
 8009c00:	9b04      	ldr	r3, [sp, #16]
 8009c02:	9a00      	ldr	r2, [sp, #0]
 8009c04:	1a9b      	subs	r3, r3, r2
 8009c06:	9304      	str	r3, [sp, #16]
 8009c08:	4253      	negs	r3, r2
 8009c0a:	9307      	str	r3, [sp, #28]
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c10:	e7bf      	b.n	8009b92 <_dtoa_r+0x1da>
 8009c12:	2300      	movs	r3, #0
 8009c14:	9308      	str	r3, [sp, #32]
 8009c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	dc55      	bgt.n	8009cc8 <_dtoa_r+0x310>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c22:	461a      	mov	r2, r3
 8009c24:	9209      	str	r2, [sp, #36]	; 0x24
 8009c26:	e00c      	b.n	8009c42 <_dtoa_r+0x28a>
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e7f3      	b.n	8009c14 <_dtoa_r+0x25c>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c30:	9308      	str	r3, [sp, #32]
 8009c32:	9b00      	ldr	r3, [sp, #0]
 8009c34:	4413      	add	r3, r2
 8009c36:	9302      	str	r3, [sp, #8]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	9303      	str	r3, [sp, #12]
 8009c3e:	bfb8      	it	lt
 8009c40:	2301      	movlt	r3, #1
 8009c42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009c44:	2200      	movs	r2, #0
 8009c46:	6042      	str	r2, [r0, #4]
 8009c48:	2204      	movs	r2, #4
 8009c4a:	f102 0614 	add.w	r6, r2, #20
 8009c4e:	429e      	cmp	r6, r3
 8009c50:	6841      	ldr	r1, [r0, #4]
 8009c52:	d93d      	bls.n	8009cd0 <_dtoa_r+0x318>
 8009c54:	4620      	mov	r0, r4
 8009c56:	f000 fcb7 	bl	800a5c8 <_Balloc>
 8009c5a:	9001      	str	r0, [sp, #4]
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d13b      	bne.n	8009cd8 <_dtoa_r+0x320>
 8009c60:	4b11      	ldr	r3, [pc, #68]	; (8009ca8 <_dtoa_r+0x2f0>)
 8009c62:	4602      	mov	r2, r0
 8009c64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009c68:	e6c0      	b.n	80099ec <_dtoa_r+0x34>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e7df      	b.n	8009c2e <_dtoa_r+0x276>
 8009c6e:	bf00      	nop
 8009c70:	636f4361 	.word	0x636f4361
 8009c74:	3fd287a7 	.word	0x3fd287a7
 8009c78:	8b60c8b3 	.word	0x8b60c8b3
 8009c7c:	3fc68a28 	.word	0x3fc68a28
 8009c80:	509f79fb 	.word	0x509f79fb
 8009c84:	3fd34413 	.word	0x3fd34413
 8009c88:	0800bded 	.word	0x0800bded
 8009c8c:	0800be04 	.word	0x0800be04
 8009c90:	7ff00000 	.word	0x7ff00000
 8009c94:	0800bde9 	.word	0x0800bde9
 8009c98:	0800bde0 	.word	0x0800bde0
 8009c9c:	0800bdbd 	.word	0x0800bdbd
 8009ca0:	3ff80000 	.word	0x3ff80000
 8009ca4:	0800bef8 	.word	0x0800bef8
 8009ca8:	0800be5f 	.word	0x0800be5f
 8009cac:	2501      	movs	r5, #1
 8009cae:	2300      	movs	r3, #0
 8009cb0:	9306      	str	r3, [sp, #24]
 8009cb2:	9508      	str	r5, [sp, #32]
 8009cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	2312      	movs	r3, #18
 8009cc0:	e7b0      	b.n	8009c24 <_dtoa_r+0x26c>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	9308      	str	r3, [sp, #32]
 8009cc6:	e7f5      	b.n	8009cb4 <_dtoa_r+0x2fc>
 8009cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009cce:	e7b8      	b.n	8009c42 <_dtoa_r+0x28a>
 8009cd0:	3101      	adds	r1, #1
 8009cd2:	6041      	str	r1, [r0, #4]
 8009cd4:	0052      	lsls	r2, r2, #1
 8009cd6:	e7b8      	b.n	8009c4a <_dtoa_r+0x292>
 8009cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cda:	9a01      	ldr	r2, [sp, #4]
 8009cdc:	601a      	str	r2, [r3, #0]
 8009cde:	9b03      	ldr	r3, [sp, #12]
 8009ce0:	2b0e      	cmp	r3, #14
 8009ce2:	f200 809d 	bhi.w	8009e20 <_dtoa_r+0x468>
 8009ce6:	2d00      	cmp	r5, #0
 8009ce8:	f000 809a 	beq.w	8009e20 <_dtoa_r+0x468>
 8009cec:	9b00      	ldr	r3, [sp, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	dd32      	ble.n	8009d58 <_dtoa_r+0x3a0>
 8009cf2:	4ab7      	ldr	r2, [pc, #732]	; (8009fd0 <_dtoa_r+0x618>)
 8009cf4:	f003 030f 	and.w	r3, r3, #15
 8009cf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009cfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d00:	9b00      	ldr	r3, [sp, #0]
 8009d02:	05d8      	lsls	r0, r3, #23
 8009d04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009d08:	d516      	bpl.n	8009d38 <_dtoa_r+0x380>
 8009d0a:	4bb2      	ldr	r3, [pc, #712]	; (8009fd4 <_dtoa_r+0x61c>)
 8009d0c:	ec51 0b19 	vmov	r0, r1, d9
 8009d10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d14:	f7f6 fda2 	bl	800085c <__aeabi_ddiv>
 8009d18:	f007 070f 	and.w	r7, r7, #15
 8009d1c:	4682      	mov	sl, r0
 8009d1e:	468b      	mov	fp, r1
 8009d20:	2503      	movs	r5, #3
 8009d22:	4eac      	ldr	r6, [pc, #688]	; (8009fd4 <_dtoa_r+0x61c>)
 8009d24:	b957      	cbnz	r7, 8009d3c <_dtoa_r+0x384>
 8009d26:	4642      	mov	r2, r8
 8009d28:	464b      	mov	r3, r9
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	4659      	mov	r1, fp
 8009d2e:	f7f6 fd95 	bl	800085c <__aeabi_ddiv>
 8009d32:	4682      	mov	sl, r0
 8009d34:	468b      	mov	fp, r1
 8009d36:	e028      	b.n	8009d8a <_dtoa_r+0x3d2>
 8009d38:	2502      	movs	r5, #2
 8009d3a:	e7f2      	b.n	8009d22 <_dtoa_r+0x36a>
 8009d3c:	07f9      	lsls	r1, r7, #31
 8009d3e:	d508      	bpl.n	8009d52 <_dtoa_r+0x39a>
 8009d40:	4640      	mov	r0, r8
 8009d42:	4649      	mov	r1, r9
 8009d44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d48:	f7f6 fc5e 	bl	8000608 <__aeabi_dmul>
 8009d4c:	3501      	adds	r5, #1
 8009d4e:	4680      	mov	r8, r0
 8009d50:	4689      	mov	r9, r1
 8009d52:	107f      	asrs	r7, r7, #1
 8009d54:	3608      	adds	r6, #8
 8009d56:	e7e5      	b.n	8009d24 <_dtoa_r+0x36c>
 8009d58:	f000 809b 	beq.w	8009e92 <_dtoa_r+0x4da>
 8009d5c:	9b00      	ldr	r3, [sp, #0]
 8009d5e:	4f9d      	ldr	r7, [pc, #628]	; (8009fd4 <_dtoa_r+0x61c>)
 8009d60:	425e      	negs	r6, r3
 8009d62:	4b9b      	ldr	r3, [pc, #620]	; (8009fd0 <_dtoa_r+0x618>)
 8009d64:	f006 020f 	and.w	r2, r6, #15
 8009d68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	ec51 0b19 	vmov	r0, r1, d9
 8009d74:	f7f6 fc48 	bl	8000608 <__aeabi_dmul>
 8009d78:	1136      	asrs	r6, r6, #4
 8009d7a:	4682      	mov	sl, r0
 8009d7c:	468b      	mov	fp, r1
 8009d7e:	2300      	movs	r3, #0
 8009d80:	2502      	movs	r5, #2
 8009d82:	2e00      	cmp	r6, #0
 8009d84:	d17a      	bne.n	8009e7c <_dtoa_r+0x4c4>
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1d3      	bne.n	8009d32 <_dtoa_r+0x37a>
 8009d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f000 8082 	beq.w	8009e96 <_dtoa_r+0x4de>
 8009d92:	4b91      	ldr	r3, [pc, #580]	; (8009fd8 <_dtoa_r+0x620>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	4650      	mov	r0, sl
 8009d98:	4659      	mov	r1, fp
 8009d9a:	f7f6 fea7 	bl	8000aec <__aeabi_dcmplt>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d079      	beq.n	8009e96 <_dtoa_r+0x4de>
 8009da2:	9b03      	ldr	r3, [sp, #12]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d076      	beq.n	8009e96 <_dtoa_r+0x4de>
 8009da8:	9b02      	ldr	r3, [sp, #8]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	dd36      	ble.n	8009e1c <_dtoa_r+0x464>
 8009dae:	9b00      	ldr	r3, [sp, #0]
 8009db0:	4650      	mov	r0, sl
 8009db2:	4659      	mov	r1, fp
 8009db4:	1e5f      	subs	r7, r3, #1
 8009db6:	2200      	movs	r2, #0
 8009db8:	4b88      	ldr	r3, [pc, #544]	; (8009fdc <_dtoa_r+0x624>)
 8009dba:	f7f6 fc25 	bl	8000608 <__aeabi_dmul>
 8009dbe:	9e02      	ldr	r6, [sp, #8]
 8009dc0:	4682      	mov	sl, r0
 8009dc2:	468b      	mov	fp, r1
 8009dc4:	3501      	adds	r5, #1
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	f7f6 fbb4 	bl	8000534 <__aeabi_i2d>
 8009dcc:	4652      	mov	r2, sl
 8009dce:	465b      	mov	r3, fp
 8009dd0:	f7f6 fc1a 	bl	8000608 <__aeabi_dmul>
 8009dd4:	4b82      	ldr	r3, [pc, #520]	; (8009fe0 <_dtoa_r+0x628>)
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f7f6 fa60 	bl	800029c <__adddf3>
 8009ddc:	46d0      	mov	r8, sl
 8009dde:	46d9      	mov	r9, fp
 8009de0:	4682      	mov	sl, r0
 8009de2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009de6:	2e00      	cmp	r6, #0
 8009de8:	d158      	bne.n	8009e9c <_dtoa_r+0x4e4>
 8009dea:	4b7e      	ldr	r3, [pc, #504]	; (8009fe4 <_dtoa_r+0x62c>)
 8009dec:	2200      	movs	r2, #0
 8009dee:	4640      	mov	r0, r8
 8009df0:	4649      	mov	r1, r9
 8009df2:	f7f6 fa51 	bl	8000298 <__aeabi_dsub>
 8009df6:	4652      	mov	r2, sl
 8009df8:	465b      	mov	r3, fp
 8009dfa:	4680      	mov	r8, r0
 8009dfc:	4689      	mov	r9, r1
 8009dfe:	f7f6 fe93 	bl	8000b28 <__aeabi_dcmpgt>
 8009e02:	2800      	cmp	r0, #0
 8009e04:	f040 8295 	bne.w	800a332 <_dtoa_r+0x97a>
 8009e08:	4652      	mov	r2, sl
 8009e0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009e0e:	4640      	mov	r0, r8
 8009e10:	4649      	mov	r1, r9
 8009e12:	f7f6 fe6b 	bl	8000aec <__aeabi_dcmplt>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	f040 8289 	bne.w	800a32e <_dtoa_r+0x976>
 8009e1c:	ec5b ab19 	vmov	sl, fp, d9
 8009e20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f2c0 8148 	blt.w	800a0b8 <_dtoa_r+0x700>
 8009e28:	9a00      	ldr	r2, [sp, #0]
 8009e2a:	2a0e      	cmp	r2, #14
 8009e2c:	f300 8144 	bgt.w	800a0b8 <_dtoa_r+0x700>
 8009e30:	4b67      	ldr	r3, [pc, #412]	; (8009fd0 <_dtoa_r+0x618>)
 8009e32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f280 80d5 	bge.w	8009fec <_dtoa_r+0x634>
 8009e42:	9b03      	ldr	r3, [sp, #12]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f300 80d1 	bgt.w	8009fec <_dtoa_r+0x634>
 8009e4a:	f040 826f 	bne.w	800a32c <_dtoa_r+0x974>
 8009e4e:	4b65      	ldr	r3, [pc, #404]	; (8009fe4 <_dtoa_r+0x62c>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	4640      	mov	r0, r8
 8009e54:	4649      	mov	r1, r9
 8009e56:	f7f6 fbd7 	bl	8000608 <__aeabi_dmul>
 8009e5a:	4652      	mov	r2, sl
 8009e5c:	465b      	mov	r3, fp
 8009e5e:	f7f6 fe59 	bl	8000b14 <__aeabi_dcmpge>
 8009e62:	9e03      	ldr	r6, [sp, #12]
 8009e64:	4637      	mov	r7, r6
 8009e66:	2800      	cmp	r0, #0
 8009e68:	f040 8245 	bne.w	800a2f6 <_dtoa_r+0x93e>
 8009e6c:	9d01      	ldr	r5, [sp, #4]
 8009e6e:	2331      	movs	r3, #49	; 0x31
 8009e70:	f805 3b01 	strb.w	r3, [r5], #1
 8009e74:	9b00      	ldr	r3, [sp, #0]
 8009e76:	3301      	adds	r3, #1
 8009e78:	9300      	str	r3, [sp, #0]
 8009e7a:	e240      	b.n	800a2fe <_dtoa_r+0x946>
 8009e7c:	07f2      	lsls	r2, r6, #31
 8009e7e:	d505      	bpl.n	8009e8c <_dtoa_r+0x4d4>
 8009e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e84:	f7f6 fbc0 	bl	8000608 <__aeabi_dmul>
 8009e88:	3501      	adds	r5, #1
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	1076      	asrs	r6, r6, #1
 8009e8e:	3708      	adds	r7, #8
 8009e90:	e777      	b.n	8009d82 <_dtoa_r+0x3ca>
 8009e92:	2502      	movs	r5, #2
 8009e94:	e779      	b.n	8009d8a <_dtoa_r+0x3d2>
 8009e96:	9f00      	ldr	r7, [sp, #0]
 8009e98:	9e03      	ldr	r6, [sp, #12]
 8009e9a:	e794      	b.n	8009dc6 <_dtoa_r+0x40e>
 8009e9c:	9901      	ldr	r1, [sp, #4]
 8009e9e:	4b4c      	ldr	r3, [pc, #304]	; (8009fd0 <_dtoa_r+0x618>)
 8009ea0:	4431      	add	r1, r6
 8009ea2:	910d      	str	r1, [sp, #52]	; 0x34
 8009ea4:	9908      	ldr	r1, [sp, #32]
 8009ea6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009eaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009eae:	2900      	cmp	r1, #0
 8009eb0:	d043      	beq.n	8009f3a <_dtoa_r+0x582>
 8009eb2:	494d      	ldr	r1, [pc, #308]	; (8009fe8 <_dtoa_r+0x630>)
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	f7f6 fcd1 	bl	800085c <__aeabi_ddiv>
 8009eba:	4652      	mov	r2, sl
 8009ebc:	465b      	mov	r3, fp
 8009ebe:	f7f6 f9eb 	bl	8000298 <__aeabi_dsub>
 8009ec2:	9d01      	ldr	r5, [sp, #4]
 8009ec4:	4682      	mov	sl, r0
 8009ec6:	468b      	mov	fp, r1
 8009ec8:	4649      	mov	r1, r9
 8009eca:	4640      	mov	r0, r8
 8009ecc:	f7f6 fe4c 	bl	8000b68 <__aeabi_d2iz>
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	f7f6 fb2f 	bl	8000534 <__aeabi_i2d>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	460b      	mov	r3, r1
 8009eda:	4640      	mov	r0, r8
 8009edc:	4649      	mov	r1, r9
 8009ede:	f7f6 f9db 	bl	8000298 <__aeabi_dsub>
 8009ee2:	3630      	adds	r6, #48	; 0x30
 8009ee4:	f805 6b01 	strb.w	r6, [r5], #1
 8009ee8:	4652      	mov	r2, sl
 8009eea:	465b      	mov	r3, fp
 8009eec:	4680      	mov	r8, r0
 8009eee:	4689      	mov	r9, r1
 8009ef0:	f7f6 fdfc 	bl	8000aec <__aeabi_dcmplt>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d163      	bne.n	8009fc0 <_dtoa_r+0x608>
 8009ef8:	4642      	mov	r2, r8
 8009efa:	464b      	mov	r3, r9
 8009efc:	4936      	ldr	r1, [pc, #216]	; (8009fd8 <_dtoa_r+0x620>)
 8009efe:	2000      	movs	r0, #0
 8009f00:	f7f6 f9ca 	bl	8000298 <__aeabi_dsub>
 8009f04:	4652      	mov	r2, sl
 8009f06:	465b      	mov	r3, fp
 8009f08:	f7f6 fdf0 	bl	8000aec <__aeabi_dcmplt>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	f040 80b5 	bne.w	800a07c <_dtoa_r+0x6c4>
 8009f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f14:	429d      	cmp	r5, r3
 8009f16:	d081      	beq.n	8009e1c <_dtoa_r+0x464>
 8009f18:	4b30      	ldr	r3, [pc, #192]	; (8009fdc <_dtoa_r+0x624>)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	4650      	mov	r0, sl
 8009f1e:	4659      	mov	r1, fp
 8009f20:	f7f6 fb72 	bl	8000608 <__aeabi_dmul>
 8009f24:	4b2d      	ldr	r3, [pc, #180]	; (8009fdc <_dtoa_r+0x624>)
 8009f26:	4682      	mov	sl, r0
 8009f28:	468b      	mov	fp, r1
 8009f2a:	4640      	mov	r0, r8
 8009f2c:	4649      	mov	r1, r9
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f7f6 fb6a 	bl	8000608 <__aeabi_dmul>
 8009f34:	4680      	mov	r8, r0
 8009f36:	4689      	mov	r9, r1
 8009f38:	e7c6      	b.n	8009ec8 <_dtoa_r+0x510>
 8009f3a:	4650      	mov	r0, sl
 8009f3c:	4659      	mov	r1, fp
 8009f3e:	f7f6 fb63 	bl	8000608 <__aeabi_dmul>
 8009f42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f44:	9d01      	ldr	r5, [sp, #4]
 8009f46:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f48:	4682      	mov	sl, r0
 8009f4a:	468b      	mov	fp, r1
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	4640      	mov	r0, r8
 8009f50:	f7f6 fe0a 	bl	8000b68 <__aeabi_d2iz>
 8009f54:	4606      	mov	r6, r0
 8009f56:	f7f6 faed 	bl	8000534 <__aeabi_i2d>
 8009f5a:	3630      	adds	r6, #48	; 0x30
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	4640      	mov	r0, r8
 8009f62:	4649      	mov	r1, r9
 8009f64:	f7f6 f998 	bl	8000298 <__aeabi_dsub>
 8009f68:	f805 6b01 	strb.w	r6, [r5], #1
 8009f6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f6e:	429d      	cmp	r5, r3
 8009f70:	4680      	mov	r8, r0
 8009f72:	4689      	mov	r9, r1
 8009f74:	f04f 0200 	mov.w	r2, #0
 8009f78:	d124      	bne.n	8009fc4 <_dtoa_r+0x60c>
 8009f7a:	4b1b      	ldr	r3, [pc, #108]	; (8009fe8 <_dtoa_r+0x630>)
 8009f7c:	4650      	mov	r0, sl
 8009f7e:	4659      	mov	r1, fp
 8009f80:	f7f6 f98c 	bl	800029c <__adddf3>
 8009f84:	4602      	mov	r2, r0
 8009f86:	460b      	mov	r3, r1
 8009f88:	4640      	mov	r0, r8
 8009f8a:	4649      	mov	r1, r9
 8009f8c:	f7f6 fdcc 	bl	8000b28 <__aeabi_dcmpgt>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	d173      	bne.n	800a07c <_dtoa_r+0x6c4>
 8009f94:	4652      	mov	r2, sl
 8009f96:	465b      	mov	r3, fp
 8009f98:	4913      	ldr	r1, [pc, #76]	; (8009fe8 <_dtoa_r+0x630>)
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	f7f6 f97c 	bl	8000298 <__aeabi_dsub>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	4649      	mov	r1, r9
 8009fa8:	f7f6 fda0 	bl	8000aec <__aeabi_dcmplt>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	f43f af35 	beq.w	8009e1c <_dtoa_r+0x464>
 8009fb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009fb4:	1e6b      	subs	r3, r5, #1
 8009fb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009fbc:	2b30      	cmp	r3, #48	; 0x30
 8009fbe:	d0f8      	beq.n	8009fb2 <_dtoa_r+0x5fa>
 8009fc0:	9700      	str	r7, [sp, #0]
 8009fc2:	e049      	b.n	800a058 <_dtoa_r+0x6a0>
 8009fc4:	4b05      	ldr	r3, [pc, #20]	; (8009fdc <_dtoa_r+0x624>)
 8009fc6:	f7f6 fb1f 	bl	8000608 <__aeabi_dmul>
 8009fca:	4680      	mov	r8, r0
 8009fcc:	4689      	mov	r9, r1
 8009fce:	e7bd      	b.n	8009f4c <_dtoa_r+0x594>
 8009fd0:	0800bef8 	.word	0x0800bef8
 8009fd4:	0800bed0 	.word	0x0800bed0
 8009fd8:	3ff00000 	.word	0x3ff00000
 8009fdc:	40240000 	.word	0x40240000
 8009fe0:	401c0000 	.word	0x401c0000
 8009fe4:	40140000 	.word	0x40140000
 8009fe8:	3fe00000 	.word	0x3fe00000
 8009fec:	9d01      	ldr	r5, [sp, #4]
 8009fee:	4656      	mov	r6, sl
 8009ff0:	465f      	mov	r7, fp
 8009ff2:	4642      	mov	r2, r8
 8009ff4:	464b      	mov	r3, r9
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	4639      	mov	r1, r7
 8009ffa:	f7f6 fc2f 	bl	800085c <__aeabi_ddiv>
 8009ffe:	f7f6 fdb3 	bl	8000b68 <__aeabi_d2iz>
 800a002:	4682      	mov	sl, r0
 800a004:	f7f6 fa96 	bl	8000534 <__aeabi_i2d>
 800a008:	4642      	mov	r2, r8
 800a00a:	464b      	mov	r3, r9
 800a00c:	f7f6 fafc 	bl	8000608 <__aeabi_dmul>
 800a010:	4602      	mov	r2, r0
 800a012:	460b      	mov	r3, r1
 800a014:	4630      	mov	r0, r6
 800a016:	4639      	mov	r1, r7
 800a018:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a01c:	f7f6 f93c 	bl	8000298 <__aeabi_dsub>
 800a020:	f805 6b01 	strb.w	r6, [r5], #1
 800a024:	9e01      	ldr	r6, [sp, #4]
 800a026:	9f03      	ldr	r7, [sp, #12]
 800a028:	1bae      	subs	r6, r5, r6
 800a02a:	42b7      	cmp	r7, r6
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	d135      	bne.n	800a09e <_dtoa_r+0x6e6>
 800a032:	f7f6 f933 	bl	800029c <__adddf3>
 800a036:	4642      	mov	r2, r8
 800a038:	464b      	mov	r3, r9
 800a03a:	4606      	mov	r6, r0
 800a03c:	460f      	mov	r7, r1
 800a03e:	f7f6 fd73 	bl	8000b28 <__aeabi_dcmpgt>
 800a042:	b9d0      	cbnz	r0, 800a07a <_dtoa_r+0x6c2>
 800a044:	4642      	mov	r2, r8
 800a046:	464b      	mov	r3, r9
 800a048:	4630      	mov	r0, r6
 800a04a:	4639      	mov	r1, r7
 800a04c:	f7f6 fd44 	bl	8000ad8 <__aeabi_dcmpeq>
 800a050:	b110      	cbz	r0, 800a058 <_dtoa_r+0x6a0>
 800a052:	f01a 0f01 	tst.w	sl, #1
 800a056:	d110      	bne.n	800a07a <_dtoa_r+0x6c2>
 800a058:	4620      	mov	r0, r4
 800a05a:	ee18 1a10 	vmov	r1, s16
 800a05e:	f000 faf3 	bl	800a648 <_Bfree>
 800a062:	2300      	movs	r3, #0
 800a064:	9800      	ldr	r0, [sp, #0]
 800a066:	702b      	strb	r3, [r5, #0]
 800a068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a06a:	3001      	adds	r0, #1
 800a06c:	6018      	str	r0, [r3, #0]
 800a06e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a070:	2b00      	cmp	r3, #0
 800a072:	f43f acf1 	beq.w	8009a58 <_dtoa_r+0xa0>
 800a076:	601d      	str	r5, [r3, #0]
 800a078:	e4ee      	b.n	8009a58 <_dtoa_r+0xa0>
 800a07a:	9f00      	ldr	r7, [sp, #0]
 800a07c:	462b      	mov	r3, r5
 800a07e:	461d      	mov	r5, r3
 800a080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a084:	2a39      	cmp	r2, #57	; 0x39
 800a086:	d106      	bne.n	800a096 <_dtoa_r+0x6de>
 800a088:	9a01      	ldr	r2, [sp, #4]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d1f7      	bne.n	800a07e <_dtoa_r+0x6c6>
 800a08e:	9901      	ldr	r1, [sp, #4]
 800a090:	2230      	movs	r2, #48	; 0x30
 800a092:	3701      	adds	r7, #1
 800a094:	700a      	strb	r2, [r1, #0]
 800a096:	781a      	ldrb	r2, [r3, #0]
 800a098:	3201      	adds	r2, #1
 800a09a:	701a      	strb	r2, [r3, #0]
 800a09c:	e790      	b.n	8009fc0 <_dtoa_r+0x608>
 800a09e:	4ba6      	ldr	r3, [pc, #664]	; (800a338 <_dtoa_r+0x980>)
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f7f6 fab1 	bl	8000608 <__aeabi_dmul>
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	460f      	mov	r7, r1
 800a0ae:	f7f6 fd13 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d09d      	beq.n	8009ff2 <_dtoa_r+0x63a>
 800a0b6:	e7cf      	b.n	800a058 <_dtoa_r+0x6a0>
 800a0b8:	9a08      	ldr	r2, [sp, #32]
 800a0ba:	2a00      	cmp	r2, #0
 800a0bc:	f000 80d7 	beq.w	800a26e <_dtoa_r+0x8b6>
 800a0c0:	9a06      	ldr	r2, [sp, #24]
 800a0c2:	2a01      	cmp	r2, #1
 800a0c4:	f300 80ba 	bgt.w	800a23c <_dtoa_r+0x884>
 800a0c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0ca:	2a00      	cmp	r2, #0
 800a0cc:	f000 80b2 	beq.w	800a234 <_dtoa_r+0x87c>
 800a0d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a0d4:	9e07      	ldr	r6, [sp, #28]
 800a0d6:	9d04      	ldr	r5, [sp, #16]
 800a0d8:	9a04      	ldr	r2, [sp, #16]
 800a0da:	441a      	add	r2, r3
 800a0dc:	9204      	str	r2, [sp, #16]
 800a0de:	9a05      	ldr	r2, [sp, #20]
 800a0e0:	2101      	movs	r1, #1
 800a0e2:	441a      	add	r2, r3
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	9205      	str	r2, [sp, #20]
 800a0e8:	f000 fb66 	bl	800a7b8 <__i2b>
 800a0ec:	4607      	mov	r7, r0
 800a0ee:	2d00      	cmp	r5, #0
 800a0f0:	dd0c      	ble.n	800a10c <_dtoa_r+0x754>
 800a0f2:	9b05      	ldr	r3, [sp, #20]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	dd09      	ble.n	800a10c <_dtoa_r+0x754>
 800a0f8:	42ab      	cmp	r3, r5
 800a0fa:	9a04      	ldr	r2, [sp, #16]
 800a0fc:	bfa8      	it	ge
 800a0fe:	462b      	movge	r3, r5
 800a100:	1ad2      	subs	r2, r2, r3
 800a102:	9204      	str	r2, [sp, #16]
 800a104:	9a05      	ldr	r2, [sp, #20]
 800a106:	1aed      	subs	r5, r5, r3
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	9305      	str	r3, [sp, #20]
 800a10c:	9b07      	ldr	r3, [sp, #28]
 800a10e:	b31b      	cbz	r3, 800a158 <_dtoa_r+0x7a0>
 800a110:	9b08      	ldr	r3, [sp, #32]
 800a112:	2b00      	cmp	r3, #0
 800a114:	f000 80af 	beq.w	800a276 <_dtoa_r+0x8be>
 800a118:	2e00      	cmp	r6, #0
 800a11a:	dd13      	ble.n	800a144 <_dtoa_r+0x78c>
 800a11c:	4639      	mov	r1, r7
 800a11e:	4632      	mov	r2, r6
 800a120:	4620      	mov	r0, r4
 800a122:	f000 fc09 	bl	800a938 <__pow5mult>
 800a126:	ee18 2a10 	vmov	r2, s16
 800a12a:	4601      	mov	r1, r0
 800a12c:	4607      	mov	r7, r0
 800a12e:	4620      	mov	r0, r4
 800a130:	f000 fb58 	bl	800a7e4 <__multiply>
 800a134:	ee18 1a10 	vmov	r1, s16
 800a138:	4680      	mov	r8, r0
 800a13a:	4620      	mov	r0, r4
 800a13c:	f000 fa84 	bl	800a648 <_Bfree>
 800a140:	ee08 8a10 	vmov	s16, r8
 800a144:	9b07      	ldr	r3, [sp, #28]
 800a146:	1b9a      	subs	r2, r3, r6
 800a148:	d006      	beq.n	800a158 <_dtoa_r+0x7a0>
 800a14a:	ee18 1a10 	vmov	r1, s16
 800a14e:	4620      	mov	r0, r4
 800a150:	f000 fbf2 	bl	800a938 <__pow5mult>
 800a154:	ee08 0a10 	vmov	s16, r0
 800a158:	2101      	movs	r1, #1
 800a15a:	4620      	mov	r0, r4
 800a15c:	f000 fb2c 	bl	800a7b8 <__i2b>
 800a160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a162:	2b00      	cmp	r3, #0
 800a164:	4606      	mov	r6, r0
 800a166:	f340 8088 	ble.w	800a27a <_dtoa_r+0x8c2>
 800a16a:	461a      	mov	r2, r3
 800a16c:	4601      	mov	r1, r0
 800a16e:	4620      	mov	r0, r4
 800a170:	f000 fbe2 	bl	800a938 <__pow5mult>
 800a174:	9b06      	ldr	r3, [sp, #24]
 800a176:	2b01      	cmp	r3, #1
 800a178:	4606      	mov	r6, r0
 800a17a:	f340 8081 	ble.w	800a280 <_dtoa_r+0x8c8>
 800a17e:	f04f 0800 	mov.w	r8, #0
 800a182:	6933      	ldr	r3, [r6, #16]
 800a184:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a188:	6918      	ldr	r0, [r3, #16]
 800a18a:	f000 fac5 	bl	800a718 <__hi0bits>
 800a18e:	f1c0 0020 	rsb	r0, r0, #32
 800a192:	9b05      	ldr	r3, [sp, #20]
 800a194:	4418      	add	r0, r3
 800a196:	f010 001f 	ands.w	r0, r0, #31
 800a19a:	f000 8092 	beq.w	800a2c2 <_dtoa_r+0x90a>
 800a19e:	f1c0 0320 	rsb	r3, r0, #32
 800a1a2:	2b04      	cmp	r3, #4
 800a1a4:	f340 808a 	ble.w	800a2bc <_dtoa_r+0x904>
 800a1a8:	f1c0 001c 	rsb	r0, r0, #28
 800a1ac:	9b04      	ldr	r3, [sp, #16]
 800a1ae:	4403      	add	r3, r0
 800a1b0:	9304      	str	r3, [sp, #16]
 800a1b2:	9b05      	ldr	r3, [sp, #20]
 800a1b4:	4403      	add	r3, r0
 800a1b6:	4405      	add	r5, r0
 800a1b8:	9305      	str	r3, [sp, #20]
 800a1ba:	9b04      	ldr	r3, [sp, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	dd07      	ble.n	800a1d0 <_dtoa_r+0x818>
 800a1c0:	ee18 1a10 	vmov	r1, s16
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f000 fc10 	bl	800a9ec <__lshift>
 800a1cc:	ee08 0a10 	vmov	s16, r0
 800a1d0:	9b05      	ldr	r3, [sp, #20]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	dd05      	ble.n	800a1e2 <_dtoa_r+0x82a>
 800a1d6:	4631      	mov	r1, r6
 800a1d8:	461a      	mov	r2, r3
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f000 fc06 	bl	800a9ec <__lshift>
 800a1e0:	4606      	mov	r6, r0
 800a1e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d06e      	beq.n	800a2c6 <_dtoa_r+0x90e>
 800a1e8:	ee18 0a10 	vmov	r0, s16
 800a1ec:	4631      	mov	r1, r6
 800a1ee:	f000 fc6d 	bl	800aacc <__mcmp>
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	da67      	bge.n	800a2c6 <_dtoa_r+0x90e>
 800a1f6:	9b00      	ldr	r3, [sp, #0]
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	ee18 1a10 	vmov	r1, s16
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	220a      	movs	r2, #10
 800a202:	2300      	movs	r3, #0
 800a204:	4620      	mov	r0, r4
 800a206:	f000 fa41 	bl	800a68c <__multadd>
 800a20a:	9b08      	ldr	r3, [sp, #32]
 800a20c:	ee08 0a10 	vmov	s16, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	f000 81b1 	beq.w	800a578 <_dtoa_r+0xbc0>
 800a216:	2300      	movs	r3, #0
 800a218:	4639      	mov	r1, r7
 800a21a:	220a      	movs	r2, #10
 800a21c:	4620      	mov	r0, r4
 800a21e:	f000 fa35 	bl	800a68c <__multadd>
 800a222:	9b02      	ldr	r3, [sp, #8]
 800a224:	2b00      	cmp	r3, #0
 800a226:	4607      	mov	r7, r0
 800a228:	f300 808e 	bgt.w	800a348 <_dtoa_r+0x990>
 800a22c:	9b06      	ldr	r3, [sp, #24]
 800a22e:	2b02      	cmp	r3, #2
 800a230:	dc51      	bgt.n	800a2d6 <_dtoa_r+0x91e>
 800a232:	e089      	b.n	800a348 <_dtoa_r+0x990>
 800a234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a236:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a23a:	e74b      	b.n	800a0d4 <_dtoa_r+0x71c>
 800a23c:	9b03      	ldr	r3, [sp, #12]
 800a23e:	1e5e      	subs	r6, r3, #1
 800a240:	9b07      	ldr	r3, [sp, #28]
 800a242:	42b3      	cmp	r3, r6
 800a244:	bfbf      	itttt	lt
 800a246:	9b07      	ldrlt	r3, [sp, #28]
 800a248:	9607      	strlt	r6, [sp, #28]
 800a24a:	1af2      	sublt	r2, r6, r3
 800a24c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a24e:	bfb6      	itet	lt
 800a250:	189b      	addlt	r3, r3, r2
 800a252:	1b9e      	subge	r6, r3, r6
 800a254:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a256:	9b03      	ldr	r3, [sp, #12]
 800a258:	bfb8      	it	lt
 800a25a:	2600      	movlt	r6, #0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	bfb7      	itett	lt
 800a260:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a264:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a268:	1a9d      	sublt	r5, r3, r2
 800a26a:	2300      	movlt	r3, #0
 800a26c:	e734      	b.n	800a0d8 <_dtoa_r+0x720>
 800a26e:	9e07      	ldr	r6, [sp, #28]
 800a270:	9d04      	ldr	r5, [sp, #16]
 800a272:	9f08      	ldr	r7, [sp, #32]
 800a274:	e73b      	b.n	800a0ee <_dtoa_r+0x736>
 800a276:	9a07      	ldr	r2, [sp, #28]
 800a278:	e767      	b.n	800a14a <_dtoa_r+0x792>
 800a27a:	9b06      	ldr	r3, [sp, #24]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	dc18      	bgt.n	800a2b2 <_dtoa_r+0x8fa>
 800a280:	f1ba 0f00 	cmp.w	sl, #0
 800a284:	d115      	bne.n	800a2b2 <_dtoa_r+0x8fa>
 800a286:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a28a:	b993      	cbnz	r3, 800a2b2 <_dtoa_r+0x8fa>
 800a28c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a290:	0d1b      	lsrs	r3, r3, #20
 800a292:	051b      	lsls	r3, r3, #20
 800a294:	b183      	cbz	r3, 800a2b8 <_dtoa_r+0x900>
 800a296:	9b04      	ldr	r3, [sp, #16]
 800a298:	3301      	adds	r3, #1
 800a29a:	9304      	str	r3, [sp, #16]
 800a29c:	9b05      	ldr	r3, [sp, #20]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	9305      	str	r3, [sp, #20]
 800a2a2:	f04f 0801 	mov.w	r8, #1
 800a2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f47f af6a 	bne.w	800a182 <_dtoa_r+0x7ca>
 800a2ae:	2001      	movs	r0, #1
 800a2b0:	e76f      	b.n	800a192 <_dtoa_r+0x7da>
 800a2b2:	f04f 0800 	mov.w	r8, #0
 800a2b6:	e7f6      	b.n	800a2a6 <_dtoa_r+0x8ee>
 800a2b8:	4698      	mov	r8, r3
 800a2ba:	e7f4      	b.n	800a2a6 <_dtoa_r+0x8ee>
 800a2bc:	f43f af7d 	beq.w	800a1ba <_dtoa_r+0x802>
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	301c      	adds	r0, #28
 800a2c4:	e772      	b.n	800a1ac <_dtoa_r+0x7f4>
 800a2c6:	9b03      	ldr	r3, [sp, #12]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	dc37      	bgt.n	800a33c <_dtoa_r+0x984>
 800a2cc:	9b06      	ldr	r3, [sp, #24]
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	dd34      	ble.n	800a33c <_dtoa_r+0x984>
 800a2d2:	9b03      	ldr	r3, [sp, #12]
 800a2d4:	9302      	str	r3, [sp, #8]
 800a2d6:	9b02      	ldr	r3, [sp, #8]
 800a2d8:	b96b      	cbnz	r3, 800a2f6 <_dtoa_r+0x93e>
 800a2da:	4631      	mov	r1, r6
 800a2dc:	2205      	movs	r2, #5
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f000 f9d4 	bl	800a68c <__multadd>
 800a2e4:	4601      	mov	r1, r0
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	ee18 0a10 	vmov	r0, s16
 800a2ec:	f000 fbee 	bl	800aacc <__mcmp>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	f73f adbb 	bgt.w	8009e6c <_dtoa_r+0x4b4>
 800a2f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2f8:	9d01      	ldr	r5, [sp, #4]
 800a2fa:	43db      	mvns	r3, r3
 800a2fc:	9300      	str	r3, [sp, #0]
 800a2fe:	f04f 0800 	mov.w	r8, #0
 800a302:	4631      	mov	r1, r6
 800a304:	4620      	mov	r0, r4
 800a306:	f000 f99f 	bl	800a648 <_Bfree>
 800a30a:	2f00      	cmp	r7, #0
 800a30c:	f43f aea4 	beq.w	800a058 <_dtoa_r+0x6a0>
 800a310:	f1b8 0f00 	cmp.w	r8, #0
 800a314:	d005      	beq.n	800a322 <_dtoa_r+0x96a>
 800a316:	45b8      	cmp	r8, r7
 800a318:	d003      	beq.n	800a322 <_dtoa_r+0x96a>
 800a31a:	4641      	mov	r1, r8
 800a31c:	4620      	mov	r0, r4
 800a31e:	f000 f993 	bl	800a648 <_Bfree>
 800a322:	4639      	mov	r1, r7
 800a324:	4620      	mov	r0, r4
 800a326:	f000 f98f 	bl	800a648 <_Bfree>
 800a32a:	e695      	b.n	800a058 <_dtoa_r+0x6a0>
 800a32c:	2600      	movs	r6, #0
 800a32e:	4637      	mov	r7, r6
 800a330:	e7e1      	b.n	800a2f6 <_dtoa_r+0x93e>
 800a332:	9700      	str	r7, [sp, #0]
 800a334:	4637      	mov	r7, r6
 800a336:	e599      	b.n	8009e6c <_dtoa_r+0x4b4>
 800a338:	40240000 	.word	0x40240000
 800a33c:	9b08      	ldr	r3, [sp, #32]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f000 80ca 	beq.w	800a4d8 <_dtoa_r+0xb20>
 800a344:	9b03      	ldr	r3, [sp, #12]
 800a346:	9302      	str	r3, [sp, #8]
 800a348:	2d00      	cmp	r5, #0
 800a34a:	dd05      	ble.n	800a358 <_dtoa_r+0x9a0>
 800a34c:	4639      	mov	r1, r7
 800a34e:	462a      	mov	r2, r5
 800a350:	4620      	mov	r0, r4
 800a352:	f000 fb4b 	bl	800a9ec <__lshift>
 800a356:	4607      	mov	r7, r0
 800a358:	f1b8 0f00 	cmp.w	r8, #0
 800a35c:	d05b      	beq.n	800a416 <_dtoa_r+0xa5e>
 800a35e:	6879      	ldr	r1, [r7, #4]
 800a360:	4620      	mov	r0, r4
 800a362:	f000 f931 	bl	800a5c8 <_Balloc>
 800a366:	4605      	mov	r5, r0
 800a368:	b928      	cbnz	r0, 800a376 <_dtoa_r+0x9be>
 800a36a:	4b87      	ldr	r3, [pc, #540]	; (800a588 <_dtoa_r+0xbd0>)
 800a36c:	4602      	mov	r2, r0
 800a36e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a372:	f7ff bb3b 	b.w	80099ec <_dtoa_r+0x34>
 800a376:	693a      	ldr	r2, [r7, #16]
 800a378:	3202      	adds	r2, #2
 800a37a:	0092      	lsls	r2, r2, #2
 800a37c:	f107 010c 	add.w	r1, r7, #12
 800a380:	300c      	adds	r0, #12
 800a382:	f000 f913 	bl	800a5ac <memcpy>
 800a386:	2201      	movs	r2, #1
 800a388:	4629      	mov	r1, r5
 800a38a:	4620      	mov	r0, r4
 800a38c:	f000 fb2e 	bl	800a9ec <__lshift>
 800a390:	9b01      	ldr	r3, [sp, #4]
 800a392:	f103 0901 	add.w	r9, r3, #1
 800a396:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a39a:	4413      	add	r3, r2
 800a39c:	9305      	str	r3, [sp, #20]
 800a39e:	f00a 0301 	and.w	r3, sl, #1
 800a3a2:	46b8      	mov	r8, r7
 800a3a4:	9304      	str	r3, [sp, #16]
 800a3a6:	4607      	mov	r7, r0
 800a3a8:	4631      	mov	r1, r6
 800a3aa:	ee18 0a10 	vmov	r0, s16
 800a3ae:	f7ff fa75 	bl	800989c <quorem>
 800a3b2:	4641      	mov	r1, r8
 800a3b4:	9002      	str	r0, [sp, #8]
 800a3b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a3ba:	ee18 0a10 	vmov	r0, s16
 800a3be:	f000 fb85 	bl	800aacc <__mcmp>
 800a3c2:	463a      	mov	r2, r7
 800a3c4:	9003      	str	r0, [sp, #12]
 800a3c6:	4631      	mov	r1, r6
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f000 fb9b 	bl	800ab04 <__mdiff>
 800a3ce:	68c2      	ldr	r2, [r0, #12]
 800a3d0:	f109 3bff 	add.w	fp, r9, #4294967295
 800a3d4:	4605      	mov	r5, r0
 800a3d6:	bb02      	cbnz	r2, 800a41a <_dtoa_r+0xa62>
 800a3d8:	4601      	mov	r1, r0
 800a3da:	ee18 0a10 	vmov	r0, s16
 800a3de:	f000 fb75 	bl	800aacc <__mcmp>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	4629      	mov	r1, r5
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	9207      	str	r2, [sp, #28]
 800a3ea:	f000 f92d 	bl	800a648 <_Bfree>
 800a3ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a3f2:	ea43 0102 	orr.w	r1, r3, r2
 800a3f6:	9b04      	ldr	r3, [sp, #16]
 800a3f8:	430b      	orrs	r3, r1
 800a3fa:	464d      	mov	r5, r9
 800a3fc:	d10f      	bne.n	800a41e <_dtoa_r+0xa66>
 800a3fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a402:	d02a      	beq.n	800a45a <_dtoa_r+0xaa2>
 800a404:	9b03      	ldr	r3, [sp, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	dd02      	ble.n	800a410 <_dtoa_r+0xa58>
 800a40a:	9b02      	ldr	r3, [sp, #8]
 800a40c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a410:	f88b a000 	strb.w	sl, [fp]
 800a414:	e775      	b.n	800a302 <_dtoa_r+0x94a>
 800a416:	4638      	mov	r0, r7
 800a418:	e7ba      	b.n	800a390 <_dtoa_r+0x9d8>
 800a41a:	2201      	movs	r2, #1
 800a41c:	e7e2      	b.n	800a3e4 <_dtoa_r+0xa2c>
 800a41e:	9b03      	ldr	r3, [sp, #12]
 800a420:	2b00      	cmp	r3, #0
 800a422:	db04      	blt.n	800a42e <_dtoa_r+0xa76>
 800a424:	9906      	ldr	r1, [sp, #24]
 800a426:	430b      	orrs	r3, r1
 800a428:	9904      	ldr	r1, [sp, #16]
 800a42a:	430b      	orrs	r3, r1
 800a42c:	d122      	bne.n	800a474 <_dtoa_r+0xabc>
 800a42e:	2a00      	cmp	r2, #0
 800a430:	ddee      	ble.n	800a410 <_dtoa_r+0xa58>
 800a432:	ee18 1a10 	vmov	r1, s16
 800a436:	2201      	movs	r2, #1
 800a438:	4620      	mov	r0, r4
 800a43a:	f000 fad7 	bl	800a9ec <__lshift>
 800a43e:	4631      	mov	r1, r6
 800a440:	ee08 0a10 	vmov	s16, r0
 800a444:	f000 fb42 	bl	800aacc <__mcmp>
 800a448:	2800      	cmp	r0, #0
 800a44a:	dc03      	bgt.n	800a454 <_dtoa_r+0xa9c>
 800a44c:	d1e0      	bne.n	800a410 <_dtoa_r+0xa58>
 800a44e:	f01a 0f01 	tst.w	sl, #1
 800a452:	d0dd      	beq.n	800a410 <_dtoa_r+0xa58>
 800a454:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a458:	d1d7      	bne.n	800a40a <_dtoa_r+0xa52>
 800a45a:	2339      	movs	r3, #57	; 0x39
 800a45c:	f88b 3000 	strb.w	r3, [fp]
 800a460:	462b      	mov	r3, r5
 800a462:	461d      	mov	r5, r3
 800a464:	3b01      	subs	r3, #1
 800a466:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a46a:	2a39      	cmp	r2, #57	; 0x39
 800a46c:	d071      	beq.n	800a552 <_dtoa_r+0xb9a>
 800a46e:	3201      	adds	r2, #1
 800a470:	701a      	strb	r2, [r3, #0]
 800a472:	e746      	b.n	800a302 <_dtoa_r+0x94a>
 800a474:	2a00      	cmp	r2, #0
 800a476:	dd07      	ble.n	800a488 <_dtoa_r+0xad0>
 800a478:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a47c:	d0ed      	beq.n	800a45a <_dtoa_r+0xaa2>
 800a47e:	f10a 0301 	add.w	r3, sl, #1
 800a482:	f88b 3000 	strb.w	r3, [fp]
 800a486:	e73c      	b.n	800a302 <_dtoa_r+0x94a>
 800a488:	9b05      	ldr	r3, [sp, #20]
 800a48a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a48e:	4599      	cmp	r9, r3
 800a490:	d047      	beq.n	800a522 <_dtoa_r+0xb6a>
 800a492:	ee18 1a10 	vmov	r1, s16
 800a496:	2300      	movs	r3, #0
 800a498:	220a      	movs	r2, #10
 800a49a:	4620      	mov	r0, r4
 800a49c:	f000 f8f6 	bl	800a68c <__multadd>
 800a4a0:	45b8      	cmp	r8, r7
 800a4a2:	ee08 0a10 	vmov	s16, r0
 800a4a6:	f04f 0300 	mov.w	r3, #0
 800a4aa:	f04f 020a 	mov.w	r2, #10
 800a4ae:	4641      	mov	r1, r8
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	d106      	bne.n	800a4c2 <_dtoa_r+0xb0a>
 800a4b4:	f000 f8ea 	bl	800a68c <__multadd>
 800a4b8:	4680      	mov	r8, r0
 800a4ba:	4607      	mov	r7, r0
 800a4bc:	f109 0901 	add.w	r9, r9, #1
 800a4c0:	e772      	b.n	800a3a8 <_dtoa_r+0x9f0>
 800a4c2:	f000 f8e3 	bl	800a68c <__multadd>
 800a4c6:	4639      	mov	r1, r7
 800a4c8:	4680      	mov	r8, r0
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	220a      	movs	r2, #10
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	f000 f8dc 	bl	800a68c <__multadd>
 800a4d4:	4607      	mov	r7, r0
 800a4d6:	e7f1      	b.n	800a4bc <_dtoa_r+0xb04>
 800a4d8:	9b03      	ldr	r3, [sp, #12]
 800a4da:	9302      	str	r3, [sp, #8]
 800a4dc:	9d01      	ldr	r5, [sp, #4]
 800a4de:	ee18 0a10 	vmov	r0, s16
 800a4e2:	4631      	mov	r1, r6
 800a4e4:	f7ff f9da 	bl	800989c <quorem>
 800a4e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a4ec:	9b01      	ldr	r3, [sp, #4]
 800a4ee:	f805 ab01 	strb.w	sl, [r5], #1
 800a4f2:	1aea      	subs	r2, r5, r3
 800a4f4:	9b02      	ldr	r3, [sp, #8]
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	dd09      	ble.n	800a50e <_dtoa_r+0xb56>
 800a4fa:	ee18 1a10 	vmov	r1, s16
 800a4fe:	2300      	movs	r3, #0
 800a500:	220a      	movs	r2, #10
 800a502:	4620      	mov	r0, r4
 800a504:	f000 f8c2 	bl	800a68c <__multadd>
 800a508:	ee08 0a10 	vmov	s16, r0
 800a50c:	e7e7      	b.n	800a4de <_dtoa_r+0xb26>
 800a50e:	9b02      	ldr	r3, [sp, #8]
 800a510:	2b00      	cmp	r3, #0
 800a512:	bfc8      	it	gt
 800a514:	461d      	movgt	r5, r3
 800a516:	9b01      	ldr	r3, [sp, #4]
 800a518:	bfd8      	it	le
 800a51a:	2501      	movle	r5, #1
 800a51c:	441d      	add	r5, r3
 800a51e:	f04f 0800 	mov.w	r8, #0
 800a522:	ee18 1a10 	vmov	r1, s16
 800a526:	2201      	movs	r2, #1
 800a528:	4620      	mov	r0, r4
 800a52a:	f000 fa5f 	bl	800a9ec <__lshift>
 800a52e:	4631      	mov	r1, r6
 800a530:	ee08 0a10 	vmov	s16, r0
 800a534:	f000 faca 	bl	800aacc <__mcmp>
 800a538:	2800      	cmp	r0, #0
 800a53a:	dc91      	bgt.n	800a460 <_dtoa_r+0xaa8>
 800a53c:	d102      	bne.n	800a544 <_dtoa_r+0xb8c>
 800a53e:	f01a 0f01 	tst.w	sl, #1
 800a542:	d18d      	bne.n	800a460 <_dtoa_r+0xaa8>
 800a544:	462b      	mov	r3, r5
 800a546:	461d      	mov	r5, r3
 800a548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a54c:	2a30      	cmp	r2, #48	; 0x30
 800a54e:	d0fa      	beq.n	800a546 <_dtoa_r+0xb8e>
 800a550:	e6d7      	b.n	800a302 <_dtoa_r+0x94a>
 800a552:	9a01      	ldr	r2, [sp, #4]
 800a554:	429a      	cmp	r2, r3
 800a556:	d184      	bne.n	800a462 <_dtoa_r+0xaaa>
 800a558:	9b00      	ldr	r3, [sp, #0]
 800a55a:	3301      	adds	r3, #1
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	2331      	movs	r3, #49	; 0x31
 800a560:	7013      	strb	r3, [r2, #0]
 800a562:	e6ce      	b.n	800a302 <_dtoa_r+0x94a>
 800a564:	4b09      	ldr	r3, [pc, #36]	; (800a58c <_dtoa_r+0xbd4>)
 800a566:	f7ff ba95 	b.w	8009a94 <_dtoa_r+0xdc>
 800a56a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f47f aa6e 	bne.w	8009a4e <_dtoa_r+0x96>
 800a572:	4b07      	ldr	r3, [pc, #28]	; (800a590 <_dtoa_r+0xbd8>)
 800a574:	f7ff ba8e 	b.w	8009a94 <_dtoa_r+0xdc>
 800a578:	9b02      	ldr	r3, [sp, #8]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	dcae      	bgt.n	800a4dc <_dtoa_r+0xb24>
 800a57e:	9b06      	ldr	r3, [sp, #24]
 800a580:	2b02      	cmp	r3, #2
 800a582:	f73f aea8 	bgt.w	800a2d6 <_dtoa_r+0x91e>
 800a586:	e7a9      	b.n	800a4dc <_dtoa_r+0xb24>
 800a588:	0800be5f 	.word	0x0800be5f
 800a58c:	0800bdbc 	.word	0x0800bdbc
 800a590:	0800bde0 	.word	0x0800bde0

0800a594 <_localeconv_r>:
 800a594:	4800      	ldr	r0, [pc, #0]	; (800a598 <_localeconv_r+0x4>)
 800a596:	4770      	bx	lr
 800a598:	20000160 	.word	0x20000160

0800a59c <malloc>:
 800a59c:	4b02      	ldr	r3, [pc, #8]	; (800a5a8 <malloc+0xc>)
 800a59e:	4601      	mov	r1, r0
 800a5a0:	6818      	ldr	r0, [r3, #0]
 800a5a2:	f000 bc17 	b.w	800add4 <_malloc_r>
 800a5a6:	bf00      	nop
 800a5a8:	2000000c 	.word	0x2000000c

0800a5ac <memcpy>:
 800a5ac:	440a      	add	r2, r1
 800a5ae:	4291      	cmp	r1, r2
 800a5b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5b4:	d100      	bne.n	800a5b8 <memcpy+0xc>
 800a5b6:	4770      	bx	lr
 800a5b8:	b510      	push	{r4, lr}
 800a5ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5c2:	4291      	cmp	r1, r2
 800a5c4:	d1f9      	bne.n	800a5ba <memcpy+0xe>
 800a5c6:	bd10      	pop	{r4, pc}

0800a5c8 <_Balloc>:
 800a5c8:	b570      	push	{r4, r5, r6, lr}
 800a5ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	460d      	mov	r5, r1
 800a5d0:	b976      	cbnz	r6, 800a5f0 <_Balloc+0x28>
 800a5d2:	2010      	movs	r0, #16
 800a5d4:	f7ff ffe2 	bl	800a59c <malloc>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	6260      	str	r0, [r4, #36]	; 0x24
 800a5dc:	b920      	cbnz	r0, 800a5e8 <_Balloc+0x20>
 800a5de:	4b18      	ldr	r3, [pc, #96]	; (800a640 <_Balloc+0x78>)
 800a5e0:	4818      	ldr	r0, [pc, #96]	; (800a644 <_Balloc+0x7c>)
 800a5e2:	2166      	movs	r1, #102	; 0x66
 800a5e4:	f000 fdd6 	bl	800b194 <__assert_func>
 800a5e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5ec:	6006      	str	r6, [r0, #0]
 800a5ee:	60c6      	str	r6, [r0, #12]
 800a5f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a5f2:	68f3      	ldr	r3, [r6, #12]
 800a5f4:	b183      	cbz	r3, 800a618 <_Balloc+0x50>
 800a5f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a5fe:	b9b8      	cbnz	r0, 800a630 <_Balloc+0x68>
 800a600:	2101      	movs	r1, #1
 800a602:	fa01 f605 	lsl.w	r6, r1, r5
 800a606:	1d72      	adds	r2, r6, #5
 800a608:	0092      	lsls	r2, r2, #2
 800a60a:	4620      	mov	r0, r4
 800a60c:	f000 fb60 	bl	800acd0 <_calloc_r>
 800a610:	b160      	cbz	r0, 800a62c <_Balloc+0x64>
 800a612:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a616:	e00e      	b.n	800a636 <_Balloc+0x6e>
 800a618:	2221      	movs	r2, #33	; 0x21
 800a61a:	2104      	movs	r1, #4
 800a61c:	4620      	mov	r0, r4
 800a61e:	f000 fb57 	bl	800acd0 <_calloc_r>
 800a622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a624:	60f0      	str	r0, [r6, #12]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1e4      	bne.n	800a5f6 <_Balloc+0x2e>
 800a62c:	2000      	movs	r0, #0
 800a62e:	bd70      	pop	{r4, r5, r6, pc}
 800a630:	6802      	ldr	r2, [r0, #0]
 800a632:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a636:	2300      	movs	r3, #0
 800a638:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a63c:	e7f7      	b.n	800a62e <_Balloc+0x66>
 800a63e:	bf00      	nop
 800a640:	0800bded 	.word	0x0800bded
 800a644:	0800be70 	.word	0x0800be70

0800a648 <_Bfree>:
 800a648:	b570      	push	{r4, r5, r6, lr}
 800a64a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a64c:	4605      	mov	r5, r0
 800a64e:	460c      	mov	r4, r1
 800a650:	b976      	cbnz	r6, 800a670 <_Bfree+0x28>
 800a652:	2010      	movs	r0, #16
 800a654:	f7ff ffa2 	bl	800a59c <malloc>
 800a658:	4602      	mov	r2, r0
 800a65a:	6268      	str	r0, [r5, #36]	; 0x24
 800a65c:	b920      	cbnz	r0, 800a668 <_Bfree+0x20>
 800a65e:	4b09      	ldr	r3, [pc, #36]	; (800a684 <_Bfree+0x3c>)
 800a660:	4809      	ldr	r0, [pc, #36]	; (800a688 <_Bfree+0x40>)
 800a662:	218a      	movs	r1, #138	; 0x8a
 800a664:	f000 fd96 	bl	800b194 <__assert_func>
 800a668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a66c:	6006      	str	r6, [r0, #0]
 800a66e:	60c6      	str	r6, [r0, #12]
 800a670:	b13c      	cbz	r4, 800a682 <_Bfree+0x3a>
 800a672:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a674:	6862      	ldr	r2, [r4, #4]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a67c:	6021      	str	r1, [r4, #0]
 800a67e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a682:	bd70      	pop	{r4, r5, r6, pc}
 800a684:	0800bded 	.word	0x0800bded
 800a688:	0800be70 	.word	0x0800be70

0800a68c <__multadd>:
 800a68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a690:	690d      	ldr	r5, [r1, #16]
 800a692:	4607      	mov	r7, r0
 800a694:	460c      	mov	r4, r1
 800a696:	461e      	mov	r6, r3
 800a698:	f101 0c14 	add.w	ip, r1, #20
 800a69c:	2000      	movs	r0, #0
 800a69e:	f8dc 3000 	ldr.w	r3, [ip]
 800a6a2:	b299      	uxth	r1, r3
 800a6a4:	fb02 6101 	mla	r1, r2, r1, r6
 800a6a8:	0c1e      	lsrs	r6, r3, #16
 800a6aa:	0c0b      	lsrs	r3, r1, #16
 800a6ac:	fb02 3306 	mla	r3, r2, r6, r3
 800a6b0:	b289      	uxth	r1, r1
 800a6b2:	3001      	adds	r0, #1
 800a6b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a6b8:	4285      	cmp	r5, r0
 800a6ba:	f84c 1b04 	str.w	r1, [ip], #4
 800a6be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a6c2:	dcec      	bgt.n	800a69e <__multadd+0x12>
 800a6c4:	b30e      	cbz	r6, 800a70a <__multadd+0x7e>
 800a6c6:	68a3      	ldr	r3, [r4, #8]
 800a6c8:	42ab      	cmp	r3, r5
 800a6ca:	dc19      	bgt.n	800a700 <__multadd+0x74>
 800a6cc:	6861      	ldr	r1, [r4, #4]
 800a6ce:	4638      	mov	r0, r7
 800a6d0:	3101      	adds	r1, #1
 800a6d2:	f7ff ff79 	bl	800a5c8 <_Balloc>
 800a6d6:	4680      	mov	r8, r0
 800a6d8:	b928      	cbnz	r0, 800a6e6 <__multadd+0x5a>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	4b0c      	ldr	r3, [pc, #48]	; (800a710 <__multadd+0x84>)
 800a6de:	480d      	ldr	r0, [pc, #52]	; (800a714 <__multadd+0x88>)
 800a6e0:	21b5      	movs	r1, #181	; 0xb5
 800a6e2:	f000 fd57 	bl	800b194 <__assert_func>
 800a6e6:	6922      	ldr	r2, [r4, #16]
 800a6e8:	3202      	adds	r2, #2
 800a6ea:	f104 010c 	add.w	r1, r4, #12
 800a6ee:	0092      	lsls	r2, r2, #2
 800a6f0:	300c      	adds	r0, #12
 800a6f2:	f7ff ff5b 	bl	800a5ac <memcpy>
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	4638      	mov	r0, r7
 800a6fa:	f7ff ffa5 	bl	800a648 <_Bfree>
 800a6fe:	4644      	mov	r4, r8
 800a700:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a704:	3501      	adds	r5, #1
 800a706:	615e      	str	r6, [r3, #20]
 800a708:	6125      	str	r5, [r4, #16]
 800a70a:	4620      	mov	r0, r4
 800a70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a710:	0800be5f 	.word	0x0800be5f
 800a714:	0800be70 	.word	0x0800be70

0800a718 <__hi0bits>:
 800a718:	0c03      	lsrs	r3, r0, #16
 800a71a:	041b      	lsls	r3, r3, #16
 800a71c:	b9d3      	cbnz	r3, 800a754 <__hi0bits+0x3c>
 800a71e:	0400      	lsls	r0, r0, #16
 800a720:	2310      	movs	r3, #16
 800a722:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a726:	bf04      	itt	eq
 800a728:	0200      	lsleq	r0, r0, #8
 800a72a:	3308      	addeq	r3, #8
 800a72c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a730:	bf04      	itt	eq
 800a732:	0100      	lsleq	r0, r0, #4
 800a734:	3304      	addeq	r3, #4
 800a736:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a73a:	bf04      	itt	eq
 800a73c:	0080      	lsleq	r0, r0, #2
 800a73e:	3302      	addeq	r3, #2
 800a740:	2800      	cmp	r0, #0
 800a742:	db05      	blt.n	800a750 <__hi0bits+0x38>
 800a744:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a748:	f103 0301 	add.w	r3, r3, #1
 800a74c:	bf08      	it	eq
 800a74e:	2320      	moveq	r3, #32
 800a750:	4618      	mov	r0, r3
 800a752:	4770      	bx	lr
 800a754:	2300      	movs	r3, #0
 800a756:	e7e4      	b.n	800a722 <__hi0bits+0xa>

0800a758 <__lo0bits>:
 800a758:	6803      	ldr	r3, [r0, #0]
 800a75a:	f013 0207 	ands.w	r2, r3, #7
 800a75e:	4601      	mov	r1, r0
 800a760:	d00b      	beq.n	800a77a <__lo0bits+0x22>
 800a762:	07da      	lsls	r2, r3, #31
 800a764:	d423      	bmi.n	800a7ae <__lo0bits+0x56>
 800a766:	0798      	lsls	r0, r3, #30
 800a768:	bf49      	itett	mi
 800a76a:	085b      	lsrmi	r3, r3, #1
 800a76c:	089b      	lsrpl	r3, r3, #2
 800a76e:	2001      	movmi	r0, #1
 800a770:	600b      	strmi	r3, [r1, #0]
 800a772:	bf5c      	itt	pl
 800a774:	600b      	strpl	r3, [r1, #0]
 800a776:	2002      	movpl	r0, #2
 800a778:	4770      	bx	lr
 800a77a:	b298      	uxth	r0, r3
 800a77c:	b9a8      	cbnz	r0, 800a7aa <__lo0bits+0x52>
 800a77e:	0c1b      	lsrs	r3, r3, #16
 800a780:	2010      	movs	r0, #16
 800a782:	b2da      	uxtb	r2, r3
 800a784:	b90a      	cbnz	r2, 800a78a <__lo0bits+0x32>
 800a786:	3008      	adds	r0, #8
 800a788:	0a1b      	lsrs	r3, r3, #8
 800a78a:	071a      	lsls	r2, r3, #28
 800a78c:	bf04      	itt	eq
 800a78e:	091b      	lsreq	r3, r3, #4
 800a790:	3004      	addeq	r0, #4
 800a792:	079a      	lsls	r2, r3, #30
 800a794:	bf04      	itt	eq
 800a796:	089b      	lsreq	r3, r3, #2
 800a798:	3002      	addeq	r0, #2
 800a79a:	07da      	lsls	r2, r3, #31
 800a79c:	d403      	bmi.n	800a7a6 <__lo0bits+0x4e>
 800a79e:	085b      	lsrs	r3, r3, #1
 800a7a0:	f100 0001 	add.w	r0, r0, #1
 800a7a4:	d005      	beq.n	800a7b2 <__lo0bits+0x5a>
 800a7a6:	600b      	str	r3, [r1, #0]
 800a7a8:	4770      	bx	lr
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	e7e9      	b.n	800a782 <__lo0bits+0x2a>
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	4770      	bx	lr
 800a7b2:	2020      	movs	r0, #32
 800a7b4:	4770      	bx	lr
	...

0800a7b8 <__i2b>:
 800a7b8:	b510      	push	{r4, lr}
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	2101      	movs	r1, #1
 800a7be:	f7ff ff03 	bl	800a5c8 <_Balloc>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	b928      	cbnz	r0, 800a7d2 <__i2b+0x1a>
 800a7c6:	4b05      	ldr	r3, [pc, #20]	; (800a7dc <__i2b+0x24>)
 800a7c8:	4805      	ldr	r0, [pc, #20]	; (800a7e0 <__i2b+0x28>)
 800a7ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a7ce:	f000 fce1 	bl	800b194 <__assert_func>
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	6144      	str	r4, [r0, #20]
 800a7d6:	6103      	str	r3, [r0, #16]
 800a7d8:	bd10      	pop	{r4, pc}
 800a7da:	bf00      	nop
 800a7dc:	0800be5f 	.word	0x0800be5f
 800a7e0:	0800be70 	.word	0x0800be70

0800a7e4 <__multiply>:
 800a7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e8:	4691      	mov	r9, r2
 800a7ea:	690a      	ldr	r2, [r1, #16]
 800a7ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	bfb8      	it	lt
 800a7f4:	460b      	movlt	r3, r1
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	bfbc      	itt	lt
 800a7fa:	464c      	movlt	r4, r9
 800a7fc:	4699      	movlt	r9, r3
 800a7fe:	6927      	ldr	r7, [r4, #16]
 800a800:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a804:	68a3      	ldr	r3, [r4, #8]
 800a806:	6861      	ldr	r1, [r4, #4]
 800a808:	eb07 060a 	add.w	r6, r7, sl
 800a80c:	42b3      	cmp	r3, r6
 800a80e:	b085      	sub	sp, #20
 800a810:	bfb8      	it	lt
 800a812:	3101      	addlt	r1, #1
 800a814:	f7ff fed8 	bl	800a5c8 <_Balloc>
 800a818:	b930      	cbnz	r0, 800a828 <__multiply+0x44>
 800a81a:	4602      	mov	r2, r0
 800a81c:	4b44      	ldr	r3, [pc, #272]	; (800a930 <__multiply+0x14c>)
 800a81e:	4845      	ldr	r0, [pc, #276]	; (800a934 <__multiply+0x150>)
 800a820:	f240 115d 	movw	r1, #349	; 0x15d
 800a824:	f000 fcb6 	bl	800b194 <__assert_func>
 800a828:	f100 0514 	add.w	r5, r0, #20
 800a82c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a830:	462b      	mov	r3, r5
 800a832:	2200      	movs	r2, #0
 800a834:	4543      	cmp	r3, r8
 800a836:	d321      	bcc.n	800a87c <__multiply+0x98>
 800a838:	f104 0314 	add.w	r3, r4, #20
 800a83c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a840:	f109 0314 	add.w	r3, r9, #20
 800a844:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a848:	9202      	str	r2, [sp, #8]
 800a84a:	1b3a      	subs	r2, r7, r4
 800a84c:	3a15      	subs	r2, #21
 800a84e:	f022 0203 	bic.w	r2, r2, #3
 800a852:	3204      	adds	r2, #4
 800a854:	f104 0115 	add.w	r1, r4, #21
 800a858:	428f      	cmp	r7, r1
 800a85a:	bf38      	it	cc
 800a85c:	2204      	movcc	r2, #4
 800a85e:	9201      	str	r2, [sp, #4]
 800a860:	9a02      	ldr	r2, [sp, #8]
 800a862:	9303      	str	r3, [sp, #12]
 800a864:	429a      	cmp	r2, r3
 800a866:	d80c      	bhi.n	800a882 <__multiply+0x9e>
 800a868:	2e00      	cmp	r6, #0
 800a86a:	dd03      	ble.n	800a874 <__multiply+0x90>
 800a86c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a870:	2b00      	cmp	r3, #0
 800a872:	d05a      	beq.n	800a92a <__multiply+0x146>
 800a874:	6106      	str	r6, [r0, #16]
 800a876:	b005      	add	sp, #20
 800a878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87c:	f843 2b04 	str.w	r2, [r3], #4
 800a880:	e7d8      	b.n	800a834 <__multiply+0x50>
 800a882:	f8b3 a000 	ldrh.w	sl, [r3]
 800a886:	f1ba 0f00 	cmp.w	sl, #0
 800a88a:	d024      	beq.n	800a8d6 <__multiply+0xf2>
 800a88c:	f104 0e14 	add.w	lr, r4, #20
 800a890:	46a9      	mov	r9, r5
 800a892:	f04f 0c00 	mov.w	ip, #0
 800a896:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a89a:	f8d9 1000 	ldr.w	r1, [r9]
 800a89e:	fa1f fb82 	uxth.w	fp, r2
 800a8a2:	b289      	uxth	r1, r1
 800a8a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a8a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a8ac:	f8d9 2000 	ldr.w	r2, [r9]
 800a8b0:	4461      	add	r1, ip
 800a8b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a8ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a8be:	b289      	uxth	r1, r1
 800a8c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a8c4:	4577      	cmp	r7, lr
 800a8c6:	f849 1b04 	str.w	r1, [r9], #4
 800a8ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8ce:	d8e2      	bhi.n	800a896 <__multiply+0xb2>
 800a8d0:	9a01      	ldr	r2, [sp, #4]
 800a8d2:	f845 c002 	str.w	ip, [r5, r2]
 800a8d6:	9a03      	ldr	r2, [sp, #12]
 800a8d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a8dc:	3304      	adds	r3, #4
 800a8de:	f1b9 0f00 	cmp.w	r9, #0
 800a8e2:	d020      	beq.n	800a926 <__multiply+0x142>
 800a8e4:	6829      	ldr	r1, [r5, #0]
 800a8e6:	f104 0c14 	add.w	ip, r4, #20
 800a8ea:	46ae      	mov	lr, r5
 800a8ec:	f04f 0a00 	mov.w	sl, #0
 800a8f0:	f8bc b000 	ldrh.w	fp, [ip]
 800a8f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a8f8:	fb09 220b 	mla	r2, r9, fp, r2
 800a8fc:	4492      	add	sl, r2
 800a8fe:	b289      	uxth	r1, r1
 800a900:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a904:	f84e 1b04 	str.w	r1, [lr], #4
 800a908:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a90c:	f8be 1000 	ldrh.w	r1, [lr]
 800a910:	0c12      	lsrs	r2, r2, #16
 800a912:	fb09 1102 	mla	r1, r9, r2, r1
 800a916:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a91a:	4567      	cmp	r7, ip
 800a91c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a920:	d8e6      	bhi.n	800a8f0 <__multiply+0x10c>
 800a922:	9a01      	ldr	r2, [sp, #4]
 800a924:	50a9      	str	r1, [r5, r2]
 800a926:	3504      	adds	r5, #4
 800a928:	e79a      	b.n	800a860 <__multiply+0x7c>
 800a92a:	3e01      	subs	r6, #1
 800a92c:	e79c      	b.n	800a868 <__multiply+0x84>
 800a92e:	bf00      	nop
 800a930:	0800be5f 	.word	0x0800be5f
 800a934:	0800be70 	.word	0x0800be70

0800a938 <__pow5mult>:
 800a938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a93c:	4615      	mov	r5, r2
 800a93e:	f012 0203 	ands.w	r2, r2, #3
 800a942:	4606      	mov	r6, r0
 800a944:	460f      	mov	r7, r1
 800a946:	d007      	beq.n	800a958 <__pow5mult+0x20>
 800a948:	4c25      	ldr	r4, [pc, #148]	; (800a9e0 <__pow5mult+0xa8>)
 800a94a:	3a01      	subs	r2, #1
 800a94c:	2300      	movs	r3, #0
 800a94e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a952:	f7ff fe9b 	bl	800a68c <__multadd>
 800a956:	4607      	mov	r7, r0
 800a958:	10ad      	asrs	r5, r5, #2
 800a95a:	d03d      	beq.n	800a9d8 <__pow5mult+0xa0>
 800a95c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a95e:	b97c      	cbnz	r4, 800a980 <__pow5mult+0x48>
 800a960:	2010      	movs	r0, #16
 800a962:	f7ff fe1b 	bl	800a59c <malloc>
 800a966:	4602      	mov	r2, r0
 800a968:	6270      	str	r0, [r6, #36]	; 0x24
 800a96a:	b928      	cbnz	r0, 800a978 <__pow5mult+0x40>
 800a96c:	4b1d      	ldr	r3, [pc, #116]	; (800a9e4 <__pow5mult+0xac>)
 800a96e:	481e      	ldr	r0, [pc, #120]	; (800a9e8 <__pow5mult+0xb0>)
 800a970:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a974:	f000 fc0e 	bl	800b194 <__assert_func>
 800a978:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a97c:	6004      	str	r4, [r0, #0]
 800a97e:	60c4      	str	r4, [r0, #12]
 800a980:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a984:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a988:	b94c      	cbnz	r4, 800a99e <__pow5mult+0x66>
 800a98a:	f240 2171 	movw	r1, #625	; 0x271
 800a98e:	4630      	mov	r0, r6
 800a990:	f7ff ff12 	bl	800a7b8 <__i2b>
 800a994:	2300      	movs	r3, #0
 800a996:	f8c8 0008 	str.w	r0, [r8, #8]
 800a99a:	4604      	mov	r4, r0
 800a99c:	6003      	str	r3, [r0, #0]
 800a99e:	f04f 0900 	mov.w	r9, #0
 800a9a2:	07eb      	lsls	r3, r5, #31
 800a9a4:	d50a      	bpl.n	800a9bc <__pow5mult+0x84>
 800a9a6:	4639      	mov	r1, r7
 800a9a8:	4622      	mov	r2, r4
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f7ff ff1a 	bl	800a7e4 <__multiply>
 800a9b0:	4639      	mov	r1, r7
 800a9b2:	4680      	mov	r8, r0
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	f7ff fe47 	bl	800a648 <_Bfree>
 800a9ba:	4647      	mov	r7, r8
 800a9bc:	106d      	asrs	r5, r5, #1
 800a9be:	d00b      	beq.n	800a9d8 <__pow5mult+0xa0>
 800a9c0:	6820      	ldr	r0, [r4, #0]
 800a9c2:	b938      	cbnz	r0, 800a9d4 <__pow5mult+0x9c>
 800a9c4:	4622      	mov	r2, r4
 800a9c6:	4621      	mov	r1, r4
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	f7ff ff0b 	bl	800a7e4 <__multiply>
 800a9ce:	6020      	str	r0, [r4, #0]
 800a9d0:	f8c0 9000 	str.w	r9, [r0]
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	e7e4      	b.n	800a9a2 <__pow5mult+0x6a>
 800a9d8:	4638      	mov	r0, r7
 800a9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9de:	bf00      	nop
 800a9e0:	0800bfc0 	.word	0x0800bfc0
 800a9e4:	0800bded 	.word	0x0800bded
 800a9e8:	0800be70 	.word	0x0800be70

0800a9ec <__lshift>:
 800a9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9f0:	460c      	mov	r4, r1
 800a9f2:	6849      	ldr	r1, [r1, #4]
 800a9f4:	6923      	ldr	r3, [r4, #16]
 800a9f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a9fa:	68a3      	ldr	r3, [r4, #8]
 800a9fc:	4607      	mov	r7, r0
 800a9fe:	4691      	mov	r9, r2
 800aa00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa04:	f108 0601 	add.w	r6, r8, #1
 800aa08:	42b3      	cmp	r3, r6
 800aa0a:	db0b      	blt.n	800aa24 <__lshift+0x38>
 800aa0c:	4638      	mov	r0, r7
 800aa0e:	f7ff fddb 	bl	800a5c8 <_Balloc>
 800aa12:	4605      	mov	r5, r0
 800aa14:	b948      	cbnz	r0, 800aa2a <__lshift+0x3e>
 800aa16:	4602      	mov	r2, r0
 800aa18:	4b2a      	ldr	r3, [pc, #168]	; (800aac4 <__lshift+0xd8>)
 800aa1a:	482b      	ldr	r0, [pc, #172]	; (800aac8 <__lshift+0xdc>)
 800aa1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa20:	f000 fbb8 	bl	800b194 <__assert_func>
 800aa24:	3101      	adds	r1, #1
 800aa26:	005b      	lsls	r3, r3, #1
 800aa28:	e7ee      	b.n	800aa08 <__lshift+0x1c>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	f100 0114 	add.w	r1, r0, #20
 800aa30:	f100 0210 	add.w	r2, r0, #16
 800aa34:	4618      	mov	r0, r3
 800aa36:	4553      	cmp	r3, sl
 800aa38:	db37      	blt.n	800aaaa <__lshift+0xbe>
 800aa3a:	6920      	ldr	r0, [r4, #16]
 800aa3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa40:	f104 0314 	add.w	r3, r4, #20
 800aa44:	f019 091f 	ands.w	r9, r9, #31
 800aa48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aa50:	d02f      	beq.n	800aab2 <__lshift+0xc6>
 800aa52:	f1c9 0e20 	rsb	lr, r9, #32
 800aa56:	468a      	mov	sl, r1
 800aa58:	f04f 0c00 	mov.w	ip, #0
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	fa02 f209 	lsl.w	r2, r2, r9
 800aa62:	ea42 020c 	orr.w	r2, r2, ip
 800aa66:	f84a 2b04 	str.w	r2, [sl], #4
 800aa6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa6e:	4298      	cmp	r0, r3
 800aa70:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aa74:	d8f2      	bhi.n	800aa5c <__lshift+0x70>
 800aa76:	1b03      	subs	r3, r0, r4
 800aa78:	3b15      	subs	r3, #21
 800aa7a:	f023 0303 	bic.w	r3, r3, #3
 800aa7e:	3304      	adds	r3, #4
 800aa80:	f104 0215 	add.w	r2, r4, #21
 800aa84:	4290      	cmp	r0, r2
 800aa86:	bf38      	it	cc
 800aa88:	2304      	movcc	r3, #4
 800aa8a:	f841 c003 	str.w	ip, [r1, r3]
 800aa8e:	f1bc 0f00 	cmp.w	ip, #0
 800aa92:	d001      	beq.n	800aa98 <__lshift+0xac>
 800aa94:	f108 0602 	add.w	r6, r8, #2
 800aa98:	3e01      	subs	r6, #1
 800aa9a:	4638      	mov	r0, r7
 800aa9c:	612e      	str	r6, [r5, #16]
 800aa9e:	4621      	mov	r1, r4
 800aaa0:	f7ff fdd2 	bl	800a648 <_Bfree>
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800aaae:	3301      	adds	r3, #1
 800aab0:	e7c1      	b.n	800aa36 <__lshift+0x4a>
 800aab2:	3904      	subs	r1, #4
 800aab4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aab8:	f841 2f04 	str.w	r2, [r1, #4]!
 800aabc:	4298      	cmp	r0, r3
 800aabe:	d8f9      	bhi.n	800aab4 <__lshift+0xc8>
 800aac0:	e7ea      	b.n	800aa98 <__lshift+0xac>
 800aac2:	bf00      	nop
 800aac4:	0800be5f 	.word	0x0800be5f
 800aac8:	0800be70 	.word	0x0800be70

0800aacc <__mcmp>:
 800aacc:	b530      	push	{r4, r5, lr}
 800aace:	6902      	ldr	r2, [r0, #16]
 800aad0:	690c      	ldr	r4, [r1, #16]
 800aad2:	1b12      	subs	r2, r2, r4
 800aad4:	d10e      	bne.n	800aaf4 <__mcmp+0x28>
 800aad6:	f100 0314 	add.w	r3, r0, #20
 800aada:	3114      	adds	r1, #20
 800aadc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aae0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aae4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aae8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aaec:	42a5      	cmp	r5, r4
 800aaee:	d003      	beq.n	800aaf8 <__mcmp+0x2c>
 800aaf0:	d305      	bcc.n	800aafe <__mcmp+0x32>
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	bd30      	pop	{r4, r5, pc}
 800aaf8:	4283      	cmp	r3, r0
 800aafa:	d3f3      	bcc.n	800aae4 <__mcmp+0x18>
 800aafc:	e7fa      	b.n	800aaf4 <__mcmp+0x28>
 800aafe:	f04f 32ff 	mov.w	r2, #4294967295
 800ab02:	e7f7      	b.n	800aaf4 <__mcmp+0x28>

0800ab04 <__mdiff>:
 800ab04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab08:	460c      	mov	r4, r1
 800ab0a:	4606      	mov	r6, r0
 800ab0c:	4611      	mov	r1, r2
 800ab0e:	4620      	mov	r0, r4
 800ab10:	4690      	mov	r8, r2
 800ab12:	f7ff ffdb 	bl	800aacc <__mcmp>
 800ab16:	1e05      	subs	r5, r0, #0
 800ab18:	d110      	bne.n	800ab3c <__mdiff+0x38>
 800ab1a:	4629      	mov	r1, r5
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	f7ff fd53 	bl	800a5c8 <_Balloc>
 800ab22:	b930      	cbnz	r0, 800ab32 <__mdiff+0x2e>
 800ab24:	4b3a      	ldr	r3, [pc, #232]	; (800ac10 <__mdiff+0x10c>)
 800ab26:	4602      	mov	r2, r0
 800ab28:	f240 2132 	movw	r1, #562	; 0x232
 800ab2c:	4839      	ldr	r0, [pc, #228]	; (800ac14 <__mdiff+0x110>)
 800ab2e:	f000 fb31 	bl	800b194 <__assert_func>
 800ab32:	2301      	movs	r3, #1
 800ab34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3c:	bfa4      	itt	ge
 800ab3e:	4643      	movge	r3, r8
 800ab40:	46a0      	movge	r8, r4
 800ab42:	4630      	mov	r0, r6
 800ab44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab48:	bfa6      	itte	ge
 800ab4a:	461c      	movge	r4, r3
 800ab4c:	2500      	movge	r5, #0
 800ab4e:	2501      	movlt	r5, #1
 800ab50:	f7ff fd3a 	bl	800a5c8 <_Balloc>
 800ab54:	b920      	cbnz	r0, 800ab60 <__mdiff+0x5c>
 800ab56:	4b2e      	ldr	r3, [pc, #184]	; (800ac10 <__mdiff+0x10c>)
 800ab58:	4602      	mov	r2, r0
 800ab5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ab5e:	e7e5      	b.n	800ab2c <__mdiff+0x28>
 800ab60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab64:	6926      	ldr	r6, [r4, #16]
 800ab66:	60c5      	str	r5, [r0, #12]
 800ab68:	f104 0914 	add.w	r9, r4, #20
 800ab6c:	f108 0514 	add.w	r5, r8, #20
 800ab70:	f100 0e14 	add.w	lr, r0, #20
 800ab74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ab78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ab7c:	f108 0210 	add.w	r2, r8, #16
 800ab80:	46f2      	mov	sl, lr
 800ab82:	2100      	movs	r1, #0
 800ab84:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ab8c:	fa1f f883 	uxth.w	r8, r3
 800ab90:	fa11 f18b 	uxtah	r1, r1, fp
 800ab94:	0c1b      	lsrs	r3, r3, #16
 800ab96:	eba1 0808 	sub.w	r8, r1, r8
 800ab9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aba2:	fa1f f888 	uxth.w	r8, r8
 800aba6:	1419      	asrs	r1, r3, #16
 800aba8:	454e      	cmp	r6, r9
 800abaa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800abae:	f84a 3b04 	str.w	r3, [sl], #4
 800abb2:	d8e7      	bhi.n	800ab84 <__mdiff+0x80>
 800abb4:	1b33      	subs	r3, r6, r4
 800abb6:	3b15      	subs	r3, #21
 800abb8:	f023 0303 	bic.w	r3, r3, #3
 800abbc:	3304      	adds	r3, #4
 800abbe:	3415      	adds	r4, #21
 800abc0:	42a6      	cmp	r6, r4
 800abc2:	bf38      	it	cc
 800abc4:	2304      	movcc	r3, #4
 800abc6:	441d      	add	r5, r3
 800abc8:	4473      	add	r3, lr
 800abca:	469e      	mov	lr, r3
 800abcc:	462e      	mov	r6, r5
 800abce:	4566      	cmp	r6, ip
 800abd0:	d30e      	bcc.n	800abf0 <__mdiff+0xec>
 800abd2:	f10c 0203 	add.w	r2, ip, #3
 800abd6:	1b52      	subs	r2, r2, r5
 800abd8:	f022 0203 	bic.w	r2, r2, #3
 800abdc:	3d03      	subs	r5, #3
 800abde:	45ac      	cmp	ip, r5
 800abe0:	bf38      	it	cc
 800abe2:	2200      	movcc	r2, #0
 800abe4:	441a      	add	r2, r3
 800abe6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800abea:	b17b      	cbz	r3, 800ac0c <__mdiff+0x108>
 800abec:	6107      	str	r7, [r0, #16]
 800abee:	e7a3      	b.n	800ab38 <__mdiff+0x34>
 800abf0:	f856 8b04 	ldr.w	r8, [r6], #4
 800abf4:	fa11 f288 	uxtah	r2, r1, r8
 800abf8:	1414      	asrs	r4, r2, #16
 800abfa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800abfe:	b292      	uxth	r2, r2
 800ac00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ac04:	f84e 2b04 	str.w	r2, [lr], #4
 800ac08:	1421      	asrs	r1, r4, #16
 800ac0a:	e7e0      	b.n	800abce <__mdiff+0xca>
 800ac0c:	3f01      	subs	r7, #1
 800ac0e:	e7ea      	b.n	800abe6 <__mdiff+0xe2>
 800ac10:	0800be5f 	.word	0x0800be5f
 800ac14:	0800be70 	.word	0x0800be70

0800ac18 <__d2b>:
 800ac18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac1c:	4689      	mov	r9, r1
 800ac1e:	2101      	movs	r1, #1
 800ac20:	ec57 6b10 	vmov	r6, r7, d0
 800ac24:	4690      	mov	r8, r2
 800ac26:	f7ff fccf 	bl	800a5c8 <_Balloc>
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	b930      	cbnz	r0, 800ac3c <__d2b+0x24>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	4b25      	ldr	r3, [pc, #148]	; (800acc8 <__d2b+0xb0>)
 800ac32:	4826      	ldr	r0, [pc, #152]	; (800accc <__d2b+0xb4>)
 800ac34:	f240 310a 	movw	r1, #778	; 0x30a
 800ac38:	f000 faac 	bl	800b194 <__assert_func>
 800ac3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ac40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ac44:	bb35      	cbnz	r5, 800ac94 <__d2b+0x7c>
 800ac46:	2e00      	cmp	r6, #0
 800ac48:	9301      	str	r3, [sp, #4]
 800ac4a:	d028      	beq.n	800ac9e <__d2b+0x86>
 800ac4c:	4668      	mov	r0, sp
 800ac4e:	9600      	str	r6, [sp, #0]
 800ac50:	f7ff fd82 	bl	800a758 <__lo0bits>
 800ac54:	9900      	ldr	r1, [sp, #0]
 800ac56:	b300      	cbz	r0, 800ac9a <__d2b+0x82>
 800ac58:	9a01      	ldr	r2, [sp, #4]
 800ac5a:	f1c0 0320 	rsb	r3, r0, #32
 800ac5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac62:	430b      	orrs	r3, r1
 800ac64:	40c2      	lsrs	r2, r0
 800ac66:	6163      	str	r3, [r4, #20]
 800ac68:	9201      	str	r2, [sp, #4]
 800ac6a:	9b01      	ldr	r3, [sp, #4]
 800ac6c:	61a3      	str	r3, [r4, #24]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	bf14      	ite	ne
 800ac72:	2202      	movne	r2, #2
 800ac74:	2201      	moveq	r2, #1
 800ac76:	6122      	str	r2, [r4, #16]
 800ac78:	b1d5      	cbz	r5, 800acb0 <__d2b+0x98>
 800ac7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac7e:	4405      	add	r5, r0
 800ac80:	f8c9 5000 	str.w	r5, [r9]
 800ac84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac88:	f8c8 0000 	str.w	r0, [r8]
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	b003      	add	sp, #12
 800ac90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac98:	e7d5      	b.n	800ac46 <__d2b+0x2e>
 800ac9a:	6161      	str	r1, [r4, #20]
 800ac9c:	e7e5      	b.n	800ac6a <__d2b+0x52>
 800ac9e:	a801      	add	r0, sp, #4
 800aca0:	f7ff fd5a 	bl	800a758 <__lo0bits>
 800aca4:	9b01      	ldr	r3, [sp, #4]
 800aca6:	6163      	str	r3, [r4, #20]
 800aca8:	2201      	movs	r2, #1
 800acaa:	6122      	str	r2, [r4, #16]
 800acac:	3020      	adds	r0, #32
 800acae:	e7e3      	b.n	800ac78 <__d2b+0x60>
 800acb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800acb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800acb8:	f8c9 0000 	str.w	r0, [r9]
 800acbc:	6918      	ldr	r0, [r3, #16]
 800acbe:	f7ff fd2b 	bl	800a718 <__hi0bits>
 800acc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800acc6:	e7df      	b.n	800ac88 <__d2b+0x70>
 800acc8:	0800be5f 	.word	0x0800be5f
 800accc:	0800be70 	.word	0x0800be70

0800acd0 <_calloc_r>:
 800acd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acd2:	fba1 2402 	umull	r2, r4, r1, r2
 800acd6:	b94c      	cbnz	r4, 800acec <_calloc_r+0x1c>
 800acd8:	4611      	mov	r1, r2
 800acda:	9201      	str	r2, [sp, #4]
 800acdc:	f000 f87a 	bl	800add4 <_malloc_r>
 800ace0:	9a01      	ldr	r2, [sp, #4]
 800ace2:	4605      	mov	r5, r0
 800ace4:	b930      	cbnz	r0, 800acf4 <_calloc_r+0x24>
 800ace6:	4628      	mov	r0, r5
 800ace8:	b003      	add	sp, #12
 800acea:	bd30      	pop	{r4, r5, pc}
 800acec:	220c      	movs	r2, #12
 800acee:	6002      	str	r2, [r0, #0]
 800acf0:	2500      	movs	r5, #0
 800acf2:	e7f8      	b.n	800ace6 <_calloc_r+0x16>
 800acf4:	4621      	mov	r1, r4
 800acf6:	f7fe f93f 	bl	8008f78 <memset>
 800acfa:	e7f4      	b.n	800ace6 <_calloc_r+0x16>

0800acfc <_free_r>:
 800acfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acfe:	2900      	cmp	r1, #0
 800ad00:	d044      	beq.n	800ad8c <_free_r+0x90>
 800ad02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad06:	9001      	str	r0, [sp, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	f1a1 0404 	sub.w	r4, r1, #4
 800ad0e:	bfb8      	it	lt
 800ad10:	18e4      	addlt	r4, r4, r3
 800ad12:	f000 fa9b 	bl	800b24c <__malloc_lock>
 800ad16:	4a1e      	ldr	r2, [pc, #120]	; (800ad90 <_free_r+0x94>)
 800ad18:	9801      	ldr	r0, [sp, #4]
 800ad1a:	6813      	ldr	r3, [r2, #0]
 800ad1c:	b933      	cbnz	r3, 800ad2c <_free_r+0x30>
 800ad1e:	6063      	str	r3, [r4, #4]
 800ad20:	6014      	str	r4, [r2, #0]
 800ad22:	b003      	add	sp, #12
 800ad24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad28:	f000 ba96 	b.w	800b258 <__malloc_unlock>
 800ad2c:	42a3      	cmp	r3, r4
 800ad2e:	d908      	bls.n	800ad42 <_free_r+0x46>
 800ad30:	6825      	ldr	r5, [r4, #0]
 800ad32:	1961      	adds	r1, r4, r5
 800ad34:	428b      	cmp	r3, r1
 800ad36:	bf01      	itttt	eq
 800ad38:	6819      	ldreq	r1, [r3, #0]
 800ad3a:	685b      	ldreq	r3, [r3, #4]
 800ad3c:	1949      	addeq	r1, r1, r5
 800ad3e:	6021      	streq	r1, [r4, #0]
 800ad40:	e7ed      	b.n	800ad1e <_free_r+0x22>
 800ad42:	461a      	mov	r2, r3
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	b10b      	cbz	r3, 800ad4c <_free_r+0x50>
 800ad48:	42a3      	cmp	r3, r4
 800ad4a:	d9fa      	bls.n	800ad42 <_free_r+0x46>
 800ad4c:	6811      	ldr	r1, [r2, #0]
 800ad4e:	1855      	adds	r5, r2, r1
 800ad50:	42a5      	cmp	r5, r4
 800ad52:	d10b      	bne.n	800ad6c <_free_r+0x70>
 800ad54:	6824      	ldr	r4, [r4, #0]
 800ad56:	4421      	add	r1, r4
 800ad58:	1854      	adds	r4, r2, r1
 800ad5a:	42a3      	cmp	r3, r4
 800ad5c:	6011      	str	r1, [r2, #0]
 800ad5e:	d1e0      	bne.n	800ad22 <_free_r+0x26>
 800ad60:	681c      	ldr	r4, [r3, #0]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	6053      	str	r3, [r2, #4]
 800ad66:	4421      	add	r1, r4
 800ad68:	6011      	str	r1, [r2, #0]
 800ad6a:	e7da      	b.n	800ad22 <_free_r+0x26>
 800ad6c:	d902      	bls.n	800ad74 <_free_r+0x78>
 800ad6e:	230c      	movs	r3, #12
 800ad70:	6003      	str	r3, [r0, #0]
 800ad72:	e7d6      	b.n	800ad22 <_free_r+0x26>
 800ad74:	6825      	ldr	r5, [r4, #0]
 800ad76:	1961      	adds	r1, r4, r5
 800ad78:	428b      	cmp	r3, r1
 800ad7a:	bf04      	itt	eq
 800ad7c:	6819      	ldreq	r1, [r3, #0]
 800ad7e:	685b      	ldreq	r3, [r3, #4]
 800ad80:	6063      	str	r3, [r4, #4]
 800ad82:	bf04      	itt	eq
 800ad84:	1949      	addeq	r1, r1, r5
 800ad86:	6021      	streq	r1, [r4, #0]
 800ad88:	6054      	str	r4, [r2, #4]
 800ad8a:	e7ca      	b.n	800ad22 <_free_r+0x26>
 800ad8c:	b003      	add	sp, #12
 800ad8e:	bd30      	pop	{r4, r5, pc}
 800ad90:	200004e8 	.word	0x200004e8

0800ad94 <sbrk_aligned>:
 800ad94:	b570      	push	{r4, r5, r6, lr}
 800ad96:	4e0e      	ldr	r6, [pc, #56]	; (800add0 <sbrk_aligned+0x3c>)
 800ad98:	460c      	mov	r4, r1
 800ad9a:	6831      	ldr	r1, [r6, #0]
 800ad9c:	4605      	mov	r5, r0
 800ad9e:	b911      	cbnz	r1, 800ada6 <sbrk_aligned+0x12>
 800ada0:	f000 f9e8 	bl	800b174 <_sbrk_r>
 800ada4:	6030      	str	r0, [r6, #0]
 800ada6:	4621      	mov	r1, r4
 800ada8:	4628      	mov	r0, r5
 800adaa:	f000 f9e3 	bl	800b174 <_sbrk_r>
 800adae:	1c43      	adds	r3, r0, #1
 800adb0:	d00a      	beq.n	800adc8 <sbrk_aligned+0x34>
 800adb2:	1cc4      	adds	r4, r0, #3
 800adb4:	f024 0403 	bic.w	r4, r4, #3
 800adb8:	42a0      	cmp	r0, r4
 800adba:	d007      	beq.n	800adcc <sbrk_aligned+0x38>
 800adbc:	1a21      	subs	r1, r4, r0
 800adbe:	4628      	mov	r0, r5
 800adc0:	f000 f9d8 	bl	800b174 <_sbrk_r>
 800adc4:	3001      	adds	r0, #1
 800adc6:	d101      	bne.n	800adcc <sbrk_aligned+0x38>
 800adc8:	f04f 34ff 	mov.w	r4, #4294967295
 800adcc:	4620      	mov	r0, r4
 800adce:	bd70      	pop	{r4, r5, r6, pc}
 800add0:	200004ec 	.word	0x200004ec

0800add4 <_malloc_r>:
 800add4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add8:	1ccd      	adds	r5, r1, #3
 800adda:	f025 0503 	bic.w	r5, r5, #3
 800adde:	3508      	adds	r5, #8
 800ade0:	2d0c      	cmp	r5, #12
 800ade2:	bf38      	it	cc
 800ade4:	250c      	movcc	r5, #12
 800ade6:	2d00      	cmp	r5, #0
 800ade8:	4607      	mov	r7, r0
 800adea:	db01      	blt.n	800adf0 <_malloc_r+0x1c>
 800adec:	42a9      	cmp	r1, r5
 800adee:	d905      	bls.n	800adfc <_malloc_r+0x28>
 800adf0:	230c      	movs	r3, #12
 800adf2:	603b      	str	r3, [r7, #0]
 800adf4:	2600      	movs	r6, #0
 800adf6:	4630      	mov	r0, r6
 800adf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adfc:	4e2e      	ldr	r6, [pc, #184]	; (800aeb8 <_malloc_r+0xe4>)
 800adfe:	f000 fa25 	bl	800b24c <__malloc_lock>
 800ae02:	6833      	ldr	r3, [r6, #0]
 800ae04:	461c      	mov	r4, r3
 800ae06:	bb34      	cbnz	r4, 800ae56 <_malloc_r+0x82>
 800ae08:	4629      	mov	r1, r5
 800ae0a:	4638      	mov	r0, r7
 800ae0c:	f7ff ffc2 	bl	800ad94 <sbrk_aligned>
 800ae10:	1c43      	adds	r3, r0, #1
 800ae12:	4604      	mov	r4, r0
 800ae14:	d14d      	bne.n	800aeb2 <_malloc_r+0xde>
 800ae16:	6834      	ldr	r4, [r6, #0]
 800ae18:	4626      	mov	r6, r4
 800ae1a:	2e00      	cmp	r6, #0
 800ae1c:	d140      	bne.n	800aea0 <_malloc_r+0xcc>
 800ae1e:	6823      	ldr	r3, [r4, #0]
 800ae20:	4631      	mov	r1, r6
 800ae22:	4638      	mov	r0, r7
 800ae24:	eb04 0803 	add.w	r8, r4, r3
 800ae28:	f000 f9a4 	bl	800b174 <_sbrk_r>
 800ae2c:	4580      	cmp	r8, r0
 800ae2e:	d13a      	bne.n	800aea6 <_malloc_r+0xd2>
 800ae30:	6821      	ldr	r1, [r4, #0]
 800ae32:	3503      	adds	r5, #3
 800ae34:	1a6d      	subs	r5, r5, r1
 800ae36:	f025 0503 	bic.w	r5, r5, #3
 800ae3a:	3508      	adds	r5, #8
 800ae3c:	2d0c      	cmp	r5, #12
 800ae3e:	bf38      	it	cc
 800ae40:	250c      	movcc	r5, #12
 800ae42:	4629      	mov	r1, r5
 800ae44:	4638      	mov	r0, r7
 800ae46:	f7ff ffa5 	bl	800ad94 <sbrk_aligned>
 800ae4a:	3001      	adds	r0, #1
 800ae4c:	d02b      	beq.n	800aea6 <_malloc_r+0xd2>
 800ae4e:	6823      	ldr	r3, [r4, #0]
 800ae50:	442b      	add	r3, r5
 800ae52:	6023      	str	r3, [r4, #0]
 800ae54:	e00e      	b.n	800ae74 <_malloc_r+0xa0>
 800ae56:	6822      	ldr	r2, [r4, #0]
 800ae58:	1b52      	subs	r2, r2, r5
 800ae5a:	d41e      	bmi.n	800ae9a <_malloc_r+0xc6>
 800ae5c:	2a0b      	cmp	r2, #11
 800ae5e:	d916      	bls.n	800ae8e <_malloc_r+0xba>
 800ae60:	1961      	adds	r1, r4, r5
 800ae62:	42a3      	cmp	r3, r4
 800ae64:	6025      	str	r5, [r4, #0]
 800ae66:	bf18      	it	ne
 800ae68:	6059      	strne	r1, [r3, #4]
 800ae6a:	6863      	ldr	r3, [r4, #4]
 800ae6c:	bf08      	it	eq
 800ae6e:	6031      	streq	r1, [r6, #0]
 800ae70:	5162      	str	r2, [r4, r5]
 800ae72:	604b      	str	r3, [r1, #4]
 800ae74:	4638      	mov	r0, r7
 800ae76:	f104 060b 	add.w	r6, r4, #11
 800ae7a:	f000 f9ed 	bl	800b258 <__malloc_unlock>
 800ae7e:	f026 0607 	bic.w	r6, r6, #7
 800ae82:	1d23      	adds	r3, r4, #4
 800ae84:	1af2      	subs	r2, r6, r3
 800ae86:	d0b6      	beq.n	800adf6 <_malloc_r+0x22>
 800ae88:	1b9b      	subs	r3, r3, r6
 800ae8a:	50a3      	str	r3, [r4, r2]
 800ae8c:	e7b3      	b.n	800adf6 <_malloc_r+0x22>
 800ae8e:	6862      	ldr	r2, [r4, #4]
 800ae90:	42a3      	cmp	r3, r4
 800ae92:	bf0c      	ite	eq
 800ae94:	6032      	streq	r2, [r6, #0]
 800ae96:	605a      	strne	r2, [r3, #4]
 800ae98:	e7ec      	b.n	800ae74 <_malloc_r+0xa0>
 800ae9a:	4623      	mov	r3, r4
 800ae9c:	6864      	ldr	r4, [r4, #4]
 800ae9e:	e7b2      	b.n	800ae06 <_malloc_r+0x32>
 800aea0:	4634      	mov	r4, r6
 800aea2:	6876      	ldr	r6, [r6, #4]
 800aea4:	e7b9      	b.n	800ae1a <_malloc_r+0x46>
 800aea6:	230c      	movs	r3, #12
 800aea8:	603b      	str	r3, [r7, #0]
 800aeaa:	4638      	mov	r0, r7
 800aeac:	f000 f9d4 	bl	800b258 <__malloc_unlock>
 800aeb0:	e7a1      	b.n	800adf6 <_malloc_r+0x22>
 800aeb2:	6025      	str	r5, [r4, #0]
 800aeb4:	e7de      	b.n	800ae74 <_malloc_r+0xa0>
 800aeb6:	bf00      	nop
 800aeb8:	200004e8 	.word	0x200004e8

0800aebc <__ssputs_r>:
 800aebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec0:	688e      	ldr	r6, [r1, #8]
 800aec2:	429e      	cmp	r6, r3
 800aec4:	4682      	mov	sl, r0
 800aec6:	460c      	mov	r4, r1
 800aec8:	4690      	mov	r8, r2
 800aeca:	461f      	mov	r7, r3
 800aecc:	d838      	bhi.n	800af40 <__ssputs_r+0x84>
 800aece:	898a      	ldrh	r2, [r1, #12]
 800aed0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aed4:	d032      	beq.n	800af3c <__ssputs_r+0x80>
 800aed6:	6825      	ldr	r5, [r4, #0]
 800aed8:	6909      	ldr	r1, [r1, #16]
 800aeda:	eba5 0901 	sub.w	r9, r5, r1
 800aede:	6965      	ldr	r5, [r4, #20]
 800aee0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aee4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aee8:	3301      	adds	r3, #1
 800aeea:	444b      	add	r3, r9
 800aeec:	106d      	asrs	r5, r5, #1
 800aeee:	429d      	cmp	r5, r3
 800aef0:	bf38      	it	cc
 800aef2:	461d      	movcc	r5, r3
 800aef4:	0553      	lsls	r3, r2, #21
 800aef6:	d531      	bpl.n	800af5c <__ssputs_r+0xa0>
 800aef8:	4629      	mov	r1, r5
 800aefa:	f7ff ff6b 	bl	800add4 <_malloc_r>
 800aefe:	4606      	mov	r6, r0
 800af00:	b950      	cbnz	r0, 800af18 <__ssputs_r+0x5c>
 800af02:	230c      	movs	r3, #12
 800af04:	f8ca 3000 	str.w	r3, [sl]
 800af08:	89a3      	ldrh	r3, [r4, #12]
 800af0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af0e:	81a3      	strh	r3, [r4, #12]
 800af10:	f04f 30ff 	mov.w	r0, #4294967295
 800af14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af18:	6921      	ldr	r1, [r4, #16]
 800af1a:	464a      	mov	r2, r9
 800af1c:	f7ff fb46 	bl	800a5ac <memcpy>
 800af20:	89a3      	ldrh	r3, [r4, #12]
 800af22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af2a:	81a3      	strh	r3, [r4, #12]
 800af2c:	6126      	str	r6, [r4, #16]
 800af2e:	6165      	str	r5, [r4, #20]
 800af30:	444e      	add	r6, r9
 800af32:	eba5 0509 	sub.w	r5, r5, r9
 800af36:	6026      	str	r6, [r4, #0]
 800af38:	60a5      	str	r5, [r4, #8]
 800af3a:	463e      	mov	r6, r7
 800af3c:	42be      	cmp	r6, r7
 800af3e:	d900      	bls.n	800af42 <__ssputs_r+0x86>
 800af40:	463e      	mov	r6, r7
 800af42:	6820      	ldr	r0, [r4, #0]
 800af44:	4632      	mov	r2, r6
 800af46:	4641      	mov	r1, r8
 800af48:	f000 f966 	bl	800b218 <memmove>
 800af4c:	68a3      	ldr	r3, [r4, #8]
 800af4e:	1b9b      	subs	r3, r3, r6
 800af50:	60a3      	str	r3, [r4, #8]
 800af52:	6823      	ldr	r3, [r4, #0]
 800af54:	4433      	add	r3, r6
 800af56:	6023      	str	r3, [r4, #0]
 800af58:	2000      	movs	r0, #0
 800af5a:	e7db      	b.n	800af14 <__ssputs_r+0x58>
 800af5c:	462a      	mov	r2, r5
 800af5e:	f000 f981 	bl	800b264 <_realloc_r>
 800af62:	4606      	mov	r6, r0
 800af64:	2800      	cmp	r0, #0
 800af66:	d1e1      	bne.n	800af2c <__ssputs_r+0x70>
 800af68:	6921      	ldr	r1, [r4, #16]
 800af6a:	4650      	mov	r0, sl
 800af6c:	f7ff fec6 	bl	800acfc <_free_r>
 800af70:	e7c7      	b.n	800af02 <__ssputs_r+0x46>
	...

0800af74 <_svfiprintf_r>:
 800af74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af78:	4698      	mov	r8, r3
 800af7a:	898b      	ldrh	r3, [r1, #12]
 800af7c:	061b      	lsls	r3, r3, #24
 800af7e:	b09d      	sub	sp, #116	; 0x74
 800af80:	4607      	mov	r7, r0
 800af82:	460d      	mov	r5, r1
 800af84:	4614      	mov	r4, r2
 800af86:	d50e      	bpl.n	800afa6 <_svfiprintf_r+0x32>
 800af88:	690b      	ldr	r3, [r1, #16]
 800af8a:	b963      	cbnz	r3, 800afa6 <_svfiprintf_r+0x32>
 800af8c:	2140      	movs	r1, #64	; 0x40
 800af8e:	f7ff ff21 	bl	800add4 <_malloc_r>
 800af92:	6028      	str	r0, [r5, #0]
 800af94:	6128      	str	r0, [r5, #16]
 800af96:	b920      	cbnz	r0, 800afa2 <_svfiprintf_r+0x2e>
 800af98:	230c      	movs	r3, #12
 800af9a:	603b      	str	r3, [r7, #0]
 800af9c:	f04f 30ff 	mov.w	r0, #4294967295
 800afa0:	e0d1      	b.n	800b146 <_svfiprintf_r+0x1d2>
 800afa2:	2340      	movs	r3, #64	; 0x40
 800afa4:	616b      	str	r3, [r5, #20]
 800afa6:	2300      	movs	r3, #0
 800afa8:	9309      	str	r3, [sp, #36]	; 0x24
 800afaa:	2320      	movs	r3, #32
 800afac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afb0:	f8cd 800c 	str.w	r8, [sp, #12]
 800afb4:	2330      	movs	r3, #48	; 0x30
 800afb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b160 <_svfiprintf_r+0x1ec>
 800afba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afbe:	f04f 0901 	mov.w	r9, #1
 800afc2:	4623      	mov	r3, r4
 800afc4:	469a      	mov	sl, r3
 800afc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afca:	b10a      	cbz	r2, 800afd0 <_svfiprintf_r+0x5c>
 800afcc:	2a25      	cmp	r2, #37	; 0x25
 800afce:	d1f9      	bne.n	800afc4 <_svfiprintf_r+0x50>
 800afd0:	ebba 0b04 	subs.w	fp, sl, r4
 800afd4:	d00b      	beq.n	800afee <_svfiprintf_r+0x7a>
 800afd6:	465b      	mov	r3, fp
 800afd8:	4622      	mov	r2, r4
 800afda:	4629      	mov	r1, r5
 800afdc:	4638      	mov	r0, r7
 800afde:	f7ff ff6d 	bl	800aebc <__ssputs_r>
 800afe2:	3001      	adds	r0, #1
 800afe4:	f000 80aa 	beq.w	800b13c <_svfiprintf_r+0x1c8>
 800afe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afea:	445a      	add	r2, fp
 800afec:	9209      	str	r2, [sp, #36]	; 0x24
 800afee:	f89a 3000 	ldrb.w	r3, [sl]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f000 80a2 	beq.w	800b13c <_svfiprintf_r+0x1c8>
 800aff8:	2300      	movs	r3, #0
 800affa:	f04f 32ff 	mov.w	r2, #4294967295
 800affe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b002:	f10a 0a01 	add.w	sl, sl, #1
 800b006:	9304      	str	r3, [sp, #16]
 800b008:	9307      	str	r3, [sp, #28]
 800b00a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b00e:	931a      	str	r3, [sp, #104]	; 0x68
 800b010:	4654      	mov	r4, sl
 800b012:	2205      	movs	r2, #5
 800b014:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b018:	4851      	ldr	r0, [pc, #324]	; (800b160 <_svfiprintf_r+0x1ec>)
 800b01a:	f7f5 f8e9 	bl	80001f0 <memchr>
 800b01e:	9a04      	ldr	r2, [sp, #16]
 800b020:	b9d8      	cbnz	r0, 800b05a <_svfiprintf_r+0xe6>
 800b022:	06d0      	lsls	r0, r2, #27
 800b024:	bf44      	itt	mi
 800b026:	2320      	movmi	r3, #32
 800b028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b02c:	0711      	lsls	r1, r2, #28
 800b02e:	bf44      	itt	mi
 800b030:	232b      	movmi	r3, #43	; 0x2b
 800b032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b036:	f89a 3000 	ldrb.w	r3, [sl]
 800b03a:	2b2a      	cmp	r3, #42	; 0x2a
 800b03c:	d015      	beq.n	800b06a <_svfiprintf_r+0xf6>
 800b03e:	9a07      	ldr	r2, [sp, #28]
 800b040:	4654      	mov	r4, sl
 800b042:	2000      	movs	r0, #0
 800b044:	f04f 0c0a 	mov.w	ip, #10
 800b048:	4621      	mov	r1, r4
 800b04a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b04e:	3b30      	subs	r3, #48	; 0x30
 800b050:	2b09      	cmp	r3, #9
 800b052:	d94e      	bls.n	800b0f2 <_svfiprintf_r+0x17e>
 800b054:	b1b0      	cbz	r0, 800b084 <_svfiprintf_r+0x110>
 800b056:	9207      	str	r2, [sp, #28]
 800b058:	e014      	b.n	800b084 <_svfiprintf_r+0x110>
 800b05a:	eba0 0308 	sub.w	r3, r0, r8
 800b05e:	fa09 f303 	lsl.w	r3, r9, r3
 800b062:	4313      	orrs	r3, r2
 800b064:	9304      	str	r3, [sp, #16]
 800b066:	46a2      	mov	sl, r4
 800b068:	e7d2      	b.n	800b010 <_svfiprintf_r+0x9c>
 800b06a:	9b03      	ldr	r3, [sp, #12]
 800b06c:	1d19      	adds	r1, r3, #4
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	9103      	str	r1, [sp, #12]
 800b072:	2b00      	cmp	r3, #0
 800b074:	bfbb      	ittet	lt
 800b076:	425b      	neglt	r3, r3
 800b078:	f042 0202 	orrlt.w	r2, r2, #2
 800b07c:	9307      	strge	r3, [sp, #28]
 800b07e:	9307      	strlt	r3, [sp, #28]
 800b080:	bfb8      	it	lt
 800b082:	9204      	strlt	r2, [sp, #16]
 800b084:	7823      	ldrb	r3, [r4, #0]
 800b086:	2b2e      	cmp	r3, #46	; 0x2e
 800b088:	d10c      	bne.n	800b0a4 <_svfiprintf_r+0x130>
 800b08a:	7863      	ldrb	r3, [r4, #1]
 800b08c:	2b2a      	cmp	r3, #42	; 0x2a
 800b08e:	d135      	bne.n	800b0fc <_svfiprintf_r+0x188>
 800b090:	9b03      	ldr	r3, [sp, #12]
 800b092:	1d1a      	adds	r2, r3, #4
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	9203      	str	r2, [sp, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	bfb8      	it	lt
 800b09c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0a0:	3402      	adds	r4, #2
 800b0a2:	9305      	str	r3, [sp, #20]
 800b0a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b170 <_svfiprintf_r+0x1fc>
 800b0a8:	7821      	ldrb	r1, [r4, #0]
 800b0aa:	2203      	movs	r2, #3
 800b0ac:	4650      	mov	r0, sl
 800b0ae:	f7f5 f89f 	bl	80001f0 <memchr>
 800b0b2:	b140      	cbz	r0, 800b0c6 <_svfiprintf_r+0x152>
 800b0b4:	2340      	movs	r3, #64	; 0x40
 800b0b6:	eba0 000a 	sub.w	r0, r0, sl
 800b0ba:	fa03 f000 	lsl.w	r0, r3, r0
 800b0be:	9b04      	ldr	r3, [sp, #16]
 800b0c0:	4303      	orrs	r3, r0
 800b0c2:	3401      	adds	r4, #1
 800b0c4:	9304      	str	r3, [sp, #16]
 800b0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ca:	4826      	ldr	r0, [pc, #152]	; (800b164 <_svfiprintf_r+0x1f0>)
 800b0cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0d0:	2206      	movs	r2, #6
 800b0d2:	f7f5 f88d 	bl	80001f0 <memchr>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	d038      	beq.n	800b14c <_svfiprintf_r+0x1d8>
 800b0da:	4b23      	ldr	r3, [pc, #140]	; (800b168 <_svfiprintf_r+0x1f4>)
 800b0dc:	bb1b      	cbnz	r3, 800b126 <_svfiprintf_r+0x1b2>
 800b0de:	9b03      	ldr	r3, [sp, #12]
 800b0e0:	3307      	adds	r3, #7
 800b0e2:	f023 0307 	bic.w	r3, r3, #7
 800b0e6:	3308      	adds	r3, #8
 800b0e8:	9303      	str	r3, [sp, #12]
 800b0ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ec:	4433      	add	r3, r6
 800b0ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b0f0:	e767      	b.n	800afc2 <_svfiprintf_r+0x4e>
 800b0f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	2001      	movs	r0, #1
 800b0fa:	e7a5      	b.n	800b048 <_svfiprintf_r+0xd4>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	3401      	adds	r4, #1
 800b100:	9305      	str	r3, [sp, #20]
 800b102:	4619      	mov	r1, r3
 800b104:	f04f 0c0a 	mov.w	ip, #10
 800b108:	4620      	mov	r0, r4
 800b10a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b10e:	3a30      	subs	r2, #48	; 0x30
 800b110:	2a09      	cmp	r2, #9
 800b112:	d903      	bls.n	800b11c <_svfiprintf_r+0x1a8>
 800b114:	2b00      	cmp	r3, #0
 800b116:	d0c5      	beq.n	800b0a4 <_svfiprintf_r+0x130>
 800b118:	9105      	str	r1, [sp, #20]
 800b11a:	e7c3      	b.n	800b0a4 <_svfiprintf_r+0x130>
 800b11c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b120:	4604      	mov	r4, r0
 800b122:	2301      	movs	r3, #1
 800b124:	e7f0      	b.n	800b108 <_svfiprintf_r+0x194>
 800b126:	ab03      	add	r3, sp, #12
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	462a      	mov	r2, r5
 800b12c:	4b0f      	ldr	r3, [pc, #60]	; (800b16c <_svfiprintf_r+0x1f8>)
 800b12e:	a904      	add	r1, sp, #16
 800b130:	4638      	mov	r0, r7
 800b132:	f7fd ffc9 	bl	80090c8 <_printf_float>
 800b136:	1c42      	adds	r2, r0, #1
 800b138:	4606      	mov	r6, r0
 800b13a:	d1d6      	bne.n	800b0ea <_svfiprintf_r+0x176>
 800b13c:	89ab      	ldrh	r3, [r5, #12]
 800b13e:	065b      	lsls	r3, r3, #25
 800b140:	f53f af2c 	bmi.w	800af9c <_svfiprintf_r+0x28>
 800b144:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b146:	b01d      	add	sp, #116	; 0x74
 800b148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b14c:	ab03      	add	r3, sp, #12
 800b14e:	9300      	str	r3, [sp, #0]
 800b150:	462a      	mov	r2, r5
 800b152:	4b06      	ldr	r3, [pc, #24]	; (800b16c <_svfiprintf_r+0x1f8>)
 800b154:	a904      	add	r1, sp, #16
 800b156:	4638      	mov	r0, r7
 800b158:	f7fe fa5a 	bl	8009610 <_printf_i>
 800b15c:	e7eb      	b.n	800b136 <_svfiprintf_r+0x1c2>
 800b15e:	bf00      	nop
 800b160:	0800bfcc 	.word	0x0800bfcc
 800b164:	0800bfd6 	.word	0x0800bfd6
 800b168:	080090c9 	.word	0x080090c9
 800b16c:	0800aebd 	.word	0x0800aebd
 800b170:	0800bfd2 	.word	0x0800bfd2

0800b174 <_sbrk_r>:
 800b174:	b538      	push	{r3, r4, r5, lr}
 800b176:	4d06      	ldr	r5, [pc, #24]	; (800b190 <_sbrk_r+0x1c>)
 800b178:	2300      	movs	r3, #0
 800b17a:	4604      	mov	r4, r0
 800b17c:	4608      	mov	r0, r1
 800b17e:	602b      	str	r3, [r5, #0]
 800b180:	f7f6 ff82 	bl	8002088 <_sbrk>
 800b184:	1c43      	adds	r3, r0, #1
 800b186:	d102      	bne.n	800b18e <_sbrk_r+0x1a>
 800b188:	682b      	ldr	r3, [r5, #0]
 800b18a:	b103      	cbz	r3, 800b18e <_sbrk_r+0x1a>
 800b18c:	6023      	str	r3, [r4, #0]
 800b18e:	bd38      	pop	{r3, r4, r5, pc}
 800b190:	200004f0 	.word	0x200004f0

0800b194 <__assert_func>:
 800b194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b196:	4614      	mov	r4, r2
 800b198:	461a      	mov	r2, r3
 800b19a:	4b09      	ldr	r3, [pc, #36]	; (800b1c0 <__assert_func+0x2c>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4605      	mov	r5, r0
 800b1a0:	68d8      	ldr	r0, [r3, #12]
 800b1a2:	b14c      	cbz	r4, 800b1b8 <__assert_func+0x24>
 800b1a4:	4b07      	ldr	r3, [pc, #28]	; (800b1c4 <__assert_func+0x30>)
 800b1a6:	9100      	str	r1, [sp, #0]
 800b1a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1ac:	4906      	ldr	r1, [pc, #24]	; (800b1c8 <__assert_func+0x34>)
 800b1ae:	462b      	mov	r3, r5
 800b1b0:	f000 f80e 	bl	800b1d0 <fiprintf>
 800b1b4:	f000 faac 	bl	800b710 <abort>
 800b1b8:	4b04      	ldr	r3, [pc, #16]	; (800b1cc <__assert_func+0x38>)
 800b1ba:	461c      	mov	r4, r3
 800b1bc:	e7f3      	b.n	800b1a6 <__assert_func+0x12>
 800b1be:	bf00      	nop
 800b1c0:	2000000c 	.word	0x2000000c
 800b1c4:	0800bfdd 	.word	0x0800bfdd
 800b1c8:	0800bfea 	.word	0x0800bfea
 800b1cc:	0800c018 	.word	0x0800c018

0800b1d0 <fiprintf>:
 800b1d0:	b40e      	push	{r1, r2, r3}
 800b1d2:	b503      	push	{r0, r1, lr}
 800b1d4:	4601      	mov	r1, r0
 800b1d6:	ab03      	add	r3, sp, #12
 800b1d8:	4805      	ldr	r0, [pc, #20]	; (800b1f0 <fiprintf+0x20>)
 800b1da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1de:	6800      	ldr	r0, [r0, #0]
 800b1e0:	9301      	str	r3, [sp, #4]
 800b1e2:	f000 f897 	bl	800b314 <_vfiprintf_r>
 800b1e6:	b002      	add	sp, #8
 800b1e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1ec:	b003      	add	sp, #12
 800b1ee:	4770      	bx	lr
 800b1f0:	2000000c 	.word	0x2000000c

0800b1f4 <__ascii_mbtowc>:
 800b1f4:	b082      	sub	sp, #8
 800b1f6:	b901      	cbnz	r1, 800b1fa <__ascii_mbtowc+0x6>
 800b1f8:	a901      	add	r1, sp, #4
 800b1fa:	b142      	cbz	r2, 800b20e <__ascii_mbtowc+0x1a>
 800b1fc:	b14b      	cbz	r3, 800b212 <__ascii_mbtowc+0x1e>
 800b1fe:	7813      	ldrb	r3, [r2, #0]
 800b200:	600b      	str	r3, [r1, #0]
 800b202:	7812      	ldrb	r2, [r2, #0]
 800b204:	1e10      	subs	r0, r2, #0
 800b206:	bf18      	it	ne
 800b208:	2001      	movne	r0, #1
 800b20a:	b002      	add	sp, #8
 800b20c:	4770      	bx	lr
 800b20e:	4610      	mov	r0, r2
 800b210:	e7fb      	b.n	800b20a <__ascii_mbtowc+0x16>
 800b212:	f06f 0001 	mvn.w	r0, #1
 800b216:	e7f8      	b.n	800b20a <__ascii_mbtowc+0x16>

0800b218 <memmove>:
 800b218:	4288      	cmp	r0, r1
 800b21a:	b510      	push	{r4, lr}
 800b21c:	eb01 0402 	add.w	r4, r1, r2
 800b220:	d902      	bls.n	800b228 <memmove+0x10>
 800b222:	4284      	cmp	r4, r0
 800b224:	4623      	mov	r3, r4
 800b226:	d807      	bhi.n	800b238 <memmove+0x20>
 800b228:	1e43      	subs	r3, r0, #1
 800b22a:	42a1      	cmp	r1, r4
 800b22c:	d008      	beq.n	800b240 <memmove+0x28>
 800b22e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b232:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b236:	e7f8      	b.n	800b22a <memmove+0x12>
 800b238:	4402      	add	r2, r0
 800b23a:	4601      	mov	r1, r0
 800b23c:	428a      	cmp	r2, r1
 800b23e:	d100      	bne.n	800b242 <memmove+0x2a>
 800b240:	bd10      	pop	{r4, pc}
 800b242:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b246:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b24a:	e7f7      	b.n	800b23c <memmove+0x24>

0800b24c <__malloc_lock>:
 800b24c:	4801      	ldr	r0, [pc, #4]	; (800b254 <__malloc_lock+0x8>)
 800b24e:	f000 bc1f 	b.w	800ba90 <__retarget_lock_acquire_recursive>
 800b252:	bf00      	nop
 800b254:	200004f4 	.word	0x200004f4

0800b258 <__malloc_unlock>:
 800b258:	4801      	ldr	r0, [pc, #4]	; (800b260 <__malloc_unlock+0x8>)
 800b25a:	f000 bc1a 	b.w	800ba92 <__retarget_lock_release_recursive>
 800b25e:	bf00      	nop
 800b260:	200004f4 	.word	0x200004f4

0800b264 <_realloc_r>:
 800b264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b268:	4680      	mov	r8, r0
 800b26a:	4614      	mov	r4, r2
 800b26c:	460e      	mov	r6, r1
 800b26e:	b921      	cbnz	r1, 800b27a <_realloc_r+0x16>
 800b270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b274:	4611      	mov	r1, r2
 800b276:	f7ff bdad 	b.w	800add4 <_malloc_r>
 800b27a:	b92a      	cbnz	r2, 800b288 <_realloc_r+0x24>
 800b27c:	f7ff fd3e 	bl	800acfc <_free_r>
 800b280:	4625      	mov	r5, r4
 800b282:	4628      	mov	r0, r5
 800b284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b288:	f000 fc6a 	bl	800bb60 <_malloc_usable_size_r>
 800b28c:	4284      	cmp	r4, r0
 800b28e:	4607      	mov	r7, r0
 800b290:	d802      	bhi.n	800b298 <_realloc_r+0x34>
 800b292:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b296:	d812      	bhi.n	800b2be <_realloc_r+0x5a>
 800b298:	4621      	mov	r1, r4
 800b29a:	4640      	mov	r0, r8
 800b29c:	f7ff fd9a 	bl	800add4 <_malloc_r>
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	d0ed      	beq.n	800b282 <_realloc_r+0x1e>
 800b2a6:	42bc      	cmp	r4, r7
 800b2a8:	4622      	mov	r2, r4
 800b2aa:	4631      	mov	r1, r6
 800b2ac:	bf28      	it	cs
 800b2ae:	463a      	movcs	r2, r7
 800b2b0:	f7ff f97c 	bl	800a5ac <memcpy>
 800b2b4:	4631      	mov	r1, r6
 800b2b6:	4640      	mov	r0, r8
 800b2b8:	f7ff fd20 	bl	800acfc <_free_r>
 800b2bc:	e7e1      	b.n	800b282 <_realloc_r+0x1e>
 800b2be:	4635      	mov	r5, r6
 800b2c0:	e7df      	b.n	800b282 <_realloc_r+0x1e>

0800b2c2 <__sfputc_r>:
 800b2c2:	6893      	ldr	r3, [r2, #8]
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	b410      	push	{r4}
 800b2ca:	6093      	str	r3, [r2, #8]
 800b2cc:	da08      	bge.n	800b2e0 <__sfputc_r+0x1e>
 800b2ce:	6994      	ldr	r4, [r2, #24]
 800b2d0:	42a3      	cmp	r3, r4
 800b2d2:	db01      	blt.n	800b2d8 <__sfputc_r+0x16>
 800b2d4:	290a      	cmp	r1, #10
 800b2d6:	d103      	bne.n	800b2e0 <__sfputc_r+0x1e>
 800b2d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2dc:	f000 b94a 	b.w	800b574 <__swbuf_r>
 800b2e0:	6813      	ldr	r3, [r2, #0]
 800b2e2:	1c58      	adds	r0, r3, #1
 800b2e4:	6010      	str	r0, [r2, #0]
 800b2e6:	7019      	strb	r1, [r3, #0]
 800b2e8:	4608      	mov	r0, r1
 800b2ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <__sfputs_r>:
 800b2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f2:	4606      	mov	r6, r0
 800b2f4:	460f      	mov	r7, r1
 800b2f6:	4614      	mov	r4, r2
 800b2f8:	18d5      	adds	r5, r2, r3
 800b2fa:	42ac      	cmp	r4, r5
 800b2fc:	d101      	bne.n	800b302 <__sfputs_r+0x12>
 800b2fe:	2000      	movs	r0, #0
 800b300:	e007      	b.n	800b312 <__sfputs_r+0x22>
 800b302:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b306:	463a      	mov	r2, r7
 800b308:	4630      	mov	r0, r6
 800b30a:	f7ff ffda 	bl	800b2c2 <__sfputc_r>
 800b30e:	1c43      	adds	r3, r0, #1
 800b310:	d1f3      	bne.n	800b2fa <__sfputs_r+0xa>
 800b312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b314 <_vfiprintf_r>:
 800b314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b318:	460d      	mov	r5, r1
 800b31a:	b09d      	sub	sp, #116	; 0x74
 800b31c:	4614      	mov	r4, r2
 800b31e:	4698      	mov	r8, r3
 800b320:	4606      	mov	r6, r0
 800b322:	b118      	cbz	r0, 800b32c <_vfiprintf_r+0x18>
 800b324:	6983      	ldr	r3, [r0, #24]
 800b326:	b90b      	cbnz	r3, 800b32c <_vfiprintf_r+0x18>
 800b328:	f000 fb14 	bl	800b954 <__sinit>
 800b32c:	4b89      	ldr	r3, [pc, #548]	; (800b554 <_vfiprintf_r+0x240>)
 800b32e:	429d      	cmp	r5, r3
 800b330:	d11b      	bne.n	800b36a <_vfiprintf_r+0x56>
 800b332:	6875      	ldr	r5, [r6, #4]
 800b334:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b336:	07d9      	lsls	r1, r3, #31
 800b338:	d405      	bmi.n	800b346 <_vfiprintf_r+0x32>
 800b33a:	89ab      	ldrh	r3, [r5, #12]
 800b33c:	059a      	lsls	r2, r3, #22
 800b33e:	d402      	bmi.n	800b346 <_vfiprintf_r+0x32>
 800b340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b342:	f000 fba5 	bl	800ba90 <__retarget_lock_acquire_recursive>
 800b346:	89ab      	ldrh	r3, [r5, #12]
 800b348:	071b      	lsls	r3, r3, #28
 800b34a:	d501      	bpl.n	800b350 <_vfiprintf_r+0x3c>
 800b34c:	692b      	ldr	r3, [r5, #16]
 800b34e:	b9eb      	cbnz	r3, 800b38c <_vfiprintf_r+0x78>
 800b350:	4629      	mov	r1, r5
 800b352:	4630      	mov	r0, r6
 800b354:	f000 f96e 	bl	800b634 <__swsetup_r>
 800b358:	b1c0      	cbz	r0, 800b38c <_vfiprintf_r+0x78>
 800b35a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b35c:	07dc      	lsls	r4, r3, #31
 800b35e:	d50e      	bpl.n	800b37e <_vfiprintf_r+0x6a>
 800b360:	f04f 30ff 	mov.w	r0, #4294967295
 800b364:	b01d      	add	sp, #116	; 0x74
 800b366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b36a:	4b7b      	ldr	r3, [pc, #492]	; (800b558 <_vfiprintf_r+0x244>)
 800b36c:	429d      	cmp	r5, r3
 800b36e:	d101      	bne.n	800b374 <_vfiprintf_r+0x60>
 800b370:	68b5      	ldr	r5, [r6, #8]
 800b372:	e7df      	b.n	800b334 <_vfiprintf_r+0x20>
 800b374:	4b79      	ldr	r3, [pc, #484]	; (800b55c <_vfiprintf_r+0x248>)
 800b376:	429d      	cmp	r5, r3
 800b378:	bf08      	it	eq
 800b37a:	68f5      	ldreq	r5, [r6, #12]
 800b37c:	e7da      	b.n	800b334 <_vfiprintf_r+0x20>
 800b37e:	89ab      	ldrh	r3, [r5, #12]
 800b380:	0598      	lsls	r0, r3, #22
 800b382:	d4ed      	bmi.n	800b360 <_vfiprintf_r+0x4c>
 800b384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b386:	f000 fb84 	bl	800ba92 <__retarget_lock_release_recursive>
 800b38a:	e7e9      	b.n	800b360 <_vfiprintf_r+0x4c>
 800b38c:	2300      	movs	r3, #0
 800b38e:	9309      	str	r3, [sp, #36]	; 0x24
 800b390:	2320      	movs	r3, #32
 800b392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b396:	f8cd 800c 	str.w	r8, [sp, #12]
 800b39a:	2330      	movs	r3, #48	; 0x30
 800b39c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b560 <_vfiprintf_r+0x24c>
 800b3a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3a4:	f04f 0901 	mov.w	r9, #1
 800b3a8:	4623      	mov	r3, r4
 800b3aa:	469a      	mov	sl, r3
 800b3ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3b0:	b10a      	cbz	r2, 800b3b6 <_vfiprintf_r+0xa2>
 800b3b2:	2a25      	cmp	r2, #37	; 0x25
 800b3b4:	d1f9      	bne.n	800b3aa <_vfiprintf_r+0x96>
 800b3b6:	ebba 0b04 	subs.w	fp, sl, r4
 800b3ba:	d00b      	beq.n	800b3d4 <_vfiprintf_r+0xc0>
 800b3bc:	465b      	mov	r3, fp
 800b3be:	4622      	mov	r2, r4
 800b3c0:	4629      	mov	r1, r5
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	f7ff ff94 	bl	800b2f0 <__sfputs_r>
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	f000 80aa 	beq.w	800b522 <_vfiprintf_r+0x20e>
 800b3ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3d0:	445a      	add	r2, fp
 800b3d2:	9209      	str	r2, [sp, #36]	; 0x24
 800b3d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	f000 80a2 	beq.w	800b522 <_vfiprintf_r+0x20e>
 800b3de:	2300      	movs	r3, #0
 800b3e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b3e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3e8:	f10a 0a01 	add.w	sl, sl, #1
 800b3ec:	9304      	str	r3, [sp, #16]
 800b3ee:	9307      	str	r3, [sp, #28]
 800b3f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3f4:	931a      	str	r3, [sp, #104]	; 0x68
 800b3f6:	4654      	mov	r4, sl
 800b3f8:	2205      	movs	r2, #5
 800b3fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3fe:	4858      	ldr	r0, [pc, #352]	; (800b560 <_vfiprintf_r+0x24c>)
 800b400:	f7f4 fef6 	bl	80001f0 <memchr>
 800b404:	9a04      	ldr	r2, [sp, #16]
 800b406:	b9d8      	cbnz	r0, 800b440 <_vfiprintf_r+0x12c>
 800b408:	06d1      	lsls	r1, r2, #27
 800b40a:	bf44      	itt	mi
 800b40c:	2320      	movmi	r3, #32
 800b40e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b412:	0713      	lsls	r3, r2, #28
 800b414:	bf44      	itt	mi
 800b416:	232b      	movmi	r3, #43	; 0x2b
 800b418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b41c:	f89a 3000 	ldrb.w	r3, [sl]
 800b420:	2b2a      	cmp	r3, #42	; 0x2a
 800b422:	d015      	beq.n	800b450 <_vfiprintf_r+0x13c>
 800b424:	9a07      	ldr	r2, [sp, #28]
 800b426:	4654      	mov	r4, sl
 800b428:	2000      	movs	r0, #0
 800b42a:	f04f 0c0a 	mov.w	ip, #10
 800b42e:	4621      	mov	r1, r4
 800b430:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b434:	3b30      	subs	r3, #48	; 0x30
 800b436:	2b09      	cmp	r3, #9
 800b438:	d94e      	bls.n	800b4d8 <_vfiprintf_r+0x1c4>
 800b43a:	b1b0      	cbz	r0, 800b46a <_vfiprintf_r+0x156>
 800b43c:	9207      	str	r2, [sp, #28]
 800b43e:	e014      	b.n	800b46a <_vfiprintf_r+0x156>
 800b440:	eba0 0308 	sub.w	r3, r0, r8
 800b444:	fa09 f303 	lsl.w	r3, r9, r3
 800b448:	4313      	orrs	r3, r2
 800b44a:	9304      	str	r3, [sp, #16]
 800b44c:	46a2      	mov	sl, r4
 800b44e:	e7d2      	b.n	800b3f6 <_vfiprintf_r+0xe2>
 800b450:	9b03      	ldr	r3, [sp, #12]
 800b452:	1d19      	adds	r1, r3, #4
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	9103      	str	r1, [sp, #12]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	bfbb      	ittet	lt
 800b45c:	425b      	neglt	r3, r3
 800b45e:	f042 0202 	orrlt.w	r2, r2, #2
 800b462:	9307      	strge	r3, [sp, #28]
 800b464:	9307      	strlt	r3, [sp, #28]
 800b466:	bfb8      	it	lt
 800b468:	9204      	strlt	r2, [sp, #16]
 800b46a:	7823      	ldrb	r3, [r4, #0]
 800b46c:	2b2e      	cmp	r3, #46	; 0x2e
 800b46e:	d10c      	bne.n	800b48a <_vfiprintf_r+0x176>
 800b470:	7863      	ldrb	r3, [r4, #1]
 800b472:	2b2a      	cmp	r3, #42	; 0x2a
 800b474:	d135      	bne.n	800b4e2 <_vfiprintf_r+0x1ce>
 800b476:	9b03      	ldr	r3, [sp, #12]
 800b478:	1d1a      	adds	r2, r3, #4
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	9203      	str	r2, [sp, #12]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	bfb8      	it	lt
 800b482:	f04f 33ff 	movlt.w	r3, #4294967295
 800b486:	3402      	adds	r4, #2
 800b488:	9305      	str	r3, [sp, #20]
 800b48a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b570 <_vfiprintf_r+0x25c>
 800b48e:	7821      	ldrb	r1, [r4, #0]
 800b490:	2203      	movs	r2, #3
 800b492:	4650      	mov	r0, sl
 800b494:	f7f4 feac 	bl	80001f0 <memchr>
 800b498:	b140      	cbz	r0, 800b4ac <_vfiprintf_r+0x198>
 800b49a:	2340      	movs	r3, #64	; 0x40
 800b49c:	eba0 000a 	sub.w	r0, r0, sl
 800b4a0:	fa03 f000 	lsl.w	r0, r3, r0
 800b4a4:	9b04      	ldr	r3, [sp, #16]
 800b4a6:	4303      	orrs	r3, r0
 800b4a8:	3401      	adds	r4, #1
 800b4aa:	9304      	str	r3, [sp, #16]
 800b4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b0:	482c      	ldr	r0, [pc, #176]	; (800b564 <_vfiprintf_r+0x250>)
 800b4b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4b6:	2206      	movs	r2, #6
 800b4b8:	f7f4 fe9a 	bl	80001f0 <memchr>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d03f      	beq.n	800b540 <_vfiprintf_r+0x22c>
 800b4c0:	4b29      	ldr	r3, [pc, #164]	; (800b568 <_vfiprintf_r+0x254>)
 800b4c2:	bb1b      	cbnz	r3, 800b50c <_vfiprintf_r+0x1f8>
 800b4c4:	9b03      	ldr	r3, [sp, #12]
 800b4c6:	3307      	adds	r3, #7
 800b4c8:	f023 0307 	bic.w	r3, r3, #7
 800b4cc:	3308      	adds	r3, #8
 800b4ce:	9303      	str	r3, [sp, #12]
 800b4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d2:	443b      	add	r3, r7
 800b4d4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4d6:	e767      	b.n	800b3a8 <_vfiprintf_r+0x94>
 800b4d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4dc:	460c      	mov	r4, r1
 800b4de:	2001      	movs	r0, #1
 800b4e0:	e7a5      	b.n	800b42e <_vfiprintf_r+0x11a>
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	3401      	adds	r4, #1
 800b4e6:	9305      	str	r3, [sp, #20]
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	f04f 0c0a 	mov.w	ip, #10
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4f4:	3a30      	subs	r2, #48	; 0x30
 800b4f6:	2a09      	cmp	r2, #9
 800b4f8:	d903      	bls.n	800b502 <_vfiprintf_r+0x1ee>
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d0c5      	beq.n	800b48a <_vfiprintf_r+0x176>
 800b4fe:	9105      	str	r1, [sp, #20]
 800b500:	e7c3      	b.n	800b48a <_vfiprintf_r+0x176>
 800b502:	fb0c 2101 	mla	r1, ip, r1, r2
 800b506:	4604      	mov	r4, r0
 800b508:	2301      	movs	r3, #1
 800b50a:	e7f0      	b.n	800b4ee <_vfiprintf_r+0x1da>
 800b50c:	ab03      	add	r3, sp, #12
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	462a      	mov	r2, r5
 800b512:	4b16      	ldr	r3, [pc, #88]	; (800b56c <_vfiprintf_r+0x258>)
 800b514:	a904      	add	r1, sp, #16
 800b516:	4630      	mov	r0, r6
 800b518:	f7fd fdd6 	bl	80090c8 <_printf_float>
 800b51c:	4607      	mov	r7, r0
 800b51e:	1c78      	adds	r0, r7, #1
 800b520:	d1d6      	bne.n	800b4d0 <_vfiprintf_r+0x1bc>
 800b522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b524:	07d9      	lsls	r1, r3, #31
 800b526:	d405      	bmi.n	800b534 <_vfiprintf_r+0x220>
 800b528:	89ab      	ldrh	r3, [r5, #12]
 800b52a:	059a      	lsls	r2, r3, #22
 800b52c:	d402      	bmi.n	800b534 <_vfiprintf_r+0x220>
 800b52e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b530:	f000 faaf 	bl	800ba92 <__retarget_lock_release_recursive>
 800b534:	89ab      	ldrh	r3, [r5, #12]
 800b536:	065b      	lsls	r3, r3, #25
 800b538:	f53f af12 	bmi.w	800b360 <_vfiprintf_r+0x4c>
 800b53c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b53e:	e711      	b.n	800b364 <_vfiprintf_r+0x50>
 800b540:	ab03      	add	r3, sp, #12
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	462a      	mov	r2, r5
 800b546:	4b09      	ldr	r3, [pc, #36]	; (800b56c <_vfiprintf_r+0x258>)
 800b548:	a904      	add	r1, sp, #16
 800b54a:	4630      	mov	r0, r6
 800b54c:	f7fe f860 	bl	8009610 <_printf_i>
 800b550:	e7e4      	b.n	800b51c <_vfiprintf_r+0x208>
 800b552:	bf00      	nop
 800b554:	0800c144 	.word	0x0800c144
 800b558:	0800c164 	.word	0x0800c164
 800b55c:	0800c124 	.word	0x0800c124
 800b560:	0800bfcc 	.word	0x0800bfcc
 800b564:	0800bfd6 	.word	0x0800bfd6
 800b568:	080090c9 	.word	0x080090c9
 800b56c:	0800b2f1 	.word	0x0800b2f1
 800b570:	0800bfd2 	.word	0x0800bfd2

0800b574 <__swbuf_r>:
 800b574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b576:	460e      	mov	r6, r1
 800b578:	4614      	mov	r4, r2
 800b57a:	4605      	mov	r5, r0
 800b57c:	b118      	cbz	r0, 800b586 <__swbuf_r+0x12>
 800b57e:	6983      	ldr	r3, [r0, #24]
 800b580:	b90b      	cbnz	r3, 800b586 <__swbuf_r+0x12>
 800b582:	f000 f9e7 	bl	800b954 <__sinit>
 800b586:	4b21      	ldr	r3, [pc, #132]	; (800b60c <__swbuf_r+0x98>)
 800b588:	429c      	cmp	r4, r3
 800b58a:	d12b      	bne.n	800b5e4 <__swbuf_r+0x70>
 800b58c:	686c      	ldr	r4, [r5, #4]
 800b58e:	69a3      	ldr	r3, [r4, #24]
 800b590:	60a3      	str	r3, [r4, #8]
 800b592:	89a3      	ldrh	r3, [r4, #12]
 800b594:	071a      	lsls	r2, r3, #28
 800b596:	d52f      	bpl.n	800b5f8 <__swbuf_r+0x84>
 800b598:	6923      	ldr	r3, [r4, #16]
 800b59a:	b36b      	cbz	r3, 800b5f8 <__swbuf_r+0x84>
 800b59c:	6923      	ldr	r3, [r4, #16]
 800b59e:	6820      	ldr	r0, [r4, #0]
 800b5a0:	1ac0      	subs	r0, r0, r3
 800b5a2:	6963      	ldr	r3, [r4, #20]
 800b5a4:	b2f6      	uxtb	r6, r6
 800b5a6:	4283      	cmp	r3, r0
 800b5a8:	4637      	mov	r7, r6
 800b5aa:	dc04      	bgt.n	800b5b6 <__swbuf_r+0x42>
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	f000 f93c 	bl	800b82c <_fflush_r>
 800b5b4:	bb30      	cbnz	r0, 800b604 <__swbuf_r+0x90>
 800b5b6:	68a3      	ldr	r3, [r4, #8]
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	60a3      	str	r3, [r4, #8]
 800b5bc:	6823      	ldr	r3, [r4, #0]
 800b5be:	1c5a      	adds	r2, r3, #1
 800b5c0:	6022      	str	r2, [r4, #0]
 800b5c2:	701e      	strb	r6, [r3, #0]
 800b5c4:	6963      	ldr	r3, [r4, #20]
 800b5c6:	3001      	adds	r0, #1
 800b5c8:	4283      	cmp	r3, r0
 800b5ca:	d004      	beq.n	800b5d6 <__swbuf_r+0x62>
 800b5cc:	89a3      	ldrh	r3, [r4, #12]
 800b5ce:	07db      	lsls	r3, r3, #31
 800b5d0:	d506      	bpl.n	800b5e0 <__swbuf_r+0x6c>
 800b5d2:	2e0a      	cmp	r6, #10
 800b5d4:	d104      	bne.n	800b5e0 <__swbuf_r+0x6c>
 800b5d6:	4621      	mov	r1, r4
 800b5d8:	4628      	mov	r0, r5
 800b5da:	f000 f927 	bl	800b82c <_fflush_r>
 800b5de:	b988      	cbnz	r0, 800b604 <__swbuf_r+0x90>
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e4:	4b0a      	ldr	r3, [pc, #40]	; (800b610 <__swbuf_r+0x9c>)
 800b5e6:	429c      	cmp	r4, r3
 800b5e8:	d101      	bne.n	800b5ee <__swbuf_r+0x7a>
 800b5ea:	68ac      	ldr	r4, [r5, #8]
 800b5ec:	e7cf      	b.n	800b58e <__swbuf_r+0x1a>
 800b5ee:	4b09      	ldr	r3, [pc, #36]	; (800b614 <__swbuf_r+0xa0>)
 800b5f0:	429c      	cmp	r4, r3
 800b5f2:	bf08      	it	eq
 800b5f4:	68ec      	ldreq	r4, [r5, #12]
 800b5f6:	e7ca      	b.n	800b58e <__swbuf_r+0x1a>
 800b5f8:	4621      	mov	r1, r4
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	f000 f81a 	bl	800b634 <__swsetup_r>
 800b600:	2800      	cmp	r0, #0
 800b602:	d0cb      	beq.n	800b59c <__swbuf_r+0x28>
 800b604:	f04f 37ff 	mov.w	r7, #4294967295
 800b608:	e7ea      	b.n	800b5e0 <__swbuf_r+0x6c>
 800b60a:	bf00      	nop
 800b60c:	0800c144 	.word	0x0800c144
 800b610:	0800c164 	.word	0x0800c164
 800b614:	0800c124 	.word	0x0800c124

0800b618 <__ascii_wctomb>:
 800b618:	b149      	cbz	r1, 800b62e <__ascii_wctomb+0x16>
 800b61a:	2aff      	cmp	r2, #255	; 0xff
 800b61c:	bf85      	ittet	hi
 800b61e:	238a      	movhi	r3, #138	; 0x8a
 800b620:	6003      	strhi	r3, [r0, #0]
 800b622:	700a      	strbls	r2, [r1, #0]
 800b624:	f04f 30ff 	movhi.w	r0, #4294967295
 800b628:	bf98      	it	ls
 800b62a:	2001      	movls	r0, #1
 800b62c:	4770      	bx	lr
 800b62e:	4608      	mov	r0, r1
 800b630:	4770      	bx	lr
	...

0800b634 <__swsetup_r>:
 800b634:	4b32      	ldr	r3, [pc, #200]	; (800b700 <__swsetup_r+0xcc>)
 800b636:	b570      	push	{r4, r5, r6, lr}
 800b638:	681d      	ldr	r5, [r3, #0]
 800b63a:	4606      	mov	r6, r0
 800b63c:	460c      	mov	r4, r1
 800b63e:	b125      	cbz	r5, 800b64a <__swsetup_r+0x16>
 800b640:	69ab      	ldr	r3, [r5, #24]
 800b642:	b913      	cbnz	r3, 800b64a <__swsetup_r+0x16>
 800b644:	4628      	mov	r0, r5
 800b646:	f000 f985 	bl	800b954 <__sinit>
 800b64a:	4b2e      	ldr	r3, [pc, #184]	; (800b704 <__swsetup_r+0xd0>)
 800b64c:	429c      	cmp	r4, r3
 800b64e:	d10f      	bne.n	800b670 <__swsetup_r+0x3c>
 800b650:	686c      	ldr	r4, [r5, #4]
 800b652:	89a3      	ldrh	r3, [r4, #12]
 800b654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b658:	0719      	lsls	r1, r3, #28
 800b65a:	d42c      	bmi.n	800b6b6 <__swsetup_r+0x82>
 800b65c:	06dd      	lsls	r5, r3, #27
 800b65e:	d411      	bmi.n	800b684 <__swsetup_r+0x50>
 800b660:	2309      	movs	r3, #9
 800b662:	6033      	str	r3, [r6, #0]
 800b664:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b668:	81a3      	strh	r3, [r4, #12]
 800b66a:	f04f 30ff 	mov.w	r0, #4294967295
 800b66e:	e03e      	b.n	800b6ee <__swsetup_r+0xba>
 800b670:	4b25      	ldr	r3, [pc, #148]	; (800b708 <__swsetup_r+0xd4>)
 800b672:	429c      	cmp	r4, r3
 800b674:	d101      	bne.n	800b67a <__swsetup_r+0x46>
 800b676:	68ac      	ldr	r4, [r5, #8]
 800b678:	e7eb      	b.n	800b652 <__swsetup_r+0x1e>
 800b67a:	4b24      	ldr	r3, [pc, #144]	; (800b70c <__swsetup_r+0xd8>)
 800b67c:	429c      	cmp	r4, r3
 800b67e:	bf08      	it	eq
 800b680:	68ec      	ldreq	r4, [r5, #12]
 800b682:	e7e6      	b.n	800b652 <__swsetup_r+0x1e>
 800b684:	0758      	lsls	r0, r3, #29
 800b686:	d512      	bpl.n	800b6ae <__swsetup_r+0x7a>
 800b688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b68a:	b141      	cbz	r1, 800b69e <__swsetup_r+0x6a>
 800b68c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b690:	4299      	cmp	r1, r3
 800b692:	d002      	beq.n	800b69a <__swsetup_r+0x66>
 800b694:	4630      	mov	r0, r6
 800b696:	f7ff fb31 	bl	800acfc <_free_r>
 800b69a:	2300      	movs	r3, #0
 800b69c:	6363      	str	r3, [r4, #52]	; 0x34
 800b69e:	89a3      	ldrh	r3, [r4, #12]
 800b6a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6a4:	81a3      	strh	r3, [r4, #12]
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	6063      	str	r3, [r4, #4]
 800b6aa:	6923      	ldr	r3, [r4, #16]
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	89a3      	ldrh	r3, [r4, #12]
 800b6b0:	f043 0308 	orr.w	r3, r3, #8
 800b6b4:	81a3      	strh	r3, [r4, #12]
 800b6b6:	6923      	ldr	r3, [r4, #16]
 800b6b8:	b94b      	cbnz	r3, 800b6ce <__swsetup_r+0x9a>
 800b6ba:	89a3      	ldrh	r3, [r4, #12]
 800b6bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6c4:	d003      	beq.n	800b6ce <__swsetup_r+0x9a>
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f000 fa09 	bl	800bae0 <__smakebuf_r>
 800b6ce:	89a0      	ldrh	r0, [r4, #12]
 800b6d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6d4:	f010 0301 	ands.w	r3, r0, #1
 800b6d8:	d00a      	beq.n	800b6f0 <__swsetup_r+0xbc>
 800b6da:	2300      	movs	r3, #0
 800b6dc:	60a3      	str	r3, [r4, #8]
 800b6de:	6963      	ldr	r3, [r4, #20]
 800b6e0:	425b      	negs	r3, r3
 800b6e2:	61a3      	str	r3, [r4, #24]
 800b6e4:	6923      	ldr	r3, [r4, #16]
 800b6e6:	b943      	cbnz	r3, 800b6fa <__swsetup_r+0xc6>
 800b6e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b6ec:	d1ba      	bne.n	800b664 <__swsetup_r+0x30>
 800b6ee:	bd70      	pop	{r4, r5, r6, pc}
 800b6f0:	0781      	lsls	r1, r0, #30
 800b6f2:	bf58      	it	pl
 800b6f4:	6963      	ldrpl	r3, [r4, #20]
 800b6f6:	60a3      	str	r3, [r4, #8]
 800b6f8:	e7f4      	b.n	800b6e4 <__swsetup_r+0xb0>
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	e7f7      	b.n	800b6ee <__swsetup_r+0xba>
 800b6fe:	bf00      	nop
 800b700:	2000000c 	.word	0x2000000c
 800b704:	0800c144 	.word	0x0800c144
 800b708:	0800c164 	.word	0x0800c164
 800b70c:	0800c124 	.word	0x0800c124

0800b710 <abort>:
 800b710:	b508      	push	{r3, lr}
 800b712:	2006      	movs	r0, #6
 800b714:	f000 fa54 	bl	800bbc0 <raise>
 800b718:	2001      	movs	r0, #1
 800b71a:	f7f6 fc3d 	bl	8001f98 <_exit>
	...

0800b720 <__sflush_r>:
 800b720:	898a      	ldrh	r2, [r1, #12]
 800b722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b726:	4605      	mov	r5, r0
 800b728:	0710      	lsls	r0, r2, #28
 800b72a:	460c      	mov	r4, r1
 800b72c:	d458      	bmi.n	800b7e0 <__sflush_r+0xc0>
 800b72e:	684b      	ldr	r3, [r1, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	dc05      	bgt.n	800b740 <__sflush_r+0x20>
 800b734:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b736:	2b00      	cmp	r3, #0
 800b738:	dc02      	bgt.n	800b740 <__sflush_r+0x20>
 800b73a:	2000      	movs	r0, #0
 800b73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b742:	2e00      	cmp	r6, #0
 800b744:	d0f9      	beq.n	800b73a <__sflush_r+0x1a>
 800b746:	2300      	movs	r3, #0
 800b748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b74c:	682f      	ldr	r7, [r5, #0]
 800b74e:	602b      	str	r3, [r5, #0]
 800b750:	d032      	beq.n	800b7b8 <__sflush_r+0x98>
 800b752:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b754:	89a3      	ldrh	r3, [r4, #12]
 800b756:	075a      	lsls	r2, r3, #29
 800b758:	d505      	bpl.n	800b766 <__sflush_r+0x46>
 800b75a:	6863      	ldr	r3, [r4, #4]
 800b75c:	1ac0      	subs	r0, r0, r3
 800b75e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b760:	b10b      	cbz	r3, 800b766 <__sflush_r+0x46>
 800b762:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b764:	1ac0      	subs	r0, r0, r3
 800b766:	2300      	movs	r3, #0
 800b768:	4602      	mov	r2, r0
 800b76a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b76c:	6a21      	ldr	r1, [r4, #32]
 800b76e:	4628      	mov	r0, r5
 800b770:	47b0      	blx	r6
 800b772:	1c43      	adds	r3, r0, #1
 800b774:	89a3      	ldrh	r3, [r4, #12]
 800b776:	d106      	bne.n	800b786 <__sflush_r+0x66>
 800b778:	6829      	ldr	r1, [r5, #0]
 800b77a:	291d      	cmp	r1, #29
 800b77c:	d82c      	bhi.n	800b7d8 <__sflush_r+0xb8>
 800b77e:	4a2a      	ldr	r2, [pc, #168]	; (800b828 <__sflush_r+0x108>)
 800b780:	40ca      	lsrs	r2, r1
 800b782:	07d6      	lsls	r6, r2, #31
 800b784:	d528      	bpl.n	800b7d8 <__sflush_r+0xb8>
 800b786:	2200      	movs	r2, #0
 800b788:	6062      	str	r2, [r4, #4]
 800b78a:	04d9      	lsls	r1, r3, #19
 800b78c:	6922      	ldr	r2, [r4, #16]
 800b78e:	6022      	str	r2, [r4, #0]
 800b790:	d504      	bpl.n	800b79c <__sflush_r+0x7c>
 800b792:	1c42      	adds	r2, r0, #1
 800b794:	d101      	bne.n	800b79a <__sflush_r+0x7a>
 800b796:	682b      	ldr	r3, [r5, #0]
 800b798:	b903      	cbnz	r3, 800b79c <__sflush_r+0x7c>
 800b79a:	6560      	str	r0, [r4, #84]	; 0x54
 800b79c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b79e:	602f      	str	r7, [r5, #0]
 800b7a0:	2900      	cmp	r1, #0
 800b7a2:	d0ca      	beq.n	800b73a <__sflush_r+0x1a>
 800b7a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7a8:	4299      	cmp	r1, r3
 800b7aa:	d002      	beq.n	800b7b2 <__sflush_r+0x92>
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	f7ff faa5 	bl	800acfc <_free_r>
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	6360      	str	r0, [r4, #52]	; 0x34
 800b7b6:	e7c1      	b.n	800b73c <__sflush_r+0x1c>
 800b7b8:	6a21      	ldr	r1, [r4, #32]
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	4628      	mov	r0, r5
 800b7be:	47b0      	blx	r6
 800b7c0:	1c41      	adds	r1, r0, #1
 800b7c2:	d1c7      	bne.n	800b754 <__sflush_r+0x34>
 800b7c4:	682b      	ldr	r3, [r5, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d0c4      	beq.n	800b754 <__sflush_r+0x34>
 800b7ca:	2b1d      	cmp	r3, #29
 800b7cc:	d001      	beq.n	800b7d2 <__sflush_r+0xb2>
 800b7ce:	2b16      	cmp	r3, #22
 800b7d0:	d101      	bne.n	800b7d6 <__sflush_r+0xb6>
 800b7d2:	602f      	str	r7, [r5, #0]
 800b7d4:	e7b1      	b.n	800b73a <__sflush_r+0x1a>
 800b7d6:	89a3      	ldrh	r3, [r4, #12]
 800b7d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7dc:	81a3      	strh	r3, [r4, #12]
 800b7de:	e7ad      	b.n	800b73c <__sflush_r+0x1c>
 800b7e0:	690f      	ldr	r7, [r1, #16]
 800b7e2:	2f00      	cmp	r7, #0
 800b7e4:	d0a9      	beq.n	800b73a <__sflush_r+0x1a>
 800b7e6:	0793      	lsls	r3, r2, #30
 800b7e8:	680e      	ldr	r6, [r1, #0]
 800b7ea:	bf08      	it	eq
 800b7ec:	694b      	ldreq	r3, [r1, #20]
 800b7ee:	600f      	str	r7, [r1, #0]
 800b7f0:	bf18      	it	ne
 800b7f2:	2300      	movne	r3, #0
 800b7f4:	eba6 0807 	sub.w	r8, r6, r7
 800b7f8:	608b      	str	r3, [r1, #8]
 800b7fa:	f1b8 0f00 	cmp.w	r8, #0
 800b7fe:	dd9c      	ble.n	800b73a <__sflush_r+0x1a>
 800b800:	6a21      	ldr	r1, [r4, #32]
 800b802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b804:	4643      	mov	r3, r8
 800b806:	463a      	mov	r2, r7
 800b808:	4628      	mov	r0, r5
 800b80a:	47b0      	blx	r6
 800b80c:	2800      	cmp	r0, #0
 800b80e:	dc06      	bgt.n	800b81e <__sflush_r+0xfe>
 800b810:	89a3      	ldrh	r3, [r4, #12]
 800b812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b816:	81a3      	strh	r3, [r4, #12]
 800b818:	f04f 30ff 	mov.w	r0, #4294967295
 800b81c:	e78e      	b.n	800b73c <__sflush_r+0x1c>
 800b81e:	4407      	add	r7, r0
 800b820:	eba8 0800 	sub.w	r8, r8, r0
 800b824:	e7e9      	b.n	800b7fa <__sflush_r+0xda>
 800b826:	bf00      	nop
 800b828:	20400001 	.word	0x20400001

0800b82c <_fflush_r>:
 800b82c:	b538      	push	{r3, r4, r5, lr}
 800b82e:	690b      	ldr	r3, [r1, #16]
 800b830:	4605      	mov	r5, r0
 800b832:	460c      	mov	r4, r1
 800b834:	b913      	cbnz	r3, 800b83c <_fflush_r+0x10>
 800b836:	2500      	movs	r5, #0
 800b838:	4628      	mov	r0, r5
 800b83a:	bd38      	pop	{r3, r4, r5, pc}
 800b83c:	b118      	cbz	r0, 800b846 <_fflush_r+0x1a>
 800b83e:	6983      	ldr	r3, [r0, #24]
 800b840:	b90b      	cbnz	r3, 800b846 <_fflush_r+0x1a>
 800b842:	f000 f887 	bl	800b954 <__sinit>
 800b846:	4b14      	ldr	r3, [pc, #80]	; (800b898 <_fflush_r+0x6c>)
 800b848:	429c      	cmp	r4, r3
 800b84a:	d11b      	bne.n	800b884 <_fflush_r+0x58>
 800b84c:	686c      	ldr	r4, [r5, #4]
 800b84e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d0ef      	beq.n	800b836 <_fflush_r+0xa>
 800b856:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b858:	07d0      	lsls	r0, r2, #31
 800b85a:	d404      	bmi.n	800b866 <_fflush_r+0x3a>
 800b85c:	0599      	lsls	r1, r3, #22
 800b85e:	d402      	bmi.n	800b866 <_fflush_r+0x3a>
 800b860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b862:	f000 f915 	bl	800ba90 <__retarget_lock_acquire_recursive>
 800b866:	4628      	mov	r0, r5
 800b868:	4621      	mov	r1, r4
 800b86a:	f7ff ff59 	bl	800b720 <__sflush_r>
 800b86e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b870:	07da      	lsls	r2, r3, #31
 800b872:	4605      	mov	r5, r0
 800b874:	d4e0      	bmi.n	800b838 <_fflush_r+0xc>
 800b876:	89a3      	ldrh	r3, [r4, #12]
 800b878:	059b      	lsls	r3, r3, #22
 800b87a:	d4dd      	bmi.n	800b838 <_fflush_r+0xc>
 800b87c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b87e:	f000 f908 	bl	800ba92 <__retarget_lock_release_recursive>
 800b882:	e7d9      	b.n	800b838 <_fflush_r+0xc>
 800b884:	4b05      	ldr	r3, [pc, #20]	; (800b89c <_fflush_r+0x70>)
 800b886:	429c      	cmp	r4, r3
 800b888:	d101      	bne.n	800b88e <_fflush_r+0x62>
 800b88a:	68ac      	ldr	r4, [r5, #8]
 800b88c:	e7df      	b.n	800b84e <_fflush_r+0x22>
 800b88e:	4b04      	ldr	r3, [pc, #16]	; (800b8a0 <_fflush_r+0x74>)
 800b890:	429c      	cmp	r4, r3
 800b892:	bf08      	it	eq
 800b894:	68ec      	ldreq	r4, [r5, #12]
 800b896:	e7da      	b.n	800b84e <_fflush_r+0x22>
 800b898:	0800c144 	.word	0x0800c144
 800b89c:	0800c164 	.word	0x0800c164
 800b8a0:	0800c124 	.word	0x0800c124

0800b8a4 <std>:
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	b510      	push	{r4, lr}
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	e9c0 3300 	strd	r3, r3, [r0]
 800b8ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8b2:	6083      	str	r3, [r0, #8]
 800b8b4:	8181      	strh	r1, [r0, #12]
 800b8b6:	6643      	str	r3, [r0, #100]	; 0x64
 800b8b8:	81c2      	strh	r2, [r0, #14]
 800b8ba:	6183      	str	r3, [r0, #24]
 800b8bc:	4619      	mov	r1, r3
 800b8be:	2208      	movs	r2, #8
 800b8c0:	305c      	adds	r0, #92	; 0x5c
 800b8c2:	f7fd fb59 	bl	8008f78 <memset>
 800b8c6:	4b05      	ldr	r3, [pc, #20]	; (800b8dc <std+0x38>)
 800b8c8:	6263      	str	r3, [r4, #36]	; 0x24
 800b8ca:	4b05      	ldr	r3, [pc, #20]	; (800b8e0 <std+0x3c>)
 800b8cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8ce:	4b05      	ldr	r3, [pc, #20]	; (800b8e4 <std+0x40>)
 800b8d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8d2:	4b05      	ldr	r3, [pc, #20]	; (800b8e8 <std+0x44>)
 800b8d4:	6224      	str	r4, [r4, #32]
 800b8d6:	6323      	str	r3, [r4, #48]	; 0x30
 800b8d8:	bd10      	pop	{r4, pc}
 800b8da:	bf00      	nop
 800b8dc:	0800bbf9 	.word	0x0800bbf9
 800b8e0:	0800bc1b 	.word	0x0800bc1b
 800b8e4:	0800bc53 	.word	0x0800bc53
 800b8e8:	0800bc77 	.word	0x0800bc77

0800b8ec <_cleanup_r>:
 800b8ec:	4901      	ldr	r1, [pc, #4]	; (800b8f4 <_cleanup_r+0x8>)
 800b8ee:	f000 b8af 	b.w	800ba50 <_fwalk_reent>
 800b8f2:	bf00      	nop
 800b8f4:	0800b82d 	.word	0x0800b82d

0800b8f8 <__sfmoreglue>:
 800b8f8:	b570      	push	{r4, r5, r6, lr}
 800b8fa:	2268      	movs	r2, #104	; 0x68
 800b8fc:	1e4d      	subs	r5, r1, #1
 800b8fe:	4355      	muls	r5, r2
 800b900:	460e      	mov	r6, r1
 800b902:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b906:	f7ff fa65 	bl	800add4 <_malloc_r>
 800b90a:	4604      	mov	r4, r0
 800b90c:	b140      	cbz	r0, 800b920 <__sfmoreglue+0x28>
 800b90e:	2100      	movs	r1, #0
 800b910:	e9c0 1600 	strd	r1, r6, [r0]
 800b914:	300c      	adds	r0, #12
 800b916:	60a0      	str	r0, [r4, #8]
 800b918:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b91c:	f7fd fb2c 	bl	8008f78 <memset>
 800b920:	4620      	mov	r0, r4
 800b922:	bd70      	pop	{r4, r5, r6, pc}

0800b924 <__sfp_lock_acquire>:
 800b924:	4801      	ldr	r0, [pc, #4]	; (800b92c <__sfp_lock_acquire+0x8>)
 800b926:	f000 b8b3 	b.w	800ba90 <__retarget_lock_acquire_recursive>
 800b92a:	bf00      	nop
 800b92c:	200004f5 	.word	0x200004f5

0800b930 <__sfp_lock_release>:
 800b930:	4801      	ldr	r0, [pc, #4]	; (800b938 <__sfp_lock_release+0x8>)
 800b932:	f000 b8ae 	b.w	800ba92 <__retarget_lock_release_recursive>
 800b936:	bf00      	nop
 800b938:	200004f5 	.word	0x200004f5

0800b93c <__sinit_lock_acquire>:
 800b93c:	4801      	ldr	r0, [pc, #4]	; (800b944 <__sinit_lock_acquire+0x8>)
 800b93e:	f000 b8a7 	b.w	800ba90 <__retarget_lock_acquire_recursive>
 800b942:	bf00      	nop
 800b944:	200004f6 	.word	0x200004f6

0800b948 <__sinit_lock_release>:
 800b948:	4801      	ldr	r0, [pc, #4]	; (800b950 <__sinit_lock_release+0x8>)
 800b94a:	f000 b8a2 	b.w	800ba92 <__retarget_lock_release_recursive>
 800b94e:	bf00      	nop
 800b950:	200004f6 	.word	0x200004f6

0800b954 <__sinit>:
 800b954:	b510      	push	{r4, lr}
 800b956:	4604      	mov	r4, r0
 800b958:	f7ff fff0 	bl	800b93c <__sinit_lock_acquire>
 800b95c:	69a3      	ldr	r3, [r4, #24]
 800b95e:	b11b      	cbz	r3, 800b968 <__sinit+0x14>
 800b960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b964:	f7ff bff0 	b.w	800b948 <__sinit_lock_release>
 800b968:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b96c:	6523      	str	r3, [r4, #80]	; 0x50
 800b96e:	4b13      	ldr	r3, [pc, #76]	; (800b9bc <__sinit+0x68>)
 800b970:	4a13      	ldr	r2, [pc, #76]	; (800b9c0 <__sinit+0x6c>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	62a2      	str	r2, [r4, #40]	; 0x28
 800b976:	42a3      	cmp	r3, r4
 800b978:	bf04      	itt	eq
 800b97a:	2301      	moveq	r3, #1
 800b97c:	61a3      	streq	r3, [r4, #24]
 800b97e:	4620      	mov	r0, r4
 800b980:	f000 f820 	bl	800b9c4 <__sfp>
 800b984:	6060      	str	r0, [r4, #4]
 800b986:	4620      	mov	r0, r4
 800b988:	f000 f81c 	bl	800b9c4 <__sfp>
 800b98c:	60a0      	str	r0, [r4, #8]
 800b98e:	4620      	mov	r0, r4
 800b990:	f000 f818 	bl	800b9c4 <__sfp>
 800b994:	2200      	movs	r2, #0
 800b996:	60e0      	str	r0, [r4, #12]
 800b998:	2104      	movs	r1, #4
 800b99a:	6860      	ldr	r0, [r4, #4]
 800b99c:	f7ff ff82 	bl	800b8a4 <std>
 800b9a0:	68a0      	ldr	r0, [r4, #8]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	2109      	movs	r1, #9
 800b9a6:	f7ff ff7d 	bl	800b8a4 <std>
 800b9aa:	68e0      	ldr	r0, [r4, #12]
 800b9ac:	2202      	movs	r2, #2
 800b9ae:	2112      	movs	r1, #18
 800b9b0:	f7ff ff78 	bl	800b8a4 <std>
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	61a3      	str	r3, [r4, #24]
 800b9b8:	e7d2      	b.n	800b960 <__sinit+0xc>
 800b9ba:	bf00      	nop
 800b9bc:	0800bda8 	.word	0x0800bda8
 800b9c0:	0800b8ed 	.word	0x0800b8ed

0800b9c4 <__sfp>:
 800b9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9c6:	4607      	mov	r7, r0
 800b9c8:	f7ff ffac 	bl	800b924 <__sfp_lock_acquire>
 800b9cc:	4b1e      	ldr	r3, [pc, #120]	; (800ba48 <__sfp+0x84>)
 800b9ce:	681e      	ldr	r6, [r3, #0]
 800b9d0:	69b3      	ldr	r3, [r6, #24]
 800b9d2:	b913      	cbnz	r3, 800b9da <__sfp+0x16>
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	f7ff ffbd 	bl	800b954 <__sinit>
 800b9da:	3648      	adds	r6, #72	; 0x48
 800b9dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	d503      	bpl.n	800b9ec <__sfp+0x28>
 800b9e4:	6833      	ldr	r3, [r6, #0]
 800b9e6:	b30b      	cbz	r3, 800ba2c <__sfp+0x68>
 800b9e8:	6836      	ldr	r6, [r6, #0]
 800b9ea:	e7f7      	b.n	800b9dc <__sfp+0x18>
 800b9ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9f0:	b9d5      	cbnz	r5, 800ba28 <__sfp+0x64>
 800b9f2:	4b16      	ldr	r3, [pc, #88]	; (800ba4c <__sfp+0x88>)
 800b9f4:	60e3      	str	r3, [r4, #12]
 800b9f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b9fa:	6665      	str	r5, [r4, #100]	; 0x64
 800b9fc:	f000 f847 	bl	800ba8e <__retarget_lock_init_recursive>
 800ba00:	f7ff ff96 	bl	800b930 <__sfp_lock_release>
 800ba04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba0c:	6025      	str	r5, [r4, #0]
 800ba0e:	61a5      	str	r5, [r4, #24]
 800ba10:	2208      	movs	r2, #8
 800ba12:	4629      	mov	r1, r5
 800ba14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba18:	f7fd faae 	bl	8008f78 <memset>
 800ba1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba24:	4620      	mov	r0, r4
 800ba26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba28:	3468      	adds	r4, #104	; 0x68
 800ba2a:	e7d9      	b.n	800b9e0 <__sfp+0x1c>
 800ba2c:	2104      	movs	r1, #4
 800ba2e:	4638      	mov	r0, r7
 800ba30:	f7ff ff62 	bl	800b8f8 <__sfmoreglue>
 800ba34:	4604      	mov	r4, r0
 800ba36:	6030      	str	r0, [r6, #0]
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	d1d5      	bne.n	800b9e8 <__sfp+0x24>
 800ba3c:	f7ff ff78 	bl	800b930 <__sfp_lock_release>
 800ba40:	230c      	movs	r3, #12
 800ba42:	603b      	str	r3, [r7, #0]
 800ba44:	e7ee      	b.n	800ba24 <__sfp+0x60>
 800ba46:	bf00      	nop
 800ba48:	0800bda8 	.word	0x0800bda8
 800ba4c:	ffff0001 	.word	0xffff0001

0800ba50 <_fwalk_reent>:
 800ba50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba54:	4606      	mov	r6, r0
 800ba56:	4688      	mov	r8, r1
 800ba58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba5c:	2700      	movs	r7, #0
 800ba5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba62:	f1b9 0901 	subs.w	r9, r9, #1
 800ba66:	d505      	bpl.n	800ba74 <_fwalk_reent+0x24>
 800ba68:	6824      	ldr	r4, [r4, #0]
 800ba6a:	2c00      	cmp	r4, #0
 800ba6c:	d1f7      	bne.n	800ba5e <_fwalk_reent+0xe>
 800ba6e:	4638      	mov	r0, r7
 800ba70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba74:	89ab      	ldrh	r3, [r5, #12]
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d907      	bls.n	800ba8a <_fwalk_reent+0x3a>
 800ba7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	d003      	beq.n	800ba8a <_fwalk_reent+0x3a>
 800ba82:	4629      	mov	r1, r5
 800ba84:	4630      	mov	r0, r6
 800ba86:	47c0      	blx	r8
 800ba88:	4307      	orrs	r7, r0
 800ba8a:	3568      	adds	r5, #104	; 0x68
 800ba8c:	e7e9      	b.n	800ba62 <_fwalk_reent+0x12>

0800ba8e <__retarget_lock_init_recursive>:
 800ba8e:	4770      	bx	lr

0800ba90 <__retarget_lock_acquire_recursive>:
 800ba90:	4770      	bx	lr

0800ba92 <__retarget_lock_release_recursive>:
 800ba92:	4770      	bx	lr

0800ba94 <__swhatbuf_r>:
 800ba94:	b570      	push	{r4, r5, r6, lr}
 800ba96:	460e      	mov	r6, r1
 800ba98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba9c:	2900      	cmp	r1, #0
 800ba9e:	b096      	sub	sp, #88	; 0x58
 800baa0:	4614      	mov	r4, r2
 800baa2:	461d      	mov	r5, r3
 800baa4:	da08      	bge.n	800bab8 <__swhatbuf_r+0x24>
 800baa6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	602a      	str	r2, [r5, #0]
 800baae:	061a      	lsls	r2, r3, #24
 800bab0:	d410      	bmi.n	800bad4 <__swhatbuf_r+0x40>
 800bab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bab6:	e00e      	b.n	800bad6 <__swhatbuf_r+0x42>
 800bab8:	466a      	mov	r2, sp
 800baba:	f000 f903 	bl	800bcc4 <_fstat_r>
 800babe:	2800      	cmp	r0, #0
 800bac0:	dbf1      	blt.n	800baa6 <__swhatbuf_r+0x12>
 800bac2:	9a01      	ldr	r2, [sp, #4]
 800bac4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bac8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bacc:	425a      	negs	r2, r3
 800bace:	415a      	adcs	r2, r3
 800bad0:	602a      	str	r2, [r5, #0]
 800bad2:	e7ee      	b.n	800bab2 <__swhatbuf_r+0x1e>
 800bad4:	2340      	movs	r3, #64	; 0x40
 800bad6:	2000      	movs	r0, #0
 800bad8:	6023      	str	r3, [r4, #0]
 800bada:	b016      	add	sp, #88	; 0x58
 800badc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bae0 <__smakebuf_r>:
 800bae0:	898b      	ldrh	r3, [r1, #12]
 800bae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bae4:	079d      	lsls	r5, r3, #30
 800bae6:	4606      	mov	r6, r0
 800bae8:	460c      	mov	r4, r1
 800baea:	d507      	bpl.n	800bafc <__smakebuf_r+0x1c>
 800baec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800baf0:	6023      	str	r3, [r4, #0]
 800baf2:	6123      	str	r3, [r4, #16]
 800baf4:	2301      	movs	r3, #1
 800baf6:	6163      	str	r3, [r4, #20]
 800baf8:	b002      	add	sp, #8
 800bafa:	bd70      	pop	{r4, r5, r6, pc}
 800bafc:	ab01      	add	r3, sp, #4
 800bafe:	466a      	mov	r2, sp
 800bb00:	f7ff ffc8 	bl	800ba94 <__swhatbuf_r>
 800bb04:	9900      	ldr	r1, [sp, #0]
 800bb06:	4605      	mov	r5, r0
 800bb08:	4630      	mov	r0, r6
 800bb0a:	f7ff f963 	bl	800add4 <_malloc_r>
 800bb0e:	b948      	cbnz	r0, 800bb24 <__smakebuf_r+0x44>
 800bb10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb14:	059a      	lsls	r2, r3, #22
 800bb16:	d4ef      	bmi.n	800baf8 <__smakebuf_r+0x18>
 800bb18:	f023 0303 	bic.w	r3, r3, #3
 800bb1c:	f043 0302 	orr.w	r3, r3, #2
 800bb20:	81a3      	strh	r3, [r4, #12]
 800bb22:	e7e3      	b.n	800baec <__smakebuf_r+0xc>
 800bb24:	4b0d      	ldr	r3, [pc, #52]	; (800bb5c <__smakebuf_r+0x7c>)
 800bb26:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb28:	89a3      	ldrh	r3, [r4, #12]
 800bb2a:	6020      	str	r0, [r4, #0]
 800bb2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb30:	81a3      	strh	r3, [r4, #12]
 800bb32:	9b00      	ldr	r3, [sp, #0]
 800bb34:	6163      	str	r3, [r4, #20]
 800bb36:	9b01      	ldr	r3, [sp, #4]
 800bb38:	6120      	str	r0, [r4, #16]
 800bb3a:	b15b      	cbz	r3, 800bb54 <__smakebuf_r+0x74>
 800bb3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb40:	4630      	mov	r0, r6
 800bb42:	f000 f8d1 	bl	800bce8 <_isatty_r>
 800bb46:	b128      	cbz	r0, 800bb54 <__smakebuf_r+0x74>
 800bb48:	89a3      	ldrh	r3, [r4, #12]
 800bb4a:	f023 0303 	bic.w	r3, r3, #3
 800bb4e:	f043 0301 	orr.w	r3, r3, #1
 800bb52:	81a3      	strh	r3, [r4, #12]
 800bb54:	89a0      	ldrh	r0, [r4, #12]
 800bb56:	4305      	orrs	r5, r0
 800bb58:	81a5      	strh	r5, [r4, #12]
 800bb5a:	e7cd      	b.n	800baf8 <__smakebuf_r+0x18>
 800bb5c:	0800b8ed 	.word	0x0800b8ed

0800bb60 <_malloc_usable_size_r>:
 800bb60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb64:	1f18      	subs	r0, r3, #4
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	bfbc      	itt	lt
 800bb6a:	580b      	ldrlt	r3, [r1, r0]
 800bb6c:	18c0      	addlt	r0, r0, r3
 800bb6e:	4770      	bx	lr

0800bb70 <_raise_r>:
 800bb70:	291f      	cmp	r1, #31
 800bb72:	b538      	push	{r3, r4, r5, lr}
 800bb74:	4604      	mov	r4, r0
 800bb76:	460d      	mov	r5, r1
 800bb78:	d904      	bls.n	800bb84 <_raise_r+0x14>
 800bb7a:	2316      	movs	r3, #22
 800bb7c:	6003      	str	r3, [r0, #0]
 800bb7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb82:	bd38      	pop	{r3, r4, r5, pc}
 800bb84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb86:	b112      	cbz	r2, 800bb8e <_raise_r+0x1e>
 800bb88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb8c:	b94b      	cbnz	r3, 800bba2 <_raise_r+0x32>
 800bb8e:	4620      	mov	r0, r4
 800bb90:	f000 f830 	bl	800bbf4 <_getpid_r>
 800bb94:	462a      	mov	r2, r5
 800bb96:	4601      	mov	r1, r0
 800bb98:	4620      	mov	r0, r4
 800bb9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb9e:	f000 b817 	b.w	800bbd0 <_kill_r>
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d00a      	beq.n	800bbbc <_raise_r+0x4c>
 800bba6:	1c59      	adds	r1, r3, #1
 800bba8:	d103      	bne.n	800bbb2 <_raise_r+0x42>
 800bbaa:	2316      	movs	r3, #22
 800bbac:	6003      	str	r3, [r0, #0]
 800bbae:	2001      	movs	r0, #1
 800bbb0:	e7e7      	b.n	800bb82 <_raise_r+0x12>
 800bbb2:	2400      	movs	r4, #0
 800bbb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bbb8:	4628      	mov	r0, r5
 800bbba:	4798      	blx	r3
 800bbbc:	2000      	movs	r0, #0
 800bbbe:	e7e0      	b.n	800bb82 <_raise_r+0x12>

0800bbc0 <raise>:
 800bbc0:	4b02      	ldr	r3, [pc, #8]	; (800bbcc <raise+0xc>)
 800bbc2:	4601      	mov	r1, r0
 800bbc4:	6818      	ldr	r0, [r3, #0]
 800bbc6:	f7ff bfd3 	b.w	800bb70 <_raise_r>
 800bbca:	bf00      	nop
 800bbcc:	2000000c 	.word	0x2000000c

0800bbd0 <_kill_r>:
 800bbd0:	b538      	push	{r3, r4, r5, lr}
 800bbd2:	4d07      	ldr	r5, [pc, #28]	; (800bbf0 <_kill_r+0x20>)
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	4608      	mov	r0, r1
 800bbda:	4611      	mov	r1, r2
 800bbdc:	602b      	str	r3, [r5, #0]
 800bbde:	f7f6 f9cb 	bl	8001f78 <_kill>
 800bbe2:	1c43      	adds	r3, r0, #1
 800bbe4:	d102      	bne.n	800bbec <_kill_r+0x1c>
 800bbe6:	682b      	ldr	r3, [r5, #0]
 800bbe8:	b103      	cbz	r3, 800bbec <_kill_r+0x1c>
 800bbea:	6023      	str	r3, [r4, #0]
 800bbec:	bd38      	pop	{r3, r4, r5, pc}
 800bbee:	bf00      	nop
 800bbf0:	200004f0 	.word	0x200004f0

0800bbf4 <_getpid_r>:
 800bbf4:	f7f6 b9b8 	b.w	8001f68 <_getpid>

0800bbf8 <__sread>:
 800bbf8:	b510      	push	{r4, lr}
 800bbfa:	460c      	mov	r4, r1
 800bbfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc00:	f000 f894 	bl	800bd2c <_read_r>
 800bc04:	2800      	cmp	r0, #0
 800bc06:	bfab      	itete	ge
 800bc08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc0a:	89a3      	ldrhlt	r3, [r4, #12]
 800bc0c:	181b      	addge	r3, r3, r0
 800bc0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc12:	bfac      	ite	ge
 800bc14:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc16:	81a3      	strhlt	r3, [r4, #12]
 800bc18:	bd10      	pop	{r4, pc}

0800bc1a <__swrite>:
 800bc1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc1e:	461f      	mov	r7, r3
 800bc20:	898b      	ldrh	r3, [r1, #12]
 800bc22:	05db      	lsls	r3, r3, #23
 800bc24:	4605      	mov	r5, r0
 800bc26:	460c      	mov	r4, r1
 800bc28:	4616      	mov	r6, r2
 800bc2a:	d505      	bpl.n	800bc38 <__swrite+0x1e>
 800bc2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc30:	2302      	movs	r3, #2
 800bc32:	2200      	movs	r2, #0
 800bc34:	f000 f868 	bl	800bd08 <_lseek_r>
 800bc38:	89a3      	ldrh	r3, [r4, #12]
 800bc3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc42:	81a3      	strh	r3, [r4, #12]
 800bc44:	4632      	mov	r2, r6
 800bc46:	463b      	mov	r3, r7
 800bc48:	4628      	mov	r0, r5
 800bc4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc4e:	f000 b817 	b.w	800bc80 <_write_r>

0800bc52 <__sseek>:
 800bc52:	b510      	push	{r4, lr}
 800bc54:	460c      	mov	r4, r1
 800bc56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc5a:	f000 f855 	bl	800bd08 <_lseek_r>
 800bc5e:	1c43      	adds	r3, r0, #1
 800bc60:	89a3      	ldrh	r3, [r4, #12]
 800bc62:	bf15      	itete	ne
 800bc64:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc6e:	81a3      	strheq	r3, [r4, #12]
 800bc70:	bf18      	it	ne
 800bc72:	81a3      	strhne	r3, [r4, #12]
 800bc74:	bd10      	pop	{r4, pc}

0800bc76 <__sclose>:
 800bc76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc7a:	f000 b813 	b.w	800bca4 <_close_r>
	...

0800bc80 <_write_r>:
 800bc80:	b538      	push	{r3, r4, r5, lr}
 800bc82:	4d07      	ldr	r5, [pc, #28]	; (800bca0 <_write_r+0x20>)
 800bc84:	4604      	mov	r4, r0
 800bc86:	4608      	mov	r0, r1
 800bc88:	4611      	mov	r1, r2
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	602a      	str	r2, [r5, #0]
 800bc8e:	461a      	mov	r2, r3
 800bc90:	f7f6 f9a9 	bl	8001fe6 <_write>
 800bc94:	1c43      	adds	r3, r0, #1
 800bc96:	d102      	bne.n	800bc9e <_write_r+0x1e>
 800bc98:	682b      	ldr	r3, [r5, #0]
 800bc9a:	b103      	cbz	r3, 800bc9e <_write_r+0x1e>
 800bc9c:	6023      	str	r3, [r4, #0]
 800bc9e:	bd38      	pop	{r3, r4, r5, pc}
 800bca0:	200004f0 	.word	0x200004f0

0800bca4 <_close_r>:
 800bca4:	b538      	push	{r3, r4, r5, lr}
 800bca6:	4d06      	ldr	r5, [pc, #24]	; (800bcc0 <_close_r+0x1c>)
 800bca8:	2300      	movs	r3, #0
 800bcaa:	4604      	mov	r4, r0
 800bcac:	4608      	mov	r0, r1
 800bcae:	602b      	str	r3, [r5, #0]
 800bcb0:	f7f6 f9b5 	bl	800201e <_close>
 800bcb4:	1c43      	adds	r3, r0, #1
 800bcb6:	d102      	bne.n	800bcbe <_close_r+0x1a>
 800bcb8:	682b      	ldr	r3, [r5, #0]
 800bcba:	b103      	cbz	r3, 800bcbe <_close_r+0x1a>
 800bcbc:	6023      	str	r3, [r4, #0]
 800bcbe:	bd38      	pop	{r3, r4, r5, pc}
 800bcc0:	200004f0 	.word	0x200004f0

0800bcc4 <_fstat_r>:
 800bcc4:	b538      	push	{r3, r4, r5, lr}
 800bcc6:	4d07      	ldr	r5, [pc, #28]	; (800bce4 <_fstat_r+0x20>)
 800bcc8:	2300      	movs	r3, #0
 800bcca:	4604      	mov	r4, r0
 800bccc:	4608      	mov	r0, r1
 800bcce:	4611      	mov	r1, r2
 800bcd0:	602b      	str	r3, [r5, #0]
 800bcd2:	f7f6 f9b0 	bl	8002036 <_fstat>
 800bcd6:	1c43      	adds	r3, r0, #1
 800bcd8:	d102      	bne.n	800bce0 <_fstat_r+0x1c>
 800bcda:	682b      	ldr	r3, [r5, #0]
 800bcdc:	b103      	cbz	r3, 800bce0 <_fstat_r+0x1c>
 800bcde:	6023      	str	r3, [r4, #0]
 800bce0:	bd38      	pop	{r3, r4, r5, pc}
 800bce2:	bf00      	nop
 800bce4:	200004f0 	.word	0x200004f0

0800bce8 <_isatty_r>:
 800bce8:	b538      	push	{r3, r4, r5, lr}
 800bcea:	4d06      	ldr	r5, [pc, #24]	; (800bd04 <_isatty_r+0x1c>)
 800bcec:	2300      	movs	r3, #0
 800bcee:	4604      	mov	r4, r0
 800bcf0:	4608      	mov	r0, r1
 800bcf2:	602b      	str	r3, [r5, #0]
 800bcf4:	f7f6 f9af 	bl	8002056 <_isatty>
 800bcf8:	1c43      	adds	r3, r0, #1
 800bcfa:	d102      	bne.n	800bd02 <_isatty_r+0x1a>
 800bcfc:	682b      	ldr	r3, [r5, #0]
 800bcfe:	b103      	cbz	r3, 800bd02 <_isatty_r+0x1a>
 800bd00:	6023      	str	r3, [r4, #0]
 800bd02:	bd38      	pop	{r3, r4, r5, pc}
 800bd04:	200004f0 	.word	0x200004f0

0800bd08 <_lseek_r>:
 800bd08:	b538      	push	{r3, r4, r5, lr}
 800bd0a:	4d07      	ldr	r5, [pc, #28]	; (800bd28 <_lseek_r+0x20>)
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	4608      	mov	r0, r1
 800bd10:	4611      	mov	r1, r2
 800bd12:	2200      	movs	r2, #0
 800bd14:	602a      	str	r2, [r5, #0]
 800bd16:	461a      	mov	r2, r3
 800bd18:	f7f6 f9a8 	bl	800206c <_lseek>
 800bd1c:	1c43      	adds	r3, r0, #1
 800bd1e:	d102      	bne.n	800bd26 <_lseek_r+0x1e>
 800bd20:	682b      	ldr	r3, [r5, #0]
 800bd22:	b103      	cbz	r3, 800bd26 <_lseek_r+0x1e>
 800bd24:	6023      	str	r3, [r4, #0]
 800bd26:	bd38      	pop	{r3, r4, r5, pc}
 800bd28:	200004f0 	.word	0x200004f0

0800bd2c <_read_r>:
 800bd2c:	b538      	push	{r3, r4, r5, lr}
 800bd2e:	4d07      	ldr	r5, [pc, #28]	; (800bd4c <_read_r+0x20>)
 800bd30:	4604      	mov	r4, r0
 800bd32:	4608      	mov	r0, r1
 800bd34:	4611      	mov	r1, r2
 800bd36:	2200      	movs	r2, #0
 800bd38:	602a      	str	r2, [r5, #0]
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	f7f6 f936 	bl	8001fac <_read>
 800bd40:	1c43      	adds	r3, r0, #1
 800bd42:	d102      	bne.n	800bd4a <_read_r+0x1e>
 800bd44:	682b      	ldr	r3, [r5, #0]
 800bd46:	b103      	cbz	r3, 800bd4a <_read_r+0x1e>
 800bd48:	6023      	str	r3, [r4, #0]
 800bd4a:	bd38      	pop	{r3, r4, r5, pc}
 800bd4c:	200004f0 	.word	0x200004f0

0800bd50 <_init>:
 800bd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd52:	bf00      	nop
 800bd54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd56:	bc08      	pop	{r3}
 800bd58:	469e      	mov	lr, r3
 800bd5a:	4770      	bx	lr

0800bd5c <_fini>:
 800bd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd5e:	bf00      	nop
 800bd60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd62:	bc08      	pop	{r3}
 800bd64:	469e      	mov	lr, r3
 800bd66:	4770      	bx	lr
