
Motor-Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800bdd8  0800bdd8  0001bdd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c254  0800c254  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800c254  0800c254  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c254  0800c254  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c254  0800c254  0001c254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c258  0800c258  0001c258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c25c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000328  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000508  20000508  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d3a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ce8  00000000  00000000  00037f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  0003ac30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012a8  00000000  00000000  0003c000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000231f4  00000000  00000000  0003d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000196f6  00000000  00000000  0006049c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6889  00000000  00000000  00079b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015041b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006638  00000000  00000000  0015046c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bdc0 	.word	0x0800bdc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800bdc0 	.word	0x0800bdc0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <Read16>:
uint16_t ina219_calibrationValue;
int16_t ina219_currentDivider_mA;
int16_t ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af04      	add	r7, sp, #16
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c10:	9302      	str	r3, [sp, #8]
 8000c12:	2302      	movs	r3, #2
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	2180      	movs	r1, #128	; 0x80
 8000c20:	f003 fa2a 	bl	8004078 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8000c24:	7b3b      	ldrb	r3, [r7, #12]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	7b7b      	ldrb	r3, [r7, #13]
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	b29b      	uxth	r3, r3
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af04      	add	r7, sp, #16
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8000c4c:	883b      	ldrh	r3, [r7, #0]
 8000c4e:	0a1b      	lsrs	r3, r3, #8
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8000c56:	883b      	ldrh	r3, [r7, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6818      	ldr	r0, [r3, #0]
 8000c60:	78fb      	ldrb	r3, [r7, #3]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c68:	9302      	str	r3, [sp, #8]
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2301      	movs	r3, #1
 8000c76:	2180      	movs	r1, #128	; 0x80
 8000c78:	f003 f8ea 	bl	8003e50 <HAL_I2C_Mem_Write>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffb2 	bl	8000bf8 <Read16>
 8000c94:	4603      	mov	r3, r0
 8000c96:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8000c98:	89fb      	ldrh	r3, [r7, #14]
 8000c9a:	08db      	lsrs	r3, r3, #3
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	b29b      	uxth	r3, r3

}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b084      	sub	sp, #16
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8000cb2:	2104      	movs	r1, #4
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff9f 	bl	8000bf8 <Read16>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	81fb      	strh	r3, [r7, #14]

	return (result );
 8000cbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ffe8 	bl	8000caa <INA219_ReadCurrent_raw>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 8000cde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <INA219_ReadCurrent+0x2c>)
 8000ce4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ce8:	fb93 f3f2 	sdiv	r3, r3, r2
 8000cec:	b21b      	sxth	r3, r3
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200001fe 	.word	0x200001fe
 8000cfc:	00000000 	.word	0x00000000

08000d00 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8000d08:	2101      	movs	r1, #1
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ff74 	bl	8000bf8 <Read16>
 8000d10:	4603      	mov	r3, r0
 8000d12:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 8000d14:	89fb      	ldrh	r3, [r7, #14]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fc0c 	bl	8000534 <__aeabi_i2d>
 8000d1c:	a308      	add	r3, pc, #32	; (adr r3, 8000d40 <INA219_ReadShuntVolage+0x40>)
 8000d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d22:	f7ff fc71 	bl	8000608 <__aeabi_dmul>
 8000d26:	4602      	mov	r2, r0
 8000d28:	460b      	mov	r3, r1
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f7ff ff43 	bl	8000bb8 <__aeabi_d2uiz>
 8000d32:	4603      	mov	r3, r0
 8000d34:	b29b      	uxth	r3, r3
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	47ae147b 	.word	0x47ae147b
 8000d44:	3f847ae1 	.word	0x3f847ae1

08000d48 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8000d50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d54:	2100      	movs	r1, #0
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ff70 	bl	8000c3c <Write16>
	HAL_Delay(1);
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f001 faa3 	bl	80022a8 <HAL_Delay>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	460b      	mov	r3, r1
 8000d74:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8000d76:	887b      	ldrh	r3, [r7, #2]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2105      	movs	r1, #5
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff5d 	bl	8000c3c <Write16>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	460b      	mov	r3, r1
 8000d94:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8000d96:	887b      	ldrh	r3, [r7, #2]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff4d 	bl	8000c3c <Write16>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8000db4:	f643 139f 	movw	r3, #14751	; 0x399f
 8000db8:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <INA219_setCalibration_32V_2A+0x40>)
 8000dbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dc0:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <INA219_setCalibration_32V_2A+0x44>)
 8000dc4:	220a      	movs	r2, #10
 8000dc6:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <INA219_setCalibration_32V_2A+0x48>)
 8000dca:	2202      	movs	r2, #2
 8000dcc:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <INA219_setCalibration_32V_2A+0x40>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ffc8 	bl	8000d6a <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8000dda:	89fb      	ldrh	r3, [r7, #14]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffd3 	bl	8000d8a <INA219_setConfig>
}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200001fc 	.word	0x200001fc
 8000df0:	200001fe 	.word	0x200001fe
 8000df4:	20000200 	.word	0x20000200

08000df8 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	4613      	mov	r3, r2
 8000e04:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	68ba      	ldr	r2, [r7, #8]
 8000e0a:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	79fa      	ldrb	r2, [r7, #7]
 8000e10:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <INA219_Init+0x5c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <INA219_Init+0x60>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	b299      	uxth	r1, r3
 8000e26:	2302      	movs	r3, #2
 8000e28:	2203      	movs	r2, #3
 8000e2a:	68b8      	ldr	r0, [r7, #8]
 8000e2c:	f003 fa3e 	bl	80042ac <HAL_I2C_IsDeviceReady>
 8000e30:	4603      	mov	r3, r0
 8000e32:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8000e34:	7dfb      	ldrb	r3, [r7, #23]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d107      	bne.n	8000e4a <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	f7ff ff84 	bl	8000d48 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f7ff ffb3 	bl	8000dac <INA219_setCalibration_32V_2A>

		return 1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <INA219_Init+0x54>
	}

	else
	{
		return 0;
 8000e4a:	2300      	movs	r3, #0
	}
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200001fe 	.word	0x200001fe
 8000e58:	20000200 	.word	0x20000200
 8000e5c:	00000000 	.word	0x00000000

08000e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e64:	b0c5      	sub	sp, #276	; 0x114
 8000e66:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e68:	f001 f9b8 	bl	80021dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6c:	f000 fac8 	bl	8001400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e70:	f000 fd64 	bl	800193c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e74:	f000 fd44 	bl	8001900 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e78:	f000 fb2e 	bl	80014d8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e7c:	f000 fbea 	bl	8001654 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e80:	f000 fc3a 	bl	80016f8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000e84:	f000 fd0a 	bl	800189c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000e88:	f000 fcb8 	bl	80017fc <MX_TIM3_Init>
  MX_I2C1_Init();
 8000e8c:	f000 fba4 	bl	80015d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	uint32_t ADC_Value[2];
	uint8_t txbuffer[200];

	uint8_t input = SLIDERS;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
	HAL_UART_Receive_IT(&huart2, UART_RX_Byte, 1);
 8000e96:	2201      	movs	r2, #1
 8000e98:	49c9      	ldr	r1, [pc, #804]	; (80011c0 <main+0x360>)
 8000e9a:	48ca      	ldr	r0, [pc, #808]	; (80011c4 <main+0x364>)
 8000e9c:	f006 fe8e 	bl	8007bbc <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8000ea0:	48c9      	ldr	r0, [pc, #804]	; (80011c8 <main+0x368>)
 8000ea2:	f005 fb97 	bl	80065d4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000ea6:	48c9      	ldr	r0, [pc, #804]	; (80011cc <main+0x36c>)
 8000ea8:	f005 fb94 	bl	80065d4 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, ADC_Value, 2); // start adc in DMA mode
 8000eac:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	48c6      	ldr	r0, [pc, #792]	; (80011d0 <main+0x370>)
 8000eb6:	f001 fc33 	bl	8002720 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000eba:	2100      	movs	r1, #0
 8000ebc:	48c5      	ldr	r0, [pc, #788]	; (80011d4 <main+0x374>)
 8000ebe:	f005 fc5b 	bl	8006778 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	48c3      	ldr	r0, [pc, #780]	; (80011d4 <main+0x374>)
 8000ec6:	f005 fc57 	bl	8006778 <HAL_TIM_PWM_Start>

	for (int i = 0; i < 100; i++) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000ed0:	e00c      	b.n	8000eec <main+0x8c>
		txbuffer[i] = (uint8_t) *" ";
 8000ed2:	2120      	movs	r1, #32
 8000ed4:	f107 0208 	add.w	r2, r7, #8
 8000ed8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000edc:	4413      	add	r3, r2
 8000ede:	460a      	mov	r2, r1
 8000ee0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++) {
 8000ee2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000eec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000ef0:	2b63      	cmp	r3, #99	; 0x63
 8000ef2:	ddee      	ble.n	8000ed2 <main+0x72>
	}

	while (!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS)) {
 8000ef4:	bf00      	nop
 8000ef6:	2240      	movs	r2, #64	; 0x40
 8000ef8:	49b7      	ldr	r1, [pc, #732]	; (80011d8 <main+0x378>)
 8000efa:	48b8      	ldr	r0, [pc, #736]	; (80011dc <main+0x37c>)
 8000efc:	f7ff ff7c 	bl	8000df8 <INA219_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0f7      	beq.n	8000ef6 <main+0x96>

	}

	//INA219_setPowerMode(&ina219, INA219_CONFIG_MODE_ADCOFF);

	vbus = INA219_ReadBusVoltage(&ina219);
 8000f06:	48b5      	ldr	r0, [pc, #724]	; (80011dc <main+0x37c>)
 8000f08:	f7ff febc 	bl	8000c84 <INA219_ReadBusVoltage>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	4bb3      	ldr	r3, [pc, #716]	; (80011e0 <main+0x380>)
 8000f12:	801a      	strh	r2, [r3, #0]
	vshunt = INA219_ReadShuntVolage(&ina219);
 8000f14:	48b1      	ldr	r0, [pc, #708]	; (80011dc <main+0x37c>)
 8000f16:	f7ff fef3 	bl	8000d00 <INA219_ReadShuntVolage>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	4bb1      	ldr	r3, [pc, #708]	; (80011e4 <main+0x384>)
 8000f20:	801a      	strh	r2, [r3, #0]
	current = INA219_ReadCurrent(&ina219);
 8000f22:	48ae      	ldr	r0, [pc, #696]	; (80011dc <main+0x37c>)
 8000f24:	f7ff fed2 	bl	8000ccc <INA219_ReadCurrent>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4bae      	ldr	r3, [pc, #696]	; (80011e8 <main+0x388>)
 8000f2e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		double slider1 = (ADC_Value[0] / 2047.0) - 1.0;
 8000f30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff faed 	bl	8000514 <__aeabi_ui2d>
 8000f3a:	a397      	add	r3, pc, #604	; (adr r3, 8001198 <main+0x338>)
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f7ff fc8c 	bl	800085c <__aeabi_ddiv>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	4ba6      	ldr	r3, [pc, #664]	; (80011ec <main+0x38c>)
 8000f52:	f7ff f9a1 	bl	8000298 <__aeabi_dsub>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		double slider2 = (ADC_Value[1] / 2047.0) - 1.0;
 8000f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fad6 	bl	8000514 <__aeabi_ui2d>
 8000f68:	a38b      	add	r3, pc, #556	; (adr r3, 8001198 <main+0x338>)
 8000f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6e:	f7ff fc75 	bl	800085c <__aeabi_ddiv>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b9b      	ldr	r3, [pc, #620]	; (80011ec <main+0x38c>)
 8000f80:	f7ff f98a 	bl	8000298 <__aeabi_dsub>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8

		if (input == SLIDERS) {
 8000f8c:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f040 8140 	bne.w	8001216 <main+0x3b6>
			if (slider1 > THRESHOLD_OFF) {
 8000f96:	a382      	add	r3, pc, #520	; (adr r3, 80011a0 <main+0x340>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8000fa0:	f7ff fdc2 	bl	8000b28 <__aeabi_dcmpgt>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d02e      	beq.n	8001008 <main+0x1a8>
				HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, 1);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	4890      	ldr	r0, [pc, #576]	; (80011f0 <main+0x390>)
 8000fb0:	f002 fea6 	bl	8003d00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_a_rev_GPIO_Port, Motor_a_rev_Pin, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fba:	488e      	ldr	r0, [pc, #568]	; (80011f4 <main+0x394>)
 8000fbc:	f002 fea0 	bl	8003d00 <HAL_GPIO_WritePin>
				TIM2->CCR1 = ((slider1 - THRESHOLD_OFF)
 8000fc0:	a377      	add	r3, pc, #476	; (adr r3, 80011a0 <main+0x340>)
 8000fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8000fca:	f7ff f965 	bl	8000298 <__aeabi_dsub>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
						/ (THRESHOLD_FULL - THRESHOLD_OFF)) * 999.0;
 8000fd6:	a374      	add	r3, pc, #464	; (adr r3, 80011a8 <main+0x348>)
 8000fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fdc:	f7ff fc3e 	bl	800085c <__aeabi_ddiv>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	a371      	add	r3, pc, #452	; (adr r3, 80011b0 <main+0x350>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	f7ff fb0b 	bl	8000608 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
				TIM2->CCR1 = ((slider1 - THRESHOLD_OFF)
 8000ff6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f7ff fddb 	bl	8000bb8 <__aeabi_d2uiz>
 8001002:	4603      	mov	r3, r0
 8001004:	6363      	str	r3, [r4, #52]	; 0x34
 8001006:	e04d      	b.n	80010a4 <main+0x244>
			} else if (slider1 < -THRESHOLD_OFF) {
 8001008:	a36b      	add	r3, pc, #428	; (adr r3, 80011b8 <main+0x358>)
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001012:	f7ff fd6b 	bl	8000aec <__aeabi_dcmplt>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d034      	beq.n	8001086 <main+0x226>
				HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	4873      	ldr	r0, [pc, #460]	; (80011f0 <main+0x390>)
 8001022:	f002 fe6d 	bl	8003d00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_a_rev_GPIO_Port, Motor_a_rev_Pin, 1);
 8001026:	2201      	movs	r2, #1
 8001028:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102c:	4871      	ldr	r0, [pc, #452]	; (80011f4 <main+0x394>)
 800102e:	f002 fe67 	bl	8003d00 <HAL_GPIO_WritePin>
				TIM2->CCR1 = ((-slider1 - THRESHOLD_OFF)
 8001032:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
 8001036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800103a:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 800103e:	a358      	add	r3, pc, #352	; (adr r3, 80011a0 <main+0x340>)
 8001040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001044:	4628      	mov	r0, r5
 8001046:	4631      	mov	r1, r6
 8001048:	f7ff f926 	bl	8000298 <__aeabi_dsub>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
						/ (THRESHOLD_FULL - THRESHOLD_OFF)) * 999.0;
 8001054:	a354      	add	r3, pc, #336	; (adr r3, 80011a8 <main+0x348>)
 8001056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105a:	f7ff fbff 	bl	800085c <__aeabi_ddiv>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	a352      	add	r3, pc, #328	; (adr r3, 80011b0 <main+0x350>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff facc 	bl	8000608 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
				TIM2->CCR1 = ((-slider1 - THRESHOLD_OFF)
 8001074:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001078:	4610      	mov	r0, r2
 800107a:	4619      	mov	r1, r3
 800107c:	f7ff fd9c 	bl	8000bb8 <__aeabi_d2uiz>
 8001080:	4603      	mov	r3, r0
 8001082:	6363      	str	r3, [r4, #52]	; 0x34
 8001084:	e00e      	b.n	80010a4 <main+0x244>
			} else {
				HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	4859      	ldr	r0, [pc, #356]	; (80011f0 <main+0x390>)
 800108c:	f002 fe38 	bl	8003d00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_a_rev_GPIO_Port, Motor_a_rev_Pin, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001096:	4857      	ldr	r0, [pc, #348]	; (80011f4 <main+0x394>)
 8001098:	f002 fe32 	bl	8003d00 <HAL_GPIO_WritePin>
				TIM2->CCR1 = 0;
 800109c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010a0:	2200      	movs	r2, #0
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34
			}

			if (slider2 > THRESHOLD_OFF) {
 80010a4:	a33e      	add	r3, pc, #248	; (adr r3, 80011a0 <main+0x340>)
 80010a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010aa:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80010ae:	f7ff fd3b 	bl	8000b28 <__aeabi_dcmpgt>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d02d      	beq.n	8001114 <main+0x2b4>
				HAL_GPIO_WritePin(Motor_b_fwd_GPIO_Port, Motor_b_fwd_Pin, 1);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2104      	movs	r1, #4
 80010bc:	484d      	ldr	r0, [pc, #308]	; (80011f4 <main+0x394>)
 80010be:	f002 fe1f 	bl	8003d00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_b_rev_GPIO_Port, Motor_b_rev_Pin, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2108      	movs	r1, #8
 80010c6:	484b      	ldr	r0, [pc, #300]	; (80011f4 <main+0x394>)
 80010c8:	f002 fe1a 	bl	8003d00 <HAL_GPIO_WritePin>
				TIM2->CCR2 = ((slider2 - THRESHOLD_OFF)
 80010cc:	a334      	add	r3, pc, #208	; (adr r3, 80011a0 <main+0x340>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80010d6:	f7ff f8df 	bl	8000298 <__aeabi_dsub>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
						/ (THRESHOLD_FULL - THRESHOLD_OFF)) * 999.0;
 80010e2:	a331      	add	r3, pc, #196	; (adr r3, 80011a8 <main+0x348>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	f7ff fbb8 	bl	800085c <__aeabi_ddiv>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	a32e      	add	r3, pc, #184	; (adr r3, 80011b0 <main+0x350>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff fa85 	bl	8000608 <__aeabi_dmul>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
				TIM2->CCR2 = ((slider2 - THRESHOLD_OFF)
 8001102:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fd55 	bl	8000bb8 <__aeabi_d2uiz>
 800110e:	4603      	mov	r3, r0
 8001110:	63a3      	str	r3, [r4, #56]	; 0x38
 8001112:	e0f5      	b.n	8001300 <main+0x4a0>
			} else if (slider2 < -THRESHOLD_OFF) {
 8001114:	a328      	add	r3, pc, #160	; (adr r3, 80011b8 <main+0x358>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800111e:	f7ff fce5 	bl	8000aec <__aeabi_dcmplt>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d067      	beq.n	80011f8 <main+0x398>
				HAL_GPIO_WritePin(Motor_b_fwd_GPIO_Port, Motor_b_fwd_Pin, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2104      	movs	r1, #4
 800112c:	4831      	ldr	r0, [pc, #196]	; (80011f4 <main+0x394>)
 800112e:	f002 fde7 	bl	8003d00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_b_rev_GPIO_Port, Motor_b_rev_Pin, 1);
 8001132:	2201      	movs	r2, #1
 8001134:	2108      	movs	r1, #8
 8001136:	482f      	ldr	r0, [pc, #188]	; (80011f4 <main+0x394>)
 8001138:	f002 fde2 	bl	8003d00 <HAL_GPIO_WritePin>
				TIM2->CCR2 = ((-slider2 - THRESHOLD_OFF)
 800113c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001146:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	a314      	add	r3, pc, #80	; (adr r3, 80011a0 <main+0x340>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001156:	f7ff f89f 	bl	8000298 <__aeabi_dsub>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
						/ (THRESHOLD_FULL - THRESHOLD_OFF)) * 999.0;
 8001162:	a311      	add	r3, pc, #68	; (adr r3, 80011a8 <main+0x348>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff fb78 	bl	800085c <__aeabi_ddiv>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	a30e      	add	r3, pc, #56	; (adr r3, 80011b0 <main+0x350>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff fa45 	bl	8000608 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
				TIM2->CCR2 = ((-slider2 - THRESHOLD_OFF)
 8001182:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff fd15 	bl	8000bb8 <__aeabi_d2uiz>
 800118e:	4603      	mov	r3, r0
 8001190:	63a3      	str	r3, [r4, #56]	; 0x38
 8001192:	e0b5      	b.n	8001300 <main+0x4a0>
 8001194:	f3af 8000 	nop.w
 8001198:	00000000 	.word	0x00000000
 800119c:	409ffc00 	.word	0x409ffc00
 80011a0:	9999999a 	.word	0x9999999a
 80011a4:	3fc99999 	.word	0x3fc99999
 80011a8:	66666666 	.word	0x66666666
 80011ac:	3fe66666 	.word	0x3fe66666
 80011b0:	00000000 	.word	0x00000000
 80011b4:	408f3800 	.word	0x408f3800
 80011b8:	9999999a 	.word	0x9999999a
 80011bc:	bfc99999 	.word	0xbfc99999
 80011c0:	200004c0 	.word	0x200004c0
 80011c4:	200003d0 	.word	0x200003d0
 80011c8:	200002ec 	.word	0x200002ec
 80011cc:	20000384 	.word	0x20000384
 80011d0:	20000204 	.word	0x20000204
 80011d4:	20000338 	.word	0x20000338
 80011d8:	20000298 	.word	0x20000298
 80011dc:	200004d4 	.word	0x200004d4
 80011e0:	200004dc 	.word	0x200004dc
 80011e4:	200004de 	.word	0x200004de
 80011e8:	200004e0 	.word	0x200004e0
 80011ec:	3ff00000 	.word	0x3ff00000
 80011f0:	48000400 	.word	0x48000400
 80011f4:	48000800 	.word	0x48000800
			} else {
				HAL_GPIO_WritePin(Motor_b_fwd_GPIO_Port, Motor_b_fwd_Pin, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2104      	movs	r1, #4
 80011fc:	4872      	ldr	r0, [pc, #456]	; (80013c8 <main+0x568>)
 80011fe:	f002 fd7f 	bl	8003d00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_b_rev_GPIO_Port, Motor_b_rev_Pin, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2108      	movs	r1, #8
 8001206:	4870      	ldr	r0, [pc, #448]	; (80013c8 <main+0x568>)
 8001208:	f002 fd7a 	bl	8003d00 <HAL_GPIO_WritePin>
				TIM2->CCR2 = 0;
 800120c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001210:	2200      	movs	r2, #0
 8001212:	639a      	str	r2, [r3, #56]	; 0x38
 8001214:	e074      	b.n	8001300 <main+0x4a0>
			}
		} else if (input == UART) {
 8001216:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 800121a:	2b01      	cmp	r3, #1
 800121c:	d170      	bne.n	8001300 <main+0x4a0>

			if (UART_RX_Motor_a > 0) {
 800121e:	4b6b      	ldr	r3, [pc, #428]	; (80013cc <main+0x56c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	dd10      	ble.n	8001248 <main+0x3e8>
				HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, 1);
 8001226:	2201      	movs	r2, #1
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	4869      	ldr	r0, [pc, #420]	; (80013d0 <main+0x570>)
 800122c:	f002 fd68 	bl	8003d00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_a_rev_GPIO_Port, Motor_a_rev_Pin, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001236:	4864      	ldr	r0, [pc, #400]	; (80013c8 <main+0x568>)
 8001238:	f002 fd62 	bl	8003d00 <HAL_GPIO_WritePin>
				TIM2->CCR1 = UART_RX_Motor_a;
 800123c:	4b63      	ldr	r3, [pc, #396]	; (80013cc <main+0x56c>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001244:	635a      	str	r2, [r3, #52]	; 0x34
 8001246:	e024      	b.n	8001292 <main+0x432>
			} else if (UART_RX_Motor_a < 0) {
 8001248:	4b60      	ldr	r3, [pc, #384]	; (80013cc <main+0x56c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	da11      	bge.n	8001274 <main+0x414>
				HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	485e      	ldr	r0, [pc, #376]	; (80013d0 <main+0x570>)
 8001256:	f002 fd53 	bl	8003d00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_a_rev_GPIO_Port, Motor_a_rev_Pin, 1);
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001260:	4859      	ldr	r0, [pc, #356]	; (80013c8 <main+0x568>)
 8001262:	f002 fd4d 	bl	8003d00 <HAL_GPIO_WritePin>
				TIM2->CCR1 = -UART_RX_Motor_a;
 8001266:	4b59      	ldr	r3, [pc, #356]	; (80013cc <main+0x56c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	425a      	negs	r2, r3
 800126c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001270:	635a      	str	r2, [r3, #52]	; 0x34
 8001272:	e00e      	b.n	8001292 <main+0x432>
			} else {
				HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	4855      	ldr	r0, [pc, #340]	; (80013d0 <main+0x570>)
 800127a:	f002 fd41 	bl	8003d00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_a_rev_GPIO_Port, Motor_a_rev_Pin, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001284:	4850      	ldr	r0, [pc, #320]	; (80013c8 <main+0x568>)
 8001286:	f002 fd3b 	bl	8003d00 <HAL_GPIO_WritePin>
				TIM2->CCR1 = 0;
 800128a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800128e:	2200      	movs	r2, #0
 8001290:	635a      	str	r2, [r3, #52]	; 0x34
			}

			if (UART_RX_Motor_b > 0) {
 8001292:	4b50      	ldr	r3, [pc, #320]	; (80013d4 <main+0x574>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	dd0f      	ble.n	80012ba <main+0x45a>
				HAL_GPIO_WritePin(Motor_b_fwd_GPIO_Port, Motor_b_fwd_Pin, 1);
 800129a:	2201      	movs	r2, #1
 800129c:	2104      	movs	r1, #4
 800129e:	484a      	ldr	r0, [pc, #296]	; (80013c8 <main+0x568>)
 80012a0:	f002 fd2e 	bl	8003d00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_b_rev_GPIO_Port, Motor_b_rev_Pin, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2108      	movs	r1, #8
 80012a8:	4847      	ldr	r0, [pc, #284]	; (80013c8 <main+0x568>)
 80012aa:	f002 fd29 	bl	8003d00 <HAL_GPIO_WritePin>
				TIM2->CCR2 = UART_RX_Motor_b;
 80012ae:	4b49      	ldr	r3, [pc, #292]	; (80013d4 <main+0x574>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012b6:	639a      	str	r2, [r3, #56]	; 0x38
 80012b8:	e022      	b.n	8001300 <main+0x4a0>
			} else if (UART_RX_Motor_b < 0) {
 80012ba:	4b46      	ldr	r3, [pc, #280]	; (80013d4 <main+0x574>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	da10      	bge.n	80012e4 <main+0x484>
				HAL_GPIO_WritePin(Motor_b_fwd_GPIO_Port, Motor_b_fwd_Pin, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2104      	movs	r1, #4
 80012c6:	4840      	ldr	r0, [pc, #256]	; (80013c8 <main+0x568>)
 80012c8:	f002 fd1a 	bl	8003d00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_b_rev_GPIO_Port, Motor_b_rev_Pin, 1);
 80012cc:	2201      	movs	r2, #1
 80012ce:	2108      	movs	r1, #8
 80012d0:	483d      	ldr	r0, [pc, #244]	; (80013c8 <main+0x568>)
 80012d2:	f002 fd15 	bl	8003d00 <HAL_GPIO_WritePin>
				TIM2->CCR2 = -UART_RX_Motor_b;
 80012d6:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <main+0x574>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	425a      	negs	r2, r3
 80012dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012e0:	639a      	str	r2, [r3, #56]	; 0x38
 80012e2:	e00d      	b.n	8001300 <main+0x4a0>
			} else {
				HAL_GPIO_WritePin(Motor_b_fwd_GPIO_Port, Motor_b_fwd_Pin, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2104      	movs	r1, #4
 80012e8:	4837      	ldr	r0, [pc, #220]	; (80013c8 <main+0x568>)
 80012ea:	f002 fd09 	bl	8003d00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_b_rev_GPIO_Port, Motor_b_rev_Pin, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2108      	movs	r1, #8
 80012f2:	4835      	ldr	r0, [pc, #212]	; (80013c8 <main+0x568>)
 80012f4:	f002 fd04 	bl	8003d00 <HAL_GPIO_WritePin>
				TIM2->CCR2 = 0;
 80012f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012fc:	2200      	movs	r2, #0
 80012fe:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}

		if (TIM3_flag == 1) {
 8001300:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <main+0x578>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d155      	bne.n	80013b6 <main+0x556>
			TIM3_flag = 0;
 800130a:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <main+0x578>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
			vbus = INA219_ReadBusVoltage(&ina219);
 8001310:	4832      	ldr	r0, [pc, #200]	; (80013dc <main+0x57c>)
 8001312:	f7ff fcb7 	bl	8000c84 <INA219_ReadBusVoltage>
 8001316:	4603      	mov	r3, r0
 8001318:	b21a      	sxth	r2, r3
 800131a:	4b31      	ldr	r3, [pc, #196]	; (80013e0 <main+0x580>)
 800131c:	801a      	strh	r2, [r3, #0]
			vshunt = INA219_ReadShuntVolage(&ina219);
 800131e:	482f      	ldr	r0, [pc, #188]	; (80013dc <main+0x57c>)
 8001320:	f7ff fcee 	bl	8000d00 <INA219_ReadShuntVolage>
 8001324:	4603      	mov	r3, r0
 8001326:	b21a      	sxth	r2, r3
 8001328:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <main+0x584>)
 800132a:	801a      	strh	r2, [r3, #0]
			current = INA219_ReadCurrent(&ina219);
 800132c:	482b      	ldr	r0, [pc, #172]	; (80013dc <main+0x57c>)
 800132e:	f7ff fccd 	bl	8000ccc <INA219_ReadCurrent>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <main+0x588>)
 8001338:	801a      	strh	r2, [r3, #0]
			UART_Counter +=1;
 800133a:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <main+0x58c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	4a2a      	ldr	r2, [pc, #168]	; (80013ec <main+0x58c>)
 8001342:	6013      	str	r3, [r2, #0]
			sprintf((char*) txbuffer, "Duty Cycles: %04d, %04d\n"
					                  "Current:     %05.1f mA, %05.1f mA\n"
									  "Vbus:        %04d, %04d\n"
									  "Vshunt:      %04d, %04d\n", (int) TIM2->CCR1, (int) TIM2->CCR2, currentmA, currentmA, vbus, vbus, vshunt, vshunt);
 8001344:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			sprintf((char*) txbuffer, "Duty Cycles: %04d, %04d\n"
 800134a:	469c      	mov	ip, r3
									  "Vshunt:      %04d, %04d\n", (int) TIM2->CCR1, (int) TIM2->CCR2, currentmA, currentmA, vbus, vbus, vshunt, vshunt);
 800134c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			sprintf((char*) txbuffer, "Duty Cycles: %04d, %04d\n"
 8001352:	469e      	mov	lr, r3
 8001354:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <main+0x590>)
 8001356:	e9d3 8900 	ldrd	r8, r9, [r3]
 800135a:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <main+0x590>)
 800135c:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <main+0x580>)
 8001362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001366:	461a      	mov	r2, r3
 8001368:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <main+0x580>)
 800136a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136e:	4619      	mov	r1, r3
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <main+0x584>)
 8001372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001376:	461c      	mov	r4, r3
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <main+0x584>)
 800137a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137e:	f107 0008 	add.w	r0, r7, #8
 8001382:	9307      	str	r3, [sp, #28]
 8001384:	9406      	str	r4, [sp, #24]
 8001386:	9105      	str	r1, [sp, #20]
 8001388:	9204      	str	r2, [sp, #16]
 800138a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800138e:	e9cd 8900 	strd	r8, r9, [sp]
 8001392:	4673      	mov	r3, lr
 8001394:	4662      	mov	r2, ip
 8001396:	4917      	ldr	r1, [pc, #92]	; (80013f4 <main+0x594>)
 8001398:	f008 fa98 	bl	80098cc <siprintf>
//			sprintf((char*) txbuffer, "%d,%d\n", (int) UART_Counter, current);
			HAL_UART_Transmit(&huart2, txbuffer, strlen((char*) txbuffer), 50);
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7fe ff1d 	bl	80001e0 <strlen>
 80013a6:	4603      	mov	r3, r0
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	f107 0108 	add.w	r1, r7, #8
 80013ae:	2332      	movs	r3, #50	; 0x32
 80013b0:	4811      	ldr	r0, [pc, #68]	; (80013f8 <main+0x598>)
 80013b2:	f006 fb79 	bl	8007aa8 <HAL_UART_Transmit>
		}
		if (UART_RX_Flag == 1) {
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <main+0x59c>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	f47f adb8 	bne.w	8000f30 <main+0xd0>
			UART_RX_Handler();
 80013c0:	f000 fb62 	bl	8001a88 <UART_RX_Handler>
	while (1) {
 80013c4:	e5b4      	b.n	8000f30 <main+0xd0>
 80013c6:	bf00      	nop
 80013c8:	48000800 	.word	0x48000800
 80013cc:	200004c4 	.word	0x200004c4
 80013d0:	48000400 	.word	0x48000400
 80013d4:	200004c8 	.word	0x200004c8
 80013d8:	200004cc 	.word	0x200004cc
 80013dc:	200004d4 	.word	0x200004d4
 80013e0:	200004dc 	.word	0x200004dc
 80013e4:	200004de 	.word	0x200004de
 80013e8:	200004e0 	.word	0x200004e0
 80013ec:	200004d0 	.word	0x200004d0
 80013f0:	200004e8 	.word	0x200004e8
 80013f4:	0800bdd8 	.word	0x0800bdd8
 80013f8:	200003d0 	.word	0x200003d0
 80013fc:	200004c1 	.word	0x200004c1

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b0a6      	sub	sp, #152	; 0x98
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800140a:	2228      	movs	r2, #40	; 0x28
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f007 fdea 	bl	8008fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2258      	movs	r2, #88	; 0x58
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f007 fddc 	bl	8008fe8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001430:	2302      	movs	r3, #2
 8001432:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001434:	2301      	movs	r3, #1
 8001436:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001438:	2310      	movs	r3, #16
 800143a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143e:	2302      	movs	r3, #2
 8001440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001444:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001448:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800144c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001450:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800145e:	4618      	mov	r0, r3
 8001460:	f003 fbb8 	bl	8004bd4 <HAL_RCC_OscConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800146a:	f000 fb7d 	bl	8001b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146e:	230f      	movs	r3, #15
 8001470:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001472:	2302      	movs	r3, #2
 8001474:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800147a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800147e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001484:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001488:	2102      	movs	r1, #2
 800148a:	4618      	mov	r0, r3
 800148c:	f004 fbf6 	bl	8005c7c <HAL_RCC_ClockConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001496:	f000 fb67 	bl	8001b68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <SystemClock_Config+0xd4>)
 800149c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80014a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4618      	mov	r0, r3
 80014bc:	f004 fe14 	bl	80060e8 <HAL_RCCEx_PeriphCLKConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0xca>
  {
    Error_Handler();
 80014c6:	f000 fb4f 	bl	8001b68 <Error_Handler>
  }
}
 80014ca:	bf00      	nop
 80014cc:	3798      	adds	r7, #152	; 0x98
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	003010a2 	.word	0x003010a2

080014d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014fa:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <MX_ADC1_Init+0xfc>)
 80014fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001500:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001502:	4b34      	ldr	r3, [pc, #208]	; (80015d4 <MX_ADC1_Init+0xfc>)
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001508:	4b32      	ldr	r3, [pc, #200]	; (80015d4 <MX_ADC1_Init+0xfc>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800150e:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <MX_ADC1_Init+0xfc>)
 8001510:	2201      	movs	r2, #1
 8001512:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001514:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <MX_ADC1_Init+0xfc>)
 8001516:	2200      	movs	r2, #0
 8001518:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800151a:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <MX_ADC1_Init+0xfc>)
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001522:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <MX_ADC1_Init+0xfc>)
 8001524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001528:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 800152a:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <MX_ADC1_Init+0xfc>)
 800152c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001532:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <MX_ADC1_Init+0xfc>)
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001538:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <MX_ADC1_Init+0xfc>)
 800153a:	2202      	movs	r2, #2
 800153c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800153e:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <MX_ADC1_Init+0xfc>)
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001546:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <MX_ADC1_Init+0xfc>)
 8001548:	2204      	movs	r2, #4
 800154a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800154c:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <MX_ADC1_Init+0xfc>)
 800154e:	2200      	movs	r2, #0
 8001550:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <MX_ADC1_Init+0xfc>)
 8001554:	2200      	movs	r2, #0
 8001556:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001558:	481e      	ldr	r0, [pc, #120]	; (80015d4 <MX_ADC1_Init+0xfc>)
 800155a:	f000 fee7 	bl	800232c <HAL_ADC_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001564:	f000 fb00 	bl	8001b68 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	4818      	ldr	r0, [pc, #96]	; (80015d4 <MX_ADC1_Init+0xfc>)
 8001574:	f001 fcdc 	bl	8002f30 <HAL_ADCEx_MultiModeConfigChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800157e:	f000 faf3 	bl	8001b68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001582:	2301      	movs	r3, #1
 8001584:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001586:	2301      	movs	r3, #1
 8001588:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	4619      	mov	r1, r3
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <MX_ADC1_Init+0xfc>)
 80015a0:	f001 f9da 	bl	8002958 <HAL_ADC_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80015aa:	f000 fadd 	bl	8001b68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015ae:	2302      	movs	r3, #2
 80015b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4619      	mov	r1, r3
 80015ba:	4806      	ldr	r0, [pc, #24]	; (80015d4 <MX_ADC1_Init+0xfc>)
 80015bc:	f001 f9cc 	bl	8002958 <HAL_ADC_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 80015c6:	f000 facf 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	; 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000204 	.word	0x20000204

080015d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <MX_I2C1_Init+0x74>)
 80015de:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <MX_I2C1_Init+0x78>)
 80015e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_I2C1_Init+0x74>)
 80015e4:	f240 220b 	movw	r2, #523	; 0x20b
 80015e8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_I2C1_Init+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <MX_I2C1_Init+0x74>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_I2C1_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <MX_I2C1_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <MX_I2C1_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <MX_I2C1_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_I2C1_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001614:	480d      	ldr	r0, [pc, #52]	; (800164c <MX_I2C1_Init+0x74>)
 8001616:	f002 fb8b 	bl	8003d30 <HAL_I2C_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001620:	f000 faa2 	bl	8001b68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001624:	2100      	movs	r1, #0
 8001626:	4809      	ldr	r0, [pc, #36]	; (800164c <MX_I2C1_Init+0x74>)
 8001628:	f003 fa1c 	bl	8004a64 <HAL_I2CEx_ConfigAnalogFilter>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001632:	f000 fa99 	bl	8001b68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001636:	2100      	movs	r1, #0
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_I2C1_Init+0x74>)
 800163a:	f003 fa5e 	bl	8004afa <HAL_I2CEx_ConfigDigitalFilter>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001644:	f000 fa90 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000298 	.word	0x20000298
 8001650:	40005400 	.word	0x40005400

08001654 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165a:	f107 0310 	add.w	r3, r7, #16
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001672:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <MX_TIM1_Init+0x9c>)
 8001674:	4a1f      	ldr	r2, [pc, #124]	; (80016f4 <MX_TIM1_Init+0xa0>)
 8001676:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <MX_TIM1_Init+0x9c>)
 800167a:	2247      	movs	r2, #71	; 0x47
 800167c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <MX_TIM1_Init+0x9c>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <MX_TIM1_Init+0x9c>)
 8001686:	2263      	movs	r2, #99	; 0x63
 8001688:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <MX_TIM1_Init+0x9c>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_TIM1_Init+0x9c>)
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <MX_TIM1_Init+0x9c>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800169c:	4814      	ldr	r0, [pc, #80]	; (80016f0 <MX_TIM1_Init+0x9c>)
 800169e:	f004 ff41 	bl	8006524 <HAL_TIM_Base_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80016a8:	f000 fa5e 	bl	8001b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	4619      	mov	r1, r3
 80016b8:	480d      	ldr	r0, [pc, #52]	; (80016f0 <MX_TIM1_Init+0x9c>)
 80016ba:	f005 fb9d 	bl	8006df8 <HAL_TIM_ConfigClockSource>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80016c4:	f000 fa50 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016c8:	2320      	movs	r3, #32
 80016ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_TIM1_Init+0x9c>)
 80016da:	f006 f8ed 	bl	80078b8 <HAL_TIMEx_MasterConfigSynchronization>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80016e4:	f000 fa40 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200002ec 	.word	0x200002ec
 80016f4:	40012c00 	.word	0x40012c00

080016f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08e      	sub	sp, #56	; 0x38
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001718:	463b      	mov	r3, r7
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]
 8001726:	615a      	str	r2, [r3, #20]
 8001728:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800172a:	4b33      	ldr	r3, [pc, #204]	; (80017f8 <MX_TIM2_Init+0x100>)
 800172c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001730:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8001732:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <MX_TIM2_Init+0x100>)
 8001734:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001738:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173a:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <MX_TIM2_Init+0x100>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001740:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <MX_TIM2_Init+0x100>)
 8001742:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001746:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001748:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <MX_TIM2_Init+0x100>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174e:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <MX_TIM2_Init+0x100>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001754:	4828      	ldr	r0, [pc, #160]	; (80017f8 <MX_TIM2_Init+0x100>)
 8001756:	f004 fee5 	bl	8006524 <HAL_TIM_Base_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001760:	f000 fa02 	bl	8001b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800176a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800176e:	4619      	mov	r1, r3
 8001770:	4821      	ldr	r0, [pc, #132]	; (80017f8 <MX_TIM2_Init+0x100>)
 8001772:	f005 fb41 	bl	8006df8 <HAL_TIM_ConfigClockSource>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800177c:	f000 f9f4 	bl	8001b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001780:	481d      	ldr	r0, [pc, #116]	; (80017f8 <MX_TIM2_Init+0x100>)
 8001782:	f004 ff97 	bl	80066b4 <HAL_TIM_PWM_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800178c:	f000 f9ec 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	4619      	mov	r1, r3
 800179e:	4816      	ldr	r0, [pc, #88]	; (80017f8 <MX_TIM2_Init+0x100>)
 80017a0:	f006 f88a 	bl	80078b8 <HAL_TIMEx_MasterConfigSynchronization>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80017aa:	f000 f9dd 	bl	8001b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ae:	2360      	movs	r3, #96	; 0x60
 80017b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017be:	463b      	mov	r3, r7
 80017c0:	2200      	movs	r2, #0
 80017c2:	4619      	mov	r1, r3
 80017c4:	480c      	ldr	r0, [pc, #48]	; (80017f8 <MX_TIM2_Init+0x100>)
 80017c6:	f005 fa03 	bl	8006bd0 <HAL_TIM_PWM_ConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80017d0:	f000 f9ca 	bl	8001b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017d4:	463b      	mov	r3, r7
 80017d6:	2204      	movs	r2, #4
 80017d8:	4619      	mov	r1, r3
 80017da:	4807      	ldr	r0, [pc, #28]	; (80017f8 <MX_TIM2_Init+0x100>)
 80017dc:	f005 f9f8 	bl	8006bd0 <HAL_TIM_PWM_ConfigChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80017e6:	f000 f9bf 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017ea:	4803      	ldr	r0, [pc, #12]	; (80017f8 <MX_TIM2_Init+0x100>)
 80017ec:	f000 faf6 	bl	8001ddc <HAL_TIM_MspPostInit>

}
 80017f0:	bf00      	nop
 80017f2:	3738      	adds	r7, #56	; 0x38
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000338 	.word	0x20000338

080017fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001802:	f107 0310 	add.w	r3, r7, #16
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <MX_TIM3_Init+0x98>)
 800181c:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <MX_TIM3_Init+0x9c>)
 800181e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <MX_TIM3_Init+0x98>)
 8001822:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001826:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <MX_TIM3_Init+0x98>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <MX_TIM3_Init+0x98>)
 8001830:	f241 3287 	movw	r2, #4999	; 0x1387
 8001834:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <MX_TIM3_Init+0x98>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <MX_TIM3_Init+0x98>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001842:	4814      	ldr	r0, [pc, #80]	; (8001894 <MX_TIM3_Init+0x98>)
 8001844:	f004 fe6e 	bl	8006524 <HAL_TIM_Base_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800184e:	f000 f98b 	bl	8001b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001856:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	4619      	mov	r1, r3
 800185e:	480d      	ldr	r0, [pc, #52]	; (8001894 <MX_TIM3_Init+0x98>)
 8001860:	f005 faca 	bl	8006df8 <HAL_TIM_ConfigClockSource>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800186a:	f000 f97d 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	4619      	mov	r1, r3
 800187a:	4806      	ldr	r0, [pc, #24]	; (8001894 <MX_TIM3_Init+0x98>)
 800187c:	f006 f81c 	bl	80078b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001886:	f000 f96f 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	3720      	adds	r7, #32
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000384 	.word	0x20000384
 8001898:	40000400 	.word	0x40000400

0800189c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018a0:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <MX_USART2_UART_Init+0x5c>)
 80018a2:	4a16      	ldr	r2, [pc, #88]	; (80018fc <MX_USART2_UART_Init+0x60>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <MX_USART2_UART_Init+0x5c>)
 80018a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <MX_USART2_UART_Init+0x5c>)
 80018b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018b4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <MX_USART2_UART_Init+0x5c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_USART2_UART_Init+0x5c>)
 80018be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_USART2_UART_Init+0x5c>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <MX_USART2_UART_Init+0x5c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_USART2_UART_Init+0x5c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <MX_USART2_UART_Init+0x5c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_USART2_UART_Init+0x5c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_USART2_UART_Init+0x5c>)
 80018e4:	f006 f892 	bl	8007a0c <HAL_UART_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80018ee:	f000 f93b 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200003d0 	.word	0x200003d0
 80018fc:	40004400 	.word	0x40004400

08001900 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_DMA_Init+0x38>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <MX_DMA_Init+0x38>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6153      	str	r3, [r2, #20]
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_DMA_Init+0x38>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	200b      	movs	r0, #11
 8001924:	f001 fe01 	bl	800352a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001928:	200b      	movs	r0, #11
 800192a:	f001 fe1a 	bl	8003562 <HAL_NVIC_EnableIRQ>

}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000

0800193c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001942:	f107 030c 	add.w	r3, r7, #12
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001952:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <MX_GPIO_Init+0xb8>)
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	4a27      	ldr	r2, [pc, #156]	; (80019f4 <MX_GPIO_Init+0xb8>)
 8001958:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800195c:	6153      	str	r3, [r2, #20]
 800195e:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <MX_GPIO_Init+0xb8>)
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <MX_GPIO_Init+0xb8>)
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <MX_GPIO_Init+0xb8>)
 8001970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001974:	6153      	str	r3, [r2, #20]
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <MX_GPIO_Init+0xb8>)
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <MX_GPIO_Init+0xb8>)
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	4a1b      	ldr	r2, [pc, #108]	; (80019f4 <MX_GPIO_Init+0xb8>)
 8001988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198c:	6153      	str	r3, [r2, #20]
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <MX_GPIO_Init+0xb8>)
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor_a_rev_Pin|Motor_b_fwd_Pin|Motor_b_rev_Pin, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	f242 010c 	movw	r1, #8204	; 0x200c
 80019a0:	4815      	ldr	r0, [pc, #84]	; (80019f8 <MX_GPIO_Init+0xbc>)
 80019a2:	f002 f9ad 	bl	8003d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2180      	movs	r1, #128	; 0x80
 80019aa:	4814      	ldr	r0, [pc, #80]	; (80019fc <MX_GPIO_Init+0xc0>)
 80019ac:	f002 f9a8 	bl	8003d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor_a_rev_Pin Motor_b_fwd_Pin Motor_b_rev_Pin */
  GPIO_InitStruct.Pin = Motor_a_rev_Pin|Motor_b_fwd_Pin|Motor_b_rev_Pin;
 80019b0:	f242 030c 	movw	r3, #8204	; 0x200c
 80019b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	4619      	mov	r1, r3
 80019c8:	480b      	ldr	r0, [pc, #44]	; (80019f8 <MX_GPIO_Init+0xbc>)
 80019ca:	f002 f80f 	bl	80039ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_a_fwd_Pin */
  GPIO_InitStruct.Pin = Motor_a_fwd_Pin;
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Motor_a_fwd_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	4619      	mov	r1, r3
 80019e4:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_GPIO_Init+0xc0>)
 80019e6:	f002 f801 	bl	80039ec <HAL_GPIO_Init>

}
 80019ea:	bf00      	nop
 80019ec:	3720      	adds	r7, #32
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40021000 	.word	0x40021000
 80019f8:	48000800 	.word	0x48000800
 80019fc:	48000400 	.word	0x48000400

08001a00 <str2num>:
	for (int i = 0; i < numdigits; i++) {
		string[numdigits - i - 1] = (num / unit) % 10 + 48;
		unit = unit * 10;
	}
}
int str2num(uint8_t *string, int numdigits) {
 8001a00:	b480      	push	{r7}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
	int unit = 1;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
	int num = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < numdigits; i++) {
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	e016      	b.n	8001a46 <str2num+0x46>
		num = num + (string[numdigits - i - 1] - 48) * unit;
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	3b30      	subs	r3, #48	; 0x30
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4413      	add	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
		unit = unit * 10;
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numdigits; i++) {
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3301      	adds	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	dbe4      	blt.n	8001a18 <str2num+0x18>
	}
	return num;
 8001a4e:	693b      	ldr	r3, [r7, #16]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	371c      	adds	r7, #28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	UART_RX_Flag = 1;
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_UART_RxCpltCallback+0x20>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, UART_RX_Byte, 1);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4904      	ldr	r1, [pc, #16]	; (8001a80 <HAL_UART_RxCpltCallback+0x24>)
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <HAL_UART_RxCpltCallback+0x28>)
 8001a70:	f006 f8a4 	bl	8007bbc <HAL_UART_Receive_IT>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200004c1 	.word	0x200004c1
 8001a80:	200004c0 	.word	0x200004c0
 8001a84:	200003d0 	.word	0x200003d0

08001a88 <UART_RX_Handler>:
void UART_RX_Handler(void) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	UART_RX_Flag = 0;
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <UART_RX_Handler+0xbc>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
	UART_RX_Message[UART_RX_Pos] = UART_RX_Byte[0];
 8001a92:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <UART_RX_Handler+0xc0>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <UART_RX_Handler+0xc4>)
 8001a9a:	7819      	ldrb	r1, [r3, #0]
 8001a9c:	4b2c      	ldr	r3, [pc, #176]	; (8001b50 <UART_RX_Handler+0xc8>)
 8001a9e:	5499      	strb	r1, [r3, r2]
	UART_RX_Pos += 1;
 8001aa0:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <UART_RX_Handler+0xc0>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <UART_RX_Handler+0xc0>)
 8001aaa:	701a      	strb	r2, [r3, #0]
	if (UART_RX_Byte[0] == (uint8_t) *"\n") {
 8001aac:	4b27      	ldr	r3, [pc, #156]	; (8001b4c <UART_RX_Handler+0xc4>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	220a      	movs	r2, #10
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d144      	bne.n	8001b40 <UART_RX_Handler+0xb8>
		if (UART_RX_Message[0] == (uint8_t) *"+") {
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <UART_RX_Handler+0xc8>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	222b      	movs	r2, #43	; 0x2b
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d107      	bne.n	8001ad0 <UART_RX_Handler+0x48>
			UART_RX_Motor_a = str2num(&UART_RX_Message[1], 3);
 8001ac0:	2103      	movs	r1, #3
 8001ac2:	4824      	ldr	r0, [pc, #144]	; (8001b54 <UART_RX_Handler+0xcc>)
 8001ac4:	f7ff ff9c 	bl	8001a00 <str2num>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4a23      	ldr	r2, [pc, #140]	; (8001b58 <UART_RX_Handler+0xd0>)
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e00c      	b.n	8001aea <UART_RX_Handler+0x62>
		} else if (UART_RX_Message[0] == (uint8_t) *"-") {
 8001ad0:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <UART_RX_Handler+0xc8>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	222d      	movs	r2, #45	; 0x2d
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d107      	bne.n	8001aea <UART_RX_Handler+0x62>
			UART_RX_Motor_a = -str2num(&UART_RX_Message[1], 3);
 8001ada:	2103      	movs	r1, #3
 8001adc:	481d      	ldr	r0, [pc, #116]	; (8001b54 <UART_RX_Handler+0xcc>)
 8001ade:	f7ff ff8f 	bl	8001a00 <str2num>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	425b      	negs	r3, r3
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <UART_RX_Handler+0xd0>)
 8001ae8:	6013      	str	r3, [r2, #0]
		}
		if (UART_RX_Message[5] == (uint8_t) *"+") {
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <UART_RX_Handler+0xc8>)
 8001aec:	795b      	ldrb	r3, [r3, #5]
 8001aee:	222b      	movs	r2, #43	; 0x2b
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d107      	bne.n	8001b04 <UART_RX_Handler+0x7c>
			UART_RX_Motor_b = str2num(&UART_RX_Message[6], 3);
 8001af4:	2103      	movs	r1, #3
 8001af6:	4819      	ldr	r0, [pc, #100]	; (8001b5c <UART_RX_Handler+0xd4>)
 8001af8:	f7ff ff82 	bl	8001a00 <str2num>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4a18      	ldr	r2, [pc, #96]	; (8001b60 <UART_RX_Handler+0xd8>)
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e00c      	b.n	8001b1e <UART_RX_Handler+0x96>
		} else if (UART_RX_Message[5] == (uint8_t) *"-") {
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <UART_RX_Handler+0xc8>)
 8001b06:	795b      	ldrb	r3, [r3, #5]
 8001b08:	222d      	movs	r2, #45	; 0x2d
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d107      	bne.n	8001b1e <UART_RX_Handler+0x96>
			UART_RX_Motor_b = -str2num(&UART_RX_Message[6], 3);
 8001b0e:	2103      	movs	r1, #3
 8001b10:	4812      	ldr	r0, [pc, #72]	; (8001b5c <UART_RX_Handler+0xd4>)
 8001b12:	f7ff ff75 	bl	8001a00 <str2num>
 8001b16:	4603      	mov	r3, r0
 8001b18:	425b      	negs	r3, r3
 8001b1a:	4a11      	ldr	r2, [pc, #68]	; (8001b60 <UART_RX_Handler+0xd8>)
 8001b1c:	6013      	str	r3, [r2, #0]
		}
		if (UART_RX_Message[10] == (uint8_t) *"P") {
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <UART_RX_Handler+0xc8>)
 8001b20:	7a9b      	ldrb	r3, [r3, #10]
 8001b22:	2250      	movs	r2, #80	; 0x50
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d108      	bne.n	8001b3a <UART_RX_Handler+0xb2>
			TIM2->PSC = str2num(&UART_RX_Message[11], 3) - 1;
 8001b28:	2103      	movs	r1, #3
 8001b2a:	480e      	ldr	r0, [pc, #56]	; (8001b64 <UART_RX_Handler+0xdc>)
 8001b2c:	f7ff ff68 	bl	8001a00 <str2num>
 8001b30:	4603      	mov	r3, r0
 8001b32:	1e5a      	subs	r2, r3, #1
 8001b34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28
		}
		UART_RX_Pos = 0;
 8001b3a:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <UART_RX_Handler+0xc0>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
	}
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200004c1 	.word	0x200004c1
 8001b48:	20000458 	.word	0x20000458
 8001b4c:	200004c0 	.word	0x200004c0
 8001b50:	2000045c 	.word	0x2000045c
 8001b54:	2000045d 	.word	0x2000045d
 8001b58:	200004c4 	.word	0x200004c4
 8001b5c:	20000462 	.word	0x20000462
 8001b60:	200004c8 	.word	0x200004c8
 8001b64:	20000467 	.word	0x20000467

08001b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6c:	b672      	cpsid	i
}
 8001b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b70:	e7fe      	b.n	8001b70 <Error_Handler+0x8>
	...

08001b74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_MspInit+0x44>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <HAL_MspInit+0x44>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6193      	str	r3, [r2, #24]
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <HAL_MspInit+0x44>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_MspInit+0x44>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <HAL_MspInit+0x44>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	61d3      	str	r3, [r2, #28]
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_MspInit+0x44>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000

08001bbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bdc:	d14c      	bne.n	8001c78 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <HAL_ADC_MspInit+0xc4>)
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	4a27      	ldr	r2, [pc, #156]	; (8001c80 <HAL_ADC_MspInit+0xc4>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be8:	6153      	str	r3, [r2, #20]
 8001bea:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <HAL_ADC_MspInit+0xc4>)
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <HAL_ADC_MspInit+0xc4>)
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	4a21      	ldr	r2, [pc, #132]	; (8001c80 <HAL_ADC_MspInit+0xc4>)
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c00:	6153      	str	r3, [r2, #20]
 8001c02:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <HAL_ADC_MspInit+0xc4>)
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c12:	2303      	movs	r3, #3
 8001c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c24:	f001 fee2 	bl	80039ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <HAL_ADC_MspInit+0xc8>)
 8001c2a:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <HAL_ADC_MspInit+0xcc>)
 8001c2c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_ADC_MspInit+0xc8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <HAL_ADC_MspInit+0xc8>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_ADC_MspInit+0xc8>)
 8001c3c:	2280      	movs	r2, #128	; 0x80
 8001c3e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_ADC_MspInit+0xc8>)
 8001c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_ADC_MspInit+0xc8>)
 8001c4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <HAL_ADC_MspInit+0xc8>)
 8001c52:	2220      	movs	r2, #32
 8001c54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_ADC_MspInit+0xc8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c5c:	4809      	ldr	r0, [pc, #36]	; (8001c84 <HAL_ADC_MspInit+0xc8>)
 8001c5e:	f001 fc9a 	bl	8003596 <HAL_DMA_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001c68:	f7ff ff7e 	bl	8001b68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <HAL_ADC_MspInit+0xc8>)
 8001c70:	639a      	str	r2, [r3, #56]	; 0x38
 8001c72:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <HAL_ADC_MspInit+0xc8>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c78:	bf00      	nop
 8001c7a:	3728      	adds	r7, #40	; 0x28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	20000254 	.word	0x20000254
 8001c88:	40020008 	.word	0x40020008

08001c8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1f      	ldr	r2, [pc, #124]	; (8001d28 <HAL_I2C_MspInit+0x9c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d138      	bne.n	8001d20 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <HAL_I2C_MspInit+0xa0>)
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <HAL_I2C_MspInit+0xa0>)
 8001cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb8:	6153      	str	r3, [r2, #20]
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <HAL_I2C_MspInit+0xa0>)
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001cc6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ccc:	2312      	movs	r3, #18
 8001cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cd8:	2304      	movs	r3, #4
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4813      	ldr	r0, [pc, #76]	; (8001d30 <HAL_I2C_MspInit+0xa4>)
 8001ce4:	f001 fe82 	bl	80039ec <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 8001ce8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001cec:	f002 ff52 	bl	8004b94 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB9_FMP);
 8001cf0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001cf4:	f002 ff4e 	bl	8004b94 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <HAL_I2C_MspInit+0xa0>)
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <HAL_I2C_MspInit+0xa0>)
 8001cfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d02:	61d3      	str	r3, [r2, #28]
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_I2C_MspInit+0xa0>)
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2100      	movs	r1, #0
 8001d14:	201f      	movs	r0, #31
 8001d16:	f001 fc08 	bl	800352a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d1a:	201f      	movs	r0, #31
 8001d1c:	f001 fc21 	bl	8003562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40005400 	.word	0x40005400
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	48000400 	.word	0x48000400

08001d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a23      	ldr	r2, [pc, #140]	; (8001dd0 <HAL_TIM_Base_MspInit+0x9c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d114      	bne.n	8001d70 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d46:	4b23      	ldr	r3, [pc, #140]	; (8001dd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	4a22      	ldr	r2, [pc, #136]	; (8001dd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d50:	6193      	str	r3, [r2, #24]
 8001d52:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	201a      	movs	r0, #26
 8001d64:	f001 fbe1 	bl	800352a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001d68:	201a      	movs	r0, #26
 8001d6a:	f001 fbfa 	bl	8003562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d6e:	e02a      	b.n	8001dc6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d78:	d10c      	bne.n	8001d94 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a15      	ldr	r2, [pc, #84]	; (8001dd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	61d3      	str	r3, [r2, #28]
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
}
 8001d92:	e018      	b.n	8001dc6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <HAL_TIM_Base_MspInit+0xa4>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d113      	bne.n	8001dc6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	61d3      	str	r3, [r2, #28]
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	201d      	movs	r0, #29
 8001dbc:	f001 fbb5 	bl	800352a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dc0:	201d      	movs	r0, #29
 8001dc2:	f001 fbce 	bl	8003562 <HAL_NVIC_EnableIRQ>
}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40012c00 	.word	0x40012c00
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40000400 	.word	0x40000400

08001ddc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dfc:	d139      	bne.n	8001e72 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <HAL_TIM_MspPostInit+0xa0>)
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	4a1e      	ldr	r2, [pc, #120]	; (8001e7c <HAL_TIM_MspPostInit+0xa0>)
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e08:	6153      	str	r3, [r2, #20]
 8001e0a:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <HAL_TIM_MspPostInit+0xa0>)
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_TIM_MspPostInit+0xa0>)
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <HAL_TIM_MspPostInit+0xa0>)
 8001e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e20:	6153      	str	r3, [r2, #20]
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_TIM_MspPostInit+0xa0>)
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e40:	2301      	movs	r3, #1
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e4e:	f001 fdcd 	bl	80039ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e52:	2308      	movs	r3, #8
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e62:	2301      	movs	r3, #1
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4804      	ldr	r0, [pc, #16]	; (8001e80 <HAL_TIM_MspPostInit+0xa4>)
 8001e6e:	f001 fdbd 	bl	80039ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	; 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	48000400 	.word	0x48000400

08001e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <HAL_UART_MspInit+0x8c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d130      	bne.n	8001f08 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <HAL_UART_MspInit+0x90>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a1a      	ldr	r2, [pc, #104]	; (8001f14 <HAL_UART_MspInit+0x90>)
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb0:	61d3      	str	r3, [r2, #28]
 8001eb2:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <HAL_UART_MspInit+0x90>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <HAL_UART_MspInit+0x90>)
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	4a14      	ldr	r2, [pc, #80]	; (8001f14 <HAL_UART_MspInit+0x90>)
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec8:	6153      	str	r3, [r2, #20]
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_UART_MspInit+0x90>)
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ed6:	230c      	movs	r3, #12
 8001ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef4:	f001 fd7a 	bl	80039ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2100      	movs	r1, #0
 8001efc:	2026      	movs	r0, #38	; 0x26
 8001efe:	f001 fb14 	bl	800352a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f02:	2026      	movs	r0, #38	; 0x26
 8001f04:	f001 fb2d 	bl	8003562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f08:	bf00      	nop
 8001f0a:	3728      	adds	r7, #40	; 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40004400 	.word	0x40004400
 8001f14:	40021000 	.word	0x40021000

08001f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <NMI_Handler+0x4>

08001f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f22:	e7fe      	b.n	8001f22 <HardFault_Handler+0x4>

08001f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <MemManage_Handler+0x4>

08001f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <BusFault_Handler+0x4>

08001f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <UsageFault_Handler+0x4>

08001f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f64:	f000 f980 	bl	8002268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <DMA1_Channel1_IRQHandler+0x10>)
 8001f72:	f001 fc2d 	bl	80037d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000254 	.word	0x20000254

08001f80 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f84:	4802      	ldr	r0, [pc, #8]	; (8001f90 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001f86:	f004 fd03 	bl	8006990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200002ec 	.word	0x200002ec

08001f94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	TIM3_flag = 1;
 8001f98:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <TIM3_IRQHandler+0x14>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f9e:	4803      	ldr	r0, [pc, #12]	; (8001fac <TIM3_IRQHandler+0x18>)
 8001fa0:	f004 fcf6 	bl	8006990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200004cc 	.word	0x200004cc
 8001fac:	20000384 	.word	0x20000384

08001fb0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <I2C1_EV_IRQHandler+0x10>)
 8001fb6:	f002 fa82 	bl	80044be <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000298 	.word	0x20000298

08001fc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <USART2_IRQHandler+0x10>)
 8001fca:	f005 fe3b 	bl	8007c44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200003d0 	.word	0x200003d0

08001fd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return 1;
 8001fdc:	2301      	movs	r3, #1
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_kill>:

int _kill(int pid, int sig)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ff2:	f006 ffcf 	bl	8008f94 <__errno>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2216      	movs	r2, #22
 8001ffa:	601a      	str	r2, [r3, #0]
  return -1;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <_exit>:

void _exit (int status)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002010:	f04f 31ff 	mov.w	r1, #4294967295
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ffe7 	bl	8001fe8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800201a:	e7fe      	b.n	800201a <_exit+0x12>

0800201c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	e00a      	b.n	8002044 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800202e:	f3af 8000 	nop.w
 8002032:	4601      	mov	r1, r0
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	60ba      	str	r2, [r7, #8]
 800203a:	b2ca      	uxtb	r2, r1
 800203c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	3301      	adds	r3, #1
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	dbf0      	blt.n	800202e <_read+0x12>
  }

  return len;
 800204c:	687b      	ldr	r3, [r7, #4]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	e009      	b.n	800207c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	60ba      	str	r2, [r7, #8]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3301      	adds	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	dbf1      	blt.n	8002068 <_write+0x12>
  }
  return len;
 8002084:	687b      	ldr	r3, [r7, #4]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <_close>:

int _close(int file)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020b6:	605a      	str	r2, [r3, #4]
  return 0;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <_isatty>:

int _isatty(int file)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020ce:	2301      	movs	r3, #1
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <_sbrk+0x5c>)
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <_sbrk+0x60>)
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <_sbrk+0x64>)
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <_sbrk+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d207      	bcs.n	8002138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002128:	f006 ff34 	bl	8008f94 <__errno>
 800212c:	4603      	mov	r3, r0
 800212e:	220c      	movs	r2, #12
 8002130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	e009      	b.n	800214c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	4a05      	ldr	r2, [pc, #20]	; (800215c <_sbrk+0x64>)
 8002148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20010000 	.word	0x20010000
 8002158:	00000400 	.word	0x00000400
 800215c:	200004f0 	.word	0x200004f0
 8002160:	20000508 	.word	0x20000508

08002164 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <SystemInit+0x20>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <SystemInit+0x20>)
 8002170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800218c:	f7ff ffea 	bl	8002164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002190:	480c      	ldr	r0, [pc, #48]	; (80021c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002192:	490d      	ldr	r1, [pc, #52]	; (80021c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002194:	4a0d      	ldr	r2, [pc, #52]	; (80021cc <LoopForever+0xe>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002198:	e002      	b.n	80021a0 <LoopCopyDataInit>

0800219a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800219c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219e:	3304      	adds	r3, #4

080021a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a4:	d3f9      	bcc.n	800219a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021a8:	4c0a      	ldr	r4, [pc, #40]	; (80021d4 <LoopForever+0x16>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ac:	e001      	b.n	80021b2 <LoopFillZerobss>

080021ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b0:	3204      	adds	r2, #4

080021b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b4:	d3fb      	bcc.n	80021ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021b6:	f006 fef3 	bl	8008fa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021ba:	f7fe fe51 	bl	8000e60 <main>

080021be <LoopForever>:

LoopForever:
    b LoopForever
 80021be:	e7fe      	b.n	80021be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80021c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80021cc:	0800c25c 	.word	0x0800c25c
  ldr r2, =_sbss
 80021d0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80021d4:	20000508 	.word	0x20000508

080021d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021d8:	e7fe      	b.n	80021d8 <ADC1_2_IRQHandler>
	...

080021dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_Init+0x28>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a07      	ldr	r2, [pc, #28]	; (8002204 <HAL_Init+0x28>)
 80021e6:	f043 0310 	orr.w	r3, r3, #16
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ec:	2003      	movs	r0, #3
 80021ee:	f001 f991 	bl	8003514 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f2:	200f      	movs	r0, #15
 80021f4:	f000 f808 	bl	8002208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f8:	f7ff fcbc 	bl	8001b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40022000 	.word	0x40022000

08002208 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_InitTick+0x54>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_InitTick+0x58>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4619      	mov	r1, r3
 800221a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002222:	fbb2 f3f3 	udiv	r3, r2, r3
 8002226:	4618      	mov	r0, r3
 8002228:	f001 f9a9 	bl	800357e <HAL_SYSTICK_Config>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e00e      	b.n	8002254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b0f      	cmp	r3, #15
 800223a:	d80a      	bhi.n	8002252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800223c:	2200      	movs	r2, #0
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	f001 f971 	bl	800352a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002248:	4a06      	ldr	r2, [pc, #24]	; (8002264 <HAL_InitTick+0x5c>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	e000      	b.n	8002254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000000 	.word	0x20000000
 8002260:	20000008 	.word	0x20000008
 8002264:	20000004 	.word	0x20000004

08002268 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_IncTick+0x20>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_IncTick+0x24>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4413      	add	r3, r2
 8002278:	4a04      	ldr	r2, [pc, #16]	; (800228c <HAL_IncTick+0x24>)
 800227a:	6013      	str	r3, [r2, #0]
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000008 	.word	0x20000008
 800228c:	200004f4 	.word	0x200004f4

08002290 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return uwTick;  
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <HAL_GetTick+0x14>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	200004f4 	.word	0x200004f4

080022a8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff ffee 	bl	8002290 <HAL_GetTick>
 80022b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d005      	beq.n	80022ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_Delay+0x44>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4413      	add	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80022ce:	bf00      	nop
 80022d0:	f7ff ffde 	bl	8002290 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d8f7      	bhi.n	80022d0 <HAL_Delay+0x28>
  {
  }
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000008 	.word	0x20000008

080022f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b09a      	sub	sp, #104	; 0x68
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e1e3      	b.n	8002714 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	2b00      	cmp	r3, #0
 800235c:	d176      	bne.n	800244c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	d152      	bne.n	800240c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff fc1b 	bl	8001bbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d13b      	bne.n	800240c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 ff87 	bl	80032a8 <ADC_Disable>
 800239a:	4603      	mov	r3, r0
 800239c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d12f      	bne.n	800240c <HAL_ADC_Init+0xe0>
 80023ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d12b      	bne.n	800240c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023bc:	f023 0302 	bic.w	r3, r3, #2
 80023c0:	f043 0202 	orr.w	r2, r3, #2
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023d6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023e6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023e8:	4b92      	ldr	r3, [pc, #584]	; (8002634 <HAL_ADC_Init+0x308>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a92      	ldr	r2, [pc, #584]	; (8002638 <HAL_ADC_Init+0x30c>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	0c9a      	lsrs	r2, r3, #18
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023fe:	e002      	b.n	8002406 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	3b01      	subs	r3, #1
 8002404:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f9      	bne.n	8002400 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d007      	beq.n	800242a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002428:	d110      	bne.n	800244c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f023 0312 	bic.w	r3, r3, #18
 8002432:	f043 0210 	orr.w	r2, r3, #16
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	f043 0201 	orr.w	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	f040 8150 	bne.w	80026fa <HAL_ADC_Init+0x3ce>
 800245a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800245e:	2b00      	cmp	r3, #0
 8002460:	f040 814b 	bne.w	80026fa <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800246e:	2b00      	cmp	r3, #0
 8002470:	f040 8143 	bne.w	80026fa <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800247c:	f043 0202 	orr.w	r2, r3, #2
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800248c:	d004      	beq.n	8002498 <HAL_ADC_Init+0x16c>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a6a      	ldr	r2, [pc, #424]	; (800263c <HAL_ADC_Init+0x310>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d101      	bne.n	800249c <HAL_ADC_Init+0x170>
 8002498:	4b69      	ldr	r3, [pc, #420]	; (8002640 <HAL_ADC_Init+0x314>)
 800249a:	e000      	b.n	800249e <HAL_ADC_Init+0x172>
 800249c:	4b69      	ldr	r3, [pc, #420]	; (8002644 <HAL_ADC_Init+0x318>)
 800249e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024a8:	d102      	bne.n	80024b0 <HAL_ADC_Init+0x184>
 80024aa:	4b64      	ldr	r3, [pc, #400]	; (800263c <HAL_ADC_Init+0x310>)
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	e01a      	b.n	80024e6 <HAL_ADC_Init+0x1ba>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a61      	ldr	r2, [pc, #388]	; (800263c <HAL_ADC_Init+0x310>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d103      	bne.n	80024c2 <HAL_ADC_Init+0x196>
 80024ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e011      	b.n	80024e6 <HAL_ADC_Init+0x1ba>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a60      	ldr	r2, [pc, #384]	; (8002648 <HAL_ADC_Init+0x31c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d102      	bne.n	80024d2 <HAL_ADC_Init+0x1a6>
 80024cc:	4b5f      	ldr	r3, [pc, #380]	; (800264c <HAL_ADC_Init+0x320>)
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	e009      	b.n	80024e6 <HAL_ADC_Init+0x1ba>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a5d      	ldr	r2, [pc, #372]	; (800264c <HAL_ADC_Init+0x320>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d102      	bne.n	80024e2 <HAL_ADC_Init+0x1b6>
 80024dc:	4b5a      	ldr	r3, [pc, #360]	; (8002648 <HAL_ADC_Init+0x31c>)
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	e001      	b.n	80024e6 <HAL_ADC_Init+0x1ba>
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d108      	bne.n	8002506 <HAL_ADC_Init+0x1da>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_ADC_Init+0x1da>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_ADC_Init+0x1dc>
 8002506:	2300      	movs	r3, #0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d11c      	bne.n	8002546 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800250c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800250e:	2b00      	cmp	r3, #0
 8002510:	d010      	beq.n	8002534 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <HAL_ADC_Init+0x202>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_ADC_Init+0x202>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_ADC_Init+0x204>
 800252e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002530:	2b00      	cmp	r3, #0
 8002532:	d108      	bne.n	8002546 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	431a      	orrs	r2, r3
 8002542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002544:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7e5b      	ldrb	r3, [r3, #25]
 800254a:	035b      	lsls	r3, r3, #13
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002550:	2a01      	cmp	r2, #1
 8002552:	d002      	beq.n	800255a <HAL_ADC_Init+0x22e>
 8002554:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002558:	e000      	b.n	800255c <HAL_ADC_Init+0x230>
 800255a:	2200      	movs	r2, #0
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4313      	orrs	r3, r2
 800256a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800256c:	4313      	orrs	r3, r2
 800256e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d11b      	bne.n	80025b2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7e5b      	ldrb	r3, [r3, #25]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	3b01      	subs	r3, #1
 8002588:	045a      	lsls	r2, r3, #17
 800258a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800258c:	4313      	orrs	r3, r2
 800258e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002592:	663b      	str	r3, [r7, #96]	; 0x60
 8002594:	e00d      	b.n	80025b2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800259e:	f043 0220 	orr.w	r2, r3, #32
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f043 0201 	orr.w	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d054      	beq.n	8002664 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a22      	ldr	r2, [pc, #136]	; (8002648 <HAL_ADC_Init+0x31c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d004      	beq.n	80025ce <HAL_ADC_Init+0x2a2>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a20      	ldr	r2, [pc, #128]	; (800264c <HAL_ADC_Init+0x320>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d140      	bne.n	8002650 <HAL_ADC_Init+0x324>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80025d6:	d02a      	beq.n	800262e <HAL_ADC_Init+0x302>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e0:	d022      	beq.n	8002628 <HAL_ADC_Init+0x2fc>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80025ea:	d01a      	beq.n	8002622 <HAL_ADC_Init+0x2f6>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80025f4:	d012      	beq.n	800261c <HAL_ADC_Init+0x2f0>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80025fe:	d00a      	beq.n	8002616 <HAL_ADC_Init+0x2ea>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002604:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002608:	d002      	beq.n	8002610 <HAL_ADC_Init+0x2e4>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	e023      	b.n	8002658 <HAL_ADC_Init+0x32c>
 8002610:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002614:	e020      	b.n	8002658 <HAL_ADC_Init+0x32c>
 8002616:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800261a:	e01d      	b.n	8002658 <HAL_ADC_Init+0x32c>
 800261c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002620:	e01a      	b.n	8002658 <HAL_ADC_Init+0x32c>
 8002622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002626:	e017      	b.n	8002658 <HAL_ADC_Init+0x32c>
 8002628:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800262c:	e014      	b.n	8002658 <HAL_ADC_Init+0x32c>
 800262e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002632:	e011      	b.n	8002658 <HAL_ADC_Init+0x32c>
 8002634:	20000000 	.word	0x20000000
 8002638:	431bde83 	.word	0x431bde83
 800263c:	50000100 	.word	0x50000100
 8002640:	50000300 	.word	0x50000300
 8002644:	50000700 	.word	0x50000700
 8002648:	50000400 	.word	0x50000400
 800264c:	50000500 	.word	0x50000500
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800265c:	4313      	orrs	r3, r2
 800265e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002660:	4313      	orrs	r3, r2
 8002662:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b00      	cmp	r3, #0
 8002670:	d114      	bne.n	800269c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002680:	f023 0302 	bic.w	r3, r3, #2
 8002684:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	7e1b      	ldrb	r3, [r3, #24]
 800268a:	039a      	lsls	r2, r3, #14
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4313      	orrs	r3, r2
 8002696:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002698:	4313      	orrs	r3, r2
 800269a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	4b1e      	ldr	r3, [pc, #120]	; (800271c <HAL_ADC_Init+0x3f0>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80026ac:	430b      	orrs	r3, r1
 80026ae:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d10c      	bne.n	80026d2 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	f023 010f 	bic.w	r1, r3, #15
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	1e5a      	subs	r2, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
 80026d0:	e007      	b.n	80026e2 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 020f 	bic.w	r2, r2, #15
 80026e0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	f023 0303 	bic.w	r3, r3, #3
 80026f0:	f043 0201 	orr.w	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	641a      	str	r2, [r3, #64]	; 0x40
 80026f8:	e00a      	b.n	8002710 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f023 0312 	bic.w	r3, r3, #18
 8002702:	f043 0210 	orr.w	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800270a:	2301      	movs	r3, #1
 800270c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002710:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002714:	4618      	mov	r0, r3
 8002716:	3768      	adds	r7, #104	; 0x68
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	fff0c007 	.word	0xfff0c007

08002720 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	f040 80f7 	bne.w	800292e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_ADC_Start_DMA+0x2e>
 800274a:	2302      	movs	r3, #2
 800274c:	e0f2      	b.n	8002934 <HAL_ADC_Start_DMA+0x214>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800275e:	d004      	beq.n	800276a <HAL_ADC_Start_DMA+0x4a>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a75      	ldr	r2, [pc, #468]	; (800293c <HAL_ADC_Start_DMA+0x21c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d109      	bne.n	800277e <HAL_ADC_Start_DMA+0x5e>
 800276a:	4b75      	ldr	r3, [pc, #468]	; (8002940 <HAL_ADC_Start_DMA+0x220>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	2b00      	cmp	r3, #0
 8002774:	bf0c      	ite	eq
 8002776:	2301      	moveq	r3, #1
 8002778:	2300      	movne	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	e008      	b.n	8002790 <HAL_ADC_Start_DMA+0x70>
 800277e:	4b71      	ldr	r3, [pc, #452]	; (8002944 <HAL_ADC_Start_DMA+0x224>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	2b00      	cmp	r3, #0
 8002788:	bf0c      	ite	eq
 800278a:	2301      	moveq	r3, #1
 800278c:	2300      	movne	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80c5 	beq.w	8002920 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fd22 	bl	80031e0 <ADC_Enable>
 800279c:	4603      	mov	r3, r0
 800279e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f040 80b7 	bne.w	8002916 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c4:	d004      	beq.n	80027d0 <HAL_ADC_Start_DMA+0xb0>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a5c      	ldr	r2, [pc, #368]	; (800293c <HAL_ADC_Start_DMA+0x21c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d106      	bne.n	80027de <HAL_ADC_Start_DMA+0xbe>
 80027d0:	4b5b      	ldr	r3, [pc, #364]	; (8002940 <HAL_ADC_Start_DMA+0x220>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d010      	beq.n	80027fe <HAL_ADC_Start_DMA+0xde>
 80027dc:	e005      	b.n	80027ea <HAL_ADC_Start_DMA+0xca>
 80027de:	4b59      	ldr	r3, [pc, #356]	; (8002944 <HAL_ADC_Start_DMA+0x224>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <HAL_ADC_Start_DMA+0xde>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027f2:	d004      	beq.n	80027fe <HAL_ADC_Start_DMA+0xde>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a53      	ldr	r2, [pc, #332]	; (8002948 <HAL_ADC_Start_DMA+0x228>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d115      	bne.n	800282a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d036      	beq.n	8002886 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002820:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002828:	e02d      	b.n	8002886 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800283e:	d004      	beq.n	800284a <HAL_ADC_Start_DMA+0x12a>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a3d      	ldr	r2, [pc, #244]	; (800293c <HAL_ADC_Start_DMA+0x21c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d10a      	bne.n	8002860 <HAL_ADC_Start_DMA+0x140>
 800284a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf14      	ite	ne
 8002858:	2301      	movne	r3, #1
 800285a:	2300      	moveq	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	e008      	b.n	8002872 <HAL_ADC_Start_DMA+0x152>
 8002860:	4b39      	ldr	r3, [pc, #228]	; (8002948 <HAL_ADC_Start_DMA+0x228>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf14      	ite	ne
 800286c:	2301      	movne	r3, #1
 800286e:	2300      	moveq	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800287e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800288e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002892:	d106      	bne.n	80028a2 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002898:	f023 0206 	bic.w	r2, r3, #6
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	645a      	str	r2, [r3, #68]	; 0x44
 80028a0:	e002      	b.n	80028a8 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b4:	4a25      	ldr	r2, [pc, #148]	; (800294c <HAL_ADC_Start_DMA+0x22c>)
 80028b6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028bc:	4a24      	ldr	r2, [pc, #144]	; (8002950 <HAL_ADC_Start_DMA+0x230>)
 80028be:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	4a23      	ldr	r2, [pc, #140]	; (8002954 <HAL_ADC_Start_DMA+0x234>)
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	221c      	movs	r2, #28
 80028ce:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0210 	orr.w	r2, r2, #16
 80028de:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	3340      	adds	r3, #64	; 0x40
 80028fa:	4619      	mov	r1, r3
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f000 fe90 	bl	8003624 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0204 	orr.w	r2, r2, #4
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	e00d      	b.n	8002932 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800291e:	e008      	b.n	8002932 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800292c:	e001      	b.n	8002932 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800292e:	2302      	movs	r3, #2
 8002930:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002932:	7dfb      	ldrb	r3, [r7, #23]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	50000100 	.word	0x50000100
 8002940:	50000300 	.word	0x50000300
 8002944:	50000700 	.word	0x50000700
 8002948:	50000400 	.word	0x50000400
 800294c:	08003115 	.word	0x08003115
 8002950:	0800318f 	.word	0x0800318f
 8002954:	080031ab 	.word	0x080031ab

08002958 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002958:	b480      	push	{r7}
 800295a:	b09b      	sub	sp, #108	; 0x6c
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_ADC_ConfigChannel+0x22>
 8002976:	2302      	movs	r3, #2
 8002978:	e2ca      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x5b8>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	f040 82ae 	bne.w	8002eee <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b04      	cmp	r3, #4
 8002998:	d81c      	bhi.n	80029d4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	461a      	mov	r2, r3
 80029ae:	231f      	movs	r3, #31
 80029b0:	4093      	lsls	r3, r2
 80029b2:	43db      	mvns	r3, r3
 80029b4:	4019      	ands	r1, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	631a      	str	r2, [r3, #48]	; 0x30
 80029d2:	e063      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b09      	cmp	r3, #9
 80029da:	d81e      	bhi.n	8002a1a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	3b1e      	subs	r3, #30
 80029f0:	221f      	movs	r2, #31
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	4019      	ands	r1, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	3b1e      	subs	r3, #30
 8002a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	635a      	str	r2, [r3, #52]	; 0x34
 8002a18:	e040      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b0e      	cmp	r3, #14
 8002a20:	d81e      	bhi.n	8002a60 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	3b3c      	subs	r3, #60	; 0x3c
 8002a36:	221f      	movs	r2, #31
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	4019      	ands	r1, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	3b3c      	subs	r3, #60	; 0x3c
 8002a52:	fa00 f203 	lsl.w	r2, r0, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a5e:	e01d      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	4413      	add	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	3b5a      	subs	r3, #90	; 0x5a
 8002a74:	221f      	movs	r2, #31
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	4019      	ands	r1, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4413      	add	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	3b5a      	subs	r3, #90	; 0x5a
 8002a90:	fa00 f203 	lsl.w	r2, r0, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 80e5 	bne.w	8002c76 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b09      	cmp	r3, #9
 8002ab2:	d91c      	bls.n	8002aee <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6999      	ldr	r1, [r3, #24]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3b1e      	subs	r3, #30
 8002ac6:	2207      	movs	r2, #7
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	4019      	ands	r1, r3
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6898      	ldr	r0, [r3, #8]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	3b1e      	subs	r3, #30
 8002ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	619a      	str	r2, [r3, #24]
 8002aec:	e019      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6959      	ldr	r1, [r3, #20]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	2207      	movs	r2, #7
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	4019      	ands	r1, r3
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	6898      	ldr	r0, [r3, #8]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	fa00 f203 	lsl.w	r2, r0, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	08db      	lsrs	r3, r3, #3
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d84f      	bhi.n	8002be4 <HAL_ADC_ConfigChannel+0x28c>
 8002b44:	a201      	add	r2, pc, #4	; (adr r2, 8002b4c <HAL_ADC_ConfigChannel+0x1f4>)
 8002b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4a:	bf00      	nop
 8002b4c:	08002b5d 	.word	0x08002b5d
 8002b50:	08002b7f 	.word	0x08002b7f
 8002b54:	08002ba1 	.word	0x08002ba1
 8002b58:	08002bc3 	.word	0x08002bc3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b62:	4b9a      	ldr	r3, [pc, #616]	; (8002dcc <HAL_ADC_ConfigChannel+0x474>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	0691      	lsls	r1, r2, #26
 8002b6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b7a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b7c:	e07e      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b84:	4b91      	ldr	r3, [pc, #580]	; (8002dcc <HAL_ADC_ConfigChannel+0x474>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	0691      	lsls	r1, r2, #26
 8002b8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b90:	430a      	orrs	r2, r1
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b9c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b9e:	e06d      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ba6:	4b89      	ldr	r3, [pc, #548]	; (8002dcc <HAL_ADC_ConfigChannel+0x474>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	0691      	lsls	r1, r2, #26
 8002bb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002bbe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002bc0:	e05c      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bc8:	4b80      	ldr	r3, [pc, #512]	; (8002dcc <HAL_ADC_ConfigChannel+0x474>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	0691      	lsls	r1, r2, #26
 8002bd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002be2:	e04b      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	069b      	lsls	r3, r3, #26
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d107      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c06:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	069b      	lsls	r3, r3, #26
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d107      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c2a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	069b      	lsls	r3, r3, #26
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d107      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c4e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	069b      	lsls	r3, r3, #26
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d10a      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c72:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002c74:	e001      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002c76:	bf00      	nop
 8002c78:	e000      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x324>
      break;
 8002c7a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d108      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x344>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x344>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x346>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f040 8130 	bne.w	8002f04 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d00f      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	400a      	ands	r2, r1
 8002cc6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002cca:	e049      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b09      	cmp	r3, #9
 8002cec:	d91c      	bls.n	8002d28 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6999      	ldr	r1, [r3, #24]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3b1b      	subs	r3, #27
 8002d00:	2207      	movs	r2, #7
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	4019      	ands	r1, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6898      	ldr	r0, [r3, #8]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4613      	mov	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4413      	add	r3, r2
 8002d18:	3b1b      	subs	r3, #27
 8002d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	619a      	str	r2, [r3, #24]
 8002d26:	e01b      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6959      	ldr	r1, [r3, #20]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	4019      	ands	r1, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6898      	ldr	r0, [r3, #8]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	fa00 f203 	lsl.w	r2, r0, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d68:	d004      	beq.n	8002d74 <HAL_ADC_ConfigChannel+0x41c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <HAL_ADC_ConfigChannel+0x478>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d101      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x420>
 8002d74:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <HAL_ADC_ConfigChannel+0x47c>)
 8002d76:	e000      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x422>
 8002d78:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <HAL_ADC_ConfigChannel+0x480>)
 8002d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d105      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d015      	beq.n	8002dbc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002d94:	2b11      	cmp	r3, #17
 8002d96:	d105      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00b      	beq.n	8002dbc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002da8:	2b12      	cmp	r3, #18
 8002daa:	f040 80ab 	bne.w	8002f04 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f040 80a4 	bne.w	8002f04 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc4:	d10a      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x484>
 8002dc6:	4b02      	ldr	r3, [pc, #8]	; (8002dd0 <HAL_ADC_ConfigChannel+0x478>)
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	e022      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x4ba>
 8002dcc:	83fff000 	.word	0x83fff000
 8002dd0:	50000100 	.word	0x50000100
 8002dd4:	50000300 	.word	0x50000300
 8002dd8:	50000700 	.word	0x50000700
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a4e      	ldr	r2, [pc, #312]	; (8002f1c <HAL_ADC_ConfigChannel+0x5c4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d103      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x496>
 8002de6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e011      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x4ba>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a4b      	ldr	r2, [pc, #300]	; (8002f20 <HAL_ADC_ConfigChannel+0x5c8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d102      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x4a6>
 8002df8:	4b4a      	ldr	r3, [pc, #296]	; (8002f24 <HAL_ADC_ConfigChannel+0x5cc>)
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	e009      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x4ba>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a48      	ldr	r2, [pc, #288]	; (8002f24 <HAL_ADC_ConfigChannel+0x5cc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d102      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x4b6>
 8002e08:	4b45      	ldr	r3, [pc, #276]	; (8002f20 <HAL_ADC_ConfigChannel+0x5c8>)
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	e001      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x4ba>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d108      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x4da>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x4da>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x4dc>
 8002e32:	2300      	movs	r3, #0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d150      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e38:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d010      	beq.n	8002e60 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d107      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x502>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x502>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x504>
 8002e5a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d13c      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d11d      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x54c>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e70:	d118      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e7c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e7e:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <HAL_ADC_ConfigChannel+0x5d0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a2a      	ldr	r2, [pc, #168]	; (8002f2c <HAL_ADC_ConfigChannel+0x5d4>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	0c9a      	lsrs	r2, r3, #18
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e94:	e002      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f9      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ea2:	e02e      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b11      	cmp	r3, #17
 8002eaa:	d10b      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x56c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eb4:	d106      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ec2:	e01e      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b12      	cmp	r3, #18
 8002eca:	d11a      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ed8:	e013      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f043 0220 	orr.w	r2, r3, #32
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002eec:	e00a      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f043 0220 	orr.w	r2, r3, #32
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002f00:	e000      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f02:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	376c      	adds	r7, #108	; 0x6c
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	50000100 	.word	0x50000100
 8002f20:	50000400 	.word	0x50000400
 8002f24:	50000500 	.word	0x50000500
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	431bde83 	.word	0x431bde83

08002f30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b099      	sub	sp, #100	; 0x64
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f48:	d102      	bne.n	8002f50 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002f4a:	4b6d      	ldr	r3, [pc, #436]	; (8003100 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	e01a      	b.n	8002f86 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a6a      	ldr	r2, [pc, #424]	; (8003100 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d103      	bne.n	8002f62 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002f5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	e011      	b.n	8002f86 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a67      	ldr	r2, [pc, #412]	; (8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d102      	bne.n	8002f72 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f6c:	4b66      	ldr	r3, [pc, #408]	; (8003108 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	e009      	b.n	8002f86 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a64      	ldr	r2, [pc, #400]	; (8003108 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d102      	bne.n	8002f82 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002f7c:	4b61      	ldr	r3, [pc, #388]	; (8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	e001      	b.n	8002f86 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0b0      	b.n	80030f2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e0a9      	b.n	80030f2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f040 808d 	bne.w	80030d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f040 8086 	bne.w	80030d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fcc:	d004      	beq.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a4b      	ldr	r2, [pc, #300]	; (8003100 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002fd8:	4b4c      	ldr	r3, [pc, #304]	; (800310c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002fda:	e000      	b.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002fdc:	4b4c      	ldr	r3, [pc, #304]	; (8003110 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002fde:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d040      	beq.n	800306a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ffa:	035b      	lsls	r3, r3, #13
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	431a      	orrs	r2, r3
 8003000:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003002:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b01      	cmp	r3, #1
 8003010:	d108      	bne.n	8003024 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003024:	2300      	movs	r3, #0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d15c      	bne.n	80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d107      	bne.n	8003046 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003046:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003048:	2b00      	cmp	r3, #0
 800304a:	d14b      	bne.n	80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800304c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003054:	f023 030f 	bic.w	r3, r3, #15
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	6811      	ldr	r1, [r2, #0]
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	6892      	ldr	r2, [r2, #8]
 8003060:	430a      	orrs	r2, r1
 8003062:	431a      	orrs	r2, r3
 8003064:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003066:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003068:	e03c      	b.n	80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800306a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003072:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003074:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d108      	bne.n	8003096 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003096:	2300      	movs	r3, #0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d123      	bne.n	80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d107      	bne.n	80030b8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80030b8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d112      	bne.n	80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80030be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030c6:	f023 030f 	bic.w	r3, r3, #15
 80030ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030cc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80030ce:	e009      	b.n	80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	f043 0220 	orr.w	r2, r3, #32
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80030e2:	e000      	b.n	80030e6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80030e4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80030ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80030f2:	4618      	mov	r0, r3
 80030f4:	3764      	adds	r7, #100	; 0x64
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	50000100 	.word	0x50000100
 8003104:	50000400 	.word	0x50000400
 8003108:	50000500 	.word	0x50000500
 800310c:	50000300 	.word	0x50000300
 8003110:	50000700 	.word	0x50000700

08003114 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800312a:	2b00      	cmp	r3, #0
 800312c:	d126      	bne.n	800317c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003144:	2b00      	cmp	r3, #0
 8003146:	d115      	bne.n	8003174 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800314c:	2b00      	cmp	r3, #0
 800314e:	d111      	bne.n	8003174 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d105      	bne.n	8003174 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	f043 0201 	orr.w	r2, r3, #1
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f7ff f8bb 	bl	80022f0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800317a:	e004      	b.n	8003186 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	4798      	blx	r3
}
 8003186:	bf00      	nop
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f7ff f8b1 	bl	8002304 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80031a2:	bf00      	nop
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c8:	f043 0204 	orr.w	r2, r3, #4
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7ff f8a1 	bl	8002318 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d108      	bne.n	800320c <ADC_Enable+0x2c>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <ADC_Enable+0x2c>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <ADC_Enable+0x2e>
 800320c:	2300      	movs	r3, #0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d143      	bne.n	800329a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <ADC_Enable+0xc4>)
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00d      	beq.n	800323c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	f043 0210 	orr.w	r2, r3, #16
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003230:	f043 0201 	orr.w	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e02f      	b.n	800329c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800324c:	f7ff f820 	bl	8002290 <HAL_GetTick>
 8003250:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003252:	e01b      	b.n	800328c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003254:	f7ff f81c 	bl	8002290 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d914      	bls.n	800328c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b01      	cmp	r3, #1
 800326e:	d00d      	beq.n	800328c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	f043 0210 	orr.w	r2, r3, #16
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	f043 0201 	orr.w	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e007      	b.n	800329c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b01      	cmp	r3, #1
 8003298:	d1dc      	bne.n	8003254 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	8000003f 	.word	0x8000003f

080032a8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d108      	bne.n	80032d4 <ADC_Disable+0x2c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <ADC_Disable+0x2c>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <ADC_Disable+0x2e>
 80032d4:	2300      	movs	r3, #0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d047      	beq.n	800336a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 030d 	and.w	r3, r3, #13
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d10f      	bne.n	8003308 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0202 	orr.w	r2, r2, #2
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2203      	movs	r2, #3
 80032fe:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003300:	f7fe ffc6 	bl	8002290 <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003306:	e029      	b.n	800335c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f043 0210 	orr.w	r2, r3, #16
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003318:	f043 0201 	orr.w	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e023      	b.n	800336c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003324:	f7fe ffb4 	bl	8002290 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d914      	bls.n	800335c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d10d      	bne.n	800335c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	f043 0210 	orr.w	r2, r3, #16
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003350:	f043 0201 	orr.w	r2, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e007      	b.n	800336c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b01      	cmp	r3, #1
 8003368:	d0dc      	beq.n	8003324 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003390:	4013      	ands	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800339c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a6:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	60d3      	str	r3, [r2, #12]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <__NVIC_GetPriorityGrouping+0x18>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	0a1b      	lsrs	r3, r3, #8
 80033c6:	f003 0307 	and.w	r3, r3, #7
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	db0b      	blt.n	8003402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	f003 021f 	and.w	r2, r3, #31
 80033f0:	4907      	ldr	r1, [pc, #28]	; (8003410 <__NVIC_EnableIRQ+0x38>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2001      	movs	r0, #1
 80033fa:	fa00 f202 	lsl.w	r2, r0, r2
 80033fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000e100 	.word	0xe000e100

08003414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	6039      	str	r1, [r7, #0]
 800341e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003424:	2b00      	cmp	r3, #0
 8003426:	db0a      	blt.n	800343e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	b2da      	uxtb	r2, r3
 800342c:	490c      	ldr	r1, [pc, #48]	; (8003460 <__NVIC_SetPriority+0x4c>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	0112      	lsls	r2, r2, #4
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	440b      	add	r3, r1
 8003438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800343c:	e00a      	b.n	8003454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	4908      	ldr	r1, [pc, #32]	; (8003464 <__NVIC_SetPriority+0x50>)
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	3b04      	subs	r3, #4
 800344c:	0112      	lsls	r2, r2, #4
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	440b      	add	r3, r1
 8003452:	761a      	strb	r2, [r3, #24]
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000e100 	.word	0xe000e100
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	; 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f1c3 0307 	rsb	r3, r3, #7
 8003482:	2b04      	cmp	r3, #4
 8003484:	bf28      	it	cs
 8003486:	2304      	movcs	r3, #4
 8003488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3304      	adds	r3, #4
 800348e:	2b06      	cmp	r3, #6
 8003490:	d902      	bls.n	8003498 <NVIC_EncodePriority+0x30>
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3b03      	subs	r3, #3
 8003496:	e000      	b.n	800349a <NVIC_EncodePriority+0x32>
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800349c:	f04f 32ff 	mov.w	r2, #4294967295
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43da      	mvns	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	401a      	ands	r2, r3
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b0:	f04f 31ff 	mov.w	r1, #4294967295
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ba:	43d9      	mvns	r1, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c0:	4313      	orrs	r3, r2
         );
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3724      	adds	r7, #36	; 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3b01      	subs	r3, #1
 80034dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034e0:	d301      	bcc.n	80034e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034e2:	2301      	movs	r3, #1
 80034e4:	e00f      	b.n	8003506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034e6:	4a0a      	ldr	r2, [pc, #40]	; (8003510 <SysTick_Config+0x40>)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ee:	210f      	movs	r1, #15
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	f7ff ff8e 	bl	8003414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <SysTick_Config+0x40>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <SysTick_Config+0x40>)
 8003500:	2207      	movs	r2, #7
 8003502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	e000e010 	.word	0xe000e010

08003514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff ff29 	bl	8003374 <__NVIC_SetPriorityGrouping>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800353c:	f7ff ff3e 	bl	80033bc <__NVIC_GetPriorityGrouping>
 8003540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	6978      	ldr	r0, [r7, #20]
 8003548:	f7ff ff8e 	bl	8003468 <NVIC_EncodePriority>
 800354c:	4602      	mov	r2, r0
 800354e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff5d 	bl	8003414 <__NVIC_SetPriority>
}
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff31 	bl	80033d8 <__NVIC_EnableIRQ>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ffa2 	bl	80034d0 <SysTick_Config>
 800358c:	4603      	mov	r3, r0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e037      	b.n	800361c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80035c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80035c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80035d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f9b8 	bl	8003974 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}  
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3020 	ldrb.w	r3, [r3, #32]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_DMA_Start_IT+0x20>
 8003640:	2302      	movs	r3, #2
 8003642:	e04a      	b.n	80036da <HAL_DMA_Start_IT+0xb6>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003652:	2b01      	cmp	r3, #1
 8003654:	d13a      	bne.n	80036cc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2202      	movs	r2, #2
 800365a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f94b 	bl	8003916 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 020e 	orr.w	r2, r2, #14
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	e00f      	b.n	80036ba <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 020a 	orr.w	r2, r2, #10
 80036a8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0204 	bic.w	r2, r2, #4
 80036b8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0201 	orr.w	r2, r2, #1
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	e005      	b.n	80036d8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80036d4:	2302      	movs	r3, #2
 80036d6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80036d8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d008      	beq.n	8003706 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2204      	movs	r2, #4
 80036f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e020      	b.n	8003748 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 020e 	bic.w	r2, r2, #14
 8003714:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372e:	2101      	movs	r1, #1
 8003730:	fa01 f202 	lsl.w	r2, r1, r2
 8003734:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003766:	2b02      	cmp	r3, #2
 8003768:	d005      	beq.n	8003776 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2204      	movs	r2, #4
 800376e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
 8003774:	e027      	b.n	80037c6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 020e 	bic.w	r2, r2, #14
 8003784:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0201 	bic.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379e:	2101      	movs	r1, #1
 80037a0:	fa01 f202 	lsl.w	r2, r1, r2
 80037a4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	4798      	blx	r3
    } 
  }
  return status;
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	2204      	movs	r2, #4
 80037ee:	409a      	lsls	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d024      	beq.n	8003842 <HAL_DMA_IRQHandler+0x72>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d01f      	beq.n	8003842 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b00      	cmp	r3, #0
 800380e:	d107      	bne.n	8003820 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0204 	bic.w	r2, r2, #4
 800381e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003828:	2104      	movs	r1, #4
 800382a:	fa01 f202 	lsl.w	r2, r1, r2
 800382e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d06a      	beq.n	800390e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003840:	e065      	b.n	800390e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	2202      	movs	r2, #2
 8003848:	409a      	lsls	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4013      	ands	r3, r2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d02c      	beq.n	80038ac <HAL_DMA_IRQHandler+0xdc>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d027      	beq.n	80038ac <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10b      	bne.n	8003882 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 020a 	bic.w	r2, r2, #10
 8003878:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	2102      	movs	r1, #2
 800388c:	fa01 f202 	lsl.w	r2, r1, r2
 8003890:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d035      	beq.n	800390e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80038aa:	e030      	b.n	800390e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	2208      	movs	r2, #8
 80038b2:	409a      	lsls	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d028      	beq.n	800390e <HAL_DMA_IRQHandler+0x13e>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d023      	beq.n	800390e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 020e 	bic.w	r2, r2, #14
 80038d4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	2101      	movs	r1, #1
 80038e0:	fa01 f202 	lsl.w	r2, r1, r2
 80038e4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	2b00      	cmp	r3, #0
 8003902:	d004      	beq.n	800390e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	4798      	blx	r3
    }
  }
}  
 800390c:	e7ff      	b.n	800390e <HAL_DMA_IRQHandler+0x13e>
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003916:	b480      	push	{r7}
 8003918:	b085      	sub	sp, #20
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	2101      	movs	r1, #1
 800392e:	fa01 f202 	lsl.w	r2, r1, r2
 8003932:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b10      	cmp	r3, #16
 8003942:	d108      	bne.n	8003956 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003954:	e007      	b.n	8003966 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	60da      	str	r2, [r3, #12]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <DMA_CalcBaseAndBitshift+0x60>)
 8003984:	429a      	cmp	r2, r3
 8003986:	d80f      	bhi.n	80039a8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	461a      	mov	r2, r3
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003990:	4413      	add	r3, r2
 8003992:	4a12      	ldr	r2, [pc, #72]	; (80039dc <DMA_CalcBaseAndBitshift+0x68>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	009a      	lsls	r2, r3, #2
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a0f      	ldr	r2, [pc, #60]	; (80039e0 <DMA_CalcBaseAndBitshift+0x6c>)
 80039a4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80039a6:	e00e      	b.n	80039c6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	461a      	mov	r2, r3
 80039ae:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <DMA_CalcBaseAndBitshift+0x70>)
 80039b0:	4413      	add	r3, r2
 80039b2:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <DMA_CalcBaseAndBitshift+0x68>)
 80039b4:	fba2 2303 	umull	r2, r3, r2, r3
 80039b8:	091b      	lsrs	r3, r3, #4
 80039ba:	009a      	lsls	r2, r3, #2
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a09      	ldr	r2, [pc, #36]	; (80039e8 <DMA_CalcBaseAndBitshift+0x74>)
 80039c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40020407 	.word	0x40020407
 80039d8:	bffdfff8 	.word	0xbffdfff8
 80039dc:	cccccccd 	.word	0xcccccccd
 80039e0:	40020000 	.word	0x40020000
 80039e4:	bffdfbf8 	.word	0xbffdfbf8
 80039e8:	40020400 	.word	0x40020400

080039ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039fa:	e160      	b.n	8003cbe <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	2101      	movs	r1, #1
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	fa01 f303 	lsl.w	r3, r1, r3
 8003a08:	4013      	ands	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 8152 	beq.w	8003cb8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d005      	beq.n	8003a2c <HAL_GPIO_Init+0x40>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d130      	bne.n	8003a8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	2203      	movs	r2, #3
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a62:	2201      	movs	r2, #1
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	091b      	lsrs	r3, r3, #4
 8003a78:	f003 0201 	and.w	r2, r3, #1
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d017      	beq.n	8003aca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d123      	bne.n	8003b1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	08da      	lsrs	r2, r3, #3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3208      	adds	r2, #8
 8003ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	220f      	movs	r2, #15
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	08da      	lsrs	r2, r3, #3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3208      	adds	r2, #8
 8003b18:	6939      	ldr	r1, [r7, #16]
 8003b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	2203      	movs	r2, #3
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4013      	ands	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f003 0203 	and.w	r2, r3, #3
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 80ac 	beq.w	8003cb8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b60:	4b5e      	ldr	r3, [pc, #376]	; (8003cdc <HAL_GPIO_Init+0x2f0>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	4a5d      	ldr	r2, [pc, #372]	; (8003cdc <HAL_GPIO_Init+0x2f0>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6193      	str	r3, [r2, #24]
 8003b6c:	4b5b      	ldr	r3, [pc, #364]	; (8003cdc <HAL_GPIO_Init+0x2f0>)
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b78:	4a59      	ldr	r2, [pc, #356]	; (8003ce0 <HAL_GPIO_Init+0x2f4>)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	089b      	lsrs	r3, r3, #2
 8003b7e:	3302      	adds	r3, #2
 8003b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	220f      	movs	r2, #15
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ba2:	d025      	beq.n	8003bf0 <HAL_GPIO_Init+0x204>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a4f      	ldr	r2, [pc, #316]	; (8003ce4 <HAL_GPIO_Init+0x2f8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d01f      	beq.n	8003bec <HAL_GPIO_Init+0x200>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a4e      	ldr	r2, [pc, #312]	; (8003ce8 <HAL_GPIO_Init+0x2fc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d019      	beq.n	8003be8 <HAL_GPIO_Init+0x1fc>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a4d      	ldr	r2, [pc, #308]	; (8003cec <HAL_GPIO_Init+0x300>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d013      	beq.n	8003be4 <HAL_GPIO_Init+0x1f8>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a4c      	ldr	r2, [pc, #304]	; (8003cf0 <HAL_GPIO_Init+0x304>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00d      	beq.n	8003be0 <HAL_GPIO_Init+0x1f4>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a4b      	ldr	r2, [pc, #300]	; (8003cf4 <HAL_GPIO_Init+0x308>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d007      	beq.n	8003bdc <HAL_GPIO_Init+0x1f0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a4a      	ldr	r2, [pc, #296]	; (8003cf8 <HAL_GPIO_Init+0x30c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d101      	bne.n	8003bd8 <HAL_GPIO_Init+0x1ec>
 8003bd4:	2306      	movs	r3, #6
 8003bd6:	e00c      	b.n	8003bf2 <HAL_GPIO_Init+0x206>
 8003bd8:	2307      	movs	r3, #7
 8003bda:	e00a      	b.n	8003bf2 <HAL_GPIO_Init+0x206>
 8003bdc:	2305      	movs	r3, #5
 8003bde:	e008      	b.n	8003bf2 <HAL_GPIO_Init+0x206>
 8003be0:	2304      	movs	r3, #4
 8003be2:	e006      	b.n	8003bf2 <HAL_GPIO_Init+0x206>
 8003be4:	2303      	movs	r3, #3
 8003be6:	e004      	b.n	8003bf2 <HAL_GPIO_Init+0x206>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e002      	b.n	8003bf2 <HAL_GPIO_Init+0x206>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <HAL_GPIO_Init+0x206>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	f002 0203 	and.w	r2, r2, #3
 8003bf8:	0092      	lsls	r2, r2, #2
 8003bfa:	4093      	lsls	r3, r2
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c02:	4937      	ldr	r1, [pc, #220]	; (8003ce0 <HAL_GPIO_Init+0x2f4>)
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	089b      	lsrs	r3, r3, #2
 8003c08:	3302      	adds	r3, #2
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c10:	4b3a      	ldr	r3, [pc, #232]	; (8003cfc <HAL_GPIO_Init+0x310>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c34:	4a31      	ldr	r2, [pc, #196]	; (8003cfc <HAL_GPIO_Init+0x310>)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c3a:	4b30      	ldr	r3, [pc, #192]	; (8003cfc <HAL_GPIO_Init+0x310>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	43db      	mvns	r3, r3
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4013      	ands	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c5e:	4a27      	ldr	r2, [pc, #156]	; (8003cfc <HAL_GPIO_Init+0x310>)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c64:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <HAL_GPIO_Init+0x310>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4013      	ands	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003c88:	4a1c      	ldr	r2, [pc, #112]	; (8003cfc <HAL_GPIO_Init+0x310>)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c8e:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <HAL_GPIO_Init+0x310>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	43db      	mvns	r3, r3
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003cb2:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <HAL_GPIO_Init+0x310>)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f47f ae97 	bne.w	80039fc <HAL_GPIO_Init+0x10>
  }
}
 8003cce:	bf00      	nop
 8003cd0:	bf00      	nop
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40010000 	.word	0x40010000
 8003ce4:	48000400 	.word	0x48000400
 8003ce8:	48000800 	.word	0x48000800
 8003cec:	48000c00 	.word	0x48000c00
 8003cf0:	48001000 	.word	0x48001000
 8003cf4:	48001400 	.word	0x48001400
 8003cf8:	48001800 	.word	0x48001800
 8003cfc:	40010400 	.word	0x40010400

08003d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	807b      	strh	r3, [r7, #2]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d10:	787b      	ldrb	r3, [r7, #1]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d16:	887a      	ldrh	r2, [r7, #2]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d1c:	e002      	b.n	8003d24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d1e:	887a      	ldrh	r2, [r7, #2]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e081      	b.n	8003e46 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fd ff98 	bl	8001c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2224      	movs	r2, #36	; 0x24
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d107      	bne.n	8003daa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	e006      	b.n	8003db8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003db6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d104      	bne.n	8003dca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ddc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69d9      	ldr	r1, [r3, #28]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1a      	ldr	r2, [r3, #32]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	4608      	mov	r0, r1
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4603      	mov	r3, r0
 8003e60:	817b      	strh	r3, [r7, #10]
 8003e62:	460b      	mov	r3, r1
 8003e64:	813b      	strh	r3, [r7, #8]
 8003e66:	4613      	mov	r3, r2
 8003e68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	f040 80f9 	bne.w	800406a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <HAL_I2C_Mem_Write+0x34>
 8003e7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d105      	bne.n	8003e90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0ed      	b.n	800406c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_I2C_Mem_Write+0x4e>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e0e6      	b.n	800406c <HAL_I2C_Mem_Write+0x21c>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ea6:	f7fe f9f3 	bl	8002290 <HAL_GetTick>
 8003eaa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	2319      	movs	r3, #25
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 fbe7 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0d1      	b.n	800406c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2221      	movs	r2, #33	; 0x21
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2240      	movs	r2, #64	; 0x40
 8003ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a3a      	ldr	r2, [r7, #32]
 8003ee2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ef0:	88f8      	ldrh	r0, [r7, #6]
 8003ef2:	893a      	ldrh	r2, [r7, #8]
 8003ef4:	8979      	ldrh	r1, [r7, #10]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	4603      	mov	r3, r0
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 faf7 	bl	80044f4 <I2C_RequestMemoryWrite>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0a9      	b.n	800406c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2bff      	cmp	r3, #255	; 0xff
 8003f20:	d90e      	bls.n	8003f40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	22ff      	movs	r2, #255	; 0xff
 8003f26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	8979      	ldrh	r1, [r7, #10]
 8003f30:	2300      	movs	r3, #0
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fd61 	bl	8004a00 <I2C_TransferConfig>
 8003f3e:	e00f      	b.n	8003f60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	8979      	ldrh	r1, [r7, #10]
 8003f52:	2300      	movs	r3, #0
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fd50 	bl	8004a00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 fbe0 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e07b      	b.n	800406c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d034      	beq.n	8004018 <HAL_I2C_Mem_Write+0x1c8>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d130      	bne.n	8004018 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2180      	movs	r1, #128	; 0x80
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 fb63 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e04d      	b.n	800406c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2bff      	cmp	r3, #255	; 0xff
 8003fd8:	d90e      	bls.n	8003ff8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	22ff      	movs	r2, #255	; 0xff
 8003fde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	8979      	ldrh	r1, [r7, #10]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fd05 	bl	8004a00 <I2C_TransferConfig>
 8003ff6:	e00f      	b.n	8004018 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004006:	b2da      	uxtb	r2, r3
 8004008:	8979      	ldrh	r1, [r7, #10]
 800400a:	2300      	movs	r3, #0
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 fcf4 	bl	8004a00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d19e      	bne.n	8003f60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 fbc6 	bl	80047b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e01a      	b.n	800406c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2220      	movs	r2, #32
 800403c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6859      	ldr	r1, [r3, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <HAL_I2C_Mem_Write+0x224>)
 800404a:	400b      	ands	r3, r1
 800404c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	e000      	b.n	800406c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800406a:	2302      	movs	r3, #2
  }
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	fe00e800 	.word	0xfe00e800

08004078 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af02      	add	r7, sp, #8
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	4608      	mov	r0, r1
 8004082:	4611      	mov	r1, r2
 8004084:	461a      	mov	r2, r3
 8004086:	4603      	mov	r3, r0
 8004088:	817b      	strh	r3, [r7, #10]
 800408a:	460b      	mov	r3, r1
 800408c:	813b      	strh	r3, [r7, #8]
 800408e:	4613      	mov	r3, r2
 8004090:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b20      	cmp	r3, #32
 800409c:	f040 80fd 	bne.w	800429a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <HAL_I2C_Mem_Read+0x34>
 80040a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d105      	bne.n	80040b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0f1      	b.n	800429c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_I2C_Mem_Read+0x4e>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e0ea      	b.n	800429c <HAL_I2C_Mem_Read+0x224>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040ce:	f7fe f8df 	bl	8002290 <HAL_GetTick>
 80040d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	2319      	movs	r3, #25
 80040da:	2201      	movs	r2, #1
 80040dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fad3 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0d5      	b.n	800429c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2222      	movs	r2, #34	; 0x22
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2240      	movs	r2, #64	; 0x40
 80040fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a3a      	ldr	r2, [r7, #32]
 800410a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004110:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004118:	88f8      	ldrh	r0, [r7, #6]
 800411a:	893a      	ldrh	r2, [r7, #8]
 800411c:	8979      	ldrh	r1, [r7, #10]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	4603      	mov	r3, r0
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 fa37 	bl	800459c <I2C_RequestMemoryRead>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e0ad      	b.n	800429c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	2bff      	cmp	r3, #255	; 0xff
 8004148:	d90e      	bls.n	8004168 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	22ff      	movs	r2, #255	; 0xff
 800414e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004154:	b2da      	uxtb	r2, r3
 8004156:	8979      	ldrh	r1, [r7, #10]
 8004158:	4b52      	ldr	r3, [pc, #328]	; (80042a4 <HAL_I2C_Mem_Read+0x22c>)
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 fc4d 	bl	8004a00 <I2C_TransferConfig>
 8004166:	e00f      	b.n	8004188 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004176:	b2da      	uxtb	r2, r3
 8004178:	8979      	ldrh	r1, [r7, #10]
 800417a:	4b4a      	ldr	r3, [pc, #296]	; (80042a4 <HAL_I2C_Mem_Read+0x22c>)
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 fc3c 	bl	8004a00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	2200      	movs	r2, #0
 8004190:	2104      	movs	r1, #4
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 fa7a 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e07c      	b.n	800429c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d034      	beq.n	8004248 <HAL_I2C_Mem_Read+0x1d0>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d130      	bne.n	8004248 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	2200      	movs	r2, #0
 80041ee:	2180      	movs	r1, #128	; 0x80
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fa4b 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e04d      	b.n	800429c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	2bff      	cmp	r3, #255	; 0xff
 8004208:	d90e      	bls.n	8004228 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	22ff      	movs	r2, #255	; 0xff
 800420e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004214:	b2da      	uxtb	r2, r3
 8004216:	8979      	ldrh	r1, [r7, #10]
 8004218:	2300      	movs	r3, #0
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 fbed 	bl	8004a00 <I2C_TransferConfig>
 8004226:	e00f      	b.n	8004248 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004236:	b2da      	uxtb	r2, r3
 8004238:	8979      	ldrh	r1, [r7, #10]
 800423a:	2300      	movs	r3, #0
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 fbdc 	bl	8004a00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d19a      	bne.n	8004188 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 faae 	bl	80047b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e01a      	b.n	800429c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2220      	movs	r2, #32
 800426c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6859      	ldr	r1, [r3, #4]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <HAL_I2C_Mem_Read+0x230>)
 800427a:	400b      	ands	r3, r1
 800427c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	e000      	b.n	800429c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800429a:	2302      	movs	r3, #2
  }
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	80002400 	.word	0x80002400
 80042a8:	fe00e800 	.word	0xfe00e800

080042ac <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08a      	sub	sp, #40	; 0x28
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	460b      	mov	r3, r1
 80042ba:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	f040 80f3 	bne.w	80044b4 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042dc:	d101      	bne.n	80042e2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80042de:	2302      	movs	r3, #2
 80042e0:	e0e9      	b.n	80044b6 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_I2C_IsDeviceReady+0x44>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e0e2      	b.n	80044b6 <HAL_I2C_IsDeviceReady+0x20a>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2224      	movs	r2, #36	; 0x24
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d107      	bne.n	800431e <HAL_I2C_IsDeviceReady+0x72>
 800430e:	897b      	ldrh	r3, [r7, #10]
 8004310:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004314:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004318:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800431c:	e006      	b.n	800432c <HAL_I2C_IsDeviceReady+0x80>
 800431e:	897b      	ldrh	r3, [r7, #10]
 8004320:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004324:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004328:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004332:	f7fd ffad 	bl	8002290 <HAL_GetTick>
 8004336:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b20      	cmp	r3, #32
 8004344:	bf0c      	ite	eq
 8004346:	2301      	moveq	r3, #1
 8004348:	2300      	movne	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b10      	cmp	r3, #16
 800435a:	bf0c      	ite	eq
 800435c:	2301      	moveq	r3, #1
 800435e:	2300      	movne	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004364:	e034      	b.n	80043d0 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436c:	d01a      	beq.n	80043a4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800436e:	f7fd ff8f 	bl	8002290 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d302      	bcc.n	8004384 <HAL_I2C_IsDeviceReady+0xd8>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10f      	bne.n	80043a4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e088      	b.n	80044b6 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	bf0c      	ite	eq
 80043b2:	2301      	moveq	r3, #1
 80043b4:	2300      	movne	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	bf0c      	ite	eq
 80043c8:	2301      	moveq	r3, #1
 80043ca:	2300      	movne	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80043d0:	7ffb      	ldrb	r3, [r7, #31]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d102      	bne.n	80043dc <HAL_I2C_IsDeviceReady+0x130>
 80043d6:	7fbb      	ldrb	r3, [r7, #30]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0c4      	beq.n	8004366 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	2b10      	cmp	r3, #16
 80043e8:	d01a      	beq.n	8004420 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2200      	movs	r2, #0
 80043f2:	2120      	movs	r1, #32
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f949 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e058      	b.n	80044b6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2220      	movs	r2, #32
 800440a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	e04a      	b.n	80044b6 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2200      	movs	r2, #0
 8004428:	2120      	movs	r1, #32
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f92e 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e03d      	b.n	80044b6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2210      	movs	r2, #16
 8004440:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2220      	movs	r2, #32
 8004448:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	429a      	cmp	r2, r3
 8004450:	d118      	bne.n	8004484 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004460:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2200      	movs	r2, #0
 800446a:	2120      	movs	r1, #32
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f90d 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e01c      	b.n	80044b6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2220      	movs	r2, #32
 8004482:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	3301      	adds	r3, #1
 8004488:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	429a      	cmp	r2, r3
 8004490:	f63f af39 	bhi.w	8004306 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a0:	f043 0220 	orr.w	r2, r3, #32
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80044b4:	2302      	movs	r3, #2
  }
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	68f9      	ldr	r1, [r7, #12]
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	4798      	blx	r3
  }
}
 80044ea:	bf00      	nop
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	4608      	mov	r0, r1
 80044fe:	4611      	mov	r1, r2
 8004500:	461a      	mov	r2, r3
 8004502:	4603      	mov	r3, r0
 8004504:	817b      	strh	r3, [r7, #10]
 8004506:	460b      	mov	r3, r1
 8004508:	813b      	strh	r3, [r7, #8]
 800450a:	4613      	mov	r3, r2
 800450c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	b2da      	uxtb	r2, r3
 8004512:	8979      	ldrh	r1, [r7, #10]
 8004514:	4b20      	ldr	r3, [pc, #128]	; (8004598 <I2C_RequestMemoryWrite+0xa4>)
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 fa6f 	bl	8004a00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	69b9      	ldr	r1, [r7, #24]
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f8ff 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e02c      	b.n	8004590 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d105      	bne.n	8004548 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800453c:	893b      	ldrh	r3, [r7, #8]
 800453e:	b2da      	uxtb	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	629a      	str	r2, [r3, #40]	; 0x28
 8004546:	e015      	b.n	8004574 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004548:	893b      	ldrh	r3, [r7, #8]
 800454a:	0a1b      	lsrs	r3, r3, #8
 800454c:	b29b      	uxth	r3, r3
 800454e:	b2da      	uxtb	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	69b9      	ldr	r1, [r7, #24]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f8e5 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e012      	b.n	8004590 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800456a:	893b      	ldrh	r3, [r7, #8]
 800456c:	b2da      	uxtb	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	2200      	movs	r2, #0
 800457c:	2180      	movs	r1, #128	; 0x80
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f884 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	80002000 	.word	0x80002000

0800459c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	4608      	mov	r0, r1
 80045a6:	4611      	mov	r1, r2
 80045a8:	461a      	mov	r2, r3
 80045aa:	4603      	mov	r3, r0
 80045ac:	817b      	strh	r3, [r7, #10]
 80045ae:	460b      	mov	r3, r1
 80045b0:	813b      	strh	r3, [r7, #8]
 80045b2:	4613      	mov	r3, r2
 80045b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	8979      	ldrh	r1, [r7, #10]
 80045bc:	4b20      	ldr	r3, [pc, #128]	; (8004640 <I2C_RequestMemoryRead+0xa4>)
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	2300      	movs	r3, #0
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 fa1c 	bl	8004a00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045c8:	69fa      	ldr	r2, [r7, #28]
 80045ca:	69b9      	ldr	r1, [r7, #24]
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 f8ac 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e02c      	b.n	8004636 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045dc:	88fb      	ldrh	r3, [r7, #6]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d105      	bne.n	80045ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045e2:	893b      	ldrh	r3, [r7, #8]
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28
 80045ec:	e015      	b.n	800461a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045ee:	893b      	ldrh	r3, [r7, #8]
 80045f0:	0a1b      	lsrs	r3, r3, #8
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	69b9      	ldr	r1, [r7, #24]
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 f892 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e012      	b.n	8004636 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004610:	893b      	ldrh	r3, [r7, #8]
 8004612:	b2da      	uxtb	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2200      	movs	r2, #0
 8004622:	2140      	movs	r1, #64	; 0x40
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f831 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e000      	b.n	8004636 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	80002000 	.word	0x80002000

08004644 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b02      	cmp	r3, #2
 8004658:	d103      	bne.n	8004662 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2200      	movs	r2, #0
 8004660:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b01      	cmp	r3, #1
 800466e:	d007      	beq.n	8004680 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	619a      	str	r2, [r3, #24]
  }
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800469c:	e031      	b.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a4:	d02d      	beq.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a6:	f7fd fdf3 	bl	8002290 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d302      	bcc.n	80046bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d122      	bne.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	4013      	ands	r3, r2
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	bf0c      	ite	eq
 80046cc:	2301      	moveq	r3, #1
 80046ce:	2300      	movne	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	461a      	mov	r2, r3
 80046d4:	79fb      	ldrb	r3, [r7, #7]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d113      	bne.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	f043 0220 	orr.w	r2, r3, #32
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e00f      	b.n	8004722 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699a      	ldr	r2, [r3, #24]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4013      	ands	r3, r2
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	429a      	cmp	r2, r3
 8004710:	bf0c      	ite	eq
 8004712:	2301      	moveq	r3, #1
 8004714:	2300      	movne	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	429a      	cmp	r2, r3
 800471e:	d0be      	beq.n	800469e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004736:	e033      	b.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f87f 	bl	8004840 <I2C_IsErrorOccurred>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e031      	b.n	80047b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004752:	d025      	beq.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004754:	f7fd fd9c 	bl	8002290 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	429a      	cmp	r2, r3
 8004762:	d302      	bcc.n	800476a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d11a      	bne.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b02      	cmp	r3, #2
 8004776:	d013      	beq.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e007      	b.n	80047b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d1c4      	bne.n	8004738 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047c4:	e02f      	b.n	8004826 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f838 	bl	8004840 <I2C_IsErrorOccurred>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e02d      	b.n	8004836 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047da:	f7fd fd59 	bl	8002290 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d302      	bcc.n	80047f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d11a      	bne.n	8004826 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b20      	cmp	r3, #32
 80047fc:	d013      	beq.n	8004826 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	f043 0220 	orr.w	r2, r3, #32
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e007      	b.n	8004836 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b20      	cmp	r3, #32
 8004832:	d1c8      	bne.n	80047c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08a      	sub	sp, #40	; 0x28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2b00      	cmp	r3, #0
 800486a:	d068      	beq.n	800493e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2210      	movs	r2, #16
 8004872:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004874:	e049      	b.n	800490a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487c:	d045      	beq.n	800490a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800487e:	f7fd fd07 	bl	8002290 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	429a      	cmp	r2, r3
 800488c:	d302      	bcc.n	8004894 <I2C_IsErrorOccurred+0x54>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d13a      	bne.n	800490a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800489e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b6:	d121      	bne.n	80048fc <I2C_IsErrorOccurred+0xbc>
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048be:	d01d      	beq.n	80048fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80048c0:	7cfb      	ldrb	r3, [r7, #19]
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d01a      	beq.n	80048fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048d6:	f7fd fcdb 	bl	8002290 <HAL_GetTick>
 80048da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048dc:	e00e      	b.n	80048fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048de:	f7fd fcd7 	bl	8002290 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b19      	cmp	r3, #25
 80048ea:	d907      	bls.n	80048fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	f043 0320 	orr.w	r3, r3, #32
 80048f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80048fa:	e006      	b.n	800490a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b20      	cmp	r3, #32
 8004908:	d1e9      	bne.n	80048de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b20      	cmp	r3, #32
 8004916:	d003      	beq.n	8004920 <I2C_IsErrorOccurred+0xe0>
 8004918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0aa      	beq.n	8004876 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004924:	2b00      	cmp	r3, #0
 8004926:	d103      	bne.n	8004930 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2220      	movs	r2, #32
 800492e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	f043 0304 	orr.w	r3, r3, #4
 8004936:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00b      	beq.n	8004968 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004960:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	f043 0308 	orr.w	r3, r3, #8
 8004978:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004982:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00b      	beq.n	80049ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	f043 0302 	orr.w	r3, r3, #2
 800499a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80049ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01c      	beq.n	80049ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7ff fe45 	bl	8004644 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6859      	ldr	r1, [r3, #4]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4b0d      	ldr	r3, [pc, #52]	; (80049fc <I2C_IsErrorOccurred+0x1bc>)
 80049c6:	400b      	ands	r3, r1
 80049c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	431a      	orrs	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80049ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3728      	adds	r7, #40	; 0x28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	fe00e800 	.word	0xfe00e800

08004a00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	607b      	str	r3, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	817b      	strh	r3, [r7, #10]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a12:	897b      	ldrh	r3, [r7, #10]
 8004a14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a18:	7a7b      	ldrb	r3, [r7, #9]
 8004a1a:	041b      	lsls	r3, r3, #16
 8004a1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	0d5b      	lsrs	r3, r3, #21
 8004a3a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a3e:	4b08      	ldr	r3, [pc, #32]	; (8004a60 <I2C_TransferConfig+0x60>)
 8004a40:	430b      	orrs	r3, r1
 8004a42:	43db      	mvns	r3, r3
 8004a44:	ea02 0103 	and.w	r1, r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a52:	bf00      	nop
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	03ff63ff 	.word	0x03ff63ff

08004a64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	d138      	bne.n	8004aec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e032      	b.n	8004aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2224      	movs	r2, #36	; 0x24
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ab6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6819      	ldr	r1, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e000      	b.n	8004aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004aec:	2302      	movs	r3, #2
  }
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d139      	bne.n	8004b84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e033      	b.n	8004b86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2224      	movs	r2, #36	; 0x24
 8004b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0201 	bic.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	e000      	b.n	8004b86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b84:	2302      	movs	r3, #2
  }
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
	...

08004b94 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	4a0a      	ldr	r2, [pc, #40]	; (8004bcc <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	6193      	str	r3, [r2, #24]
 8004ba8:	4b08      	ldr	r3, [pc, #32]	; (8004bcc <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8004bb4:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	4905      	ldr	r1, [pc, #20]	; (8004bd0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	600b      	str	r3, [r1, #0]
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	40010000 	.word	0x40010000

08004bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004be0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004be4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004be6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d102      	bne.n	8004bfa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f001 b83a 	b.w	8005c6e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bfe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 816f 	beq.w	8004eee <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004c10:	4bb5      	ldr	r3, [pc, #724]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f003 030c 	and.w	r3, r3, #12
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d00c      	beq.n	8004c36 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c1c:	4bb2      	ldr	r3, [pc, #712]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f003 030c 	and.w	r3, r3, #12
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d15c      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x10e>
 8004c28:	4baf      	ldr	r3, [pc, #700]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c34:	d155      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x10e>
 8004c36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c3a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004c42:	fa93 f3a3 	rbit	r3, r3
 8004c46:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c4a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c4e:	fab3 f383 	clz	r3, r3
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d102      	bne.n	8004c68 <HAL_RCC_OscConfig+0x94>
 8004c62:	4ba1      	ldr	r3, [pc, #644]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	e015      	b.n	8004c94 <HAL_RCC_OscConfig+0xc0>
 8004c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c6c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c70:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004c74:	fa93 f3a3 	rbit	r3, r3
 8004c78:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c80:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004c84:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004c88:	fa93 f3a3 	rbit	r3, r3
 8004c8c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004c90:	4b95      	ldr	r3, [pc, #596]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c98:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004c9c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004ca0:	fa92 f2a2 	rbit	r2, r2
 8004ca4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004ca8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004cac:	fab2 f282 	clz	r2, r2
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	f042 0220 	orr.w	r2, r2, #32
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	f002 021f 	and.w	r2, r2, #31
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 8111 	beq.w	8004eec <HAL_RCC_OscConfig+0x318>
 8004cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f040 8108 	bne.w	8004eec <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f000 bfc6 	b.w	8005c6e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ce6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf2:	d106      	bne.n	8004d02 <HAL_RCC_OscConfig+0x12e>
 8004cf4:	4b7c      	ldr	r3, [pc, #496]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a7b      	ldr	r2, [pc, #492]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	e036      	b.n	8004d70 <HAL_RCC_OscConfig+0x19c>
 8004d02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10c      	bne.n	8004d2c <HAL_RCC_OscConfig+0x158>
 8004d12:	4b75      	ldr	r3, [pc, #468]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a74      	ldr	r2, [pc, #464]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	4b72      	ldr	r3, [pc, #456]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a71      	ldr	r2, [pc, #452]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	e021      	b.n	8004d70 <HAL_RCC_OscConfig+0x19c>
 8004d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCC_OscConfig+0x184>
 8004d3e:	4b6a      	ldr	r3, [pc, #424]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a69      	ldr	r2, [pc, #420]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	4b67      	ldr	r3, [pc, #412]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a66      	ldr	r2, [pc, #408]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	e00b      	b.n	8004d70 <HAL_RCC_OscConfig+0x19c>
 8004d58:	4b63      	ldr	r3, [pc, #396]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a62      	ldr	r2, [pc, #392]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	4b60      	ldr	r3, [pc, #384]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a5f      	ldr	r2, [pc, #380]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d6e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d059      	beq.n	8004e34 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d80:	f7fd fa86 	bl	8002290 <HAL_GetTick>
 8004d84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d88:	e00a      	b.n	8004da0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d8a:	f7fd fa81 	bl	8002290 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b64      	cmp	r3, #100	; 0x64
 8004d98:	d902      	bls.n	8004da0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	f000 bf67 	b.w	8005c6e <HAL_RCC_OscConfig+0x109a>
 8004da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004da4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004dac:	fa93 f3a3 	rbit	r3, r3
 8004db0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004db4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db8:	fab3 f383 	clz	r3, r3
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d102      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x1fe>
 8004dcc:	4b46      	ldr	r3, [pc, #280]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	e015      	b.n	8004dfe <HAL_RCC_OscConfig+0x22a>
 8004dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dd6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004dde:	fa93 f3a3 	rbit	r3, r3
 8004de2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004de6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004dee:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004df2:	fa93 f3a3 	rbit	r3, r3
 8004df6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004dfa:	4b3b      	ldr	r3, [pc, #236]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e02:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004e06:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004e0a:	fa92 f2a2 	rbit	r2, r2
 8004e0e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004e12:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004e16:	fab2 f282 	clz	r2, r2
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	f042 0220 	orr.w	r2, r2, #32
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	f002 021f 	and.w	r2, r2, #31
 8004e26:	2101      	movs	r1, #1
 8004e28:	fa01 f202 	lsl.w	r2, r1, r2
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0ab      	beq.n	8004d8a <HAL_RCC_OscConfig+0x1b6>
 8004e32:	e05c      	b.n	8004eee <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e34:	f7fd fa2c 	bl	8002290 <HAL_GetTick>
 8004e38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e3c:	e00a      	b.n	8004e54 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e3e:	f7fd fa27 	bl	8002290 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b64      	cmp	r3, #100	; 0x64
 8004e4c:	d902      	bls.n	8004e54 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	f000 bf0d 	b.w	8005c6e <HAL_RCC_OscConfig+0x109a>
 8004e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e58:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004e60:	fa93 f3a3 	rbit	r3, r3
 8004e64:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004e68:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e6c:	fab3 f383 	clz	r3, r3
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	095b      	lsrs	r3, r3, #5
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d102      	bne.n	8004e86 <HAL_RCC_OscConfig+0x2b2>
 8004e80:	4b19      	ldr	r3, [pc, #100]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	e015      	b.n	8004eb2 <HAL_RCC_OscConfig+0x2de>
 8004e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e8a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004e92:	fa93 f3a3 	rbit	r3, r3
 8004e96:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e9e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004ea2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004ea6:	fa93 f3a3 	rbit	r3, r3
 8004eaa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004eae:	4b0e      	ldr	r3, [pc, #56]	; (8004ee8 <HAL_RCC_OscConfig+0x314>)
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004eb6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004eba:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004ebe:	fa92 f2a2 	rbit	r2, r2
 8004ec2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004ec6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004eca:	fab2 f282 	clz	r2, r2
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	f042 0220 	orr.w	r2, r2, #32
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	f002 021f 	and.w	r2, r2, #31
 8004eda:	2101      	movs	r1, #1
 8004edc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1ab      	bne.n	8004e3e <HAL_RCC_OscConfig+0x26a>
 8004ee6:	e002      	b.n	8004eee <HAL_RCC_OscConfig+0x31a>
 8004ee8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ef2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 817f 	beq.w	8005202 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004f04:	4ba7      	ldr	r3, [pc, #668]	; (80051a4 <HAL_RCC_OscConfig+0x5d0>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f003 030c 	and.w	r3, r3, #12
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00c      	beq.n	8004f2a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004f10:	4ba4      	ldr	r3, [pc, #656]	; (80051a4 <HAL_RCC_OscConfig+0x5d0>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 030c 	and.w	r3, r3, #12
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d173      	bne.n	8005004 <HAL_RCC_OscConfig+0x430>
 8004f1c:	4ba1      	ldr	r3, [pc, #644]	; (80051a4 <HAL_RCC_OscConfig+0x5d0>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f28:	d16c      	bne.n	8005004 <HAL_RCC_OscConfig+0x430>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f30:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004f34:	fa93 f3a3 	rbit	r3, r3
 8004f38:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004f3c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f40:	fab3 f383 	clz	r3, r3
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	f043 0301 	orr.w	r3, r3, #1
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d102      	bne.n	8004f5a <HAL_RCC_OscConfig+0x386>
 8004f54:	4b93      	ldr	r3, [pc, #588]	; (80051a4 <HAL_RCC_OscConfig+0x5d0>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	e013      	b.n	8004f82 <HAL_RCC_OscConfig+0x3ae>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f60:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004f64:	fa93 f3a3 	rbit	r3, r3
 8004f68:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004f72:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004f76:	fa93 f3a3 	rbit	r3, r3
 8004f7a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004f7e:	4b89      	ldr	r3, [pc, #548]	; (80051a4 <HAL_RCC_OscConfig+0x5d0>)
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	2202      	movs	r2, #2
 8004f84:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004f88:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004f8c:	fa92 f2a2 	rbit	r2, r2
 8004f90:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004f94:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004f98:	fab2 f282 	clz	r2, r2
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	f042 0220 	orr.w	r2, r2, #32
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	f002 021f 	and.w	r2, r2, #31
 8004fa8:	2101      	movs	r1, #1
 8004faa:	fa01 f202 	lsl.w	r2, r1, r2
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <HAL_RCC_OscConfig+0x3f6>
 8004fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d002      	beq.n	8004fca <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	f000 be52 	b.w	8005c6e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fca:	4b76      	ldr	r3, [pc, #472]	; (80051a4 <HAL_RCC_OscConfig+0x5d0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	21f8      	movs	r1, #248	; 0xf8
 8004fe0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004fe8:	fa91 f1a1 	rbit	r1, r1
 8004fec:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004ff0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004ff4:	fab1 f181 	clz	r1, r1
 8004ff8:	b2c9      	uxtb	r1, r1
 8004ffa:	408b      	lsls	r3, r1
 8004ffc:	4969      	ldr	r1, [pc, #420]	; (80051a4 <HAL_RCC_OscConfig+0x5d0>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005002:	e0fe      	b.n	8005202 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005008:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 8088 	beq.w	8005126 <HAL_RCC_OscConfig+0x552>
 8005016:	2301      	movs	r3, #1
 8005018:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005020:	fa93 f3a3 	rbit	r3, r3
 8005024:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8005028:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800502c:	fab3 f383 	clz	r3, r3
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005036:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	461a      	mov	r2, r3
 800503e:	2301      	movs	r3, #1
 8005040:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005042:	f7fd f925 	bl	8002290 <HAL_GetTick>
 8005046:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800504a:	e00a      	b.n	8005062 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800504c:	f7fd f920 	bl	8002290 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d902      	bls.n	8005062 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	f000 be06 	b.w	8005c6e <HAL_RCC_OscConfig+0x109a>
 8005062:	2302      	movs	r3, #2
 8005064:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005068:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800506c:	fa93 f3a3 	rbit	r3, r3
 8005070:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005074:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005078:	fab3 f383 	clz	r3, r3
 800507c:	b2db      	uxtb	r3, r3
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d102      	bne.n	8005092 <HAL_RCC_OscConfig+0x4be>
 800508c:	4b45      	ldr	r3, [pc, #276]	; (80051a4 <HAL_RCC_OscConfig+0x5d0>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	e013      	b.n	80050ba <HAL_RCC_OscConfig+0x4e6>
 8005092:	2302      	movs	r3, #2
 8005094:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005098:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800509c:	fa93 f3a3 	rbit	r3, r3
 80050a0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80050a4:	2302      	movs	r3, #2
 80050a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80050aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80050ae:	fa93 f3a3 	rbit	r3, r3
 80050b2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80050b6:	4b3b      	ldr	r3, [pc, #236]	; (80051a4 <HAL_RCC_OscConfig+0x5d0>)
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	2202      	movs	r2, #2
 80050bc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80050c0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80050c4:	fa92 f2a2 	rbit	r2, r2
 80050c8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80050cc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80050d0:	fab2 f282 	clz	r2, r2
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	f042 0220 	orr.w	r2, r2, #32
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	f002 021f 	and.w	r2, r2, #31
 80050e0:	2101      	movs	r1, #1
 80050e2:	fa01 f202 	lsl.w	r2, r1, r2
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0af      	beq.n	800504c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ec:	4b2d      	ldr	r3, [pc, #180]	; (80051a4 <HAL_RCC_OscConfig+0x5d0>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	21f8      	movs	r1, #248	; 0xf8
 8005102:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005106:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800510a:	fa91 f1a1 	rbit	r1, r1
 800510e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8005112:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005116:	fab1 f181 	clz	r1, r1
 800511a:	b2c9      	uxtb	r1, r1
 800511c:	408b      	lsls	r3, r1
 800511e:	4921      	ldr	r1, [pc, #132]	; (80051a4 <HAL_RCC_OscConfig+0x5d0>)
 8005120:	4313      	orrs	r3, r2
 8005122:	600b      	str	r3, [r1, #0]
 8005124:	e06d      	b.n	8005202 <HAL_RCC_OscConfig+0x62e>
 8005126:	2301      	movs	r3, #1
 8005128:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005130:	fa93 f3a3 	rbit	r3, r3
 8005134:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8005138:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800513c:	fab3 f383 	clz	r3, r3
 8005140:	b2db      	uxtb	r3, r3
 8005142:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005146:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	461a      	mov	r2, r3
 800514e:	2300      	movs	r3, #0
 8005150:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005152:	f7fd f89d 	bl	8002290 <HAL_GetTick>
 8005156:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515a:	e00a      	b.n	8005172 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800515c:	f7fd f898 	bl	8002290 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d902      	bls.n	8005172 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	f000 bd7e 	b.w	8005c6e <HAL_RCC_OscConfig+0x109a>
 8005172:	2302      	movs	r3, #2
 8005174:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005178:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800517c:	fa93 f3a3 	rbit	r3, r3
 8005180:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005184:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005188:	fab3 f383 	clz	r3, r3
 800518c:	b2db      	uxtb	r3, r3
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	b2db      	uxtb	r3, r3
 8005192:	f043 0301 	orr.w	r3, r3, #1
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b01      	cmp	r3, #1
 800519a:	d105      	bne.n	80051a8 <HAL_RCC_OscConfig+0x5d4>
 800519c:	4b01      	ldr	r3, [pc, #4]	; (80051a4 <HAL_RCC_OscConfig+0x5d0>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	e016      	b.n	80051d0 <HAL_RCC_OscConfig+0x5fc>
 80051a2:	bf00      	nop
 80051a4:	40021000 	.word	0x40021000
 80051a8:	2302      	movs	r3, #2
 80051aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b2:	fa93 f3a3 	rbit	r3, r3
 80051b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80051ba:	2302      	movs	r3, #2
 80051bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80051c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80051c4:	fa93 f3a3 	rbit	r3, r3
 80051c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80051cc:	4bbf      	ldr	r3, [pc, #764]	; (80054cc <HAL_RCC_OscConfig+0x8f8>)
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	2202      	movs	r2, #2
 80051d2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80051d6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80051da:	fa92 f2a2 	rbit	r2, r2
 80051de:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80051e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80051e6:	fab2 f282 	clz	r2, r2
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	f042 0220 	orr.w	r2, r2, #32
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	f002 021f 	and.w	r2, r2, #31
 80051f6:	2101      	movs	r1, #1
 80051f8:	fa01 f202 	lsl.w	r2, r1, r2
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1ac      	bne.n	800515c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005206:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0308 	and.w	r3, r3, #8
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 8113 	beq.w	800543e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800521c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d07c      	beq.n	8005322 <HAL_RCC_OscConfig+0x74e>
 8005228:	2301      	movs	r3, #1
 800522a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005232:	fa93 f3a3 	rbit	r3, r3
 8005236:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800523a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800523e:	fab3 f383 	clz	r3, r3
 8005242:	b2db      	uxtb	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	4ba2      	ldr	r3, [pc, #648]	; (80054d0 <HAL_RCC_OscConfig+0x8fc>)
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	461a      	mov	r2, r3
 800524e:	2301      	movs	r3, #1
 8005250:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005252:	f7fd f81d 	bl	8002290 <HAL_GetTick>
 8005256:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800525a:	e00a      	b.n	8005272 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800525c:	f7fd f818 	bl	8002290 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d902      	bls.n	8005272 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	f000 bcfe 	b.w	8005c6e <HAL_RCC_OscConfig+0x109a>
 8005272:	2302      	movs	r3, #2
 8005274:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800527c:	fa93 f2a3 	rbit	r2, r3
 8005280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005284:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800528e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005292:	2202      	movs	r2, #2
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800529a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	fa93 f2a3 	rbit	r2, r3
 80052a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052b6:	2202      	movs	r2, #2
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	fa93 f2a3 	rbit	r2, r3
 80052c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80052d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052d2:	4b7e      	ldr	r3, [pc, #504]	; (80054cc <HAL_RCC_OscConfig+0x8f8>)
 80052d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80052de:	2102      	movs	r1, #2
 80052e0:	6019      	str	r1, [r3, #0]
 80052e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	fa93 f1a3 	rbit	r1, r3
 80052f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80052f8:	6019      	str	r1, [r3, #0]
  return result;
 80052fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052fe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	fab3 f383 	clz	r3, r3
 8005308:	b2db      	uxtb	r3, r3
 800530a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	2101      	movs	r1, #1
 8005316:	fa01 f303 	lsl.w	r3, r1, r3
 800531a:	4013      	ands	r3, r2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d09d      	beq.n	800525c <HAL_RCC_OscConfig+0x688>
 8005320:	e08d      	b.n	800543e <HAL_RCC_OscConfig+0x86a>
 8005322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005326:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800532a:	2201      	movs	r2, #1
 800532c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005332:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	fa93 f2a3 	rbit	r2, r3
 800533c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005340:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005344:	601a      	str	r2, [r3, #0]
  return result;
 8005346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800534a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800534e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005350:	fab3 f383 	clz	r3, r3
 8005354:	b2db      	uxtb	r3, r3
 8005356:	461a      	mov	r2, r3
 8005358:	4b5d      	ldr	r3, [pc, #372]	; (80054d0 <HAL_RCC_OscConfig+0x8fc>)
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	461a      	mov	r2, r3
 8005360:	2300      	movs	r3, #0
 8005362:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005364:	f7fc ff94 	bl	8002290 <HAL_GetTick>
 8005368:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800536c:	e00a      	b.n	8005384 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800536e:	f7fc ff8f 	bl	8002290 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d902      	bls.n	8005384 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	f000 bc75 	b.w	8005c6e <HAL_RCC_OscConfig+0x109a>
 8005384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005388:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800538c:	2202      	movs	r2, #2
 800538e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005394:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	fa93 f2a3 	rbit	r2, r3
 800539e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053b0:	2202      	movs	r2, #2
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	fa93 f2a3 	rbit	r2, r3
 80053c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80053d4:	2202      	movs	r2, #2
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	fa93 f2a3 	rbit	r2, r3
 80053e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80053ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053f0:	4b36      	ldr	r3, [pc, #216]	; (80054cc <HAL_RCC_OscConfig+0x8f8>)
 80053f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80053fc:	2102      	movs	r1, #2
 80053fe:	6019      	str	r1, [r3, #0]
 8005400:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005404:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	fa93 f1a3 	rbit	r1, r3
 800540e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005412:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005416:	6019      	str	r1, [r3, #0]
  return result;
 8005418:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800541c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	fab3 f383 	clz	r3, r3
 8005426:	b2db      	uxtb	r3, r3
 8005428:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800542c:	b2db      	uxtb	r3, r3
 800542e:	f003 031f 	and.w	r3, r3, #31
 8005432:	2101      	movs	r1, #1
 8005434:	fa01 f303 	lsl.w	r3, r1, r3
 8005438:	4013      	ands	r3, r2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d197      	bne.n	800536e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800543e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005442:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 81a5 	beq.w	800579e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005454:	2300      	movs	r3, #0
 8005456:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800545a:	4b1c      	ldr	r3, [pc, #112]	; (80054cc <HAL_RCC_OscConfig+0x8f8>)
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d116      	bne.n	8005494 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005466:	4b19      	ldr	r3, [pc, #100]	; (80054cc <HAL_RCC_OscConfig+0x8f8>)
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	4a18      	ldr	r2, [pc, #96]	; (80054cc <HAL_RCC_OscConfig+0x8f8>)
 800546c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005470:	61d3      	str	r3, [r2, #28]
 8005472:	4b16      	ldr	r3, [pc, #88]	; (80054cc <HAL_RCC_OscConfig+0x8f8>)
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800547a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800547e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005488:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800548c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800548e:	2301      	movs	r3, #1
 8005490:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005494:	4b0f      	ldr	r3, [pc, #60]	; (80054d4 <HAL_RCC_OscConfig+0x900>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549c:	2b00      	cmp	r3, #0
 800549e:	d121      	bne.n	80054e4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054a0:	4b0c      	ldr	r3, [pc, #48]	; (80054d4 <HAL_RCC_OscConfig+0x900>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a0b      	ldr	r2, [pc, #44]	; (80054d4 <HAL_RCC_OscConfig+0x900>)
 80054a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054aa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ac:	f7fc fef0 	bl	8002290 <HAL_GetTick>
 80054b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b4:	e010      	b.n	80054d8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b6:	f7fc feeb 	bl	8002290 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b64      	cmp	r3, #100	; 0x64
 80054c4:	d908      	bls.n	80054d8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e3d1      	b.n	8005c6e <HAL_RCC_OscConfig+0x109a>
 80054ca:	bf00      	nop
 80054cc:	40021000 	.word	0x40021000
 80054d0:	10908120 	.word	0x10908120
 80054d4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d8:	4b8d      	ldr	r3, [pc, #564]	; (8005710 <HAL_RCC_OscConfig+0xb3c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0e8      	beq.n	80054b6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d106      	bne.n	8005502 <HAL_RCC_OscConfig+0x92e>
 80054f4:	4b87      	ldr	r3, [pc, #540]	; (8005714 <HAL_RCC_OscConfig+0xb40>)
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	4a86      	ldr	r2, [pc, #536]	; (8005714 <HAL_RCC_OscConfig+0xb40>)
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	6213      	str	r3, [r2, #32]
 8005500:	e035      	b.n	800556e <HAL_RCC_OscConfig+0x99a>
 8005502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005506:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10c      	bne.n	800552c <HAL_RCC_OscConfig+0x958>
 8005512:	4b80      	ldr	r3, [pc, #512]	; (8005714 <HAL_RCC_OscConfig+0xb40>)
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	4a7f      	ldr	r2, [pc, #508]	; (8005714 <HAL_RCC_OscConfig+0xb40>)
 8005518:	f023 0301 	bic.w	r3, r3, #1
 800551c:	6213      	str	r3, [r2, #32]
 800551e:	4b7d      	ldr	r3, [pc, #500]	; (8005714 <HAL_RCC_OscConfig+0xb40>)
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	4a7c      	ldr	r2, [pc, #496]	; (8005714 <HAL_RCC_OscConfig+0xb40>)
 8005524:	f023 0304 	bic.w	r3, r3, #4
 8005528:	6213      	str	r3, [r2, #32]
 800552a:	e020      	b.n	800556e <HAL_RCC_OscConfig+0x99a>
 800552c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005530:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	2b05      	cmp	r3, #5
 800553a:	d10c      	bne.n	8005556 <HAL_RCC_OscConfig+0x982>
 800553c:	4b75      	ldr	r3, [pc, #468]	; (8005714 <HAL_RCC_OscConfig+0xb40>)
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	4a74      	ldr	r2, [pc, #464]	; (8005714 <HAL_RCC_OscConfig+0xb40>)
 8005542:	f043 0304 	orr.w	r3, r3, #4
 8005546:	6213      	str	r3, [r2, #32]
 8005548:	4b72      	ldr	r3, [pc, #456]	; (8005714 <HAL_RCC_OscConfig+0xb40>)
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	4a71      	ldr	r2, [pc, #452]	; (8005714 <HAL_RCC_OscConfig+0xb40>)
 800554e:	f043 0301 	orr.w	r3, r3, #1
 8005552:	6213      	str	r3, [r2, #32]
 8005554:	e00b      	b.n	800556e <HAL_RCC_OscConfig+0x99a>
 8005556:	4b6f      	ldr	r3, [pc, #444]	; (8005714 <HAL_RCC_OscConfig+0xb40>)
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	4a6e      	ldr	r2, [pc, #440]	; (8005714 <HAL_RCC_OscConfig+0xb40>)
 800555c:	f023 0301 	bic.w	r3, r3, #1
 8005560:	6213      	str	r3, [r2, #32]
 8005562:	4b6c      	ldr	r3, [pc, #432]	; (8005714 <HAL_RCC_OscConfig+0xb40>)
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	4a6b      	ldr	r2, [pc, #428]	; (8005714 <HAL_RCC_OscConfig+0xb40>)
 8005568:	f023 0304 	bic.w	r3, r3, #4
 800556c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800556e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005572:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 8081 	beq.w	8005682 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005580:	f7fc fe86 	bl	8002290 <HAL_GetTick>
 8005584:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005588:	e00b      	b.n	80055a2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800558a:	f7fc fe81 	bl	8002290 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	f241 3288 	movw	r2, #5000	; 0x1388
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e365      	b.n	8005c6e <HAL_RCC_OscConfig+0x109a>
 80055a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80055aa:	2202      	movs	r2, #2
 80055ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	fa93 f2a3 	rbit	r2, r3
 80055bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80055ce:	2202      	movs	r2, #2
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	fa93 f2a3 	rbit	r2, r3
 80055e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80055e8:	601a      	str	r2, [r3, #0]
  return result;
 80055ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055ee:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80055f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f4:	fab3 f383 	clz	r3, r3
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	f043 0302 	orr.w	r3, r3, #2
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d102      	bne.n	800560e <HAL_RCC_OscConfig+0xa3a>
 8005608:	4b42      	ldr	r3, [pc, #264]	; (8005714 <HAL_RCC_OscConfig+0xb40>)
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	e013      	b.n	8005636 <HAL_RCC_OscConfig+0xa62>
 800560e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005612:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005616:	2202      	movs	r2, #2
 8005618:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800561e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	fa93 f2a3 	rbit	r2, r3
 8005628:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800562c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	4b38      	ldr	r3, [pc, #224]	; (8005714 <HAL_RCC_OscConfig+0xb40>)
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800563a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800563e:	2102      	movs	r1, #2
 8005640:	6011      	str	r1, [r2, #0]
 8005642:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005646:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800564a:	6812      	ldr	r2, [r2, #0]
 800564c:	fa92 f1a2 	rbit	r1, r2
 8005650:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005654:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005658:	6011      	str	r1, [r2, #0]
  return result;
 800565a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800565e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005662:	6812      	ldr	r2, [r2, #0]
 8005664:	fab2 f282 	clz	r2, r2
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	f002 021f 	and.w	r2, r2, #31
 8005674:	2101      	movs	r1, #1
 8005676:	fa01 f202 	lsl.w	r2, r1, r2
 800567a:	4013      	ands	r3, r2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d084      	beq.n	800558a <HAL_RCC_OscConfig+0x9b6>
 8005680:	e083      	b.n	800578a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005682:	f7fc fe05 	bl	8002290 <HAL_GetTick>
 8005686:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800568a:	e00b      	b.n	80056a4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800568c:	f7fc fe00 	bl	8002290 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	f241 3288 	movw	r2, #5000	; 0x1388
 800569c:	4293      	cmp	r3, r2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e2e4      	b.n	8005c6e <HAL_RCC_OscConfig+0x109a>
 80056a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056a8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80056ac:	2202      	movs	r2, #2
 80056ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	fa93 f2a3 	rbit	r2, r3
 80056be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056cc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80056d0:	2202      	movs	r2, #2
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056d8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	fa93 f2a3 	rbit	r2, r3
 80056e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80056ea:	601a      	str	r2, [r3, #0]
  return result;
 80056ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056f0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80056f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f6:	fab3 f383 	clz	r3, r3
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	095b      	lsrs	r3, r3, #5
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	f043 0302 	orr.w	r3, r3, #2
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d106      	bne.n	8005718 <HAL_RCC_OscConfig+0xb44>
 800570a:	4b02      	ldr	r3, [pc, #8]	; (8005714 <HAL_RCC_OscConfig+0xb40>)
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	e017      	b.n	8005740 <HAL_RCC_OscConfig+0xb6c>
 8005710:	40007000 	.word	0x40007000
 8005714:	40021000 	.word	0x40021000
 8005718:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800571c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005720:	2202      	movs	r2, #2
 8005722:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005728:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	fa93 f2a3 	rbit	r2, r3
 8005732:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005736:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	4bb3      	ldr	r3, [pc, #716]	; (8005a0c <HAL_RCC_OscConfig+0xe38>)
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005744:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005748:	2102      	movs	r1, #2
 800574a:	6011      	str	r1, [r2, #0]
 800574c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005750:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005754:	6812      	ldr	r2, [r2, #0]
 8005756:	fa92 f1a2 	rbit	r1, r2
 800575a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800575e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8005762:	6011      	str	r1, [r2, #0]
  return result;
 8005764:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005768:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800576c:	6812      	ldr	r2, [r2, #0]
 800576e:	fab2 f282 	clz	r2, r2
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	f002 021f 	and.w	r2, r2, #31
 800577e:	2101      	movs	r1, #1
 8005780:	fa01 f202 	lsl.w	r2, r1, r2
 8005784:	4013      	ands	r3, r2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d180      	bne.n	800568c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800578a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800578e:	2b01      	cmp	r3, #1
 8005790:	d105      	bne.n	800579e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005792:	4b9e      	ldr	r3, [pc, #632]	; (8005a0c <HAL_RCC_OscConfig+0xe38>)
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	4a9d      	ldr	r2, [pc, #628]	; (8005a0c <HAL_RCC_OscConfig+0xe38>)
 8005798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800579c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800579e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 825e 	beq.w	8005c6c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057b0:	4b96      	ldr	r3, [pc, #600]	; (8005a0c <HAL_RCC_OscConfig+0xe38>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 030c 	and.w	r3, r3, #12
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	f000 821f 	beq.w	8005bfc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	f040 8170 	bne.w	8005ab0 <HAL_RCC_OscConfig+0xedc>
 80057d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057d4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80057d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057e2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	fa93 f2a3 	rbit	r2, r3
 80057ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057f0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80057f4:	601a      	str	r2, [r3, #0]
  return result;
 80057f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057fa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80057fe:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005800:	fab3 f383 	clz	r3, r3
 8005804:	b2db      	uxtb	r3, r3
 8005806:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800580a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	461a      	mov	r2, r3
 8005812:	2300      	movs	r3, #0
 8005814:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005816:	f7fc fd3b 	bl	8002290 <HAL_GetTick>
 800581a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800581e:	e009      	b.n	8005834 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005820:	f7fc fd36 	bl	8002290 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e21c      	b.n	8005c6e <HAL_RCC_OscConfig+0x109a>
 8005834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005838:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800583c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005840:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005846:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	fa93 f2a3 	rbit	r2, r3
 8005850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005854:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005858:	601a      	str	r2, [r3, #0]
  return result;
 800585a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800585e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005862:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005864:	fab3 f383 	clz	r3, r3
 8005868:	b2db      	uxtb	r3, r3
 800586a:	095b      	lsrs	r3, r3, #5
 800586c:	b2db      	uxtb	r3, r3
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b01      	cmp	r3, #1
 8005876:	d102      	bne.n	800587e <HAL_RCC_OscConfig+0xcaa>
 8005878:	4b64      	ldr	r3, [pc, #400]	; (8005a0c <HAL_RCC_OscConfig+0xe38>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	e027      	b.n	80058ce <HAL_RCC_OscConfig+0xcfa>
 800587e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005882:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005886:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800588a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800588c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005890:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	fa93 f2a3 	rbit	r2, r3
 800589a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800589e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058a8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80058ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058b6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	fa93 f2a3 	rbit	r2, r3
 80058c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058c4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	4b50      	ldr	r3, [pc, #320]	; (8005a0c <HAL_RCC_OscConfig+0xe38>)
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80058d2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80058d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80058da:	6011      	str	r1, [r2, #0]
 80058dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80058e0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	fa92 f1a2 	rbit	r1, r2
 80058ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80058ee:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80058f2:	6011      	str	r1, [r2, #0]
  return result;
 80058f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80058f8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	fab2 f282 	clz	r2, r2
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	f042 0220 	orr.w	r2, r2, #32
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	f002 021f 	and.w	r2, r2, #31
 800590e:	2101      	movs	r1, #1
 8005910:	fa01 f202 	lsl.w	r2, r1, r2
 8005914:	4013      	ands	r3, r2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d182      	bne.n	8005820 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800591a:	4b3c      	ldr	r3, [pc, #240]	; (8005a0c <HAL_RCC_OscConfig+0xe38>)
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	f023 020f 	bic.w	r2, r3, #15
 8005922:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005926:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	4937      	ldr	r1, [pc, #220]	; (8005a0c <HAL_RCC_OscConfig+0xe38>)
 8005930:	4313      	orrs	r3, r2
 8005932:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005934:	4b35      	ldr	r3, [pc, #212]	; (8005a0c <HAL_RCC_OscConfig+0xe38>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800593c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005940:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6a19      	ldr	r1, [r3, #32]
 8005948:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800594c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	430b      	orrs	r3, r1
 8005956:	492d      	ldr	r1, [pc, #180]	; (8005a0c <HAL_RCC_OscConfig+0xe38>)
 8005958:	4313      	orrs	r3, r2
 800595a:	604b      	str	r3, [r1, #4]
 800595c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005960:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005964:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800596a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800596e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	fa93 f2a3 	rbit	r2, r3
 8005978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800597c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005980:	601a      	str	r2, [r3, #0]
  return result;
 8005982:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005986:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800598a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800598c:	fab3 f383 	clz	r3, r3
 8005990:	b2db      	uxtb	r3, r3
 8005992:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005996:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	461a      	mov	r2, r3
 800599e:	2301      	movs	r3, #1
 80059a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a2:	f7fc fc75 	bl	8002290 <HAL_GetTick>
 80059a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059aa:	e009      	b.n	80059c0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ac:	f7fc fc70 	bl	8002290 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e156      	b.n	8005c6e <HAL_RCC_OscConfig+0x109a>
 80059c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059c4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80059c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059d2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	fa93 f2a3 	rbit	r2, r3
 80059dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059e0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80059e4:	601a      	str	r2, [r3, #0]
  return result;
 80059e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059ea:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80059ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059f0:	fab3 f383 	clz	r3, r3
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	f043 0301 	orr.w	r3, r3, #1
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d105      	bne.n	8005a10 <HAL_RCC_OscConfig+0xe3c>
 8005a04:	4b01      	ldr	r3, [pc, #4]	; (8005a0c <HAL_RCC_OscConfig+0xe38>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	e02a      	b.n	8005a60 <HAL_RCC_OscConfig+0xe8c>
 8005a0a:	bf00      	nop
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a14:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005a18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a22:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	fa93 f2a3 	rbit	r2, r3
 8005a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a30:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a3a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005a3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a48:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	fa93 f2a3 	rbit	r2, r3
 8005a52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a56:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	4b86      	ldr	r3, [pc, #536]	; (8005c78 <HAL_RCC_OscConfig+0x10a4>)
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005a64:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005a68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005a6c:	6011      	str	r1, [r2, #0]
 8005a6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005a72:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	fa92 f1a2 	rbit	r1, r2
 8005a7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005a80:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005a84:	6011      	str	r1, [r2, #0]
  return result;
 8005a86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005a8a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005a8e:	6812      	ldr	r2, [r2, #0]
 8005a90:	fab2 f282 	clz	r2, r2
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	f042 0220 	orr.w	r2, r2, #32
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	f002 021f 	and.w	r2, r2, #31
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f43f af7f 	beq.w	80059ac <HAL_RCC_OscConfig+0xdd8>
 8005aae:	e0dd      	b.n	8005c6c <HAL_RCC_OscConfig+0x1098>
 8005ab0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ab4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005ab8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ac2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	fa93 f2a3 	rbit	r2, r3
 8005acc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ad0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005ad4:	601a      	str	r2, [r3, #0]
  return result;
 8005ad6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ada:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005ade:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae0:	fab3 f383 	clz	r3, r3
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005aea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	461a      	mov	r2, r3
 8005af2:	2300      	movs	r3, #0
 8005af4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af6:	f7fc fbcb 	bl	8002290 <HAL_GetTick>
 8005afa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005afe:	e009      	b.n	8005b14 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b00:	f7fc fbc6 	bl	8002290 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e0ac      	b.n	8005c6e <HAL_RCC_OscConfig+0x109a>
 8005b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b18:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005b1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b26:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	fa93 f2a3 	rbit	r2, r3
 8005b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b34:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005b38:	601a      	str	r2, [r3, #0]
  return result;
 8005b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b3e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005b42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b44:	fab3 f383 	clz	r3, r3
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f043 0301 	orr.w	r3, r3, #1
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d102      	bne.n	8005b5e <HAL_RCC_OscConfig+0xf8a>
 8005b58:	4b47      	ldr	r3, [pc, #284]	; (8005c78 <HAL_RCC_OscConfig+0x10a4>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	e027      	b.n	8005bae <HAL_RCC_OscConfig+0xfda>
 8005b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b62:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005b66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b70:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	fa93 f2a3 	rbit	r2, r3
 8005b7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b7e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b88:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b96:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	fa93 f2a3 	rbit	r2, r3
 8005ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ba4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	4b33      	ldr	r3, [pc, #204]	; (8005c78 <HAL_RCC_OscConfig+0x10a4>)
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005bb2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005bb6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005bba:	6011      	str	r1, [r2, #0]
 8005bbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005bc0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	fa92 f1a2 	rbit	r1, r2
 8005bca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005bce:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005bd2:	6011      	str	r1, [r2, #0]
  return result;
 8005bd4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005bd8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005bdc:	6812      	ldr	r2, [r2, #0]
 8005bde:	fab2 f282 	clz	r2, r2
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	f042 0220 	orr.w	r2, r2, #32
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	f002 021f 	and.w	r2, r2, #31
 8005bee:	2101      	movs	r1, #1
 8005bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d182      	bne.n	8005b00 <HAL_RCC_OscConfig+0xf2c>
 8005bfa:	e037      	b.n	8005c6c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e02e      	b.n	8005c6e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c10:	4b19      	ldr	r3, [pc, #100]	; (8005c78 <HAL_RCC_OscConfig+0x10a4>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005c18:	4b17      	ldr	r3, [pc, #92]	; (8005c78 <HAL_RCC_OscConfig+0x10a4>)
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005c24:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d117      	bne.n	8005c68 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005c38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005c3c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d10b      	bne.n	8005c68 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005c50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c54:	f003 020f 	and.w	r2, r3, #15
 8005c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d001      	beq.n	8005c6c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e000      	b.n	8005c6e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	40021000 	.word	0x40021000

08005c7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b09e      	sub	sp, #120	; 0x78
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e162      	b.n	8005f5a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c94:	4b90      	ldr	r3, [pc, #576]	; (8005ed8 <HAL_RCC_ClockConfig+0x25c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d910      	bls.n	8005cc4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca2:	4b8d      	ldr	r3, [pc, #564]	; (8005ed8 <HAL_RCC_ClockConfig+0x25c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f023 0207 	bic.w	r2, r3, #7
 8005caa:	498b      	ldr	r1, [pc, #556]	; (8005ed8 <HAL_RCC_ClockConfig+0x25c>)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb2:	4b89      	ldr	r3, [pc, #548]	; (8005ed8 <HAL_RCC_ClockConfig+0x25c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d001      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e14a      	b.n	8005f5a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d008      	beq.n	8005ce2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cd0:	4b82      	ldr	r3, [pc, #520]	; (8005edc <HAL_RCC_ClockConfig+0x260>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	497f      	ldr	r1, [pc, #508]	; (8005edc <HAL_RCC_ClockConfig+0x260>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 80dc 	beq.w	8005ea8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d13c      	bne.n	8005d72 <HAL_RCC_ClockConfig+0xf6>
 8005cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cfc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d00:	fa93 f3a3 	rbit	r3, r3
 8005d04:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d08:	fab3 f383 	clz	r3, r3
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	095b      	lsrs	r3, r3, #5
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	f043 0301 	orr.w	r3, r3, #1
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d102      	bne.n	8005d22 <HAL_RCC_ClockConfig+0xa6>
 8005d1c:	4b6f      	ldr	r3, [pc, #444]	; (8005edc <HAL_RCC_ClockConfig+0x260>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	e00f      	b.n	8005d42 <HAL_RCC_ClockConfig+0xc6>
 8005d22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d2a:	fa93 f3a3 	rbit	r3, r3
 8005d2e:	667b      	str	r3, [r7, #100]	; 0x64
 8005d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d34:	663b      	str	r3, [r7, #96]	; 0x60
 8005d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d38:	fa93 f3a3 	rbit	r3, r3
 8005d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d3e:	4b67      	ldr	r3, [pc, #412]	; (8005edc <HAL_RCC_ClockConfig+0x260>)
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d46:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d4a:	fa92 f2a2 	rbit	r2, r2
 8005d4e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005d50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d52:	fab2 f282 	clz	r2, r2
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	f042 0220 	orr.w	r2, r2, #32
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	f002 021f 	and.w	r2, r2, #31
 8005d62:	2101      	movs	r1, #1
 8005d64:	fa01 f202 	lsl.w	r2, r1, r2
 8005d68:	4013      	ands	r3, r2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d17b      	bne.n	8005e66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e0f3      	b.n	8005f5a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d13c      	bne.n	8005df4 <HAL_RCC_ClockConfig+0x178>
 8005d7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d82:	fa93 f3a3 	rbit	r3, r3
 8005d86:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d8a:	fab3 f383 	clz	r3, r3
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	095b      	lsrs	r3, r3, #5
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	f043 0301 	orr.w	r3, r3, #1
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d102      	bne.n	8005da4 <HAL_RCC_ClockConfig+0x128>
 8005d9e:	4b4f      	ldr	r3, [pc, #316]	; (8005edc <HAL_RCC_ClockConfig+0x260>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	e00f      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x148>
 8005da4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005da8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dac:	fa93 f3a3 	rbit	r3, r3
 8005db0:	647b      	str	r3, [r7, #68]	; 0x44
 8005db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005db6:	643b      	str	r3, [r7, #64]	; 0x40
 8005db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dba:	fa93 f3a3 	rbit	r3, r3
 8005dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc0:	4b46      	ldr	r3, [pc, #280]	; (8005edc <HAL_RCC_ClockConfig+0x260>)
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005dc8:	63ba      	str	r2, [r7, #56]	; 0x38
 8005dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dcc:	fa92 f2a2 	rbit	r2, r2
 8005dd0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dd4:	fab2 f282 	clz	r2, r2
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	f042 0220 	orr.w	r2, r2, #32
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	f002 021f 	and.w	r2, r2, #31
 8005de4:	2101      	movs	r1, #1
 8005de6:	fa01 f202 	lsl.w	r2, r1, r2
 8005dea:	4013      	ands	r3, r2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d13a      	bne.n	8005e66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e0b2      	b.n	8005f5a <HAL_RCC_ClockConfig+0x2de>
 8005df4:	2302      	movs	r3, #2
 8005df6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	fa93 f3a3 	rbit	r3, r3
 8005dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e02:	fab3 f383 	clz	r3, r3
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	095b      	lsrs	r3, r3, #5
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	f043 0301 	orr.w	r3, r3, #1
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d102      	bne.n	8005e1c <HAL_RCC_ClockConfig+0x1a0>
 8005e16:	4b31      	ldr	r3, [pc, #196]	; (8005edc <HAL_RCC_ClockConfig+0x260>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	e00d      	b.n	8005e38 <HAL_RCC_ClockConfig+0x1bc>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	fa93 f3a3 	rbit	r3, r3
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24
 8005e28:	2302      	movs	r3, #2
 8005e2a:	623b      	str	r3, [r7, #32]
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	fa93 f3a3 	rbit	r3, r3
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	4b29      	ldr	r3, [pc, #164]	; (8005edc <HAL_RCC_ClockConfig+0x260>)
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	2202      	movs	r2, #2
 8005e3a:	61ba      	str	r2, [r7, #24]
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	fa92 f2a2 	rbit	r2, r2
 8005e42:	617a      	str	r2, [r7, #20]
  return result;
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	fab2 f282 	clz	r2, r2
 8005e4a:	b2d2      	uxtb	r2, r2
 8005e4c:	f042 0220 	orr.w	r2, r2, #32
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	f002 021f 	and.w	r2, r2, #31
 8005e56:	2101      	movs	r1, #1
 8005e58:	fa01 f202 	lsl.w	r2, r1, r2
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e079      	b.n	8005f5a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e66:	4b1d      	ldr	r3, [pc, #116]	; (8005edc <HAL_RCC_ClockConfig+0x260>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f023 0203 	bic.w	r2, r3, #3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	491a      	ldr	r1, [pc, #104]	; (8005edc <HAL_RCC_ClockConfig+0x260>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e78:	f7fc fa0a 	bl	8002290 <HAL_GetTick>
 8005e7c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e7e:	e00a      	b.n	8005e96 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e80:	f7fc fa06 	bl	8002290 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e061      	b.n	8005f5a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e96:	4b11      	ldr	r3, [pc, #68]	; (8005edc <HAL_RCC_ClockConfig+0x260>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f003 020c 	and.w	r2, r3, #12
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d1eb      	bne.n	8005e80 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ea8:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <HAL_RCC_ClockConfig+0x25c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0307 	and.w	r3, r3, #7
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d214      	bcs.n	8005ee0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eb6:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <HAL_RCC_ClockConfig+0x25c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f023 0207 	bic.w	r2, r3, #7
 8005ebe:	4906      	ldr	r1, [pc, #24]	; (8005ed8 <HAL_RCC_ClockConfig+0x25c>)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ec6:	4b04      	ldr	r3, [pc, #16]	; (8005ed8 <HAL_RCC_ClockConfig+0x25c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d005      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e040      	b.n	8005f5a <HAL_RCC_ClockConfig+0x2de>
 8005ed8:	40022000 	.word	0x40022000
 8005edc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d008      	beq.n	8005efe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eec:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <HAL_RCC_ClockConfig+0x2e8>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	491a      	ldr	r1, [pc, #104]	; (8005f64 <HAL_RCC_ClockConfig+0x2e8>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0308 	and.w	r3, r3, #8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d009      	beq.n	8005f1e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f0a:	4b16      	ldr	r3, [pc, #88]	; (8005f64 <HAL_RCC_ClockConfig+0x2e8>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	4912      	ldr	r1, [pc, #72]	; (8005f64 <HAL_RCC_ClockConfig+0x2e8>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005f1e:	f000 f829 	bl	8005f74 <HAL_RCC_GetSysClockFreq>
 8005f22:	4601      	mov	r1, r0
 8005f24:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <HAL_RCC_ClockConfig+0x2e8>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f2c:	22f0      	movs	r2, #240	; 0xf0
 8005f2e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	fa92 f2a2 	rbit	r2, r2
 8005f36:	60fa      	str	r2, [r7, #12]
  return result;
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	fab2 f282 	clz	r2, r2
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	40d3      	lsrs	r3, r2
 8005f42:	4a09      	ldr	r2, [pc, #36]	; (8005f68 <HAL_RCC_ClockConfig+0x2ec>)
 8005f44:	5cd3      	ldrb	r3, [r2, r3]
 8005f46:	fa21 f303 	lsr.w	r3, r1, r3
 8005f4a:	4a08      	ldr	r2, [pc, #32]	; (8005f6c <HAL_RCC_ClockConfig+0x2f0>)
 8005f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005f4e:	4b08      	ldr	r3, [pc, #32]	; (8005f70 <HAL_RCC_ClockConfig+0x2f4>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fc f958 	bl	8002208 <HAL_InitTick>
  
  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3778      	adds	r7, #120	; 0x78
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	40021000 	.word	0x40021000
 8005f68:	0800be44 	.word	0x0800be44
 8005f6c:	20000000 	.word	0x20000000
 8005f70:	20000004 	.word	0x20000004

08005f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b08b      	sub	sp, #44	; 0x2c
 8005f78:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61fb      	str	r3, [r7, #28]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	2300      	movs	r3, #0
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
 8005f86:	2300      	movs	r3, #0
 8005f88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005f8e:	4b2a      	ldr	r3, [pc, #168]	; (8006038 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	f003 030c 	and.w	r3, r3, #12
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d002      	beq.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x30>
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d003      	beq.n	8005faa <HAL_RCC_GetSysClockFreq+0x36>
 8005fa2:	e03f      	b.n	8006024 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005fa4:	4b25      	ldr	r3, [pc, #148]	; (800603c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005fa6:	623b      	str	r3, [r7, #32]
      break;
 8005fa8:	e03f      	b.n	800602a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005fb0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005fb4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	fa92 f2a2 	rbit	r2, r2
 8005fbc:	607a      	str	r2, [r7, #4]
  return result;
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	fab2 f282 	clz	r2, r2
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	40d3      	lsrs	r3, r2
 8005fc8:	4a1d      	ldr	r2, [pc, #116]	; (8006040 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005fca:	5cd3      	ldrb	r3, [r2, r3]
 8005fcc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005fce:	4b1a      	ldr	r3, [pc, #104]	; (8006038 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	f003 030f 	and.w	r3, r3, #15
 8005fd6:	220f      	movs	r2, #15
 8005fd8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	fa92 f2a2 	rbit	r2, r2
 8005fe0:	60fa      	str	r2, [r7, #12]
  return result;
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	fab2 f282 	clz	r2, r2
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	40d3      	lsrs	r3, r2
 8005fec:	4a15      	ldr	r2, [pc, #84]	; (8006044 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005fee:	5cd3      	ldrb	r3, [r2, r3]
 8005ff0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d008      	beq.n	800600e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005ffc:	4a0f      	ldr	r2, [pc, #60]	; (800603c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	fbb2 f2f3 	udiv	r2, r2, r3
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	fb02 f303 	mul.w	r3, r2, r3
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
 800600c:	e007      	b.n	800601e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800600e:	4a0b      	ldr	r2, [pc, #44]	; (800603c <HAL_RCC_GetSysClockFreq+0xc8>)
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	fbb2 f2f3 	udiv	r2, r2, r3
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	fb02 f303 	mul.w	r3, r2, r3
 800601c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	623b      	str	r3, [r7, #32]
      break;
 8006022:	e002      	b.n	800602a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006024:	4b05      	ldr	r3, [pc, #20]	; (800603c <HAL_RCC_GetSysClockFreq+0xc8>)
 8006026:	623b      	str	r3, [r7, #32]
      break;
 8006028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800602a:	6a3b      	ldr	r3, [r7, #32]
}
 800602c:	4618      	mov	r0, r3
 800602e:	372c      	adds	r7, #44	; 0x2c
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	40021000 	.word	0x40021000
 800603c:	007a1200 	.word	0x007a1200
 8006040:	0800be5c 	.word	0x0800be5c
 8006044:	0800be6c 	.word	0x0800be6c

08006048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800604c:	4b03      	ldr	r3, [pc, #12]	; (800605c <HAL_RCC_GetHCLKFreq+0x14>)
 800604e:	681b      	ldr	r3, [r3, #0]
}
 8006050:	4618      	mov	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	20000000 	.word	0x20000000

08006060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006066:	f7ff ffef 	bl	8006048 <HAL_RCC_GetHCLKFreq>
 800606a:	4601      	mov	r1, r0
 800606c:	4b0b      	ldr	r3, [pc, #44]	; (800609c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006074:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006078:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	fa92 f2a2 	rbit	r2, r2
 8006080:	603a      	str	r2, [r7, #0]
  return result;
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	fab2 f282 	clz	r2, r2
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	40d3      	lsrs	r3, r2
 800608c:	4a04      	ldr	r2, [pc, #16]	; (80060a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800608e:	5cd3      	ldrb	r3, [r2, r3]
 8006090:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	40021000 	.word	0x40021000
 80060a0:	0800be54 	.word	0x0800be54

080060a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80060aa:	f7ff ffcd 	bl	8006048 <HAL_RCC_GetHCLKFreq>
 80060ae:	4601      	mov	r1, r0
 80060b0:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80060b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80060bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	fa92 f2a2 	rbit	r2, r2
 80060c4:	603a      	str	r2, [r7, #0]
  return result;
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	fab2 f282 	clz	r2, r2
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	40d3      	lsrs	r3, r2
 80060d0:	4a04      	ldr	r2, [pc, #16]	; (80060e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80060d2:	5cd3      	ldrb	r3, [r2, r3]
 80060d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40021000 	.word	0x40021000
 80060e4:	0800be54 	.word	0x0800be54

080060e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b092      	sub	sp, #72	; 0x48
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80060f8:	2300      	movs	r3, #0
 80060fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 80d4 	beq.w	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800610c:	4b4e      	ldr	r3, [pc, #312]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10e      	bne.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006118:	4b4b      	ldr	r3, [pc, #300]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	4a4a      	ldr	r2, [pc, #296]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800611e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006122:	61d3      	str	r3, [r2, #28]
 8006124:	4b48      	ldr	r3, [pc, #288]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800612c:	60bb      	str	r3, [r7, #8]
 800612e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006130:	2301      	movs	r3, #1
 8006132:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006136:	4b45      	ldr	r3, [pc, #276]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613e:	2b00      	cmp	r3, #0
 8006140:	d118      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006142:	4b42      	ldr	r3, [pc, #264]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a41      	ldr	r2, [pc, #260]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800614c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800614e:	f7fc f89f 	bl	8002290 <HAL_GetTick>
 8006152:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006154:	e008      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006156:	f7fc f89b 	bl	8002290 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b64      	cmp	r3, #100	; 0x64
 8006162:	d901      	bls.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e1d6      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006168:	4b38      	ldr	r3, [pc, #224]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0f0      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006174:	4b34      	ldr	r3, [pc, #208]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800617c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800617e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 8084 	beq.w	800628e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800618e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006190:	429a      	cmp	r2, r3
 8006192:	d07c      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006194:	4b2c      	ldr	r3, [pc, #176]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800619c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800619e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	fa93 f3a3 	rbit	r3, r3
 80061aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80061ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061ae:	fab3 f383 	clz	r3, r3
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	461a      	mov	r2, r3
 80061b6:	4b26      	ldr	r3, [pc, #152]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061b8:	4413      	add	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	461a      	mov	r2, r3
 80061be:	2301      	movs	r3, #1
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	fa93 f3a3 	rbit	r3, r3
 80061ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80061d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061d2:	fab3 f383 	clz	r3, r3
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	4b1d      	ldr	r3, [pc, #116]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061dc:	4413      	add	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	461a      	mov	r2, r3
 80061e2:	2300      	movs	r3, #0
 80061e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80061e6:	4a18      	ldr	r2, [pc, #96]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80061ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d04b      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f6:	f7fc f84b 	bl	8002290 <HAL_GetTick>
 80061fa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061fc:	e00a      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061fe:	f7fc f847 	bl	8002290 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	f241 3288 	movw	r2, #5000	; 0x1388
 800620c:	4293      	cmp	r3, r2
 800620e:	d901      	bls.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e180      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006214:	2302      	movs	r3, #2
 8006216:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	fa93 f3a3 	rbit	r3, r3
 800621e:	627b      	str	r3, [r7, #36]	; 0x24
 8006220:	2302      	movs	r3, #2
 8006222:	623b      	str	r3, [r7, #32]
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	fa93 f3a3 	rbit	r3, r3
 800622a:	61fb      	str	r3, [r7, #28]
  return result;
 800622c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800622e:	fab3 f383 	clz	r3, r3
 8006232:	b2db      	uxtb	r3, r3
 8006234:	095b      	lsrs	r3, r3, #5
 8006236:	b2db      	uxtb	r3, r3
 8006238:	f043 0302 	orr.w	r3, r3, #2
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d108      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006242:	4b01      	ldr	r3, [pc, #4]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	e00d      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006248:	40021000 	.word	0x40021000
 800624c:	40007000 	.word	0x40007000
 8006250:	10908100 	.word	0x10908100
 8006254:	2302      	movs	r3, #2
 8006256:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	fa93 f3a3 	rbit	r3, r3
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	4b9a      	ldr	r3, [pc, #616]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	2202      	movs	r2, #2
 8006266:	613a      	str	r2, [r7, #16]
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	fa92 f2a2 	rbit	r2, r2
 800626e:	60fa      	str	r2, [r7, #12]
  return result;
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	fab2 f282 	clz	r2, r2
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	f002 021f 	and.w	r2, r2, #31
 8006282:	2101      	movs	r1, #1
 8006284:	fa01 f202 	lsl.w	r2, r1, r2
 8006288:	4013      	ands	r3, r2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0b7      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800628e:	4b8f      	ldr	r3, [pc, #572]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	498c      	ldr	r1, [pc, #560]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800629c:	4313      	orrs	r3, r2
 800629e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80062a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d105      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062a8:	4b88      	ldr	r3, [pc, #544]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	4a87      	ldr	r2, [pc, #540]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d008      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062c0:	4b82      	ldr	r3, [pc, #520]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c4:	f023 0203 	bic.w	r2, r3, #3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	497f      	ldr	r1, [pc, #508]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d008      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062de:	4b7b      	ldr	r3, [pc, #492]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	4978      	ldr	r1, [pc, #480]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d008      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062fc:	4b73      	ldr	r3, [pc, #460]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	4970      	ldr	r1, [pc, #448]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800630a:	4313      	orrs	r3, r2
 800630c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0320 	and.w	r3, r3, #32
 8006316:	2b00      	cmp	r3, #0
 8006318:	d008      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800631a:	4b6c      	ldr	r3, [pc, #432]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	f023 0210 	bic.w	r2, r3, #16
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	4969      	ldr	r1, [pc, #420]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006328:	4313      	orrs	r3, r2
 800632a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d008      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006338:	4b64      	ldr	r3, [pc, #400]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006344:	4961      	ldr	r1, [pc, #388]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006346:	4313      	orrs	r3, r2
 8006348:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006352:	2b00      	cmp	r3, #0
 8006354:	d008      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006356:	4b5d      	ldr	r3, [pc, #372]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	f023 0220 	bic.w	r2, r3, #32
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	495a      	ldr	r1, [pc, #360]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006364:	4313      	orrs	r3, r2
 8006366:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d008      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006374:	4b55      	ldr	r3, [pc, #340]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006378:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	4952      	ldr	r1, [pc, #328]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006382:	4313      	orrs	r3, r2
 8006384:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0308 	and.w	r3, r3, #8
 800638e:	2b00      	cmp	r3, #0
 8006390:	d008      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006392:	4b4e      	ldr	r3, [pc, #312]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	494b      	ldr	r1, [pc, #300]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0310 	and.w	r3, r3, #16
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d008      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063b0:	4b46      	ldr	r3, [pc, #280]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	4943      	ldr	r1, [pc, #268]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d008      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80063ce:	4b3f      	ldr	r3, [pc, #252]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063da:	493c      	ldr	r1, [pc, #240]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d008      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80063ec:	4b37      	ldr	r3, [pc, #220]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f8:	4934      	ldr	r1, [pc, #208]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006406:	2b00      	cmp	r3, #0
 8006408:	d008      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800640a:	4b30      	ldr	r3, [pc, #192]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	492d      	ldr	r1, [pc, #180]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006418:	4313      	orrs	r3, r2
 800641a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d008      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006428:	4b28      	ldr	r3, [pc, #160]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006434:	4925      	ldr	r1, [pc, #148]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006436:	4313      	orrs	r3, r2
 8006438:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d008      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006446:	4b21      	ldr	r3, [pc, #132]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	491e      	ldr	r1, [pc, #120]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006454:	4313      	orrs	r3, r2
 8006456:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d008      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006464:	4b19      	ldr	r3, [pc, #100]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	4916      	ldr	r1, [pc, #88]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006472:	4313      	orrs	r3, r2
 8006474:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d008      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006482:	4b12      	ldr	r3, [pc, #72]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648e:	490f      	ldr	r1, [pc, #60]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006490:	4313      	orrs	r3, r2
 8006492:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d008      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80064a0:	4b0a      	ldr	r3, [pc, #40]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ac:	4907      	ldr	r1, [pc, #28]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00c      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80064be:	4b03      	ldr	r3, [pc, #12]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	e002      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80064ca:	bf00      	nop
 80064cc:	40021000 	.word	0x40021000
 80064d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d2:	4913      	ldr	r1, [pc, #76]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d008      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80064e4:	4b0e      	ldr	r3, [pc, #56]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80064e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f0:	490b      	ldr	r1, [pc, #44]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d008      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006502:	4b07      	ldr	r3, [pc, #28]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800650e:	4904      	ldr	r1, [pc, #16]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006510:	4313      	orrs	r3, r2
 8006512:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3748      	adds	r7, #72	; 0x48
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	40021000 	.word	0x40021000

08006524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e049      	b.n	80065ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7fb fbf2 	bl	8001d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3304      	adds	r3, #4
 8006560:	4619      	mov	r1, r3
 8006562:	4610      	mov	r0, r2
 8006564:	f000 fd44 	bl	8006ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d001      	beq.n	80065ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e04f      	b.n	800668c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0201 	orr.w	r2, r2, #1
 8006602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a23      	ldr	r2, [pc, #140]	; (8006698 <HAL_TIM_Base_Start_IT+0xc4>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d01d      	beq.n	800664a <HAL_TIM_Base_Start_IT+0x76>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006616:	d018      	beq.n	800664a <HAL_TIM_Base_Start_IT+0x76>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a1f      	ldr	r2, [pc, #124]	; (800669c <HAL_TIM_Base_Start_IT+0xc8>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d013      	beq.n	800664a <HAL_TIM_Base_Start_IT+0x76>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a1e      	ldr	r2, [pc, #120]	; (80066a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d00e      	beq.n	800664a <HAL_TIM_Base_Start_IT+0x76>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a1c      	ldr	r2, [pc, #112]	; (80066a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d009      	beq.n	800664a <HAL_TIM_Base_Start_IT+0x76>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a1b      	ldr	r2, [pc, #108]	; (80066a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d004      	beq.n	800664a <HAL_TIM_Base_Start_IT+0x76>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a19      	ldr	r2, [pc, #100]	; (80066ac <HAL_TIM_Base_Start_IT+0xd8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d115      	bne.n	8006676 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	4b17      	ldr	r3, [pc, #92]	; (80066b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006652:	4013      	ands	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2b06      	cmp	r3, #6
 800665a:	d015      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0xb4>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006662:	d011      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0201 	orr.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006674:	e008      	b.n	8006688 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f042 0201 	orr.w	r2, r2, #1
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	e000      	b.n	800668a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006688:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	40012c00 	.word	0x40012c00
 800669c:	40000400 	.word	0x40000400
 80066a0:	40000800 	.word	0x40000800
 80066a4:	40013400 	.word	0x40013400
 80066a8:	40014000 	.word	0x40014000
 80066ac:	40015000 	.word	0x40015000
 80066b0:	00010007 	.word	0x00010007

080066b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e049      	b.n	800675a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d106      	bne.n	80066e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f841 	bl	8006762 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3304      	adds	r3, #4
 80066f0:	4619      	mov	r1, r3
 80066f2:	4610      	mov	r0, r2
 80066f4:	f000 fc7c 	bl	8006ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
	...

08006778 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d109      	bne.n	800679c <HAL_TIM_PWM_Start+0x24>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b01      	cmp	r3, #1
 8006792:	bf14      	ite	ne
 8006794:	2301      	movne	r3, #1
 8006796:	2300      	moveq	r3, #0
 8006798:	b2db      	uxtb	r3, r3
 800679a:	e03c      	b.n	8006816 <HAL_TIM_PWM_Start+0x9e>
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d109      	bne.n	80067b6 <HAL_TIM_PWM_Start+0x3e>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	bf14      	ite	ne
 80067ae:	2301      	movne	r3, #1
 80067b0:	2300      	moveq	r3, #0
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	e02f      	b.n	8006816 <HAL_TIM_PWM_Start+0x9e>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d109      	bne.n	80067d0 <HAL_TIM_PWM_Start+0x58>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	bf14      	ite	ne
 80067c8:	2301      	movne	r3, #1
 80067ca:	2300      	moveq	r3, #0
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	e022      	b.n	8006816 <HAL_TIM_PWM_Start+0x9e>
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2b0c      	cmp	r3, #12
 80067d4:	d109      	bne.n	80067ea <HAL_TIM_PWM_Start+0x72>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b01      	cmp	r3, #1
 80067e0:	bf14      	ite	ne
 80067e2:	2301      	movne	r3, #1
 80067e4:	2300      	moveq	r3, #0
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	e015      	b.n	8006816 <HAL_TIM_PWM_Start+0x9e>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b10      	cmp	r3, #16
 80067ee:	d109      	bne.n	8006804 <HAL_TIM_PWM_Start+0x8c>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	bf14      	ite	ne
 80067fc:	2301      	movne	r3, #1
 80067fe:	2300      	moveq	r3, #0
 8006800:	b2db      	uxtb	r3, r3
 8006802:	e008      	b.n	8006816 <HAL_TIM_PWM_Start+0x9e>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b01      	cmp	r3, #1
 800680e:	bf14      	ite	ne
 8006810:	2301      	movne	r3, #1
 8006812:	2300      	moveq	r3, #0
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e0a1      	b.n	8006962 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d104      	bne.n	800682e <HAL_TIM_PWM_Start+0xb6>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800682c:	e023      	b.n	8006876 <HAL_TIM_PWM_Start+0xfe>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b04      	cmp	r3, #4
 8006832:	d104      	bne.n	800683e <HAL_TIM_PWM_Start+0xc6>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800683c:	e01b      	b.n	8006876 <HAL_TIM_PWM_Start+0xfe>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b08      	cmp	r3, #8
 8006842:	d104      	bne.n	800684e <HAL_TIM_PWM_Start+0xd6>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800684c:	e013      	b.n	8006876 <HAL_TIM_PWM_Start+0xfe>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b0c      	cmp	r3, #12
 8006852:	d104      	bne.n	800685e <HAL_TIM_PWM_Start+0xe6>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800685c:	e00b      	b.n	8006876 <HAL_TIM_PWM_Start+0xfe>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b10      	cmp	r3, #16
 8006862:	d104      	bne.n	800686e <HAL_TIM_PWM_Start+0xf6>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800686c:	e003      	b.n	8006876 <HAL_TIM_PWM_Start+0xfe>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2202      	movs	r2, #2
 8006872:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2201      	movs	r2, #1
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fff4 	bl	800786c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a38      	ldr	r2, [pc, #224]	; (800696c <HAL_TIM_PWM_Start+0x1f4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d018      	beq.n	80068c0 <HAL_TIM_PWM_Start+0x148>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a37      	ldr	r2, [pc, #220]	; (8006970 <HAL_TIM_PWM_Start+0x1f8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d013      	beq.n	80068c0 <HAL_TIM_PWM_Start+0x148>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a35      	ldr	r2, [pc, #212]	; (8006974 <HAL_TIM_PWM_Start+0x1fc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00e      	beq.n	80068c0 <HAL_TIM_PWM_Start+0x148>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a34      	ldr	r2, [pc, #208]	; (8006978 <HAL_TIM_PWM_Start+0x200>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d009      	beq.n	80068c0 <HAL_TIM_PWM_Start+0x148>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a32      	ldr	r2, [pc, #200]	; (800697c <HAL_TIM_PWM_Start+0x204>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d004      	beq.n	80068c0 <HAL_TIM_PWM_Start+0x148>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a31      	ldr	r2, [pc, #196]	; (8006980 <HAL_TIM_PWM_Start+0x208>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d101      	bne.n	80068c4 <HAL_TIM_PWM_Start+0x14c>
 80068c0:	2301      	movs	r3, #1
 80068c2:	e000      	b.n	80068c6 <HAL_TIM_PWM_Start+0x14e>
 80068c4:	2300      	movs	r3, #0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d007      	beq.n	80068da <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a23      	ldr	r2, [pc, #140]	; (800696c <HAL_TIM_PWM_Start+0x1f4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d01d      	beq.n	8006920 <HAL_TIM_PWM_Start+0x1a8>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ec:	d018      	beq.n	8006920 <HAL_TIM_PWM_Start+0x1a8>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a24      	ldr	r2, [pc, #144]	; (8006984 <HAL_TIM_PWM_Start+0x20c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d013      	beq.n	8006920 <HAL_TIM_PWM_Start+0x1a8>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a22      	ldr	r2, [pc, #136]	; (8006988 <HAL_TIM_PWM_Start+0x210>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00e      	beq.n	8006920 <HAL_TIM_PWM_Start+0x1a8>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a1a      	ldr	r2, [pc, #104]	; (8006970 <HAL_TIM_PWM_Start+0x1f8>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d009      	beq.n	8006920 <HAL_TIM_PWM_Start+0x1a8>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a18      	ldr	r2, [pc, #96]	; (8006974 <HAL_TIM_PWM_Start+0x1fc>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d004      	beq.n	8006920 <HAL_TIM_PWM_Start+0x1a8>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a19      	ldr	r2, [pc, #100]	; (8006980 <HAL_TIM_PWM_Start+0x208>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d115      	bne.n	800694c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689a      	ldr	r2, [r3, #8]
 8006926:	4b19      	ldr	r3, [pc, #100]	; (800698c <HAL_TIM_PWM_Start+0x214>)
 8006928:	4013      	ands	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2b06      	cmp	r3, #6
 8006930:	d015      	beq.n	800695e <HAL_TIM_PWM_Start+0x1e6>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006938:	d011      	beq.n	800695e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0201 	orr.w	r2, r2, #1
 8006948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800694a:	e008      	b.n	800695e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0201 	orr.w	r2, r2, #1
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	e000      	b.n	8006960 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800695e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40012c00 	.word	0x40012c00
 8006970:	40013400 	.word	0x40013400
 8006974:	40014000 	.word	0x40014000
 8006978:	40014400 	.word	0x40014400
 800697c:	40014800 	.word	0x40014800
 8006980:	40015000 	.word	0x40015000
 8006984:	40000400 	.word	0x40000400
 8006988:	40000800 	.word	0x40000800
 800698c:	00010007 	.word	0x00010007

08006990 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d122      	bne.n	80069ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d11b      	bne.n	80069ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f06f 0202 	mvn.w	r2, #2
 80069bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	f003 0303 	and.w	r3, r3, #3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 faed 	bl	8006fb2 <HAL_TIM_IC_CaptureCallback>
 80069d8:	e005      	b.n	80069e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fadf 	bl	8006f9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 faf0 	bl	8006fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d122      	bne.n	8006a40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	d11b      	bne.n	8006a40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f06f 0204 	mvn.w	r2, #4
 8006a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2202      	movs	r2, #2
 8006a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fac3 	bl	8006fb2 <HAL_TIM_IC_CaptureCallback>
 8006a2c:	e005      	b.n	8006a3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fab5 	bl	8006f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fac6 	bl	8006fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f003 0308 	and.w	r3, r3, #8
 8006a4a:	2b08      	cmp	r3, #8
 8006a4c:	d122      	bne.n	8006a94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f003 0308 	and.w	r3, r3, #8
 8006a58:	2b08      	cmp	r3, #8
 8006a5a:	d11b      	bne.n	8006a94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f06f 0208 	mvn.w	r2, #8
 8006a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2204      	movs	r2, #4
 8006a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	f003 0303 	and.w	r3, r3, #3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fa99 	bl	8006fb2 <HAL_TIM_IC_CaptureCallback>
 8006a80:	e005      	b.n	8006a8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fa8b 	bl	8006f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fa9c 	bl	8006fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f003 0310 	and.w	r3, r3, #16
 8006a9e:	2b10      	cmp	r3, #16
 8006aa0:	d122      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f003 0310 	and.w	r3, r3, #16
 8006aac:	2b10      	cmp	r3, #16
 8006aae:	d11b      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0210 	mvn.w	r2, #16
 8006ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2208      	movs	r2, #8
 8006abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fa6f 	bl	8006fb2 <HAL_TIM_IC_CaptureCallback>
 8006ad4:	e005      	b.n	8006ae2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fa61 	bl	8006f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fa72 	bl	8006fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d10e      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d107      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f06f 0201 	mvn.w	r2, #1
 8006b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fa3b 	bl	8006f8a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1e:	2b80      	cmp	r3, #128	; 0x80
 8006b20:	d10e      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2c:	2b80      	cmp	r3, #128	; 0x80
 8006b2e:	d107      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 ff52 	bl	80079e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b4e:	d10e      	bne.n	8006b6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5a:	2b80      	cmp	r3, #128	; 0x80
 8006b5c:	d107      	bne.n	8006b6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 ff45 	bl	80079f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b78:	2b40      	cmp	r3, #64	; 0x40
 8006b7a:	d10e      	bne.n	8006b9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b86:	2b40      	cmp	r3, #64	; 0x40
 8006b88:	d107      	bne.n	8006b9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fa20 	bl	8006fda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	f003 0320 	and.w	r3, r3, #32
 8006ba4:	2b20      	cmp	r3, #32
 8006ba6:	d10e      	bne.n	8006bc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	f003 0320 	and.w	r3, r3, #32
 8006bb2:	2b20      	cmp	r3, #32
 8006bb4:	d107      	bne.n	8006bc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f06f 0220 	mvn.w	r2, #32
 8006bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 ff05 	bl	80079d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bc6:	bf00      	nop
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e0ff      	b.n	8006dee <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b14      	cmp	r3, #20
 8006bfa:	f200 80f0 	bhi.w	8006dde <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006bfe:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c04:	08006c59 	.word	0x08006c59
 8006c08:	08006ddf 	.word	0x08006ddf
 8006c0c:	08006ddf 	.word	0x08006ddf
 8006c10:	08006ddf 	.word	0x08006ddf
 8006c14:	08006c99 	.word	0x08006c99
 8006c18:	08006ddf 	.word	0x08006ddf
 8006c1c:	08006ddf 	.word	0x08006ddf
 8006c20:	08006ddf 	.word	0x08006ddf
 8006c24:	08006cdb 	.word	0x08006cdb
 8006c28:	08006ddf 	.word	0x08006ddf
 8006c2c:	08006ddf 	.word	0x08006ddf
 8006c30:	08006ddf 	.word	0x08006ddf
 8006c34:	08006d1b 	.word	0x08006d1b
 8006c38:	08006ddf 	.word	0x08006ddf
 8006c3c:	08006ddf 	.word	0x08006ddf
 8006c40:	08006ddf 	.word	0x08006ddf
 8006c44:	08006d5d 	.word	0x08006d5d
 8006c48:	08006ddf 	.word	0x08006ddf
 8006c4c:	08006ddf 	.word	0x08006ddf
 8006c50:	08006ddf 	.word	0x08006ddf
 8006c54:	08006d9d 	.word	0x08006d9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fa64 	bl	800712c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699a      	ldr	r2, [r3, #24]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0208 	orr.w	r2, r2, #8
 8006c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0204 	bic.w	r2, r2, #4
 8006c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6999      	ldr	r1, [r3, #24]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	691a      	ldr	r2, [r3, #16]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	619a      	str	r2, [r3, #24]
      break;
 8006c96:	e0a5      	b.n	8006de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68b9      	ldr	r1, [r7, #8]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fade 	bl	8007260 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699a      	ldr	r2, [r3, #24]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6999      	ldr	r1, [r3, #24]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	021a      	lsls	r2, r3, #8
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	619a      	str	r2, [r3, #24]
      break;
 8006cd8:	e084      	b.n	8006de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 fb51 	bl	8007388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69da      	ldr	r2, [r3, #28]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f042 0208 	orr.w	r2, r2, #8
 8006cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69da      	ldr	r2, [r3, #28]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0204 	bic.w	r2, r2, #4
 8006d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69d9      	ldr	r1, [r3, #28]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	691a      	ldr	r2, [r3, #16]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	61da      	str	r2, [r3, #28]
      break;
 8006d18:	e064      	b.n	8006de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 fbc3 	bl	80074ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69da      	ldr	r2, [r3, #28]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69da      	ldr	r2, [r3, #28]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69d9      	ldr	r1, [r3, #28]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	021a      	lsls	r2, r3, #8
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	61da      	str	r2, [r3, #28]
      break;
 8006d5a:	e043      	b.n	8006de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68b9      	ldr	r1, [r7, #8]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fc12 	bl	800758c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0208 	orr.w	r2, r2, #8
 8006d76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0204 	bic.w	r2, r2, #4
 8006d86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	691a      	ldr	r2, [r3, #16]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d9a:	e023      	b.n	8006de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68b9      	ldr	r1, [r7, #8]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fc5c 	bl	8007660 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006db6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	021a      	lsls	r2, r3, #8
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ddc:	e002      	b.n	8006de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	75fb      	strb	r3, [r7, #23]
      break;
 8006de2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop

08006df8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d101      	bne.n	8006e14 <HAL_TIM_ConfigClockSource+0x1c>
 8006e10:	2302      	movs	r3, #2
 8006e12:	e0b6      	b.n	8006f82 <HAL_TIM_ConfigClockSource+0x18a>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e50:	d03e      	beq.n	8006ed0 <HAL_TIM_ConfigClockSource+0xd8>
 8006e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e56:	f200 8087 	bhi.w	8006f68 <HAL_TIM_ConfigClockSource+0x170>
 8006e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e5e:	f000 8086 	beq.w	8006f6e <HAL_TIM_ConfigClockSource+0x176>
 8006e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e66:	d87f      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x170>
 8006e68:	2b70      	cmp	r3, #112	; 0x70
 8006e6a:	d01a      	beq.n	8006ea2 <HAL_TIM_ConfigClockSource+0xaa>
 8006e6c:	2b70      	cmp	r3, #112	; 0x70
 8006e6e:	d87b      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x170>
 8006e70:	2b60      	cmp	r3, #96	; 0x60
 8006e72:	d050      	beq.n	8006f16 <HAL_TIM_ConfigClockSource+0x11e>
 8006e74:	2b60      	cmp	r3, #96	; 0x60
 8006e76:	d877      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x170>
 8006e78:	2b50      	cmp	r3, #80	; 0x50
 8006e7a:	d03c      	beq.n	8006ef6 <HAL_TIM_ConfigClockSource+0xfe>
 8006e7c:	2b50      	cmp	r3, #80	; 0x50
 8006e7e:	d873      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x170>
 8006e80:	2b40      	cmp	r3, #64	; 0x40
 8006e82:	d058      	beq.n	8006f36 <HAL_TIM_ConfigClockSource+0x13e>
 8006e84:	2b40      	cmp	r3, #64	; 0x40
 8006e86:	d86f      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x170>
 8006e88:	2b30      	cmp	r3, #48	; 0x30
 8006e8a:	d064      	beq.n	8006f56 <HAL_TIM_ConfigClockSource+0x15e>
 8006e8c:	2b30      	cmp	r3, #48	; 0x30
 8006e8e:	d86b      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x170>
 8006e90:	2b20      	cmp	r3, #32
 8006e92:	d060      	beq.n	8006f56 <HAL_TIM_ConfigClockSource+0x15e>
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	d867      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x170>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d05c      	beq.n	8006f56 <HAL_TIM_ConfigClockSource+0x15e>
 8006e9c:	2b10      	cmp	r3, #16
 8006e9e:	d05a      	beq.n	8006f56 <HAL_TIM_ConfigClockSource+0x15e>
 8006ea0:	e062      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6818      	ldr	r0, [r3, #0]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	6899      	ldr	r1, [r3, #8]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f000 fcbb 	bl	800782c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ec4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	609a      	str	r2, [r3, #8]
      break;
 8006ece:	e04f      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6818      	ldr	r0, [r3, #0]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	6899      	ldr	r1, [r3, #8]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f000 fca4 	bl	800782c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ef2:	609a      	str	r2, [r3, #8]
      break;
 8006ef4:	e03c      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6818      	ldr	r0, [r3, #0]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	6859      	ldr	r1, [r3, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	461a      	mov	r2, r3
 8006f04:	f000 fc18 	bl	8007738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2150      	movs	r1, #80	; 0x50
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 fc71 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 8006f14:	e02c      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6818      	ldr	r0, [r3, #0]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	6859      	ldr	r1, [r3, #4]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	461a      	mov	r2, r3
 8006f24:	f000 fc37 	bl	8007796 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2160      	movs	r1, #96	; 0x60
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 fc61 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 8006f34:	e01c      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6818      	ldr	r0, [r3, #0]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	6859      	ldr	r1, [r3, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	461a      	mov	r2, r3
 8006f44:	f000 fbf8 	bl	8007738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2140      	movs	r1, #64	; 0x40
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 fc51 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 8006f54:	e00c      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	f000 fc48 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 8006f66:	e003      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f6c:	e000      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006f6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b083      	sub	sp, #12
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fce:	bf00      	nop
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fe2:	bf00      	nop
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
	...

08006ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a42      	ldr	r2, [pc, #264]	; (800710c <TIM_Base_SetConfig+0x11c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d013      	beq.n	8007030 <TIM_Base_SetConfig+0x40>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800700e:	d00f      	beq.n	8007030 <TIM_Base_SetConfig+0x40>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a3f      	ldr	r2, [pc, #252]	; (8007110 <TIM_Base_SetConfig+0x120>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d00b      	beq.n	8007030 <TIM_Base_SetConfig+0x40>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a3e      	ldr	r2, [pc, #248]	; (8007114 <TIM_Base_SetConfig+0x124>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d007      	beq.n	8007030 <TIM_Base_SetConfig+0x40>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a3d      	ldr	r2, [pc, #244]	; (8007118 <TIM_Base_SetConfig+0x128>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d003      	beq.n	8007030 <TIM_Base_SetConfig+0x40>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a3c      	ldr	r2, [pc, #240]	; (800711c <TIM_Base_SetConfig+0x12c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d108      	bne.n	8007042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a31      	ldr	r2, [pc, #196]	; (800710c <TIM_Base_SetConfig+0x11c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d01f      	beq.n	800708a <TIM_Base_SetConfig+0x9a>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007050:	d01b      	beq.n	800708a <TIM_Base_SetConfig+0x9a>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a2e      	ldr	r2, [pc, #184]	; (8007110 <TIM_Base_SetConfig+0x120>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d017      	beq.n	800708a <TIM_Base_SetConfig+0x9a>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a2d      	ldr	r2, [pc, #180]	; (8007114 <TIM_Base_SetConfig+0x124>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d013      	beq.n	800708a <TIM_Base_SetConfig+0x9a>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a2c      	ldr	r2, [pc, #176]	; (8007118 <TIM_Base_SetConfig+0x128>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d00f      	beq.n	800708a <TIM_Base_SetConfig+0x9a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a2c      	ldr	r2, [pc, #176]	; (8007120 <TIM_Base_SetConfig+0x130>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00b      	beq.n	800708a <TIM_Base_SetConfig+0x9a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a2b      	ldr	r2, [pc, #172]	; (8007124 <TIM_Base_SetConfig+0x134>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d007      	beq.n	800708a <TIM_Base_SetConfig+0x9a>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a2a      	ldr	r2, [pc, #168]	; (8007128 <TIM_Base_SetConfig+0x138>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d003      	beq.n	800708a <TIM_Base_SetConfig+0x9a>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a25      	ldr	r2, [pc, #148]	; (800711c <TIM_Base_SetConfig+0x12c>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d108      	bne.n	800709c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	4313      	orrs	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a12      	ldr	r2, [pc, #72]	; (800710c <TIM_Base_SetConfig+0x11c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d013      	beq.n	80070f0 <TIM_Base_SetConfig+0x100>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a13      	ldr	r2, [pc, #76]	; (8007118 <TIM_Base_SetConfig+0x128>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d00f      	beq.n	80070f0 <TIM_Base_SetConfig+0x100>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a13      	ldr	r2, [pc, #76]	; (8007120 <TIM_Base_SetConfig+0x130>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d00b      	beq.n	80070f0 <TIM_Base_SetConfig+0x100>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a12      	ldr	r2, [pc, #72]	; (8007124 <TIM_Base_SetConfig+0x134>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d007      	beq.n	80070f0 <TIM_Base_SetConfig+0x100>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a11      	ldr	r2, [pc, #68]	; (8007128 <TIM_Base_SetConfig+0x138>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d003      	beq.n	80070f0 <TIM_Base_SetConfig+0x100>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a0c      	ldr	r2, [pc, #48]	; (800711c <TIM_Base_SetConfig+0x12c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d103      	bne.n	80070f8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	691a      	ldr	r2, [r3, #16]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	615a      	str	r2, [r3, #20]
}
 80070fe:	bf00      	nop
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	40012c00 	.word	0x40012c00
 8007110:	40000400 	.word	0x40000400
 8007114:	40000800 	.word	0x40000800
 8007118:	40013400 	.word	0x40013400
 800711c:	40015000 	.word	0x40015000
 8007120:	40014000 	.word	0x40014000
 8007124:	40014400 	.word	0x40014400
 8007128:	40014800 	.word	0x40014800

0800712c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	f023 0201 	bic.w	r2, r3, #1
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800715a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800715e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0303 	bic.w	r3, r3, #3
 8007166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f023 0302 	bic.w	r3, r3, #2
 8007178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	4313      	orrs	r3, r2
 8007182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a30      	ldr	r2, [pc, #192]	; (8007248 <TIM_OC1_SetConfig+0x11c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d013      	beq.n	80071b4 <TIM_OC1_SetConfig+0x88>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a2f      	ldr	r2, [pc, #188]	; (800724c <TIM_OC1_SetConfig+0x120>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00f      	beq.n	80071b4 <TIM_OC1_SetConfig+0x88>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a2e      	ldr	r2, [pc, #184]	; (8007250 <TIM_OC1_SetConfig+0x124>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00b      	beq.n	80071b4 <TIM_OC1_SetConfig+0x88>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a2d      	ldr	r2, [pc, #180]	; (8007254 <TIM_OC1_SetConfig+0x128>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d007      	beq.n	80071b4 <TIM_OC1_SetConfig+0x88>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a2c      	ldr	r2, [pc, #176]	; (8007258 <TIM_OC1_SetConfig+0x12c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d003      	beq.n	80071b4 <TIM_OC1_SetConfig+0x88>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a2b      	ldr	r2, [pc, #172]	; (800725c <TIM_OC1_SetConfig+0x130>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d10c      	bne.n	80071ce <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f023 0308 	bic.w	r3, r3, #8
 80071ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f023 0304 	bic.w	r3, r3, #4
 80071cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a1d      	ldr	r2, [pc, #116]	; (8007248 <TIM_OC1_SetConfig+0x11c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d013      	beq.n	80071fe <TIM_OC1_SetConfig+0xd2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a1c      	ldr	r2, [pc, #112]	; (800724c <TIM_OC1_SetConfig+0x120>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d00f      	beq.n	80071fe <TIM_OC1_SetConfig+0xd2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a1b      	ldr	r2, [pc, #108]	; (8007250 <TIM_OC1_SetConfig+0x124>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d00b      	beq.n	80071fe <TIM_OC1_SetConfig+0xd2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a1a      	ldr	r2, [pc, #104]	; (8007254 <TIM_OC1_SetConfig+0x128>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d007      	beq.n	80071fe <TIM_OC1_SetConfig+0xd2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a19      	ldr	r2, [pc, #100]	; (8007258 <TIM_OC1_SetConfig+0x12c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d003      	beq.n	80071fe <TIM_OC1_SetConfig+0xd2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a18      	ldr	r2, [pc, #96]	; (800725c <TIM_OC1_SetConfig+0x130>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d111      	bne.n	8007222 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800720c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	4313      	orrs	r3, r2
 8007216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	4313      	orrs	r3, r2
 8007220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	621a      	str	r2, [r3, #32]
}
 800723c:	bf00      	nop
 800723e:	371c      	adds	r7, #28
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	40012c00 	.word	0x40012c00
 800724c:	40013400 	.word	0x40013400
 8007250:	40014000 	.word	0x40014000
 8007254:	40014400 	.word	0x40014400
 8007258:	40014800 	.word	0x40014800
 800725c:	40015000 	.word	0x40015000

08007260 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	f023 0210 	bic.w	r2, r3, #16
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800728e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800729a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	021b      	lsls	r3, r3, #8
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f023 0320 	bic.w	r3, r3, #32
 80072ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a2c      	ldr	r2, [pc, #176]	; (8007370 <TIM_OC2_SetConfig+0x110>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d007      	beq.n	80072d4 <TIM_OC2_SetConfig+0x74>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a2b      	ldr	r2, [pc, #172]	; (8007374 <TIM_OC2_SetConfig+0x114>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d003      	beq.n	80072d4 <TIM_OC2_SetConfig+0x74>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a2a      	ldr	r2, [pc, #168]	; (8007378 <TIM_OC2_SetConfig+0x118>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d10d      	bne.n	80072f0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	011b      	lsls	r3, r3, #4
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a1f      	ldr	r2, [pc, #124]	; (8007370 <TIM_OC2_SetConfig+0x110>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d013      	beq.n	8007320 <TIM_OC2_SetConfig+0xc0>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a1e      	ldr	r2, [pc, #120]	; (8007374 <TIM_OC2_SetConfig+0x114>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d00f      	beq.n	8007320 <TIM_OC2_SetConfig+0xc0>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a1e      	ldr	r2, [pc, #120]	; (800737c <TIM_OC2_SetConfig+0x11c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00b      	beq.n	8007320 <TIM_OC2_SetConfig+0xc0>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a1d      	ldr	r2, [pc, #116]	; (8007380 <TIM_OC2_SetConfig+0x120>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d007      	beq.n	8007320 <TIM_OC2_SetConfig+0xc0>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a1c      	ldr	r2, [pc, #112]	; (8007384 <TIM_OC2_SetConfig+0x124>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d003      	beq.n	8007320 <TIM_OC2_SetConfig+0xc0>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a17      	ldr	r2, [pc, #92]	; (8007378 <TIM_OC2_SetConfig+0x118>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d113      	bne.n	8007348 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007326:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800732e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	4313      	orrs	r3, r2
 8007346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	621a      	str	r2, [r3, #32]
}
 8007362:	bf00      	nop
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	40012c00 	.word	0x40012c00
 8007374:	40013400 	.word	0x40013400
 8007378:	40015000 	.word	0x40015000
 800737c:	40014000 	.word	0x40014000
 8007380:	40014400 	.word	0x40014400
 8007384:	40014800 	.word	0x40014800

08007388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 0303 	bic.w	r3, r3, #3
 80073c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	021b      	lsls	r3, r3, #8
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a2b      	ldr	r2, [pc, #172]	; (8007494 <TIM_OC3_SetConfig+0x10c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d007      	beq.n	80073fa <TIM_OC3_SetConfig+0x72>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a2a      	ldr	r2, [pc, #168]	; (8007498 <TIM_OC3_SetConfig+0x110>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d003      	beq.n	80073fa <TIM_OC3_SetConfig+0x72>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a29      	ldr	r2, [pc, #164]	; (800749c <TIM_OC3_SetConfig+0x114>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d10d      	bne.n	8007416 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007400:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	021b      	lsls	r3, r3, #8
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	4313      	orrs	r3, r2
 800740c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007414:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a1e      	ldr	r2, [pc, #120]	; (8007494 <TIM_OC3_SetConfig+0x10c>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d013      	beq.n	8007446 <TIM_OC3_SetConfig+0xbe>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a1d      	ldr	r2, [pc, #116]	; (8007498 <TIM_OC3_SetConfig+0x110>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00f      	beq.n	8007446 <TIM_OC3_SetConfig+0xbe>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a1d      	ldr	r2, [pc, #116]	; (80074a0 <TIM_OC3_SetConfig+0x118>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d00b      	beq.n	8007446 <TIM_OC3_SetConfig+0xbe>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a1c      	ldr	r2, [pc, #112]	; (80074a4 <TIM_OC3_SetConfig+0x11c>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d007      	beq.n	8007446 <TIM_OC3_SetConfig+0xbe>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a1b      	ldr	r2, [pc, #108]	; (80074a8 <TIM_OC3_SetConfig+0x120>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d003      	beq.n	8007446 <TIM_OC3_SetConfig+0xbe>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a16      	ldr	r2, [pc, #88]	; (800749c <TIM_OC3_SetConfig+0x114>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d113      	bne.n	800746e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800744c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	4313      	orrs	r3, r2
 8007460:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	4313      	orrs	r3, r2
 800746c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	621a      	str	r2, [r3, #32]
}
 8007488:	bf00      	nop
 800748a:	371c      	adds	r7, #28
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	40012c00 	.word	0x40012c00
 8007498:	40013400 	.word	0x40013400
 800749c:	40015000 	.word	0x40015000
 80074a0:	40014000 	.word	0x40014000
 80074a4:	40014400 	.word	0x40014400
 80074a8:	40014800 	.word	0x40014800

080074ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	021b      	lsls	r3, r3, #8
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	031b      	lsls	r3, r3, #12
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	4313      	orrs	r3, r2
 8007506:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a1a      	ldr	r2, [pc, #104]	; (8007574 <TIM_OC4_SetConfig+0xc8>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d013      	beq.n	8007538 <TIM_OC4_SetConfig+0x8c>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a19      	ldr	r2, [pc, #100]	; (8007578 <TIM_OC4_SetConfig+0xcc>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d00f      	beq.n	8007538 <TIM_OC4_SetConfig+0x8c>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a18      	ldr	r2, [pc, #96]	; (800757c <TIM_OC4_SetConfig+0xd0>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d00b      	beq.n	8007538 <TIM_OC4_SetConfig+0x8c>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a17      	ldr	r2, [pc, #92]	; (8007580 <TIM_OC4_SetConfig+0xd4>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d007      	beq.n	8007538 <TIM_OC4_SetConfig+0x8c>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a16      	ldr	r2, [pc, #88]	; (8007584 <TIM_OC4_SetConfig+0xd8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d003      	beq.n	8007538 <TIM_OC4_SetConfig+0x8c>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a15      	ldr	r2, [pc, #84]	; (8007588 <TIM_OC4_SetConfig+0xdc>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d109      	bne.n	800754c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800753e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	019b      	lsls	r3, r3, #6
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	4313      	orrs	r3, r2
 800754a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	621a      	str	r2, [r3, #32]
}
 8007566:	bf00      	nop
 8007568:	371c      	adds	r7, #28
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	40012c00 	.word	0x40012c00
 8007578:	40013400 	.word	0x40013400
 800757c:	40014000 	.word	0x40014000
 8007580:	40014400 	.word	0x40014400
 8007584:	40014800 	.word	0x40014800
 8007588:	40015000 	.word	0x40015000

0800758c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800758c:	b480      	push	{r7}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80075d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	041b      	lsls	r3, r3, #16
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	4313      	orrs	r3, r2
 80075dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a19      	ldr	r2, [pc, #100]	; (8007648 <TIM_OC5_SetConfig+0xbc>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d013      	beq.n	800760e <TIM_OC5_SetConfig+0x82>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a18      	ldr	r2, [pc, #96]	; (800764c <TIM_OC5_SetConfig+0xc0>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d00f      	beq.n	800760e <TIM_OC5_SetConfig+0x82>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a17      	ldr	r2, [pc, #92]	; (8007650 <TIM_OC5_SetConfig+0xc4>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d00b      	beq.n	800760e <TIM_OC5_SetConfig+0x82>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a16      	ldr	r2, [pc, #88]	; (8007654 <TIM_OC5_SetConfig+0xc8>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d007      	beq.n	800760e <TIM_OC5_SetConfig+0x82>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a15      	ldr	r2, [pc, #84]	; (8007658 <TIM_OC5_SetConfig+0xcc>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d003      	beq.n	800760e <TIM_OC5_SetConfig+0x82>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a14      	ldr	r2, [pc, #80]	; (800765c <TIM_OC5_SetConfig+0xd0>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d109      	bne.n	8007622 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007614:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	021b      	lsls	r3, r3, #8
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	4313      	orrs	r3, r2
 8007620:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	621a      	str	r2, [r3, #32]
}
 800763c:	bf00      	nop
 800763e:	371c      	adds	r7, #28
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	40012c00 	.word	0x40012c00
 800764c:	40013400 	.word	0x40013400
 8007650:	40014000 	.word	0x40014000
 8007654:	40014400 	.word	0x40014400
 8007658:	40014800 	.word	0x40014800
 800765c:	40015000 	.word	0x40015000

08007660 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007660:	b480      	push	{r7}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800768e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	021b      	lsls	r3, r3, #8
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	4313      	orrs	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	051b      	lsls	r3, r3, #20
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a1a      	ldr	r2, [pc, #104]	; (8007720 <TIM_OC6_SetConfig+0xc0>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d013      	beq.n	80076e4 <TIM_OC6_SetConfig+0x84>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a19      	ldr	r2, [pc, #100]	; (8007724 <TIM_OC6_SetConfig+0xc4>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d00f      	beq.n	80076e4 <TIM_OC6_SetConfig+0x84>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a18      	ldr	r2, [pc, #96]	; (8007728 <TIM_OC6_SetConfig+0xc8>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d00b      	beq.n	80076e4 <TIM_OC6_SetConfig+0x84>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a17      	ldr	r2, [pc, #92]	; (800772c <TIM_OC6_SetConfig+0xcc>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d007      	beq.n	80076e4 <TIM_OC6_SetConfig+0x84>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a16      	ldr	r2, [pc, #88]	; (8007730 <TIM_OC6_SetConfig+0xd0>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d003      	beq.n	80076e4 <TIM_OC6_SetConfig+0x84>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a15      	ldr	r2, [pc, #84]	; (8007734 <TIM_OC6_SetConfig+0xd4>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d109      	bne.n	80076f8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	029b      	lsls	r3, r3, #10
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	621a      	str	r2, [r3, #32]
}
 8007712:	bf00      	nop
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	40012c00 	.word	0x40012c00
 8007724:	40013400 	.word	0x40013400
 8007728:	40014000 	.word	0x40014000
 800772c:	40014400 	.word	0x40014400
 8007730:	40014800 	.word	0x40014800
 8007734:	40015000 	.word	0x40015000

08007738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	f023 0201 	bic.w	r2, r3, #1
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f023 030a 	bic.w	r3, r3, #10
 8007774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4313      	orrs	r3, r2
 800777c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	621a      	str	r2, [r3, #32]
}
 800778a:	bf00      	nop
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007796:	b480      	push	{r7}
 8007798:	b087      	sub	sp, #28
 800779a:	af00      	add	r7, sp, #0
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	f023 0210 	bic.w	r2, r3, #16
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	031b      	lsls	r3, r3, #12
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	621a      	str	r2, [r3, #32]
}
 80077ea:	bf00      	nop
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b085      	sub	sp, #20
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4313      	orrs	r3, r2
 8007814:	f043 0307 	orr.w	r3, r3, #7
 8007818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	609a      	str	r2, [r3, #8]
}
 8007820:	bf00      	nop
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
 8007838:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007846:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	021a      	lsls	r2, r3, #8
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	431a      	orrs	r2, r3
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4313      	orrs	r3, r2
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	609a      	str	r2, [r3, #8]
}
 8007860:	bf00      	nop
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f003 031f 	and.w	r3, r3, #31
 800787e:	2201      	movs	r2, #1
 8007880:	fa02 f303 	lsl.w	r3, r2, r3
 8007884:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6a1a      	ldr	r2, [r3, #32]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	43db      	mvns	r3, r3
 800788e:	401a      	ands	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6a1a      	ldr	r2, [r3, #32]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	6879      	ldr	r1, [r7, #4]
 80078a0:	fa01 f303 	lsl.w	r3, r1, r3
 80078a4:	431a      	orrs	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	621a      	str	r2, [r3, #32]
}
 80078aa:	bf00      	nop
 80078ac:	371c      	adds	r7, #28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
	...

080078b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d101      	bne.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078cc:	2302      	movs	r3, #2
 80078ce:	e06d      	b.n	80079ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a30      	ldr	r2, [pc, #192]	; (80079b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d009      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a2f      	ldr	r2, [pc, #188]	; (80079bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d004      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a2d      	ldr	r2, [pc, #180]	; (80079c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d108      	bne.n	8007920 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007914:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	4313      	orrs	r3, r2
 800791e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	4313      	orrs	r3, r2
 8007930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a1e      	ldr	r2, [pc, #120]	; (80079b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d01d      	beq.n	8007980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800794c:	d018      	beq.n	8007980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a1c      	ldr	r2, [pc, #112]	; (80079c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d013      	beq.n	8007980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a1a      	ldr	r2, [pc, #104]	; (80079c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d00e      	beq.n	8007980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a15      	ldr	r2, [pc, #84]	; (80079bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d009      	beq.n	8007980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a16      	ldr	r2, [pc, #88]	; (80079cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d004      	beq.n	8007980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a11      	ldr	r2, [pc, #68]	; (80079c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d10c      	bne.n	800799a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007986:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	4313      	orrs	r3, r2
 8007990:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	40012c00 	.word	0x40012c00
 80079bc:	40013400 	.word	0x40013400
 80079c0:	40015000 	.word	0x40015000
 80079c4:	40000400 	.word	0x40000400
 80079c8:	40000800 	.word	0x40000800
 80079cc:	40014000 	.word	0x40014000

080079d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e040      	b.n	8007aa0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d106      	bne.n	8007a34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7fa fa28 	bl	8001e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2224      	movs	r2, #36	; 0x24
 8007a38:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f022 0201 	bic.w	r2, r2, #1
 8007a48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fc00 	bl	8008250 <UART_SetConfig>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d101      	bne.n	8007a5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e022      	b.n	8007aa0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d002      	beq.n	8007a68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fdc8 	bl	80085f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689a      	ldr	r2, [r3, #8]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f042 0201 	orr.w	r2, r2, #1
 8007a96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fe4f 	bl	800873c <UART_CheckIdleState>
 8007a9e:	4603      	mov	r3, r0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08a      	sub	sp, #40	; 0x28
 8007aac:	af02      	add	r7, sp, #8
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007abc:	2b20      	cmp	r3, #32
 8007abe:	d178      	bne.n	8007bb2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d002      	beq.n	8007acc <HAL_UART_Transmit+0x24>
 8007ac6:	88fb      	ldrh	r3, [r7, #6]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e071      	b.n	8007bb4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2221      	movs	r2, #33	; 0x21
 8007adc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ade:	f7fa fbd7 	bl	8002290 <HAL_GetTick>
 8007ae2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	88fa      	ldrh	r2, [r7, #6]
 8007ae8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	88fa      	ldrh	r2, [r7, #6]
 8007af0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afc:	d108      	bne.n	8007b10 <HAL_UART_Transmit+0x68>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d104      	bne.n	8007b10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	61bb      	str	r3, [r7, #24]
 8007b0e:	e003      	b.n	8007b18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b14:	2300      	movs	r3, #0
 8007b16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b18:	e030      	b.n	8007b7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2200      	movs	r2, #0
 8007b22:	2180      	movs	r1, #128	; 0x80
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 feb1 	bl	800888c <UART_WaitOnFlagUntilTimeout>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d004      	beq.n	8007b3a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2220      	movs	r2, #32
 8007b34:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e03c      	b.n	8007bb4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10b      	bne.n	8007b58 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	881a      	ldrh	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b4c:	b292      	uxth	r2, r2
 8007b4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	3302      	adds	r3, #2
 8007b54:	61bb      	str	r3, [r7, #24]
 8007b56:	e008      	b.n	8007b6a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	781a      	ldrb	r2, [r3, #0]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	b292      	uxth	r2, r2
 8007b62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	3301      	adds	r3, #1
 8007b68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	3b01      	subs	r3, #1
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1c8      	bne.n	8007b1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2140      	movs	r1, #64	; 0x40
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f000 fe7a 	bl	800888c <UART_WaitOnFlagUntilTimeout>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d004      	beq.n	8007ba8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e005      	b.n	8007bb4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2220      	movs	r2, #32
 8007bac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	e000      	b.n	8007bb4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007bb2:	2302      	movs	r3, #2
  }
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3720      	adds	r7, #32
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08a      	sub	sp, #40	; 0x28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bd0:	2b20      	cmp	r3, #32
 8007bd2:	d132      	bne.n	8007c3a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <HAL_UART_Receive_IT+0x24>
 8007bda:	88fb      	ldrh	r3, [r7, #6]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e02b      	b.n	8007c3c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d018      	beq.n	8007c2a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	613b      	str	r3, [r7, #16]
   return(result);
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	461a      	mov	r2, r3
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	623b      	str	r3, [r7, #32]
 8007c18:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1a:	69f9      	ldr	r1, [r7, #28]
 8007c1c:	6a3a      	ldr	r2, [r7, #32]
 8007c1e:	e841 2300 	strex	r3, r2, [r1]
 8007c22:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e6      	bne.n	8007bf8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007c2a:	88fb      	ldrh	r3, [r7, #6]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	68b9      	ldr	r1, [r7, #8]
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 fe93 	bl	800895c <UART_Start_Receive_IT>
 8007c36:	4603      	mov	r3, r0
 8007c38:	e000      	b.n	8007c3c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007c3a:	2302      	movs	r3, #2
  }
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3728      	adds	r7, #40	; 0x28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b0ba      	sub	sp, #232	; 0xe8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007c6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007c72:	4013      	ands	r3, r2
 8007c74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007c78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d115      	bne.n	8007cac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c84:	f003 0320 	and.w	r3, r3, #32
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00f      	beq.n	8007cac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c90:	f003 0320 	and.w	r3, r3, #32
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d009      	beq.n	8007cac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 82ab 	beq.w	80081f8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	4798      	blx	r3
      }
      return;
 8007caa:	e2a5      	b.n	80081f8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007cac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f000 8117 	beq.w	8007ee4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d106      	bne.n	8007cd0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007cc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007cc6:	4b85      	ldr	r3, [pc, #532]	; (8007edc <HAL_UART_IRQHandler+0x298>)
 8007cc8:	4013      	ands	r3, r2
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 810a 	beq.w	8007ee4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d011      	beq.n	8007d00 <HAL_UART_IRQHandler+0xbc>
 8007cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00b      	beq.n	8007d00 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2201      	movs	r2, #1
 8007cee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cf6:	f043 0201 	orr.w	r2, r3, #1
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d04:	f003 0302 	and.w	r3, r3, #2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d011      	beq.n	8007d30 <HAL_UART_IRQHandler+0xec>
 8007d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00b      	beq.n	8007d30 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2202      	movs	r2, #2
 8007d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d26:	f043 0204 	orr.w	r2, r3, #4
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d011      	beq.n	8007d60 <HAL_UART_IRQHandler+0x11c>
 8007d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00b      	beq.n	8007d60 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2204      	movs	r2, #4
 8007d4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d56:	f043 0202 	orr.w	r2, r3, #2
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d64:	f003 0308 	and.w	r3, r3, #8
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d017      	beq.n	8007d9c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d70:	f003 0320 	and.w	r3, r3, #32
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d105      	bne.n	8007d84 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00b      	beq.n	8007d9c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2208      	movs	r2, #8
 8007d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d92:	f043 0208 	orr.w	r2, r3, #8
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d012      	beq.n	8007dce <HAL_UART_IRQHandler+0x18a>
 8007da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00c      	beq.n	8007dce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dc4:	f043 0220 	orr.w	r2, r3, #32
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 8211 	beq.w	80081fc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dde:	f003 0320 	and.w	r3, r3, #32
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00d      	beq.n	8007e02 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dea:	f003 0320 	and.w	r3, r3, #32
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d007      	beq.n	8007e02 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e16:	2b40      	cmp	r3, #64	; 0x40
 8007e18:	d005      	beq.n	8007e26 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d04f      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fe5e 	bl	8008ae8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e36:	2b40      	cmp	r3, #64	; 0x40
 8007e38:	d141      	bne.n	8007ebe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3308      	adds	r3, #8
 8007e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e48:	e853 3f00 	ldrex	r3, [r3]
 8007e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3308      	adds	r3, #8
 8007e62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1d9      	bne.n	8007e3a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d013      	beq.n	8007eb6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e92:	4a13      	ldr	r2, [pc, #76]	; (8007ee0 <HAL_UART_IRQHandler+0x29c>)
 8007e94:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fb fc5a 	bl	8003754 <HAL_DMA_Abort_IT>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d017      	beq.n	8007ed6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eb4:	e00f      	b.n	8007ed6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f9b4 	bl	8008224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ebc:	e00b      	b.n	8007ed6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f9b0 	bl	8008224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ec4:	e007      	b.n	8007ed6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f9ac 	bl	8008224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007ed4:	e192      	b.n	80081fc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ed6:	bf00      	nop
    return;
 8007ed8:	e190      	b.n	80081fc <HAL_UART_IRQHandler+0x5b8>
 8007eda:	bf00      	nop
 8007edc:	04000120 	.word	0x04000120
 8007ee0:	08008bb1 	.word	0x08008bb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	f040 814b 	bne.w	8008184 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ef2:	f003 0310 	and.w	r3, r3, #16
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 8144 	beq.w	8008184 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f00:	f003 0310 	and.w	r3, r3, #16
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 813d 	beq.w	8008184 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2210      	movs	r2, #16
 8007f10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1c:	2b40      	cmp	r3, #64	; 0x40
 8007f1e:	f040 80b5 	bne.w	800808c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 8164 	beq.w	8008200 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f42:	429a      	cmp	r2, r3
 8007f44:	f080 815c 	bcs.w	8008200 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	2b20      	cmp	r3, #32
 8007f5a:	f000 8086 	beq.w	800806a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f6a:	e853 3f00 	ldrex	r3, [r3]
 8007f6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f8c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f90:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f98:	e841 2300 	strex	r3, r2, [r1]
 8007f9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1da      	bne.n	8007f5e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3308      	adds	r3, #8
 8007fae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fb2:	e853 3f00 	ldrex	r3, [r3]
 8007fb6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007fb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fba:	f023 0301 	bic.w	r3, r3, #1
 8007fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007fcc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007fd0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007fd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e1      	bne.n	8007fa8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3308      	adds	r3, #8
 8007fea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3308      	adds	r3, #8
 8008004:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008008:	66fa      	str	r2, [r7, #108]	; 0x6c
 800800a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800800e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008010:	e841 2300 	strex	r3, r2, [r1]
 8008014:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1e3      	bne.n	8007fe4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2220      	movs	r2, #32
 8008020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008032:	e853 3f00 	ldrex	r3, [r3]
 8008036:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800803a:	f023 0310 	bic.w	r3, r3, #16
 800803e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	461a      	mov	r2, r3
 8008048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800804c:	65bb      	str	r3, [r7, #88]	; 0x58
 800804e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008050:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008052:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008054:	e841 2300 	strex	r3, r2, [r1]
 8008058:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800805a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e4      	bne.n	800802a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008064:	4618      	mov	r0, r3
 8008066:	f7fb fb3c 	bl	80036e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2202      	movs	r2, #2
 800806e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800807c:	b29b      	uxth	r3, r3
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	b29b      	uxth	r3, r3
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f8d7 	bl	8008238 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800808a:	e0b9      	b.n	8008200 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008098:	b29b      	uxth	r3, r3
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 80ab 	beq.w	8008204 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80080ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 80a6 	beq.w	8008204 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c0:	e853 3f00 	ldrex	r3, [r3]
 80080c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	461a      	mov	r2, r3
 80080d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080da:	647b      	str	r3, [r7, #68]	; 0x44
 80080dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080e2:	e841 2300 	strex	r3, r2, [r1]
 80080e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1e4      	bne.n	80080b8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3308      	adds	r3, #8
 80080f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	e853 3f00 	ldrex	r3, [r3]
 80080fc:	623b      	str	r3, [r7, #32]
   return(result);
 80080fe:	6a3b      	ldr	r3, [r7, #32]
 8008100:	f023 0301 	bic.w	r3, r3, #1
 8008104:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3308      	adds	r3, #8
 800810e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008112:	633a      	str	r2, [r7, #48]	; 0x30
 8008114:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e3      	bne.n	80080ee <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2220      	movs	r2, #32
 800812a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	e853 3f00 	ldrex	r3, [r3]
 8008146:	60fb      	str	r3, [r7, #12]
   return(result);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f023 0310 	bic.w	r3, r3, #16
 800814e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	461a      	mov	r2, r3
 8008158:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800815c:	61fb      	str	r3, [r7, #28]
 800815e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008160:	69b9      	ldr	r1, [r7, #24]
 8008162:	69fa      	ldr	r2, [r7, #28]
 8008164:	e841 2300 	strex	r3, r2, [r1]
 8008168:	617b      	str	r3, [r7, #20]
   return(result);
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1e4      	bne.n	800813a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2202      	movs	r2, #2
 8008174:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008176:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f85b 	bl	8008238 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008182:	e03f      	b.n	8008204 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00e      	beq.n	80081ae <HAL_UART_IRQHandler+0x56a>
 8008190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d008      	beq.n	80081ae <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80081a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 feea 	bl	8008f80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081ac:	e02d      	b.n	800820a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80081ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00e      	beq.n	80081d8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80081ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d008      	beq.n	80081d8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d01c      	beq.n	8008208 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	4798      	blx	r3
    }
    return;
 80081d6:	e017      	b.n	8008208 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80081d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d012      	beq.n	800820a <HAL_UART_IRQHandler+0x5c6>
 80081e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00c      	beq.n	800820a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fcf3 	bl	8008bdc <UART_EndTransmit_IT>
    return;
 80081f6:	e008      	b.n	800820a <HAL_UART_IRQHandler+0x5c6>
      return;
 80081f8:	bf00      	nop
 80081fa:	e006      	b.n	800820a <HAL_UART_IRQHandler+0x5c6>
    return;
 80081fc:	bf00      	nop
 80081fe:	e004      	b.n	800820a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008200:	bf00      	nop
 8008202:	e002      	b.n	800820a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008204:	bf00      	nop
 8008206:	e000      	b.n	800820a <HAL_UART_IRQHandler+0x5c6>
    return;
 8008208:	bf00      	nop
  }

}
 800820a:	37e8      	adds	r7, #232	; 0xe8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b088      	sub	sp, #32
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689a      	ldr	r2, [r3, #8]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	431a      	orrs	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	431a      	orrs	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	4313      	orrs	r3, r2
 8008272:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	4b92      	ldr	r3, [pc, #584]	; (80084c4 <UART_SetConfig+0x274>)
 800827c:	4013      	ands	r3, r2
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	6812      	ldr	r2, [r2, #0]
 8008282:	6979      	ldr	r1, [r7, #20]
 8008284:	430b      	orrs	r3, r1
 8008286:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68da      	ldr	r2, [r3, #12]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	430a      	orrs	r2, r1
 800829c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a1b      	ldr	r3, [r3, #32]
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	430a      	orrs	r2, r1
 80082c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a80      	ldr	r2, [pc, #512]	; (80084c8 <UART_SetConfig+0x278>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d120      	bne.n	800830e <UART_SetConfig+0xbe>
 80082cc:	4b7f      	ldr	r3, [pc, #508]	; (80084cc <UART_SetConfig+0x27c>)
 80082ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d0:	f003 0303 	and.w	r3, r3, #3
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d817      	bhi.n	8008308 <UART_SetConfig+0xb8>
 80082d8:	a201      	add	r2, pc, #4	; (adr r2, 80082e0 <UART_SetConfig+0x90>)
 80082da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082de:	bf00      	nop
 80082e0:	080082f1 	.word	0x080082f1
 80082e4:	080082fd 	.word	0x080082fd
 80082e8:	08008303 	.word	0x08008303
 80082ec:	080082f7 	.word	0x080082f7
 80082f0:	2301      	movs	r3, #1
 80082f2:	77fb      	strb	r3, [r7, #31]
 80082f4:	e0b5      	b.n	8008462 <UART_SetConfig+0x212>
 80082f6:	2302      	movs	r3, #2
 80082f8:	77fb      	strb	r3, [r7, #31]
 80082fa:	e0b2      	b.n	8008462 <UART_SetConfig+0x212>
 80082fc:	2304      	movs	r3, #4
 80082fe:	77fb      	strb	r3, [r7, #31]
 8008300:	e0af      	b.n	8008462 <UART_SetConfig+0x212>
 8008302:	2308      	movs	r3, #8
 8008304:	77fb      	strb	r3, [r7, #31]
 8008306:	e0ac      	b.n	8008462 <UART_SetConfig+0x212>
 8008308:	2310      	movs	r3, #16
 800830a:	77fb      	strb	r3, [r7, #31]
 800830c:	e0a9      	b.n	8008462 <UART_SetConfig+0x212>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a6f      	ldr	r2, [pc, #444]	; (80084d0 <UART_SetConfig+0x280>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d124      	bne.n	8008362 <UART_SetConfig+0x112>
 8008318:	4b6c      	ldr	r3, [pc, #432]	; (80084cc <UART_SetConfig+0x27c>)
 800831a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008320:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008324:	d011      	beq.n	800834a <UART_SetConfig+0xfa>
 8008326:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800832a:	d817      	bhi.n	800835c <UART_SetConfig+0x10c>
 800832c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008330:	d011      	beq.n	8008356 <UART_SetConfig+0x106>
 8008332:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008336:	d811      	bhi.n	800835c <UART_SetConfig+0x10c>
 8008338:	2b00      	cmp	r3, #0
 800833a:	d003      	beq.n	8008344 <UART_SetConfig+0xf4>
 800833c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008340:	d006      	beq.n	8008350 <UART_SetConfig+0x100>
 8008342:	e00b      	b.n	800835c <UART_SetConfig+0x10c>
 8008344:	2300      	movs	r3, #0
 8008346:	77fb      	strb	r3, [r7, #31]
 8008348:	e08b      	b.n	8008462 <UART_SetConfig+0x212>
 800834a:	2302      	movs	r3, #2
 800834c:	77fb      	strb	r3, [r7, #31]
 800834e:	e088      	b.n	8008462 <UART_SetConfig+0x212>
 8008350:	2304      	movs	r3, #4
 8008352:	77fb      	strb	r3, [r7, #31]
 8008354:	e085      	b.n	8008462 <UART_SetConfig+0x212>
 8008356:	2308      	movs	r3, #8
 8008358:	77fb      	strb	r3, [r7, #31]
 800835a:	e082      	b.n	8008462 <UART_SetConfig+0x212>
 800835c:	2310      	movs	r3, #16
 800835e:	77fb      	strb	r3, [r7, #31]
 8008360:	e07f      	b.n	8008462 <UART_SetConfig+0x212>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a5b      	ldr	r2, [pc, #364]	; (80084d4 <UART_SetConfig+0x284>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d124      	bne.n	80083b6 <UART_SetConfig+0x166>
 800836c:	4b57      	ldr	r3, [pc, #348]	; (80084cc <UART_SetConfig+0x27c>)
 800836e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008370:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008374:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008378:	d011      	beq.n	800839e <UART_SetConfig+0x14e>
 800837a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800837e:	d817      	bhi.n	80083b0 <UART_SetConfig+0x160>
 8008380:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008384:	d011      	beq.n	80083aa <UART_SetConfig+0x15a>
 8008386:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800838a:	d811      	bhi.n	80083b0 <UART_SetConfig+0x160>
 800838c:	2b00      	cmp	r3, #0
 800838e:	d003      	beq.n	8008398 <UART_SetConfig+0x148>
 8008390:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008394:	d006      	beq.n	80083a4 <UART_SetConfig+0x154>
 8008396:	e00b      	b.n	80083b0 <UART_SetConfig+0x160>
 8008398:	2300      	movs	r3, #0
 800839a:	77fb      	strb	r3, [r7, #31]
 800839c:	e061      	b.n	8008462 <UART_SetConfig+0x212>
 800839e:	2302      	movs	r3, #2
 80083a0:	77fb      	strb	r3, [r7, #31]
 80083a2:	e05e      	b.n	8008462 <UART_SetConfig+0x212>
 80083a4:	2304      	movs	r3, #4
 80083a6:	77fb      	strb	r3, [r7, #31]
 80083a8:	e05b      	b.n	8008462 <UART_SetConfig+0x212>
 80083aa:	2308      	movs	r3, #8
 80083ac:	77fb      	strb	r3, [r7, #31]
 80083ae:	e058      	b.n	8008462 <UART_SetConfig+0x212>
 80083b0:	2310      	movs	r3, #16
 80083b2:	77fb      	strb	r3, [r7, #31]
 80083b4:	e055      	b.n	8008462 <UART_SetConfig+0x212>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a47      	ldr	r2, [pc, #284]	; (80084d8 <UART_SetConfig+0x288>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d124      	bne.n	800840a <UART_SetConfig+0x1ba>
 80083c0:	4b42      	ldr	r3, [pc, #264]	; (80084cc <UART_SetConfig+0x27c>)
 80083c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80083c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80083cc:	d011      	beq.n	80083f2 <UART_SetConfig+0x1a2>
 80083ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80083d2:	d817      	bhi.n	8008404 <UART_SetConfig+0x1b4>
 80083d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083d8:	d011      	beq.n	80083fe <UART_SetConfig+0x1ae>
 80083da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083de:	d811      	bhi.n	8008404 <UART_SetConfig+0x1b4>
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d003      	beq.n	80083ec <UART_SetConfig+0x19c>
 80083e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083e8:	d006      	beq.n	80083f8 <UART_SetConfig+0x1a8>
 80083ea:	e00b      	b.n	8008404 <UART_SetConfig+0x1b4>
 80083ec:	2300      	movs	r3, #0
 80083ee:	77fb      	strb	r3, [r7, #31]
 80083f0:	e037      	b.n	8008462 <UART_SetConfig+0x212>
 80083f2:	2302      	movs	r3, #2
 80083f4:	77fb      	strb	r3, [r7, #31]
 80083f6:	e034      	b.n	8008462 <UART_SetConfig+0x212>
 80083f8:	2304      	movs	r3, #4
 80083fa:	77fb      	strb	r3, [r7, #31]
 80083fc:	e031      	b.n	8008462 <UART_SetConfig+0x212>
 80083fe:	2308      	movs	r3, #8
 8008400:	77fb      	strb	r3, [r7, #31]
 8008402:	e02e      	b.n	8008462 <UART_SetConfig+0x212>
 8008404:	2310      	movs	r3, #16
 8008406:	77fb      	strb	r3, [r7, #31]
 8008408:	e02b      	b.n	8008462 <UART_SetConfig+0x212>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a33      	ldr	r2, [pc, #204]	; (80084dc <UART_SetConfig+0x28c>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d124      	bne.n	800845e <UART_SetConfig+0x20e>
 8008414:	4b2d      	ldr	r3, [pc, #180]	; (80084cc <UART_SetConfig+0x27c>)
 8008416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008418:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800841c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008420:	d011      	beq.n	8008446 <UART_SetConfig+0x1f6>
 8008422:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008426:	d817      	bhi.n	8008458 <UART_SetConfig+0x208>
 8008428:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800842c:	d011      	beq.n	8008452 <UART_SetConfig+0x202>
 800842e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008432:	d811      	bhi.n	8008458 <UART_SetConfig+0x208>
 8008434:	2b00      	cmp	r3, #0
 8008436:	d003      	beq.n	8008440 <UART_SetConfig+0x1f0>
 8008438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800843c:	d006      	beq.n	800844c <UART_SetConfig+0x1fc>
 800843e:	e00b      	b.n	8008458 <UART_SetConfig+0x208>
 8008440:	2300      	movs	r3, #0
 8008442:	77fb      	strb	r3, [r7, #31]
 8008444:	e00d      	b.n	8008462 <UART_SetConfig+0x212>
 8008446:	2302      	movs	r3, #2
 8008448:	77fb      	strb	r3, [r7, #31]
 800844a:	e00a      	b.n	8008462 <UART_SetConfig+0x212>
 800844c:	2304      	movs	r3, #4
 800844e:	77fb      	strb	r3, [r7, #31]
 8008450:	e007      	b.n	8008462 <UART_SetConfig+0x212>
 8008452:	2308      	movs	r3, #8
 8008454:	77fb      	strb	r3, [r7, #31]
 8008456:	e004      	b.n	8008462 <UART_SetConfig+0x212>
 8008458:	2310      	movs	r3, #16
 800845a:	77fb      	strb	r3, [r7, #31]
 800845c:	e001      	b.n	8008462 <UART_SetConfig+0x212>
 800845e:	2310      	movs	r3, #16
 8008460:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800846a:	d16b      	bne.n	8008544 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800846c:	7ffb      	ldrb	r3, [r7, #31]
 800846e:	2b08      	cmp	r3, #8
 8008470:	d838      	bhi.n	80084e4 <UART_SetConfig+0x294>
 8008472:	a201      	add	r2, pc, #4	; (adr r2, 8008478 <UART_SetConfig+0x228>)
 8008474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008478:	0800849d 	.word	0x0800849d
 800847c:	080084a5 	.word	0x080084a5
 8008480:	080084ad 	.word	0x080084ad
 8008484:	080084e5 	.word	0x080084e5
 8008488:	080084b3 	.word	0x080084b3
 800848c:	080084e5 	.word	0x080084e5
 8008490:	080084e5 	.word	0x080084e5
 8008494:	080084e5 	.word	0x080084e5
 8008498:	080084bb 	.word	0x080084bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800849c:	f7fd fde0 	bl	8006060 <HAL_RCC_GetPCLK1Freq>
 80084a0:	61b8      	str	r0, [r7, #24]
        break;
 80084a2:	e024      	b.n	80084ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084a4:	f7fd fdfe 	bl	80060a4 <HAL_RCC_GetPCLK2Freq>
 80084a8:	61b8      	str	r0, [r7, #24]
        break;
 80084aa:	e020      	b.n	80084ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084ac:	4b0c      	ldr	r3, [pc, #48]	; (80084e0 <UART_SetConfig+0x290>)
 80084ae:	61bb      	str	r3, [r7, #24]
        break;
 80084b0:	e01d      	b.n	80084ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084b2:	f7fd fd5f 	bl	8005f74 <HAL_RCC_GetSysClockFreq>
 80084b6:	61b8      	str	r0, [r7, #24]
        break;
 80084b8:	e019      	b.n	80084ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084be:	61bb      	str	r3, [r7, #24]
        break;
 80084c0:	e015      	b.n	80084ee <UART_SetConfig+0x29e>
 80084c2:	bf00      	nop
 80084c4:	efff69f3 	.word	0xefff69f3
 80084c8:	40013800 	.word	0x40013800
 80084cc:	40021000 	.word	0x40021000
 80084d0:	40004400 	.word	0x40004400
 80084d4:	40004800 	.word	0x40004800
 80084d8:	40004c00 	.word	0x40004c00
 80084dc:	40005000 	.word	0x40005000
 80084e0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80084e4:	2300      	movs	r3, #0
 80084e6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	77bb      	strb	r3, [r7, #30]
        break;
 80084ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d073      	beq.n	80085dc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	005a      	lsls	r2, r3, #1
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	085b      	lsrs	r3, r3, #1
 80084fe:	441a      	add	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	fbb2 f3f3 	udiv	r3, r2, r3
 8008508:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	2b0f      	cmp	r3, #15
 800850e:	d916      	bls.n	800853e <UART_SetConfig+0x2ee>
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008516:	d212      	bcs.n	800853e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	b29b      	uxth	r3, r3
 800851c:	f023 030f 	bic.w	r3, r3, #15
 8008520:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	085b      	lsrs	r3, r3, #1
 8008526:	b29b      	uxth	r3, r3
 8008528:	f003 0307 	and.w	r3, r3, #7
 800852c:	b29a      	uxth	r2, r3
 800852e:	89fb      	ldrh	r3, [r7, #14]
 8008530:	4313      	orrs	r3, r2
 8008532:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	89fa      	ldrh	r2, [r7, #14]
 800853a:	60da      	str	r2, [r3, #12]
 800853c:	e04e      	b.n	80085dc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	77bb      	strb	r3, [r7, #30]
 8008542:	e04b      	b.n	80085dc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008544:	7ffb      	ldrb	r3, [r7, #31]
 8008546:	2b08      	cmp	r3, #8
 8008548:	d827      	bhi.n	800859a <UART_SetConfig+0x34a>
 800854a:	a201      	add	r2, pc, #4	; (adr r2, 8008550 <UART_SetConfig+0x300>)
 800854c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008550:	08008575 	.word	0x08008575
 8008554:	0800857d 	.word	0x0800857d
 8008558:	08008585 	.word	0x08008585
 800855c:	0800859b 	.word	0x0800859b
 8008560:	0800858b 	.word	0x0800858b
 8008564:	0800859b 	.word	0x0800859b
 8008568:	0800859b 	.word	0x0800859b
 800856c:	0800859b 	.word	0x0800859b
 8008570:	08008593 	.word	0x08008593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008574:	f7fd fd74 	bl	8006060 <HAL_RCC_GetPCLK1Freq>
 8008578:	61b8      	str	r0, [r7, #24]
        break;
 800857a:	e013      	b.n	80085a4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800857c:	f7fd fd92 	bl	80060a4 <HAL_RCC_GetPCLK2Freq>
 8008580:	61b8      	str	r0, [r7, #24]
        break;
 8008582:	e00f      	b.n	80085a4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008584:	4b1b      	ldr	r3, [pc, #108]	; (80085f4 <UART_SetConfig+0x3a4>)
 8008586:	61bb      	str	r3, [r7, #24]
        break;
 8008588:	e00c      	b.n	80085a4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800858a:	f7fd fcf3 	bl	8005f74 <HAL_RCC_GetSysClockFreq>
 800858e:	61b8      	str	r0, [r7, #24]
        break;
 8008590:	e008      	b.n	80085a4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008596:	61bb      	str	r3, [r7, #24]
        break;
 8008598:	e004      	b.n	80085a4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	77bb      	strb	r3, [r7, #30]
        break;
 80085a2:	bf00      	nop
    }

    if (pclk != 0U)
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d018      	beq.n	80085dc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	085a      	lsrs	r2, r3, #1
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	441a      	add	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	2b0f      	cmp	r3, #15
 80085c2:	d909      	bls.n	80085d8 <UART_SetConfig+0x388>
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ca:	d205      	bcs.n	80085d8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	60da      	str	r2, [r3, #12]
 80085d6:	e001      	b.n	80085dc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80085e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3720      	adds	r7, #32
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	007a1200 	.word	0x007a1200

080085f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008604:	f003 0301 	and.w	r3, r3, #1
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00a      	beq.n	8008622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	430a      	orrs	r2, r1
 8008620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008626:	f003 0302 	and.w	r3, r3, #2
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00a      	beq.n	8008644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	430a      	orrs	r2, r1
 8008642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	f003 0304 	and.w	r3, r3, #4
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00a      	beq.n	8008666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	f003 0308 	and.w	r3, r3, #8
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	f003 0310 	and.w	r3, r3, #16
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00a      	beq.n	80086aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ae:	f003 0320 	and.w	r3, r3, #32
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00a      	beq.n	80086cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d01a      	beq.n	800870e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086f6:	d10a      	bne.n	800870e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00a      	beq.n	8008730 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	430a      	orrs	r2, r1
 800872e:	605a      	str	r2, [r3, #4]
  }
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b098      	sub	sp, #96	; 0x60
 8008740:	af02      	add	r7, sp, #8
 8008742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800874c:	f7f9 fda0 	bl	8002290 <HAL_GetTick>
 8008750:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0308 	and.w	r3, r3, #8
 800875c:	2b08      	cmp	r3, #8
 800875e:	d12e      	bne.n	80087be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008768:	2200      	movs	r2, #0
 800876a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f88c 	bl	800888c <UART_WaitOnFlagUntilTimeout>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d021      	beq.n	80087be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008782:	e853 3f00 	ldrex	r3, [r3]
 8008786:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800878e:	653b      	str	r3, [r7, #80]	; 0x50
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	461a      	mov	r2, r3
 8008796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008798:	647b      	str	r3, [r7, #68]	; 0x44
 800879a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800879e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087a0:	e841 2300 	strex	r3, r2, [r1]
 80087a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e6      	bne.n	800877a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2220      	movs	r2, #32
 80087b0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e062      	b.n	8008884 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 0304 	and.w	r3, r3, #4
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	d149      	bne.n	8008860 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087d4:	2200      	movs	r2, #0
 80087d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f856 	bl	800888c <UART_WaitOnFlagUntilTimeout>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d03c      	beq.n	8008860 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	e853 3f00 	ldrex	r3, [r3]
 80087f2:	623b      	str	r3, [r7, #32]
   return(result);
 80087f4:	6a3b      	ldr	r3, [r7, #32]
 80087f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	461a      	mov	r2, r3
 8008802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008804:	633b      	str	r3, [r7, #48]	; 0x30
 8008806:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008808:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800880a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800880c:	e841 2300 	strex	r3, r2, [r1]
 8008810:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1e6      	bne.n	80087e6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3308      	adds	r3, #8
 800881e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	e853 3f00 	ldrex	r3, [r3]
 8008826:	60fb      	str	r3, [r7, #12]
   return(result);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 0301 	bic.w	r3, r3, #1
 800882e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3308      	adds	r3, #8
 8008836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008838:	61fa      	str	r2, [r7, #28]
 800883a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883c:	69b9      	ldr	r1, [r7, #24]
 800883e:	69fa      	ldr	r2, [r7, #28]
 8008840:	e841 2300 	strex	r3, r2, [r1]
 8008844:	617b      	str	r3, [r7, #20]
   return(result);
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1e5      	bne.n	8008818 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2220      	movs	r2, #32
 8008850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e011      	b.n	8008884 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2220      	movs	r2, #32
 8008864:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2220      	movs	r2, #32
 800886a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3758      	adds	r7, #88	; 0x58
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	603b      	str	r3, [r7, #0]
 8008898:	4613      	mov	r3, r2
 800889a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800889c:	e049      	b.n	8008932 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a4:	d045      	beq.n	8008932 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088a6:	f7f9 fcf3 	bl	8002290 <HAL_GetTick>
 80088aa:	4602      	mov	r2, r0
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d302      	bcc.n	80088bc <UART_WaitOnFlagUntilTimeout+0x30>
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e048      	b.n	8008952 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0304 	and.w	r3, r3, #4
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d031      	beq.n	8008932 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69db      	ldr	r3, [r3, #28]
 80088d4:	f003 0308 	and.w	r3, r3, #8
 80088d8:	2b08      	cmp	r3, #8
 80088da:	d110      	bne.n	80088fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2208      	movs	r2, #8
 80088e2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 f8ff 	bl	8008ae8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2208      	movs	r2, #8
 80088ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e029      	b.n	8008952 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69db      	ldr	r3, [r3, #28]
 8008904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800890c:	d111      	bne.n	8008932 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 f8e5 	bl	8008ae8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2220      	movs	r2, #32
 8008922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e00f      	b.n	8008952 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	69da      	ldr	r2, [r3, #28]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	4013      	ands	r3, r2
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	429a      	cmp	r2, r3
 8008940:	bf0c      	ite	eq
 8008942:	2301      	moveq	r3, #1
 8008944:	2300      	movne	r3, #0
 8008946:	b2db      	uxtb	r3, r3
 8008948:	461a      	mov	r2, r3
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	429a      	cmp	r2, r3
 800894e:	d0a6      	beq.n	800889e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
	...

0800895c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800895c:	b480      	push	{r7}
 800895e:	b097      	sub	sp, #92	; 0x5c
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	4613      	mov	r3, r2
 8008968:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	88fa      	ldrh	r2, [r7, #6]
 8008974:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	88fa      	ldrh	r2, [r7, #6]
 800897c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800898e:	d10e      	bne.n	80089ae <UART_Start_Receive_IT+0x52>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d105      	bne.n	80089a4 <UART_Start_Receive_IT+0x48>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800899e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089a2:	e02d      	b.n	8008a00 <UART_Start_Receive_IT+0xa4>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	22ff      	movs	r2, #255	; 0xff
 80089a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089ac:	e028      	b.n	8008a00 <UART_Start_Receive_IT+0xa4>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10d      	bne.n	80089d2 <UART_Start_Receive_IT+0x76>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d104      	bne.n	80089c8 <UART_Start_Receive_IT+0x6c>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	22ff      	movs	r2, #255	; 0xff
 80089c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089c6:	e01b      	b.n	8008a00 <UART_Start_Receive_IT+0xa4>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	227f      	movs	r2, #127	; 0x7f
 80089cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089d0:	e016      	b.n	8008a00 <UART_Start_Receive_IT+0xa4>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089da:	d10d      	bne.n	80089f8 <UART_Start_Receive_IT+0x9c>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d104      	bne.n	80089ee <UART_Start_Receive_IT+0x92>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	227f      	movs	r2, #127	; 0x7f
 80089e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089ec:	e008      	b.n	8008a00 <UART_Start_Receive_IT+0xa4>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	223f      	movs	r2, #63	; 0x3f
 80089f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089f6:	e003      	b.n	8008a00 <UART_Start_Receive_IT+0xa4>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2222      	movs	r2, #34	; 0x22
 8008a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3308      	adds	r3, #8
 8008a16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1a:	e853 3f00 	ldrex	r3, [r3]
 8008a1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a22:	f043 0301 	orr.w	r3, r3, #1
 8008a26:	657b      	str	r3, [r7, #84]	; 0x54
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a30:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a32:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a38:	e841 2300 	strex	r3, r2, [r1]
 8008a3c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1e5      	bne.n	8008a10 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a4c:	d107      	bne.n	8008a5e <UART_Start_Receive_IT+0x102>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d103      	bne.n	8008a5e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	4a21      	ldr	r2, [pc, #132]	; (8008ae0 <UART_Start_Receive_IT+0x184>)
 8008a5a:	669a      	str	r2, [r3, #104]	; 0x68
 8008a5c:	e002      	b.n	8008a64 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	4a20      	ldr	r2, [pc, #128]	; (8008ae4 <UART_Start_Receive_IT+0x188>)
 8008a62:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d019      	beq.n	8008aa0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a74:	e853 3f00 	ldrex	r3, [r3]
 8008a78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008a80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a8c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a92:	e841 2300 	strex	r3, r2, [r1]
 8008a96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1e6      	bne.n	8008a6c <UART_Start_Receive_IT+0x110>
 8008a9e:	e018      	b.n	8008ad2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	e853 3f00 	ldrex	r3, [r3]
 8008aac:	613b      	str	r3, [r7, #16]
   return(result);
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	f043 0320 	orr.w	r3, r3, #32
 8008ab4:	653b      	str	r3, [r7, #80]	; 0x50
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	461a      	mov	r2, r3
 8008abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008abe:	623b      	str	r3, [r7, #32]
 8008ac0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	69f9      	ldr	r1, [r7, #28]
 8008ac4:	6a3a      	ldr	r2, [r7, #32]
 8008ac6:	e841 2300 	strex	r3, r2, [r1]
 8008aca:	61bb      	str	r3, [r7, #24]
   return(result);
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1e6      	bne.n	8008aa0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	375c      	adds	r7, #92	; 0x5c
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	08008dd9 	.word	0x08008dd9
 8008ae4:	08008c31 	.word	0x08008c31

08008ae8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b095      	sub	sp, #84	; 0x54
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b0e:	643b      	str	r3, [r7, #64]	; 0x40
 8008b10:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e6      	bne.n	8008af0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	3308      	adds	r3, #8
 8008b28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	e853 3f00 	ldrex	r3, [r3]
 8008b30:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	f023 0301 	bic.w	r3, r3, #1
 8008b38:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	3308      	adds	r3, #8
 8008b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b4a:	e841 2300 	strex	r3, r2, [r1]
 8008b4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1e5      	bne.n	8008b22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d118      	bne.n	8008b90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	e853 3f00 	ldrex	r3, [r3]
 8008b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	f023 0310 	bic.w	r3, r3, #16
 8008b72:	647b      	str	r3, [r7, #68]	; 0x44
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b7c:	61bb      	str	r3, [r7, #24]
 8008b7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b80:	6979      	ldr	r1, [r7, #20]
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	e841 2300 	strex	r3, r2, [r1]
 8008b88:	613b      	str	r3, [r7, #16]
   return(result);
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1e6      	bne.n	8008b5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2220      	movs	r2, #32
 8008b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008ba4:	bf00      	nop
 8008ba6:	3754      	adds	r7, #84	; 0x54
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f7ff fb28 	bl	8008224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bd4:	bf00      	nop
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b088      	sub	sp, #32
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	e853 3f00 	ldrex	r3, [r3]
 8008bf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bf8:	61fb      	str	r3, [r7, #28]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	61bb      	str	r3, [r7, #24]
 8008c04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c06:	6979      	ldr	r1, [r7, #20]
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	e841 2300 	strex	r3, r2, [r1]
 8008c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1e6      	bne.n	8008be4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2220      	movs	r2, #32
 8008c1a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7ff faf4 	bl	8008210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c28:	bf00      	nop
 8008c2a:	3720      	adds	r7, #32
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b09c      	sub	sp, #112	; 0x70
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c3e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c48:	2b22      	cmp	r3, #34	; 0x22
 8008c4a:	f040 80b9 	bne.w	8008dc0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008c54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008c5c:	b2d9      	uxtb	r1, r3
 8008c5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c68:	400a      	ands	r2, r1
 8008c6a:	b2d2      	uxtb	r2, r2
 8008c6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c72:	1c5a      	adds	r2, r3, #1
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	3b01      	subs	r3, #1
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f040 809c 	bne.w	8008dd0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ca8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cac:	66bb      	str	r3, [r7, #104]	; 0x68
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cb8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008cbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cbe:	e841 2300 	strex	r3, r2, [r1]
 8008cc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e6      	bne.n	8008c98 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	3308      	adds	r3, #8
 8008cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd4:	e853 3f00 	ldrex	r3, [r3]
 8008cd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cdc:	f023 0301 	bic.w	r3, r3, #1
 8008ce0:	667b      	str	r3, [r7, #100]	; 0x64
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008cea:	647a      	str	r2, [r7, #68]	; 0x44
 8008cec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008cf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cf2:	e841 2300 	strex	r3, r2, [r1]
 8008cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e5      	bne.n	8008cca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2220      	movs	r2, #32
 8008d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d018      	beq.n	8008d52 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	e853 3f00 	ldrex	r3, [r3]
 8008d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d2e:	6a3b      	ldr	r3, [r7, #32]
 8008d30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d34:	663b      	str	r3, [r7, #96]	; 0x60
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d3e:	633b      	str	r3, [r7, #48]	; 0x30
 8008d40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d46:	e841 2300 	strex	r3, r2, [r1]
 8008d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1e6      	bne.n	8008d20 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d12e      	bne.n	8008db8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	e853 3f00 	ldrex	r3, [r3]
 8008d6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f023 0310 	bic.w	r3, r3, #16
 8008d74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d7e:	61fb      	str	r3, [r7, #28]
 8008d80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d82:	69b9      	ldr	r1, [r7, #24]
 8008d84:	69fa      	ldr	r2, [r7, #28]
 8008d86:	e841 2300 	strex	r3, r2, [r1]
 8008d8a:	617b      	str	r3, [r7, #20]
   return(result);
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1e6      	bne.n	8008d60 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	f003 0310 	and.w	r3, r3, #16
 8008d9c:	2b10      	cmp	r3, #16
 8008d9e:	d103      	bne.n	8008da8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2210      	movs	r2, #16
 8008da6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7ff fa41 	bl	8008238 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008db6:	e00b      	b.n	8008dd0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7f8 fe4f 	bl	8001a5c <HAL_UART_RxCpltCallback>
}
 8008dbe:	e007      	b.n	8008dd0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	699a      	ldr	r2, [r3, #24]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f042 0208 	orr.w	r2, r2, #8
 8008dce:	619a      	str	r2, [r3, #24]
}
 8008dd0:	bf00      	nop
 8008dd2:	3770      	adds	r7, #112	; 0x70
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b09c      	sub	sp, #112	; 0x70
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008de6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008df0:	2b22      	cmp	r3, #34	; 0x22
 8008df2:	f040 80b9 	bne.w	8008f68 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008dfc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e04:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e06:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008e0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008e0e:	4013      	ands	r3, r2
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e14:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e1a:	1c9a      	adds	r2, r3, #2
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f040 809c 	bne.w	8008f78 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e48:	e853 3f00 	ldrex	r3, [r3]
 8008e4c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e54:	667b      	str	r3, [r7, #100]	; 0x64
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e5e:	657b      	str	r3, [r7, #84]	; 0x54
 8008e60:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e66:	e841 2300 	strex	r3, r2, [r1]
 8008e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1e6      	bne.n	8008e40 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3308      	adds	r3, #8
 8008e78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7c:	e853 3f00 	ldrex	r3, [r3]
 8008e80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e84:	f023 0301 	bic.w	r3, r3, #1
 8008e88:	663b      	str	r3, [r7, #96]	; 0x60
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3308      	adds	r3, #8
 8008e90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e92:	643a      	str	r2, [r7, #64]	; 0x40
 8008e94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e9a:	e841 2300 	strex	r3, r2, [r1]
 8008e9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e5      	bne.n	8008e72 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2220      	movs	r2, #32
 8008eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d018      	beq.n	8008efa <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008edc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ee8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e6      	bne.n	8008ec8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d12e      	bne.n	8008f60 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	e853 3f00 	ldrex	r3, [r3]
 8008f14:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	f023 0310 	bic.w	r3, r3, #16
 8008f1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f26:	61bb      	str	r3, [r7, #24]
 8008f28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2a:	6979      	ldr	r1, [r7, #20]
 8008f2c:	69ba      	ldr	r2, [r7, #24]
 8008f2e:	e841 2300 	strex	r3, r2, [r1]
 8008f32:	613b      	str	r3, [r7, #16]
   return(result);
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1e6      	bne.n	8008f08 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	f003 0310 	and.w	r3, r3, #16
 8008f44:	2b10      	cmp	r3, #16
 8008f46:	d103      	bne.n	8008f50 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2210      	movs	r2, #16
 8008f4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7ff f96d 	bl	8008238 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f5e:	e00b      	b.n	8008f78 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7f8 fd7b 	bl	8001a5c <HAL_UART_RxCpltCallback>
}
 8008f66:	e007      	b.n	8008f78 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	699a      	ldr	r2, [r3, #24]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f042 0208 	orr.w	r2, r2, #8
 8008f76:	619a      	str	r2, [r3, #24]
}
 8008f78:	bf00      	nop
 8008f7a:	3770      	adds	r7, #112	; 0x70
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f88:	bf00      	nop
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <__errno>:
 8008f94:	4b01      	ldr	r3, [pc, #4]	; (8008f9c <__errno+0x8>)
 8008f96:	6818      	ldr	r0, [r3, #0]
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	2000000c 	.word	0x2000000c

08008fa0 <__libc_init_array>:
 8008fa0:	b570      	push	{r4, r5, r6, lr}
 8008fa2:	4d0d      	ldr	r5, [pc, #52]	; (8008fd8 <__libc_init_array+0x38>)
 8008fa4:	4c0d      	ldr	r4, [pc, #52]	; (8008fdc <__libc_init_array+0x3c>)
 8008fa6:	1b64      	subs	r4, r4, r5
 8008fa8:	10a4      	asrs	r4, r4, #2
 8008faa:	2600      	movs	r6, #0
 8008fac:	42a6      	cmp	r6, r4
 8008fae:	d109      	bne.n	8008fc4 <__libc_init_array+0x24>
 8008fb0:	4d0b      	ldr	r5, [pc, #44]	; (8008fe0 <__libc_init_array+0x40>)
 8008fb2:	4c0c      	ldr	r4, [pc, #48]	; (8008fe4 <__libc_init_array+0x44>)
 8008fb4:	f002 ff04 	bl	800bdc0 <_init>
 8008fb8:	1b64      	subs	r4, r4, r5
 8008fba:	10a4      	asrs	r4, r4, #2
 8008fbc:	2600      	movs	r6, #0
 8008fbe:	42a6      	cmp	r6, r4
 8008fc0:	d105      	bne.n	8008fce <__libc_init_array+0x2e>
 8008fc2:	bd70      	pop	{r4, r5, r6, pc}
 8008fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fc8:	4798      	blx	r3
 8008fca:	3601      	adds	r6, #1
 8008fcc:	e7ee      	b.n	8008fac <__libc_init_array+0xc>
 8008fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fd2:	4798      	blx	r3
 8008fd4:	3601      	adds	r6, #1
 8008fd6:	e7f2      	b.n	8008fbe <__libc_init_array+0x1e>
 8008fd8:	0800c254 	.word	0x0800c254
 8008fdc:	0800c254 	.word	0x0800c254
 8008fe0:	0800c254 	.word	0x0800c254
 8008fe4:	0800c258 	.word	0x0800c258

08008fe8 <memset>:
 8008fe8:	4402      	add	r2, r0
 8008fea:	4603      	mov	r3, r0
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d100      	bne.n	8008ff2 <memset+0xa>
 8008ff0:	4770      	bx	lr
 8008ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ff6:	e7f9      	b.n	8008fec <memset+0x4>

08008ff8 <__cvt>:
 8008ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ffc:	ec55 4b10 	vmov	r4, r5, d0
 8009000:	2d00      	cmp	r5, #0
 8009002:	460e      	mov	r6, r1
 8009004:	4619      	mov	r1, r3
 8009006:	462b      	mov	r3, r5
 8009008:	bfbb      	ittet	lt
 800900a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800900e:	461d      	movlt	r5, r3
 8009010:	2300      	movge	r3, #0
 8009012:	232d      	movlt	r3, #45	; 0x2d
 8009014:	700b      	strb	r3, [r1, #0]
 8009016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009018:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800901c:	4691      	mov	r9, r2
 800901e:	f023 0820 	bic.w	r8, r3, #32
 8009022:	bfbc      	itt	lt
 8009024:	4622      	movlt	r2, r4
 8009026:	4614      	movlt	r4, r2
 8009028:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800902c:	d005      	beq.n	800903a <__cvt+0x42>
 800902e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009032:	d100      	bne.n	8009036 <__cvt+0x3e>
 8009034:	3601      	adds	r6, #1
 8009036:	2102      	movs	r1, #2
 8009038:	e000      	b.n	800903c <__cvt+0x44>
 800903a:	2103      	movs	r1, #3
 800903c:	ab03      	add	r3, sp, #12
 800903e:	9301      	str	r3, [sp, #4]
 8009040:	ab02      	add	r3, sp, #8
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	ec45 4b10 	vmov	d0, r4, r5
 8009048:	4653      	mov	r3, sl
 800904a:	4632      	mov	r2, r6
 800904c:	f000 fcec 	bl	8009a28 <_dtoa_r>
 8009050:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009054:	4607      	mov	r7, r0
 8009056:	d102      	bne.n	800905e <__cvt+0x66>
 8009058:	f019 0f01 	tst.w	r9, #1
 800905c:	d022      	beq.n	80090a4 <__cvt+0xac>
 800905e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009062:	eb07 0906 	add.w	r9, r7, r6
 8009066:	d110      	bne.n	800908a <__cvt+0x92>
 8009068:	783b      	ldrb	r3, [r7, #0]
 800906a:	2b30      	cmp	r3, #48	; 0x30
 800906c:	d10a      	bne.n	8009084 <__cvt+0x8c>
 800906e:	2200      	movs	r2, #0
 8009070:	2300      	movs	r3, #0
 8009072:	4620      	mov	r0, r4
 8009074:	4629      	mov	r1, r5
 8009076:	f7f7 fd2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800907a:	b918      	cbnz	r0, 8009084 <__cvt+0x8c>
 800907c:	f1c6 0601 	rsb	r6, r6, #1
 8009080:	f8ca 6000 	str.w	r6, [sl]
 8009084:	f8da 3000 	ldr.w	r3, [sl]
 8009088:	4499      	add	r9, r3
 800908a:	2200      	movs	r2, #0
 800908c:	2300      	movs	r3, #0
 800908e:	4620      	mov	r0, r4
 8009090:	4629      	mov	r1, r5
 8009092:	f7f7 fd21 	bl	8000ad8 <__aeabi_dcmpeq>
 8009096:	b108      	cbz	r0, 800909c <__cvt+0xa4>
 8009098:	f8cd 900c 	str.w	r9, [sp, #12]
 800909c:	2230      	movs	r2, #48	; 0x30
 800909e:	9b03      	ldr	r3, [sp, #12]
 80090a0:	454b      	cmp	r3, r9
 80090a2:	d307      	bcc.n	80090b4 <__cvt+0xbc>
 80090a4:	9b03      	ldr	r3, [sp, #12]
 80090a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090a8:	1bdb      	subs	r3, r3, r7
 80090aa:	4638      	mov	r0, r7
 80090ac:	6013      	str	r3, [r2, #0]
 80090ae:	b004      	add	sp, #16
 80090b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b4:	1c59      	adds	r1, r3, #1
 80090b6:	9103      	str	r1, [sp, #12]
 80090b8:	701a      	strb	r2, [r3, #0]
 80090ba:	e7f0      	b.n	800909e <__cvt+0xa6>

080090bc <__exponent>:
 80090bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090be:	4603      	mov	r3, r0
 80090c0:	2900      	cmp	r1, #0
 80090c2:	bfb8      	it	lt
 80090c4:	4249      	neglt	r1, r1
 80090c6:	f803 2b02 	strb.w	r2, [r3], #2
 80090ca:	bfb4      	ite	lt
 80090cc:	222d      	movlt	r2, #45	; 0x2d
 80090ce:	222b      	movge	r2, #43	; 0x2b
 80090d0:	2909      	cmp	r1, #9
 80090d2:	7042      	strb	r2, [r0, #1]
 80090d4:	dd2a      	ble.n	800912c <__exponent+0x70>
 80090d6:	f10d 0407 	add.w	r4, sp, #7
 80090da:	46a4      	mov	ip, r4
 80090dc:	270a      	movs	r7, #10
 80090de:	46a6      	mov	lr, r4
 80090e0:	460a      	mov	r2, r1
 80090e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80090e6:	fb07 1516 	mls	r5, r7, r6, r1
 80090ea:	3530      	adds	r5, #48	; 0x30
 80090ec:	2a63      	cmp	r2, #99	; 0x63
 80090ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80090f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80090f6:	4631      	mov	r1, r6
 80090f8:	dcf1      	bgt.n	80090de <__exponent+0x22>
 80090fa:	3130      	adds	r1, #48	; 0x30
 80090fc:	f1ae 0502 	sub.w	r5, lr, #2
 8009100:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009104:	1c44      	adds	r4, r0, #1
 8009106:	4629      	mov	r1, r5
 8009108:	4561      	cmp	r1, ip
 800910a:	d30a      	bcc.n	8009122 <__exponent+0x66>
 800910c:	f10d 0209 	add.w	r2, sp, #9
 8009110:	eba2 020e 	sub.w	r2, r2, lr
 8009114:	4565      	cmp	r5, ip
 8009116:	bf88      	it	hi
 8009118:	2200      	movhi	r2, #0
 800911a:	4413      	add	r3, r2
 800911c:	1a18      	subs	r0, r3, r0
 800911e:	b003      	add	sp, #12
 8009120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009126:	f804 2f01 	strb.w	r2, [r4, #1]!
 800912a:	e7ed      	b.n	8009108 <__exponent+0x4c>
 800912c:	2330      	movs	r3, #48	; 0x30
 800912e:	3130      	adds	r1, #48	; 0x30
 8009130:	7083      	strb	r3, [r0, #2]
 8009132:	70c1      	strb	r1, [r0, #3]
 8009134:	1d03      	adds	r3, r0, #4
 8009136:	e7f1      	b.n	800911c <__exponent+0x60>

08009138 <_printf_float>:
 8009138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913c:	ed2d 8b02 	vpush	{d8}
 8009140:	b08d      	sub	sp, #52	; 0x34
 8009142:	460c      	mov	r4, r1
 8009144:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009148:	4616      	mov	r6, r2
 800914a:	461f      	mov	r7, r3
 800914c:	4605      	mov	r5, r0
 800914e:	f001 fa59 	bl	800a604 <_localeconv_r>
 8009152:	f8d0 a000 	ldr.w	sl, [r0]
 8009156:	4650      	mov	r0, sl
 8009158:	f7f7 f842 	bl	80001e0 <strlen>
 800915c:	2300      	movs	r3, #0
 800915e:	930a      	str	r3, [sp, #40]	; 0x28
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	9305      	str	r3, [sp, #20]
 8009164:	f8d8 3000 	ldr.w	r3, [r8]
 8009168:	f894 b018 	ldrb.w	fp, [r4, #24]
 800916c:	3307      	adds	r3, #7
 800916e:	f023 0307 	bic.w	r3, r3, #7
 8009172:	f103 0208 	add.w	r2, r3, #8
 8009176:	f8c8 2000 	str.w	r2, [r8]
 800917a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009182:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009186:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800918a:	9307      	str	r3, [sp, #28]
 800918c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009190:	ee08 0a10 	vmov	s16, r0
 8009194:	4b9f      	ldr	r3, [pc, #636]	; (8009414 <_printf_float+0x2dc>)
 8009196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800919a:	f04f 32ff 	mov.w	r2, #4294967295
 800919e:	f7f7 fccd 	bl	8000b3c <__aeabi_dcmpun>
 80091a2:	bb88      	cbnz	r0, 8009208 <_printf_float+0xd0>
 80091a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091a8:	4b9a      	ldr	r3, [pc, #616]	; (8009414 <_printf_float+0x2dc>)
 80091aa:	f04f 32ff 	mov.w	r2, #4294967295
 80091ae:	f7f7 fca7 	bl	8000b00 <__aeabi_dcmple>
 80091b2:	bb48      	cbnz	r0, 8009208 <_printf_float+0xd0>
 80091b4:	2200      	movs	r2, #0
 80091b6:	2300      	movs	r3, #0
 80091b8:	4640      	mov	r0, r8
 80091ba:	4649      	mov	r1, r9
 80091bc:	f7f7 fc96 	bl	8000aec <__aeabi_dcmplt>
 80091c0:	b110      	cbz	r0, 80091c8 <_printf_float+0x90>
 80091c2:	232d      	movs	r3, #45	; 0x2d
 80091c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091c8:	4b93      	ldr	r3, [pc, #588]	; (8009418 <_printf_float+0x2e0>)
 80091ca:	4894      	ldr	r0, [pc, #592]	; (800941c <_printf_float+0x2e4>)
 80091cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80091d0:	bf94      	ite	ls
 80091d2:	4698      	movls	r8, r3
 80091d4:	4680      	movhi	r8, r0
 80091d6:	2303      	movs	r3, #3
 80091d8:	6123      	str	r3, [r4, #16]
 80091da:	9b05      	ldr	r3, [sp, #20]
 80091dc:	f023 0204 	bic.w	r2, r3, #4
 80091e0:	6022      	str	r2, [r4, #0]
 80091e2:	f04f 0900 	mov.w	r9, #0
 80091e6:	9700      	str	r7, [sp, #0]
 80091e8:	4633      	mov	r3, r6
 80091ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80091ec:	4621      	mov	r1, r4
 80091ee:	4628      	mov	r0, r5
 80091f0:	f000 f9d8 	bl	80095a4 <_printf_common>
 80091f4:	3001      	adds	r0, #1
 80091f6:	f040 8090 	bne.w	800931a <_printf_float+0x1e2>
 80091fa:	f04f 30ff 	mov.w	r0, #4294967295
 80091fe:	b00d      	add	sp, #52	; 0x34
 8009200:	ecbd 8b02 	vpop	{d8}
 8009204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009208:	4642      	mov	r2, r8
 800920a:	464b      	mov	r3, r9
 800920c:	4640      	mov	r0, r8
 800920e:	4649      	mov	r1, r9
 8009210:	f7f7 fc94 	bl	8000b3c <__aeabi_dcmpun>
 8009214:	b140      	cbz	r0, 8009228 <_printf_float+0xf0>
 8009216:	464b      	mov	r3, r9
 8009218:	2b00      	cmp	r3, #0
 800921a:	bfbc      	itt	lt
 800921c:	232d      	movlt	r3, #45	; 0x2d
 800921e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009222:	487f      	ldr	r0, [pc, #508]	; (8009420 <_printf_float+0x2e8>)
 8009224:	4b7f      	ldr	r3, [pc, #508]	; (8009424 <_printf_float+0x2ec>)
 8009226:	e7d1      	b.n	80091cc <_printf_float+0x94>
 8009228:	6863      	ldr	r3, [r4, #4]
 800922a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800922e:	9206      	str	r2, [sp, #24]
 8009230:	1c5a      	adds	r2, r3, #1
 8009232:	d13f      	bne.n	80092b4 <_printf_float+0x17c>
 8009234:	2306      	movs	r3, #6
 8009236:	6063      	str	r3, [r4, #4]
 8009238:	9b05      	ldr	r3, [sp, #20]
 800923a:	6861      	ldr	r1, [r4, #4]
 800923c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009240:	2300      	movs	r3, #0
 8009242:	9303      	str	r3, [sp, #12]
 8009244:	ab0a      	add	r3, sp, #40	; 0x28
 8009246:	e9cd b301 	strd	fp, r3, [sp, #4]
 800924a:	ab09      	add	r3, sp, #36	; 0x24
 800924c:	ec49 8b10 	vmov	d0, r8, r9
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	6022      	str	r2, [r4, #0]
 8009254:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009258:	4628      	mov	r0, r5
 800925a:	f7ff fecd 	bl	8008ff8 <__cvt>
 800925e:	9b06      	ldr	r3, [sp, #24]
 8009260:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009262:	2b47      	cmp	r3, #71	; 0x47
 8009264:	4680      	mov	r8, r0
 8009266:	d108      	bne.n	800927a <_printf_float+0x142>
 8009268:	1cc8      	adds	r0, r1, #3
 800926a:	db02      	blt.n	8009272 <_printf_float+0x13a>
 800926c:	6863      	ldr	r3, [r4, #4]
 800926e:	4299      	cmp	r1, r3
 8009270:	dd41      	ble.n	80092f6 <_printf_float+0x1be>
 8009272:	f1ab 0b02 	sub.w	fp, fp, #2
 8009276:	fa5f fb8b 	uxtb.w	fp, fp
 800927a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800927e:	d820      	bhi.n	80092c2 <_printf_float+0x18a>
 8009280:	3901      	subs	r1, #1
 8009282:	465a      	mov	r2, fp
 8009284:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009288:	9109      	str	r1, [sp, #36]	; 0x24
 800928a:	f7ff ff17 	bl	80090bc <__exponent>
 800928e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009290:	1813      	adds	r3, r2, r0
 8009292:	2a01      	cmp	r2, #1
 8009294:	4681      	mov	r9, r0
 8009296:	6123      	str	r3, [r4, #16]
 8009298:	dc02      	bgt.n	80092a0 <_printf_float+0x168>
 800929a:	6822      	ldr	r2, [r4, #0]
 800929c:	07d2      	lsls	r2, r2, #31
 800929e:	d501      	bpl.n	80092a4 <_printf_float+0x16c>
 80092a0:	3301      	adds	r3, #1
 80092a2:	6123      	str	r3, [r4, #16]
 80092a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d09c      	beq.n	80091e6 <_printf_float+0xae>
 80092ac:	232d      	movs	r3, #45	; 0x2d
 80092ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092b2:	e798      	b.n	80091e6 <_printf_float+0xae>
 80092b4:	9a06      	ldr	r2, [sp, #24]
 80092b6:	2a47      	cmp	r2, #71	; 0x47
 80092b8:	d1be      	bne.n	8009238 <_printf_float+0x100>
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1bc      	bne.n	8009238 <_printf_float+0x100>
 80092be:	2301      	movs	r3, #1
 80092c0:	e7b9      	b.n	8009236 <_printf_float+0xfe>
 80092c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80092c6:	d118      	bne.n	80092fa <_printf_float+0x1c2>
 80092c8:	2900      	cmp	r1, #0
 80092ca:	6863      	ldr	r3, [r4, #4]
 80092cc:	dd0b      	ble.n	80092e6 <_printf_float+0x1ae>
 80092ce:	6121      	str	r1, [r4, #16]
 80092d0:	b913      	cbnz	r3, 80092d8 <_printf_float+0x1a0>
 80092d2:	6822      	ldr	r2, [r4, #0]
 80092d4:	07d0      	lsls	r0, r2, #31
 80092d6:	d502      	bpl.n	80092de <_printf_float+0x1a6>
 80092d8:	3301      	adds	r3, #1
 80092da:	440b      	add	r3, r1
 80092dc:	6123      	str	r3, [r4, #16]
 80092de:	65a1      	str	r1, [r4, #88]	; 0x58
 80092e0:	f04f 0900 	mov.w	r9, #0
 80092e4:	e7de      	b.n	80092a4 <_printf_float+0x16c>
 80092e6:	b913      	cbnz	r3, 80092ee <_printf_float+0x1b6>
 80092e8:	6822      	ldr	r2, [r4, #0]
 80092ea:	07d2      	lsls	r2, r2, #31
 80092ec:	d501      	bpl.n	80092f2 <_printf_float+0x1ba>
 80092ee:	3302      	adds	r3, #2
 80092f0:	e7f4      	b.n	80092dc <_printf_float+0x1a4>
 80092f2:	2301      	movs	r3, #1
 80092f4:	e7f2      	b.n	80092dc <_printf_float+0x1a4>
 80092f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80092fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092fc:	4299      	cmp	r1, r3
 80092fe:	db05      	blt.n	800930c <_printf_float+0x1d4>
 8009300:	6823      	ldr	r3, [r4, #0]
 8009302:	6121      	str	r1, [r4, #16]
 8009304:	07d8      	lsls	r0, r3, #31
 8009306:	d5ea      	bpl.n	80092de <_printf_float+0x1a6>
 8009308:	1c4b      	adds	r3, r1, #1
 800930a:	e7e7      	b.n	80092dc <_printf_float+0x1a4>
 800930c:	2900      	cmp	r1, #0
 800930e:	bfd4      	ite	le
 8009310:	f1c1 0202 	rsble	r2, r1, #2
 8009314:	2201      	movgt	r2, #1
 8009316:	4413      	add	r3, r2
 8009318:	e7e0      	b.n	80092dc <_printf_float+0x1a4>
 800931a:	6823      	ldr	r3, [r4, #0]
 800931c:	055a      	lsls	r2, r3, #21
 800931e:	d407      	bmi.n	8009330 <_printf_float+0x1f8>
 8009320:	6923      	ldr	r3, [r4, #16]
 8009322:	4642      	mov	r2, r8
 8009324:	4631      	mov	r1, r6
 8009326:	4628      	mov	r0, r5
 8009328:	47b8      	blx	r7
 800932a:	3001      	adds	r0, #1
 800932c:	d12c      	bne.n	8009388 <_printf_float+0x250>
 800932e:	e764      	b.n	80091fa <_printf_float+0xc2>
 8009330:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009334:	f240 80e0 	bls.w	80094f8 <_printf_float+0x3c0>
 8009338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800933c:	2200      	movs	r2, #0
 800933e:	2300      	movs	r3, #0
 8009340:	f7f7 fbca 	bl	8000ad8 <__aeabi_dcmpeq>
 8009344:	2800      	cmp	r0, #0
 8009346:	d034      	beq.n	80093b2 <_printf_float+0x27a>
 8009348:	4a37      	ldr	r2, [pc, #220]	; (8009428 <_printf_float+0x2f0>)
 800934a:	2301      	movs	r3, #1
 800934c:	4631      	mov	r1, r6
 800934e:	4628      	mov	r0, r5
 8009350:	47b8      	blx	r7
 8009352:	3001      	adds	r0, #1
 8009354:	f43f af51 	beq.w	80091fa <_printf_float+0xc2>
 8009358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800935c:	429a      	cmp	r2, r3
 800935e:	db02      	blt.n	8009366 <_printf_float+0x22e>
 8009360:	6823      	ldr	r3, [r4, #0]
 8009362:	07d8      	lsls	r0, r3, #31
 8009364:	d510      	bpl.n	8009388 <_printf_float+0x250>
 8009366:	ee18 3a10 	vmov	r3, s16
 800936a:	4652      	mov	r2, sl
 800936c:	4631      	mov	r1, r6
 800936e:	4628      	mov	r0, r5
 8009370:	47b8      	blx	r7
 8009372:	3001      	adds	r0, #1
 8009374:	f43f af41 	beq.w	80091fa <_printf_float+0xc2>
 8009378:	f04f 0800 	mov.w	r8, #0
 800937c:	f104 091a 	add.w	r9, r4, #26
 8009380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009382:	3b01      	subs	r3, #1
 8009384:	4543      	cmp	r3, r8
 8009386:	dc09      	bgt.n	800939c <_printf_float+0x264>
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	079b      	lsls	r3, r3, #30
 800938c:	f100 8105 	bmi.w	800959a <_printf_float+0x462>
 8009390:	68e0      	ldr	r0, [r4, #12]
 8009392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009394:	4298      	cmp	r0, r3
 8009396:	bfb8      	it	lt
 8009398:	4618      	movlt	r0, r3
 800939a:	e730      	b.n	80091fe <_printf_float+0xc6>
 800939c:	2301      	movs	r3, #1
 800939e:	464a      	mov	r2, r9
 80093a0:	4631      	mov	r1, r6
 80093a2:	4628      	mov	r0, r5
 80093a4:	47b8      	blx	r7
 80093a6:	3001      	adds	r0, #1
 80093a8:	f43f af27 	beq.w	80091fa <_printf_float+0xc2>
 80093ac:	f108 0801 	add.w	r8, r8, #1
 80093b0:	e7e6      	b.n	8009380 <_printf_float+0x248>
 80093b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	dc39      	bgt.n	800942c <_printf_float+0x2f4>
 80093b8:	4a1b      	ldr	r2, [pc, #108]	; (8009428 <_printf_float+0x2f0>)
 80093ba:	2301      	movs	r3, #1
 80093bc:	4631      	mov	r1, r6
 80093be:	4628      	mov	r0, r5
 80093c0:	47b8      	blx	r7
 80093c2:	3001      	adds	r0, #1
 80093c4:	f43f af19 	beq.w	80091fa <_printf_float+0xc2>
 80093c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093cc:	4313      	orrs	r3, r2
 80093ce:	d102      	bne.n	80093d6 <_printf_float+0x29e>
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	07d9      	lsls	r1, r3, #31
 80093d4:	d5d8      	bpl.n	8009388 <_printf_float+0x250>
 80093d6:	ee18 3a10 	vmov	r3, s16
 80093da:	4652      	mov	r2, sl
 80093dc:	4631      	mov	r1, r6
 80093de:	4628      	mov	r0, r5
 80093e0:	47b8      	blx	r7
 80093e2:	3001      	adds	r0, #1
 80093e4:	f43f af09 	beq.w	80091fa <_printf_float+0xc2>
 80093e8:	f04f 0900 	mov.w	r9, #0
 80093ec:	f104 0a1a 	add.w	sl, r4, #26
 80093f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093f2:	425b      	negs	r3, r3
 80093f4:	454b      	cmp	r3, r9
 80093f6:	dc01      	bgt.n	80093fc <_printf_float+0x2c4>
 80093f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093fa:	e792      	b.n	8009322 <_printf_float+0x1ea>
 80093fc:	2301      	movs	r3, #1
 80093fe:	4652      	mov	r2, sl
 8009400:	4631      	mov	r1, r6
 8009402:	4628      	mov	r0, r5
 8009404:	47b8      	blx	r7
 8009406:	3001      	adds	r0, #1
 8009408:	f43f aef7 	beq.w	80091fa <_printf_float+0xc2>
 800940c:	f109 0901 	add.w	r9, r9, #1
 8009410:	e7ee      	b.n	80093f0 <_printf_float+0x2b8>
 8009412:	bf00      	nop
 8009414:	7fefffff 	.word	0x7fefffff
 8009418:	0800be80 	.word	0x0800be80
 800941c:	0800be84 	.word	0x0800be84
 8009420:	0800be8c 	.word	0x0800be8c
 8009424:	0800be88 	.word	0x0800be88
 8009428:	0800be90 	.word	0x0800be90
 800942c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800942e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009430:	429a      	cmp	r2, r3
 8009432:	bfa8      	it	ge
 8009434:	461a      	movge	r2, r3
 8009436:	2a00      	cmp	r2, #0
 8009438:	4691      	mov	r9, r2
 800943a:	dc37      	bgt.n	80094ac <_printf_float+0x374>
 800943c:	f04f 0b00 	mov.w	fp, #0
 8009440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009444:	f104 021a 	add.w	r2, r4, #26
 8009448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800944a:	9305      	str	r3, [sp, #20]
 800944c:	eba3 0309 	sub.w	r3, r3, r9
 8009450:	455b      	cmp	r3, fp
 8009452:	dc33      	bgt.n	80094bc <_printf_float+0x384>
 8009454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009458:	429a      	cmp	r2, r3
 800945a:	db3b      	blt.n	80094d4 <_printf_float+0x39c>
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	07da      	lsls	r2, r3, #31
 8009460:	d438      	bmi.n	80094d4 <_printf_float+0x39c>
 8009462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009464:	9a05      	ldr	r2, [sp, #20]
 8009466:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009468:	1a9a      	subs	r2, r3, r2
 800946a:	eba3 0901 	sub.w	r9, r3, r1
 800946e:	4591      	cmp	r9, r2
 8009470:	bfa8      	it	ge
 8009472:	4691      	movge	r9, r2
 8009474:	f1b9 0f00 	cmp.w	r9, #0
 8009478:	dc35      	bgt.n	80094e6 <_printf_float+0x3ae>
 800947a:	f04f 0800 	mov.w	r8, #0
 800947e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009482:	f104 0a1a 	add.w	sl, r4, #26
 8009486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800948a:	1a9b      	subs	r3, r3, r2
 800948c:	eba3 0309 	sub.w	r3, r3, r9
 8009490:	4543      	cmp	r3, r8
 8009492:	f77f af79 	ble.w	8009388 <_printf_float+0x250>
 8009496:	2301      	movs	r3, #1
 8009498:	4652      	mov	r2, sl
 800949a:	4631      	mov	r1, r6
 800949c:	4628      	mov	r0, r5
 800949e:	47b8      	blx	r7
 80094a0:	3001      	adds	r0, #1
 80094a2:	f43f aeaa 	beq.w	80091fa <_printf_float+0xc2>
 80094a6:	f108 0801 	add.w	r8, r8, #1
 80094aa:	e7ec      	b.n	8009486 <_printf_float+0x34e>
 80094ac:	4613      	mov	r3, r2
 80094ae:	4631      	mov	r1, r6
 80094b0:	4642      	mov	r2, r8
 80094b2:	4628      	mov	r0, r5
 80094b4:	47b8      	blx	r7
 80094b6:	3001      	adds	r0, #1
 80094b8:	d1c0      	bne.n	800943c <_printf_float+0x304>
 80094ba:	e69e      	b.n	80091fa <_printf_float+0xc2>
 80094bc:	2301      	movs	r3, #1
 80094be:	4631      	mov	r1, r6
 80094c0:	4628      	mov	r0, r5
 80094c2:	9205      	str	r2, [sp, #20]
 80094c4:	47b8      	blx	r7
 80094c6:	3001      	adds	r0, #1
 80094c8:	f43f ae97 	beq.w	80091fa <_printf_float+0xc2>
 80094cc:	9a05      	ldr	r2, [sp, #20]
 80094ce:	f10b 0b01 	add.w	fp, fp, #1
 80094d2:	e7b9      	b.n	8009448 <_printf_float+0x310>
 80094d4:	ee18 3a10 	vmov	r3, s16
 80094d8:	4652      	mov	r2, sl
 80094da:	4631      	mov	r1, r6
 80094dc:	4628      	mov	r0, r5
 80094de:	47b8      	blx	r7
 80094e0:	3001      	adds	r0, #1
 80094e2:	d1be      	bne.n	8009462 <_printf_float+0x32a>
 80094e4:	e689      	b.n	80091fa <_printf_float+0xc2>
 80094e6:	9a05      	ldr	r2, [sp, #20]
 80094e8:	464b      	mov	r3, r9
 80094ea:	4442      	add	r2, r8
 80094ec:	4631      	mov	r1, r6
 80094ee:	4628      	mov	r0, r5
 80094f0:	47b8      	blx	r7
 80094f2:	3001      	adds	r0, #1
 80094f4:	d1c1      	bne.n	800947a <_printf_float+0x342>
 80094f6:	e680      	b.n	80091fa <_printf_float+0xc2>
 80094f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094fa:	2a01      	cmp	r2, #1
 80094fc:	dc01      	bgt.n	8009502 <_printf_float+0x3ca>
 80094fe:	07db      	lsls	r3, r3, #31
 8009500:	d538      	bpl.n	8009574 <_printf_float+0x43c>
 8009502:	2301      	movs	r3, #1
 8009504:	4642      	mov	r2, r8
 8009506:	4631      	mov	r1, r6
 8009508:	4628      	mov	r0, r5
 800950a:	47b8      	blx	r7
 800950c:	3001      	adds	r0, #1
 800950e:	f43f ae74 	beq.w	80091fa <_printf_float+0xc2>
 8009512:	ee18 3a10 	vmov	r3, s16
 8009516:	4652      	mov	r2, sl
 8009518:	4631      	mov	r1, r6
 800951a:	4628      	mov	r0, r5
 800951c:	47b8      	blx	r7
 800951e:	3001      	adds	r0, #1
 8009520:	f43f ae6b 	beq.w	80091fa <_printf_float+0xc2>
 8009524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009528:	2200      	movs	r2, #0
 800952a:	2300      	movs	r3, #0
 800952c:	f7f7 fad4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009530:	b9d8      	cbnz	r0, 800956a <_printf_float+0x432>
 8009532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009534:	f108 0201 	add.w	r2, r8, #1
 8009538:	3b01      	subs	r3, #1
 800953a:	4631      	mov	r1, r6
 800953c:	4628      	mov	r0, r5
 800953e:	47b8      	blx	r7
 8009540:	3001      	adds	r0, #1
 8009542:	d10e      	bne.n	8009562 <_printf_float+0x42a>
 8009544:	e659      	b.n	80091fa <_printf_float+0xc2>
 8009546:	2301      	movs	r3, #1
 8009548:	4652      	mov	r2, sl
 800954a:	4631      	mov	r1, r6
 800954c:	4628      	mov	r0, r5
 800954e:	47b8      	blx	r7
 8009550:	3001      	adds	r0, #1
 8009552:	f43f ae52 	beq.w	80091fa <_printf_float+0xc2>
 8009556:	f108 0801 	add.w	r8, r8, #1
 800955a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800955c:	3b01      	subs	r3, #1
 800955e:	4543      	cmp	r3, r8
 8009560:	dcf1      	bgt.n	8009546 <_printf_float+0x40e>
 8009562:	464b      	mov	r3, r9
 8009564:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009568:	e6dc      	b.n	8009324 <_printf_float+0x1ec>
 800956a:	f04f 0800 	mov.w	r8, #0
 800956e:	f104 0a1a 	add.w	sl, r4, #26
 8009572:	e7f2      	b.n	800955a <_printf_float+0x422>
 8009574:	2301      	movs	r3, #1
 8009576:	4642      	mov	r2, r8
 8009578:	e7df      	b.n	800953a <_printf_float+0x402>
 800957a:	2301      	movs	r3, #1
 800957c:	464a      	mov	r2, r9
 800957e:	4631      	mov	r1, r6
 8009580:	4628      	mov	r0, r5
 8009582:	47b8      	blx	r7
 8009584:	3001      	adds	r0, #1
 8009586:	f43f ae38 	beq.w	80091fa <_printf_float+0xc2>
 800958a:	f108 0801 	add.w	r8, r8, #1
 800958e:	68e3      	ldr	r3, [r4, #12]
 8009590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009592:	1a5b      	subs	r3, r3, r1
 8009594:	4543      	cmp	r3, r8
 8009596:	dcf0      	bgt.n	800957a <_printf_float+0x442>
 8009598:	e6fa      	b.n	8009390 <_printf_float+0x258>
 800959a:	f04f 0800 	mov.w	r8, #0
 800959e:	f104 0919 	add.w	r9, r4, #25
 80095a2:	e7f4      	b.n	800958e <_printf_float+0x456>

080095a4 <_printf_common>:
 80095a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095a8:	4616      	mov	r6, r2
 80095aa:	4699      	mov	r9, r3
 80095ac:	688a      	ldr	r2, [r1, #8]
 80095ae:	690b      	ldr	r3, [r1, #16]
 80095b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095b4:	4293      	cmp	r3, r2
 80095b6:	bfb8      	it	lt
 80095b8:	4613      	movlt	r3, r2
 80095ba:	6033      	str	r3, [r6, #0]
 80095bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095c0:	4607      	mov	r7, r0
 80095c2:	460c      	mov	r4, r1
 80095c4:	b10a      	cbz	r2, 80095ca <_printf_common+0x26>
 80095c6:	3301      	adds	r3, #1
 80095c8:	6033      	str	r3, [r6, #0]
 80095ca:	6823      	ldr	r3, [r4, #0]
 80095cc:	0699      	lsls	r1, r3, #26
 80095ce:	bf42      	ittt	mi
 80095d0:	6833      	ldrmi	r3, [r6, #0]
 80095d2:	3302      	addmi	r3, #2
 80095d4:	6033      	strmi	r3, [r6, #0]
 80095d6:	6825      	ldr	r5, [r4, #0]
 80095d8:	f015 0506 	ands.w	r5, r5, #6
 80095dc:	d106      	bne.n	80095ec <_printf_common+0x48>
 80095de:	f104 0a19 	add.w	sl, r4, #25
 80095e2:	68e3      	ldr	r3, [r4, #12]
 80095e4:	6832      	ldr	r2, [r6, #0]
 80095e6:	1a9b      	subs	r3, r3, r2
 80095e8:	42ab      	cmp	r3, r5
 80095ea:	dc26      	bgt.n	800963a <_printf_common+0x96>
 80095ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095f0:	1e13      	subs	r3, r2, #0
 80095f2:	6822      	ldr	r2, [r4, #0]
 80095f4:	bf18      	it	ne
 80095f6:	2301      	movne	r3, #1
 80095f8:	0692      	lsls	r2, r2, #26
 80095fa:	d42b      	bmi.n	8009654 <_printf_common+0xb0>
 80095fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009600:	4649      	mov	r1, r9
 8009602:	4638      	mov	r0, r7
 8009604:	47c0      	blx	r8
 8009606:	3001      	adds	r0, #1
 8009608:	d01e      	beq.n	8009648 <_printf_common+0xa4>
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	68e5      	ldr	r5, [r4, #12]
 800960e:	6832      	ldr	r2, [r6, #0]
 8009610:	f003 0306 	and.w	r3, r3, #6
 8009614:	2b04      	cmp	r3, #4
 8009616:	bf08      	it	eq
 8009618:	1aad      	subeq	r5, r5, r2
 800961a:	68a3      	ldr	r3, [r4, #8]
 800961c:	6922      	ldr	r2, [r4, #16]
 800961e:	bf0c      	ite	eq
 8009620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009624:	2500      	movne	r5, #0
 8009626:	4293      	cmp	r3, r2
 8009628:	bfc4      	itt	gt
 800962a:	1a9b      	subgt	r3, r3, r2
 800962c:	18ed      	addgt	r5, r5, r3
 800962e:	2600      	movs	r6, #0
 8009630:	341a      	adds	r4, #26
 8009632:	42b5      	cmp	r5, r6
 8009634:	d11a      	bne.n	800966c <_printf_common+0xc8>
 8009636:	2000      	movs	r0, #0
 8009638:	e008      	b.n	800964c <_printf_common+0xa8>
 800963a:	2301      	movs	r3, #1
 800963c:	4652      	mov	r2, sl
 800963e:	4649      	mov	r1, r9
 8009640:	4638      	mov	r0, r7
 8009642:	47c0      	blx	r8
 8009644:	3001      	adds	r0, #1
 8009646:	d103      	bne.n	8009650 <_printf_common+0xac>
 8009648:	f04f 30ff 	mov.w	r0, #4294967295
 800964c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009650:	3501      	adds	r5, #1
 8009652:	e7c6      	b.n	80095e2 <_printf_common+0x3e>
 8009654:	18e1      	adds	r1, r4, r3
 8009656:	1c5a      	adds	r2, r3, #1
 8009658:	2030      	movs	r0, #48	; 0x30
 800965a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800965e:	4422      	add	r2, r4
 8009660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009668:	3302      	adds	r3, #2
 800966a:	e7c7      	b.n	80095fc <_printf_common+0x58>
 800966c:	2301      	movs	r3, #1
 800966e:	4622      	mov	r2, r4
 8009670:	4649      	mov	r1, r9
 8009672:	4638      	mov	r0, r7
 8009674:	47c0      	blx	r8
 8009676:	3001      	adds	r0, #1
 8009678:	d0e6      	beq.n	8009648 <_printf_common+0xa4>
 800967a:	3601      	adds	r6, #1
 800967c:	e7d9      	b.n	8009632 <_printf_common+0x8e>
	...

08009680 <_printf_i>:
 8009680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009684:	7e0f      	ldrb	r7, [r1, #24]
 8009686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009688:	2f78      	cmp	r7, #120	; 0x78
 800968a:	4691      	mov	r9, r2
 800968c:	4680      	mov	r8, r0
 800968e:	460c      	mov	r4, r1
 8009690:	469a      	mov	sl, r3
 8009692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009696:	d807      	bhi.n	80096a8 <_printf_i+0x28>
 8009698:	2f62      	cmp	r7, #98	; 0x62
 800969a:	d80a      	bhi.n	80096b2 <_printf_i+0x32>
 800969c:	2f00      	cmp	r7, #0
 800969e:	f000 80d8 	beq.w	8009852 <_printf_i+0x1d2>
 80096a2:	2f58      	cmp	r7, #88	; 0x58
 80096a4:	f000 80a3 	beq.w	80097ee <_printf_i+0x16e>
 80096a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096b0:	e03a      	b.n	8009728 <_printf_i+0xa8>
 80096b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096b6:	2b15      	cmp	r3, #21
 80096b8:	d8f6      	bhi.n	80096a8 <_printf_i+0x28>
 80096ba:	a101      	add	r1, pc, #4	; (adr r1, 80096c0 <_printf_i+0x40>)
 80096bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096c0:	08009719 	.word	0x08009719
 80096c4:	0800972d 	.word	0x0800972d
 80096c8:	080096a9 	.word	0x080096a9
 80096cc:	080096a9 	.word	0x080096a9
 80096d0:	080096a9 	.word	0x080096a9
 80096d4:	080096a9 	.word	0x080096a9
 80096d8:	0800972d 	.word	0x0800972d
 80096dc:	080096a9 	.word	0x080096a9
 80096e0:	080096a9 	.word	0x080096a9
 80096e4:	080096a9 	.word	0x080096a9
 80096e8:	080096a9 	.word	0x080096a9
 80096ec:	08009839 	.word	0x08009839
 80096f0:	0800975d 	.word	0x0800975d
 80096f4:	0800981b 	.word	0x0800981b
 80096f8:	080096a9 	.word	0x080096a9
 80096fc:	080096a9 	.word	0x080096a9
 8009700:	0800985b 	.word	0x0800985b
 8009704:	080096a9 	.word	0x080096a9
 8009708:	0800975d 	.word	0x0800975d
 800970c:	080096a9 	.word	0x080096a9
 8009710:	080096a9 	.word	0x080096a9
 8009714:	08009823 	.word	0x08009823
 8009718:	682b      	ldr	r3, [r5, #0]
 800971a:	1d1a      	adds	r2, r3, #4
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	602a      	str	r2, [r5, #0]
 8009720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009728:	2301      	movs	r3, #1
 800972a:	e0a3      	b.n	8009874 <_printf_i+0x1f4>
 800972c:	6820      	ldr	r0, [r4, #0]
 800972e:	6829      	ldr	r1, [r5, #0]
 8009730:	0606      	lsls	r6, r0, #24
 8009732:	f101 0304 	add.w	r3, r1, #4
 8009736:	d50a      	bpl.n	800974e <_printf_i+0xce>
 8009738:	680e      	ldr	r6, [r1, #0]
 800973a:	602b      	str	r3, [r5, #0]
 800973c:	2e00      	cmp	r6, #0
 800973e:	da03      	bge.n	8009748 <_printf_i+0xc8>
 8009740:	232d      	movs	r3, #45	; 0x2d
 8009742:	4276      	negs	r6, r6
 8009744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009748:	485e      	ldr	r0, [pc, #376]	; (80098c4 <_printf_i+0x244>)
 800974a:	230a      	movs	r3, #10
 800974c:	e019      	b.n	8009782 <_printf_i+0x102>
 800974e:	680e      	ldr	r6, [r1, #0]
 8009750:	602b      	str	r3, [r5, #0]
 8009752:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009756:	bf18      	it	ne
 8009758:	b236      	sxthne	r6, r6
 800975a:	e7ef      	b.n	800973c <_printf_i+0xbc>
 800975c:	682b      	ldr	r3, [r5, #0]
 800975e:	6820      	ldr	r0, [r4, #0]
 8009760:	1d19      	adds	r1, r3, #4
 8009762:	6029      	str	r1, [r5, #0]
 8009764:	0601      	lsls	r1, r0, #24
 8009766:	d501      	bpl.n	800976c <_printf_i+0xec>
 8009768:	681e      	ldr	r6, [r3, #0]
 800976a:	e002      	b.n	8009772 <_printf_i+0xf2>
 800976c:	0646      	lsls	r6, r0, #25
 800976e:	d5fb      	bpl.n	8009768 <_printf_i+0xe8>
 8009770:	881e      	ldrh	r6, [r3, #0]
 8009772:	4854      	ldr	r0, [pc, #336]	; (80098c4 <_printf_i+0x244>)
 8009774:	2f6f      	cmp	r7, #111	; 0x6f
 8009776:	bf0c      	ite	eq
 8009778:	2308      	moveq	r3, #8
 800977a:	230a      	movne	r3, #10
 800977c:	2100      	movs	r1, #0
 800977e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009782:	6865      	ldr	r5, [r4, #4]
 8009784:	60a5      	str	r5, [r4, #8]
 8009786:	2d00      	cmp	r5, #0
 8009788:	bfa2      	ittt	ge
 800978a:	6821      	ldrge	r1, [r4, #0]
 800978c:	f021 0104 	bicge.w	r1, r1, #4
 8009790:	6021      	strge	r1, [r4, #0]
 8009792:	b90e      	cbnz	r6, 8009798 <_printf_i+0x118>
 8009794:	2d00      	cmp	r5, #0
 8009796:	d04d      	beq.n	8009834 <_printf_i+0x1b4>
 8009798:	4615      	mov	r5, r2
 800979a:	fbb6 f1f3 	udiv	r1, r6, r3
 800979e:	fb03 6711 	mls	r7, r3, r1, r6
 80097a2:	5dc7      	ldrb	r7, [r0, r7]
 80097a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097a8:	4637      	mov	r7, r6
 80097aa:	42bb      	cmp	r3, r7
 80097ac:	460e      	mov	r6, r1
 80097ae:	d9f4      	bls.n	800979a <_printf_i+0x11a>
 80097b0:	2b08      	cmp	r3, #8
 80097b2:	d10b      	bne.n	80097cc <_printf_i+0x14c>
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	07de      	lsls	r6, r3, #31
 80097b8:	d508      	bpl.n	80097cc <_printf_i+0x14c>
 80097ba:	6923      	ldr	r3, [r4, #16]
 80097bc:	6861      	ldr	r1, [r4, #4]
 80097be:	4299      	cmp	r1, r3
 80097c0:	bfde      	ittt	le
 80097c2:	2330      	movle	r3, #48	; 0x30
 80097c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097cc:	1b52      	subs	r2, r2, r5
 80097ce:	6122      	str	r2, [r4, #16]
 80097d0:	f8cd a000 	str.w	sl, [sp]
 80097d4:	464b      	mov	r3, r9
 80097d6:	aa03      	add	r2, sp, #12
 80097d8:	4621      	mov	r1, r4
 80097da:	4640      	mov	r0, r8
 80097dc:	f7ff fee2 	bl	80095a4 <_printf_common>
 80097e0:	3001      	adds	r0, #1
 80097e2:	d14c      	bne.n	800987e <_printf_i+0x1fe>
 80097e4:	f04f 30ff 	mov.w	r0, #4294967295
 80097e8:	b004      	add	sp, #16
 80097ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ee:	4835      	ldr	r0, [pc, #212]	; (80098c4 <_printf_i+0x244>)
 80097f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80097f4:	6829      	ldr	r1, [r5, #0]
 80097f6:	6823      	ldr	r3, [r4, #0]
 80097f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80097fc:	6029      	str	r1, [r5, #0]
 80097fe:	061d      	lsls	r5, r3, #24
 8009800:	d514      	bpl.n	800982c <_printf_i+0x1ac>
 8009802:	07df      	lsls	r7, r3, #31
 8009804:	bf44      	itt	mi
 8009806:	f043 0320 	orrmi.w	r3, r3, #32
 800980a:	6023      	strmi	r3, [r4, #0]
 800980c:	b91e      	cbnz	r6, 8009816 <_printf_i+0x196>
 800980e:	6823      	ldr	r3, [r4, #0]
 8009810:	f023 0320 	bic.w	r3, r3, #32
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	2310      	movs	r3, #16
 8009818:	e7b0      	b.n	800977c <_printf_i+0xfc>
 800981a:	6823      	ldr	r3, [r4, #0]
 800981c:	f043 0320 	orr.w	r3, r3, #32
 8009820:	6023      	str	r3, [r4, #0]
 8009822:	2378      	movs	r3, #120	; 0x78
 8009824:	4828      	ldr	r0, [pc, #160]	; (80098c8 <_printf_i+0x248>)
 8009826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800982a:	e7e3      	b.n	80097f4 <_printf_i+0x174>
 800982c:	0659      	lsls	r1, r3, #25
 800982e:	bf48      	it	mi
 8009830:	b2b6      	uxthmi	r6, r6
 8009832:	e7e6      	b.n	8009802 <_printf_i+0x182>
 8009834:	4615      	mov	r5, r2
 8009836:	e7bb      	b.n	80097b0 <_printf_i+0x130>
 8009838:	682b      	ldr	r3, [r5, #0]
 800983a:	6826      	ldr	r6, [r4, #0]
 800983c:	6961      	ldr	r1, [r4, #20]
 800983e:	1d18      	adds	r0, r3, #4
 8009840:	6028      	str	r0, [r5, #0]
 8009842:	0635      	lsls	r5, r6, #24
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	d501      	bpl.n	800984c <_printf_i+0x1cc>
 8009848:	6019      	str	r1, [r3, #0]
 800984a:	e002      	b.n	8009852 <_printf_i+0x1d2>
 800984c:	0670      	lsls	r0, r6, #25
 800984e:	d5fb      	bpl.n	8009848 <_printf_i+0x1c8>
 8009850:	8019      	strh	r1, [r3, #0]
 8009852:	2300      	movs	r3, #0
 8009854:	6123      	str	r3, [r4, #16]
 8009856:	4615      	mov	r5, r2
 8009858:	e7ba      	b.n	80097d0 <_printf_i+0x150>
 800985a:	682b      	ldr	r3, [r5, #0]
 800985c:	1d1a      	adds	r2, r3, #4
 800985e:	602a      	str	r2, [r5, #0]
 8009860:	681d      	ldr	r5, [r3, #0]
 8009862:	6862      	ldr	r2, [r4, #4]
 8009864:	2100      	movs	r1, #0
 8009866:	4628      	mov	r0, r5
 8009868:	f7f6 fcc2 	bl	80001f0 <memchr>
 800986c:	b108      	cbz	r0, 8009872 <_printf_i+0x1f2>
 800986e:	1b40      	subs	r0, r0, r5
 8009870:	6060      	str	r0, [r4, #4]
 8009872:	6863      	ldr	r3, [r4, #4]
 8009874:	6123      	str	r3, [r4, #16]
 8009876:	2300      	movs	r3, #0
 8009878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800987c:	e7a8      	b.n	80097d0 <_printf_i+0x150>
 800987e:	6923      	ldr	r3, [r4, #16]
 8009880:	462a      	mov	r2, r5
 8009882:	4649      	mov	r1, r9
 8009884:	4640      	mov	r0, r8
 8009886:	47d0      	blx	sl
 8009888:	3001      	adds	r0, #1
 800988a:	d0ab      	beq.n	80097e4 <_printf_i+0x164>
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	079b      	lsls	r3, r3, #30
 8009890:	d413      	bmi.n	80098ba <_printf_i+0x23a>
 8009892:	68e0      	ldr	r0, [r4, #12]
 8009894:	9b03      	ldr	r3, [sp, #12]
 8009896:	4298      	cmp	r0, r3
 8009898:	bfb8      	it	lt
 800989a:	4618      	movlt	r0, r3
 800989c:	e7a4      	b.n	80097e8 <_printf_i+0x168>
 800989e:	2301      	movs	r3, #1
 80098a0:	4632      	mov	r2, r6
 80098a2:	4649      	mov	r1, r9
 80098a4:	4640      	mov	r0, r8
 80098a6:	47d0      	blx	sl
 80098a8:	3001      	adds	r0, #1
 80098aa:	d09b      	beq.n	80097e4 <_printf_i+0x164>
 80098ac:	3501      	adds	r5, #1
 80098ae:	68e3      	ldr	r3, [r4, #12]
 80098b0:	9903      	ldr	r1, [sp, #12]
 80098b2:	1a5b      	subs	r3, r3, r1
 80098b4:	42ab      	cmp	r3, r5
 80098b6:	dcf2      	bgt.n	800989e <_printf_i+0x21e>
 80098b8:	e7eb      	b.n	8009892 <_printf_i+0x212>
 80098ba:	2500      	movs	r5, #0
 80098bc:	f104 0619 	add.w	r6, r4, #25
 80098c0:	e7f5      	b.n	80098ae <_printf_i+0x22e>
 80098c2:	bf00      	nop
 80098c4:	0800be92 	.word	0x0800be92
 80098c8:	0800bea3 	.word	0x0800bea3

080098cc <siprintf>:
 80098cc:	b40e      	push	{r1, r2, r3}
 80098ce:	b500      	push	{lr}
 80098d0:	b09c      	sub	sp, #112	; 0x70
 80098d2:	ab1d      	add	r3, sp, #116	; 0x74
 80098d4:	9002      	str	r0, [sp, #8]
 80098d6:	9006      	str	r0, [sp, #24]
 80098d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098dc:	4809      	ldr	r0, [pc, #36]	; (8009904 <siprintf+0x38>)
 80098de:	9107      	str	r1, [sp, #28]
 80098e0:	9104      	str	r1, [sp, #16]
 80098e2:	4909      	ldr	r1, [pc, #36]	; (8009908 <siprintf+0x3c>)
 80098e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098e8:	9105      	str	r1, [sp, #20]
 80098ea:	6800      	ldr	r0, [r0, #0]
 80098ec:	9301      	str	r3, [sp, #4]
 80098ee:	a902      	add	r1, sp, #8
 80098f0:	f001 fb78 	bl	800afe4 <_svfiprintf_r>
 80098f4:	9b02      	ldr	r3, [sp, #8]
 80098f6:	2200      	movs	r2, #0
 80098f8:	701a      	strb	r2, [r3, #0]
 80098fa:	b01c      	add	sp, #112	; 0x70
 80098fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009900:	b003      	add	sp, #12
 8009902:	4770      	bx	lr
 8009904:	2000000c 	.word	0x2000000c
 8009908:	ffff0208 	.word	0xffff0208

0800990c <quorem>:
 800990c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009910:	6903      	ldr	r3, [r0, #16]
 8009912:	690c      	ldr	r4, [r1, #16]
 8009914:	42a3      	cmp	r3, r4
 8009916:	4607      	mov	r7, r0
 8009918:	f2c0 8081 	blt.w	8009a1e <quorem+0x112>
 800991c:	3c01      	subs	r4, #1
 800991e:	f101 0814 	add.w	r8, r1, #20
 8009922:	f100 0514 	add.w	r5, r0, #20
 8009926:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800992a:	9301      	str	r3, [sp, #4]
 800992c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009930:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009934:	3301      	adds	r3, #1
 8009936:	429a      	cmp	r2, r3
 8009938:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800993c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009940:	fbb2 f6f3 	udiv	r6, r2, r3
 8009944:	d331      	bcc.n	80099aa <quorem+0x9e>
 8009946:	f04f 0e00 	mov.w	lr, #0
 800994a:	4640      	mov	r0, r8
 800994c:	46ac      	mov	ip, r5
 800994e:	46f2      	mov	sl, lr
 8009950:	f850 2b04 	ldr.w	r2, [r0], #4
 8009954:	b293      	uxth	r3, r2
 8009956:	fb06 e303 	mla	r3, r6, r3, lr
 800995a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800995e:	b29b      	uxth	r3, r3
 8009960:	ebaa 0303 	sub.w	r3, sl, r3
 8009964:	f8dc a000 	ldr.w	sl, [ip]
 8009968:	0c12      	lsrs	r2, r2, #16
 800996a:	fa13 f38a 	uxtah	r3, r3, sl
 800996e:	fb06 e202 	mla	r2, r6, r2, lr
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	9b00      	ldr	r3, [sp, #0]
 8009976:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800997a:	b292      	uxth	r2, r2
 800997c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009980:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009984:	f8bd 3000 	ldrh.w	r3, [sp]
 8009988:	4581      	cmp	r9, r0
 800998a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800998e:	f84c 3b04 	str.w	r3, [ip], #4
 8009992:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009996:	d2db      	bcs.n	8009950 <quorem+0x44>
 8009998:	f855 300b 	ldr.w	r3, [r5, fp]
 800999c:	b92b      	cbnz	r3, 80099aa <quorem+0x9e>
 800999e:	9b01      	ldr	r3, [sp, #4]
 80099a0:	3b04      	subs	r3, #4
 80099a2:	429d      	cmp	r5, r3
 80099a4:	461a      	mov	r2, r3
 80099a6:	d32e      	bcc.n	8009a06 <quorem+0xfa>
 80099a8:	613c      	str	r4, [r7, #16]
 80099aa:	4638      	mov	r0, r7
 80099ac:	f001 f8c6 	bl	800ab3c <__mcmp>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	db24      	blt.n	80099fe <quorem+0xf2>
 80099b4:	3601      	adds	r6, #1
 80099b6:	4628      	mov	r0, r5
 80099b8:	f04f 0c00 	mov.w	ip, #0
 80099bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80099c0:	f8d0 e000 	ldr.w	lr, [r0]
 80099c4:	b293      	uxth	r3, r2
 80099c6:	ebac 0303 	sub.w	r3, ip, r3
 80099ca:	0c12      	lsrs	r2, r2, #16
 80099cc:	fa13 f38e 	uxtah	r3, r3, lr
 80099d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80099d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099d8:	b29b      	uxth	r3, r3
 80099da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099de:	45c1      	cmp	r9, r8
 80099e0:	f840 3b04 	str.w	r3, [r0], #4
 80099e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80099e8:	d2e8      	bcs.n	80099bc <quorem+0xb0>
 80099ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099f2:	b922      	cbnz	r2, 80099fe <quorem+0xf2>
 80099f4:	3b04      	subs	r3, #4
 80099f6:	429d      	cmp	r5, r3
 80099f8:	461a      	mov	r2, r3
 80099fa:	d30a      	bcc.n	8009a12 <quorem+0x106>
 80099fc:	613c      	str	r4, [r7, #16]
 80099fe:	4630      	mov	r0, r6
 8009a00:	b003      	add	sp, #12
 8009a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a06:	6812      	ldr	r2, [r2, #0]
 8009a08:	3b04      	subs	r3, #4
 8009a0a:	2a00      	cmp	r2, #0
 8009a0c:	d1cc      	bne.n	80099a8 <quorem+0x9c>
 8009a0e:	3c01      	subs	r4, #1
 8009a10:	e7c7      	b.n	80099a2 <quorem+0x96>
 8009a12:	6812      	ldr	r2, [r2, #0]
 8009a14:	3b04      	subs	r3, #4
 8009a16:	2a00      	cmp	r2, #0
 8009a18:	d1f0      	bne.n	80099fc <quorem+0xf0>
 8009a1a:	3c01      	subs	r4, #1
 8009a1c:	e7eb      	b.n	80099f6 <quorem+0xea>
 8009a1e:	2000      	movs	r0, #0
 8009a20:	e7ee      	b.n	8009a00 <quorem+0xf4>
 8009a22:	0000      	movs	r0, r0
 8009a24:	0000      	movs	r0, r0
	...

08009a28 <_dtoa_r>:
 8009a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2c:	ed2d 8b04 	vpush	{d8-d9}
 8009a30:	ec57 6b10 	vmov	r6, r7, d0
 8009a34:	b093      	sub	sp, #76	; 0x4c
 8009a36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a3c:	9106      	str	r1, [sp, #24]
 8009a3e:	ee10 aa10 	vmov	sl, s0
 8009a42:	4604      	mov	r4, r0
 8009a44:	9209      	str	r2, [sp, #36]	; 0x24
 8009a46:	930c      	str	r3, [sp, #48]	; 0x30
 8009a48:	46bb      	mov	fp, r7
 8009a4a:	b975      	cbnz	r5, 8009a6a <_dtoa_r+0x42>
 8009a4c:	2010      	movs	r0, #16
 8009a4e:	f000 fddd 	bl	800a60c <malloc>
 8009a52:	4602      	mov	r2, r0
 8009a54:	6260      	str	r0, [r4, #36]	; 0x24
 8009a56:	b920      	cbnz	r0, 8009a62 <_dtoa_r+0x3a>
 8009a58:	4ba7      	ldr	r3, [pc, #668]	; (8009cf8 <_dtoa_r+0x2d0>)
 8009a5a:	21ea      	movs	r1, #234	; 0xea
 8009a5c:	48a7      	ldr	r0, [pc, #668]	; (8009cfc <_dtoa_r+0x2d4>)
 8009a5e:	f001 fbd1 	bl	800b204 <__assert_func>
 8009a62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a66:	6005      	str	r5, [r0, #0]
 8009a68:	60c5      	str	r5, [r0, #12]
 8009a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a6c:	6819      	ldr	r1, [r3, #0]
 8009a6e:	b151      	cbz	r1, 8009a86 <_dtoa_r+0x5e>
 8009a70:	685a      	ldr	r2, [r3, #4]
 8009a72:	604a      	str	r2, [r1, #4]
 8009a74:	2301      	movs	r3, #1
 8009a76:	4093      	lsls	r3, r2
 8009a78:	608b      	str	r3, [r1, #8]
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f000 fe1c 	bl	800a6b8 <_Bfree>
 8009a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a82:	2200      	movs	r2, #0
 8009a84:	601a      	str	r2, [r3, #0]
 8009a86:	1e3b      	subs	r3, r7, #0
 8009a88:	bfaa      	itet	ge
 8009a8a:	2300      	movge	r3, #0
 8009a8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009a90:	f8c8 3000 	strge.w	r3, [r8]
 8009a94:	4b9a      	ldr	r3, [pc, #616]	; (8009d00 <_dtoa_r+0x2d8>)
 8009a96:	bfbc      	itt	lt
 8009a98:	2201      	movlt	r2, #1
 8009a9a:	f8c8 2000 	strlt.w	r2, [r8]
 8009a9e:	ea33 030b 	bics.w	r3, r3, fp
 8009aa2:	d11b      	bne.n	8009adc <_dtoa_r+0xb4>
 8009aa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009aa6:	f242 730f 	movw	r3, #9999	; 0x270f
 8009aaa:	6013      	str	r3, [r2, #0]
 8009aac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ab0:	4333      	orrs	r3, r6
 8009ab2:	f000 8592 	beq.w	800a5da <_dtoa_r+0xbb2>
 8009ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ab8:	b963      	cbnz	r3, 8009ad4 <_dtoa_r+0xac>
 8009aba:	4b92      	ldr	r3, [pc, #584]	; (8009d04 <_dtoa_r+0x2dc>)
 8009abc:	e022      	b.n	8009b04 <_dtoa_r+0xdc>
 8009abe:	4b92      	ldr	r3, [pc, #584]	; (8009d08 <_dtoa_r+0x2e0>)
 8009ac0:	9301      	str	r3, [sp, #4]
 8009ac2:	3308      	adds	r3, #8
 8009ac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ac6:	6013      	str	r3, [r2, #0]
 8009ac8:	9801      	ldr	r0, [sp, #4]
 8009aca:	b013      	add	sp, #76	; 0x4c
 8009acc:	ecbd 8b04 	vpop	{d8-d9}
 8009ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad4:	4b8b      	ldr	r3, [pc, #556]	; (8009d04 <_dtoa_r+0x2dc>)
 8009ad6:	9301      	str	r3, [sp, #4]
 8009ad8:	3303      	adds	r3, #3
 8009ada:	e7f3      	b.n	8009ac4 <_dtoa_r+0x9c>
 8009adc:	2200      	movs	r2, #0
 8009ade:	2300      	movs	r3, #0
 8009ae0:	4650      	mov	r0, sl
 8009ae2:	4659      	mov	r1, fp
 8009ae4:	f7f6 fff8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ae8:	ec4b ab19 	vmov	d9, sl, fp
 8009aec:	4680      	mov	r8, r0
 8009aee:	b158      	cbz	r0, 8009b08 <_dtoa_r+0xe0>
 8009af0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009af2:	2301      	movs	r3, #1
 8009af4:	6013      	str	r3, [r2, #0]
 8009af6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f000 856b 	beq.w	800a5d4 <_dtoa_r+0xbac>
 8009afe:	4883      	ldr	r0, [pc, #524]	; (8009d0c <_dtoa_r+0x2e4>)
 8009b00:	6018      	str	r0, [r3, #0]
 8009b02:	1e43      	subs	r3, r0, #1
 8009b04:	9301      	str	r3, [sp, #4]
 8009b06:	e7df      	b.n	8009ac8 <_dtoa_r+0xa0>
 8009b08:	ec4b ab10 	vmov	d0, sl, fp
 8009b0c:	aa10      	add	r2, sp, #64	; 0x40
 8009b0e:	a911      	add	r1, sp, #68	; 0x44
 8009b10:	4620      	mov	r0, r4
 8009b12:	f001 f8b9 	bl	800ac88 <__d2b>
 8009b16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009b1a:	ee08 0a10 	vmov	s16, r0
 8009b1e:	2d00      	cmp	r5, #0
 8009b20:	f000 8084 	beq.w	8009c2c <_dtoa_r+0x204>
 8009b24:	ee19 3a90 	vmov	r3, s19
 8009b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009b30:	4656      	mov	r6, sl
 8009b32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009b36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009b3e:	4b74      	ldr	r3, [pc, #464]	; (8009d10 <_dtoa_r+0x2e8>)
 8009b40:	2200      	movs	r2, #0
 8009b42:	4630      	mov	r0, r6
 8009b44:	4639      	mov	r1, r7
 8009b46:	f7f6 fba7 	bl	8000298 <__aeabi_dsub>
 8009b4a:	a365      	add	r3, pc, #404	; (adr r3, 8009ce0 <_dtoa_r+0x2b8>)
 8009b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b50:	f7f6 fd5a 	bl	8000608 <__aeabi_dmul>
 8009b54:	a364      	add	r3, pc, #400	; (adr r3, 8009ce8 <_dtoa_r+0x2c0>)
 8009b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5a:	f7f6 fb9f 	bl	800029c <__adddf3>
 8009b5e:	4606      	mov	r6, r0
 8009b60:	4628      	mov	r0, r5
 8009b62:	460f      	mov	r7, r1
 8009b64:	f7f6 fce6 	bl	8000534 <__aeabi_i2d>
 8009b68:	a361      	add	r3, pc, #388	; (adr r3, 8009cf0 <_dtoa_r+0x2c8>)
 8009b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6e:	f7f6 fd4b 	bl	8000608 <__aeabi_dmul>
 8009b72:	4602      	mov	r2, r0
 8009b74:	460b      	mov	r3, r1
 8009b76:	4630      	mov	r0, r6
 8009b78:	4639      	mov	r1, r7
 8009b7a:	f7f6 fb8f 	bl	800029c <__adddf3>
 8009b7e:	4606      	mov	r6, r0
 8009b80:	460f      	mov	r7, r1
 8009b82:	f7f6 fff1 	bl	8000b68 <__aeabi_d2iz>
 8009b86:	2200      	movs	r2, #0
 8009b88:	9000      	str	r0, [sp, #0]
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	4639      	mov	r1, r7
 8009b90:	f7f6 ffac 	bl	8000aec <__aeabi_dcmplt>
 8009b94:	b150      	cbz	r0, 8009bac <_dtoa_r+0x184>
 8009b96:	9800      	ldr	r0, [sp, #0]
 8009b98:	f7f6 fccc 	bl	8000534 <__aeabi_i2d>
 8009b9c:	4632      	mov	r2, r6
 8009b9e:	463b      	mov	r3, r7
 8009ba0:	f7f6 ff9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ba4:	b910      	cbnz	r0, 8009bac <_dtoa_r+0x184>
 8009ba6:	9b00      	ldr	r3, [sp, #0]
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	9b00      	ldr	r3, [sp, #0]
 8009bae:	2b16      	cmp	r3, #22
 8009bb0:	d85a      	bhi.n	8009c68 <_dtoa_r+0x240>
 8009bb2:	9a00      	ldr	r2, [sp, #0]
 8009bb4:	4b57      	ldr	r3, [pc, #348]	; (8009d14 <_dtoa_r+0x2ec>)
 8009bb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbe:	ec51 0b19 	vmov	r0, r1, d9
 8009bc2:	f7f6 ff93 	bl	8000aec <__aeabi_dcmplt>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d050      	beq.n	8009c6c <_dtoa_r+0x244>
 8009bca:	9b00      	ldr	r3, [sp, #0]
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bd6:	1b5d      	subs	r5, r3, r5
 8009bd8:	1e6b      	subs	r3, r5, #1
 8009bda:	9305      	str	r3, [sp, #20]
 8009bdc:	bf45      	ittet	mi
 8009bde:	f1c5 0301 	rsbmi	r3, r5, #1
 8009be2:	9304      	strmi	r3, [sp, #16]
 8009be4:	2300      	movpl	r3, #0
 8009be6:	2300      	movmi	r3, #0
 8009be8:	bf4c      	ite	mi
 8009bea:	9305      	strmi	r3, [sp, #20]
 8009bec:	9304      	strpl	r3, [sp, #16]
 8009bee:	9b00      	ldr	r3, [sp, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	db3d      	blt.n	8009c70 <_dtoa_r+0x248>
 8009bf4:	9b05      	ldr	r3, [sp, #20]
 8009bf6:	9a00      	ldr	r2, [sp, #0]
 8009bf8:	920a      	str	r2, [sp, #40]	; 0x28
 8009bfa:	4413      	add	r3, r2
 8009bfc:	9305      	str	r3, [sp, #20]
 8009bfe:	2300      	movs	r3, #0
 8009c00:	9307      	str	r3, [sp, #28]
 8009c02:	9b06      	ldr	r3, [sp, #24]
 8009c04:	2b09      	cmp	r3, #9
 8009c06:	f200 8089 	bhi.w	8009d1c <_dtoa_r+0x2f4>
 8009c0a:	2b05      	cmp	r3, #5
 8009c0c:	bfc4      	itt	gt
 8009c0e:	3b04      	subgt	r3, #4
 8009c10:	9306      	strgt	r3, [sp, #24]
 8009c12:	9b06      	ldr	r3, [sp, #24]
 8009c14:	f1a3 0302 	sub.w	r3, r3, #2
 8009c18:	bfcc      	ite	gt
 8009c1a:	2500      	movgt	r5, #0
 8009c1c:	2501      	movle	r5, #1
 8009c1e:	2b03      	cmp	r3, #3
 8009c20:	f200 8087 	bhi.w	8009d32 <_dtoa_r+0x30a>
 8009c24:	e8df f003 	tbb	[pc, r3]
 8009c28:	59383a2d 	.word	0x59383a2d
 8009c2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009c30:	441d      	add	r5, r3
 8009c32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c36:	2b20      	cmp	r3, #32
 8009c38:	bfc1      	itttt	gt
 8009c3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009c42:	fa0b f303 	lslgt.w	r3, fp, r3
 8009c46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c4a:	bfda      	itte	le
 8009c4c:	f1c3 0320 	rsble	r3, r3, #32
 8009c50:	fa06 f003 	lslle.w	r0, r6, r3
 8009c54:	4318      	orrgt	r0, r3
 8009c56:	f7f6 fc5d 	bl	8000514 <__aeabi_ui2d>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	4606      	mov	r6, r0
 8009c5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c62:	3d01      	subs	r5, #1
 8009c64:	930e      	str	r3, [sp, #56]	; 0x38
 8009c66:	e76a      	b.n	8009b3e <_dtoa_r+0x116>
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e7b2      	b.n	8009bd2 <_dtoa_r+0x1aa>
 8009c6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009c6e:	e7b1      	b.n	8009bd4 <_dtoa_r+0x1ac>
 8009c70:	9b04      	ldr	r3, [sp, #16]
 8009c72:	9a00      	ldr	r2, [sp, #0]
 8009c74:	1a9b      	subs	r3, r3, r2
 8009c76:	9304      	str	r3, [sp, #16]
 8009c78:	4253      	negs	r3, r2
 8009c7a:	9307      	str	r3, [sp, #28]
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c80:	e7bf      	b.n	8009c02 <_dtoa_r+0x1da>
 8009c82:	2300      	movs	r3, #0
 8009c84:	9308      	str	r3, [sp, #32]
 8009c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	dc55      	bgt.n	8009d38 <_dtoa_r+0x310>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c92:	461a      	mov	r2, r3
 8009c94:	9209      	str	r2, [sp, #36]	; 0x24
 8009c96:	e00c      	b.n	8009cb2 <_dtoa_r+0x28a>
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e7f3      	b.n	8009c84 <_dtoa_r+0x25c>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ca0:	9308      	str	r3, [sp, #32]
 8009ca2:	9b00      	ldr	r3, [sp, #0]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	9302      	str	r3, [sp, #8]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	9303      	str	r3, [sp, #12]
 8009cae:	bfb8      	it	lt
 8009cb0:	2301      	movlt	r3, #1
 8009cb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	6042      	str	r2, [r0, #4]
 8009cb8:	2204      	movs	r2, #4
 8009cba:	f102 0614 	add.w	r6, r2, #20
 8009cbe:	429e      	cmp	r6, r3
 8009cc0:	6841      	ldr	r1, [r0, #4]
 8009cc2:	d93d      	bls.n	8009d40 <_dtoa_r+0x318>
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f000 fcb7 	bl	800a638 <_Balloc>
 8009cca:	9001      	str	r0, [sp, #4]
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	d13b      	bne.n	8009d48 <_dtoa_r+0x320>
 8009cd0:	4b11      	ldr	r3, [pc, #68]	; (8009d18 <_dtoa_r+0x2f0>)
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009cd8:	e6c0      	b.n	8009a5c <_dtoa_r+0x34>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e7df      	b.n	8009c9e <_dtoa_r+0x276>
 8009cde:	bf00      	nop
 8009ce0:	636f4361 	.word	0x636f4361
 8009ce4:	3fd287a7 	.word	0x3fd287a7
 8009ce8:	8b60c8b3 	.word	0x8b60c8b3
 8009cec:	3fc68a28 	.word	0x3fc68a28
 8009cf0:	509f79fb 	.word	0x509f79fb
 8009cf4:	3fd34413 	.word	0x3fd34413
 8009cf8:	0800bec1 	.word	0x0800bec1
 8009cfc:	0800bed8 	.word	0x0800bed8
 8009d00:	7ff00000 	.word	0x7ff00000
 8009d04:	0800bebd 	.word	0x0800bebd
 8009d08:	0800beb4 	.word	0x0800beb4
 8009d0c:	0800be91 	.word	0x0800be91
 8009d10:	3ff80000 	.word	0x3ff80000
 8009d14:	0800bfc8 	.word	0x0800bfc8
 8009d18:	0800bf33 	.word	0x0800bf33
 8009d1c:	2501      	movs	r5, #1
 8009d1e:	2300      	movs	r3, #0
 8009d20:	9306      	str	r3, [sp, #24]
 8009d22:	9508      	str	r5, [sp, #32]
 8009d24:	f04f 33ff 	mov.w	r3, #4294967295
 8009d28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2312      	movs	r3, #18
 8009d30:	e7b0      	b.n	8009c94 <_dtoa_r+0x26c>
 8009d32:	2301      	movs	r3, #1
 8009d34:	9308      	str	r3, [sp, #32]
 8009d36:	e7f5      	b.n	8009d24 <_dtoa_r+0x2fc>
 8009d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d3e:	e7b8      	b.n	8009cb2 <_dtoa_r+0x28a>
 8009d40:	3101      	adds	r1, #1
 8009d42:	6041      	str	r1, [r0, #4]
 8009d44:	0052      	lsls	r2, r2, #1
 8009d46:	e7b8      	b.n	8009cba <_dtoa_r+0x292>
 8009d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d4a:	9a01      	ldr	r2, [sp, #4]
 8009d4c:	601a      	str	r2, [r3, #0]
 8009d4e:	9b03      	ldr	r3, [sp, #12]
 8009d50:	2b0e      	cmp	r3, #14
 8009d52:	f200 809d 	bhi.w	8009e90 <_dtoa_r+0x468>
 8009d56:	2d00      	cmp	r5, #0
 8009d58:	f000 809a 	beq.w	8009e90 <_dtoa_r+0x468>
 8009d5c:	9b00      	ldr	r3, [sp, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	dd32      	ble.n	8009dc8 <_dtoa_r+0x3a0>
 8009d62:	4ab7      	ldr	r2, [pc, #732]	; (800a040 <_dtoa_r+0x618>)
 8009d64:	f003 030f 	and.w	r3, r3, #15
 8009d68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d70:	9b00      	ldr	r3, [sp, #0]
 8009d72:	05d8      	lsls	r0, r3, #23
 8009d74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009d78:	d516      	bpl.n	8009da8 <_dtoa_r+0x380>
 8009d7a:	4bb2      	ldr	r3, [pc, #712]	; (800a044 <_dtoa_r+0x61c>)
 8009d7c:	ec51 0b19 	vmov	r0, r1, d9
 8009d80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d84:	f7f6 fd6a 	bl	800085c <__aeabi_ddiv>
 8009d88:	f007 070f 	and.w	r7, r7, #15
 8009d8c:	4682      	mov	sl, r0
 8009d8e:	468b      	mov	fp, r1
 8009d90:	2503      	movs	r5, #3
 8009d92:	4eac      	ldr	r6, [pc, #688]	; (800a044 <_dtoa_r+0x61c>)
 8009d94:	b957      	cbnz	r7, 8009dac <_dtoa_r+0x384>
 8009d96:	4642      	mov	r2, r8
 8009d98:	464b      	mov	r3, r9
 8009d9a:	4650      	mov	r0, sl
 8009d9c:	4659      	mov	r1, fp
 8009d9e:	f7f6 fd5d 	bl	800085c <__aeabi_ddiv>
 8009da2:	4682      	mov	sl, r0
 8009da4:	468b      	mov	fp, r1
 8009da6:	e028      	b.n	8009dfa <_dtoa_r+0x3d2>
 8009da8:	2502      	movs	r5, #2
 8009daa:	e7f2      	b.n	8009d92 <_dtoa_r+0x36a>
 8009dac:	07f9      	lsls	r1, r7, #31
 8009dae:	d508      	bpl.n	8009dc2 <_dtoa_r+0x39a>
 8009db0:	4640      	mov	r0, r8
 8009db2:	4649      	mov	r1, r9
 8009db4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009db8:	f7f6 fc26 	bl	8000608 <__aeabi_dmul>
 8009dbc:	3501      	adds	r5, #1
 8009dbe:	4680      	mov	r8, r0
 8009dc0:	4689      	mov	r9, r1
 8009dc2:	107f      	asrs	r7, r7, #1
 8009dc4:	3608      	adds	r6, #8
 8009dc6:	e7e5      	b.n	8009d94 <_dtoa_r+0x36c>
 8009dc8:	f000 809b 	beq.w	8009f02 <_dtoa_r+0x4da>
 8009dcc:	9b00      	ldr	r3, [sp, #0]
 8009dce:	4f9d      	ldr	r7, [pc, #628]	; (800a044 <_dtoa_r+0x61c>)
 8009dd0:	425e      	negs	r6, r3
 8009dd2:	4b9b      	ldr	r3, [pc, #620]	; (800a040 <_dtoa_r+0x618>)
 8009dd4:	f006 020f 	and.w	r2, r6, #15
 8009dd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de0:	ec51 0b19 	vmov	r0, r1, d9
 8009de4:	f7f6 fc10 	bl	8000608 <__aeabi_dmul>
 8009de8:	1136      	asrs	r6, r6, #4
 8009dea:	4682      	mov	sl, r0
 8009dec:	468b      	mov	fp, r1
 8009dee:	2300      	movs	r3, #0
 8009df0:	2502      	movs	r5, #2
 8009df2:	2e00      	cmp	r6, #0
 8009df4:	d17a      	bne.n	8009eec <_dtoa_r+0x4c4>
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1d3      	bne.n	8009da2 <_dtoa_r+0x37a>
 8009dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f000 8082 	beq.w	8009f06 <_dtoa_r+0x4de>
 8009e02:	4b91      	ldr	r3, [pc, #580]	; (800a048 <_dtoa_r+0x620>)
 8009e04:	2200      	movs	r2, #0
 8009e06:	4650      	mov	r0, sl
 8009e08:	4659      	mov	r1, fp
 8009e0a:	f7f6 fe6f 	bl	8000aec <__aeabi_dcmplt>
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	d079      	beq.n	8009f06 <_dtoa_r+0x4de>
 8009e12:	9b03      	ldr	r3, [sp, #12]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d076      	beq.n	8009f06 <_dtoa_r+0x4de>
 8009e18:	9b02      	ldr	r3, [sp, #8]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	dd36      	ble.n	8009e8c <_dtoa_r+0x464>
 8009e1e:	9b00      	ldr	r3, [sp, #0]
 8009e20:	4650      	mov	r0, sl
 8009e22:	4659      	mov	r1, fp
 8009e24:	1e5f      	subs	r7, r3, #1
 8009e26:	2200      	movs	r2, #0
 8009e28:	4b88      	ldr	r3, [pc, #544]	; (800a04c <_dtoa_r+0x624>)
 8009e2a:	f7f6 fbed 	bl	8000608 <__aeabi_dmul>
 8009e2e:	9e02      	ldr	r6, [sp, #8]
 8009e30:	4682      	mov	sl, r0
 8009e32:	468b      	mov	fp, r1
 8009e34:	3501      	adds	r5, #1
 8009e36:	4628      	mov	r0, r5
 8009e38:	f7f6 fb7c 	bl	8000534 <__aeabi_i2d>
 8009e3c:	4652      	mov	r2, sl
 8009e3e:	465b      	mov	r3, fp
 8009e40:	f7f6 fbe2 	bl	8000608 <__aeabi_dmul>
 8009e44:	4b82      	ldr	r3, [pc, #520]	; (800a050 <_dtoa_r+0x628>)
 8009e46:	2200      	movs	r2, #0
 8009e48:	f7f6 fa28 	bl	800029c <__adddf3>
 8009e4c:	46d0      	mov	r8, sl
 8009e4e:	46d9      	mov	r9, fp
 8009e50:	4682      	mov	sl, r0
 8009e52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009e56:	2e00      	cmp	r6, #0
 8009e58:	d158      	bne.n	8009f0c <_dtoa_r+0x4e4>
 8009e5a:	4b7e      	ldr	r3, [pc, #504]	; (800a054 <_dtoa_r+0x62c>)
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	4640      	mov	r0, r8
 8009e60:	4649      	mov	r1, r9
 8009e62:	f7f6 fa19 	bl	8000298 <__aeabi_dsub>
 8009e66:	4652      	mov	r2, sl
 8009e68:	465b      	mov	r3, fp
 8009e6a:	4680      	mov	r8, r0
 8009e6c:	4689      	mov	r9, r1
 8009e6e:	f7f6 fe5b 	bl	8000b28 <__aeabi_dcmpgt>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	f040 8295 	bne.w	800a3a2 <_dtoa_r+0x97a>
 8009e78:	4652      	mov	r2, sl
 8009e7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009e7e:	4640      	mov	r0, r8
 8009e80:	4649      	mov	r1, r9
 8009e82:	f7f6 fe33 	bl	8000aec <__aeabi_dcmplt>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	f040 8289 	bne.w	800a39e <_dtoa_r+0x976>
 8009e8c:	ec5b ab19 	vmov	sl, fp, d9
 8009e90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f2c0 8148 	blt.w	800a128 <_dtoa_r+0x700>
 8009e98:	9a00      	ldr	r2, [sp, #0]
 8009e9a:	2a0e      	cmp	r2, #14
 8009e9c:	f300 8144 	bgt.w	800a128 <_dtoa_r+0x700>
 8009ea0:	4b67      	ldr	r3, [pc, #412]	; (800a040 <_dtoa_r+0x618>)
 8009ea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ea6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f280 80d5 	bge.w	800a05c <_dtoa_r+0x634>
 8009eb2:	9b03      	ldr	r3, [sp, #12]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f300 80d1 	bgt.w	800a05c <_dtoa_r+0x634>
 8009eba:	f040 826f 	bne.w	800a39c <_dtoa_r+0x974>
 8009ebe:	4b65      	ldr	r3, [pc, #404]	; (800a054 <_dtoa_r+0x62c>)
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	4640      	mov	r0, r8
 8009ec4:	4649      	mov	r1, r9
 8009ec6:	f7f6 fb9f 	bl	8000608 <__aeabi_dmul>
 8009eca:	4652      	mov	r2, sl
 8009ecc:	465b      	mov	r3, fp
 8009ece:	f7f6 fe21 	bl	8000b14 <__aeabi_dcmpge>
 8009ed2:	9e03      	ldr	r6, [sp, #12]
 8009ed4:	4637      	mov	r7, r6
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	f040 8245 	bne.w	800a366 <_dtoa_r+0x93e>
 8009edc:	9d01      	ldr	r5, [sp, #4]
 8009ede:	2331      	movs	r3, #49	; 0x31
 8009ee0:	f805 3b01 	strb.w	r3, [r5], #1
 8009ee4:	9b00      	ldr	r3, [sp, #0]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	e240      	b.n	800a36e <_dtoa_r+0x946>
 8009eec:	07f2      	lsls	r2, r6, #31
 8009eee:	d505      	bpl.n	8009efc <_dtoa_r+0x4d4>
 8009ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ef4:	f7f6 fb88 	bl	8000608 <__aeabi_dmul>
 8009ef8:	3501      	adds	r5, #1
 8009efa:	2301      	movs	r3, #1
 8009efc:	1076      	asrs	r6, r6, #1
 8009efe:	3708      	adds	r7, #8
 8009f00:	e777      	b.n	8009df2 <_dtoa_r+0x3ca>
 8009f02:	2502      	movs	r5, #2
 8009f04:	e779      	b.n	8009dfa <_dtoa_r+0x3d2>
 8009f06:	9f00      	ldr	r7, [sp, #0]
 8009f08:	9e03      	ldr	r6, [sp, #12]
 8009f0a:	e794      	b.n	8009e36 <_dtoa_r+0x40e>
 8009f0c:	9901      	ldr	r1, [sp, #4]
 8009f0e:	4b4c      	ldr	r3, [pc, #304]	; (800a040 <_dtoa_r+0x618>)
 8009f10:	4431      	add	r1, r6
 8009f12:	910d      	str	r1, [sp, #52]	; 0x34
 8009f14:	9908      	ldr	r1, [sp, #32]
 8009f16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f1e:	2900      	cmp	r1, #0
 8009f20:	d043      	beq.n	8009faa <_dtoa_r+0x582>
 8009f22:	494d      	ldr	r1, [pc, #308]	; (800a058 <_dtoa_r+0x630>)
 8009f24:	2000      	movs	r0, #0
 8009f26:	f7f6 fc99 	bl	800085c <__aeabi_ddiv>
 8009f2a:	4652      	mov	r2, sl
 8009f2c:	465b      	mov	r3, fp
 8009f2e:	f7f6 f9b3 	bl	8000298 <__aeabi_dsub>
 8009f32:	9d01      	ldr	r5, [sp, #4]
 8009f34:	4682      	mov	sl, r0
 8009f36:	468b      	mov	fp, r1
 8009f38:	4649      	mov	r1, r9
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	f7f6 fe14 	bl	8000b68 <__aeabi_d2iz>
 8009f40:	4606      	mov	r6, r0
 8009f42:	f7f6 faf7 	bl	8000534 <__aeabi_i2d>
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	f7f6 f9a3 	bl	8000298 <__aeabi_dsub>
 8009f52:	3630      	adds	r6, #48	; 0x30
 8009f54:	f805 6b01 	strb.w	r6, [r5], #1
 8009f58:	4652      	mov	r2, sl
 8009f5a:	465b      	mov	r3, fp
 8009f5c:	4680      	mov	r8, r0
 8009f5e:	4689      	mov	r9, r1
 8009f60:	f7f6 fdc4 	bl	8000aec <__aeabi_dcmplt>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d163      	bne.n	800a030 <_dtoa_r+0x608>
 8009f68:	4642      	mov	r2, r8
 8009f6a:	464b      	mov	r3, r9
 8009f6c:	4936      	ldr	r1, [pc, #216]	; (800a048 <_dtoa_r+0x620>)
 8009f6e:	2000      	movs	r0, #0
 8009f70:	f7f6 f992 	bl	8000298 <__aeabi_dsub>
 8009f74:	4652      	mov	r2, sl
 8009f76:	465b      	mov	r3, fp
 8009f78:	f7f6 fdb8 	bl	8000aec <__aeabi_dcmplt>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	f040 80b5 	bne.w	800a0ec <_dtoa_r+0x6c4>
 8009f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f84:	429d      	cmp	r5, r3
 8009f86:	d081      	beq.n	8009e8c <_dtoa_r+0x464>
 8009f88:	4b30      	ldr	r3, [pc, #192]	; (800a04c <_dtoa_r+0x624>)
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	4650      	mov	r0, sl
 8009f8e:	4659      	mov	r1, fp
 8009f90:	f7f6 fb3a 	bl	8000608 <__aeabi_dmul>
 8009f94:	4b2d      	ldr	r3, [pc, #180]	; (800a04c <_dtoa_r+0x624>)
 8009f96:	4682      	mov	sl, r0
 8009f98:	468b      	mov	fp, r1
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	4649      	mov	r1, r9
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f7f6 fb32 	bl	8000608 <__aeabi_dmul>
 8009fa4:	4680      	mov	r8, r0
 8009fa6:	4689      	mov	r9, r1
 8009fa8:	e7c6      	b.n	8009f38 <_dtoa_r+0x510>
 8009faa:	4650      	mov	r0, sl
 8009fac:	4659      	mov	r1, fp
 8009fae:	f7f6 fb2b 	bl	8000608 <__aeabi_dmul>
 8009fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fb4:	9d01      	ldr	r5, [sp, #4]
 8009fb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fb8:	4682      	mov	sl, r0
 8009fba:	468b      	mov	fp, r1
 8009fbc:	4649      	mov	r1, r9
 8009fbe:	4640      	mov	r0, r8
 8009fc0:	f7f6 fdd2 	bl	8000b68 <__aeabi_d2iz>
 8009fc4:	4606      	mov	r6, r0
 8009fc6:	f7f6 fab5 	bl	8000534 <__aeabi_i2d>
 8009fca:	3630      	adds	r6, #48	; 0x30
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4640      	mov	r0, r8
 8009fd2:	4649      	mov	r1, r9
 8009fd4:	f7f6 f960 	bl	8000298 <__aeabi_dsub>
 8009fd8:	f805 6b01 	strb.w	r6, [r5], #1
 8009fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fde:	429d      	cmp	r5, r3
 8009fe0:	4680      	mov	r8, r0
 8009fe2:	4689      	mov	r9, r1
 8009fe4:	f04f 0200 	mov.w	r2, #0
 8009fe8:	d124      	bne.n	800a034 <_dtoa_r+0x60c>
 8009fea:	4b1b      	ldr	r3, [pc, #108]	; (800a058 <_dtoa_r+0x630>)
 8009fec:	4650      	mov	r0, sl
 8009fee:	4659      	mov	r1, fp
 8009ff0:	f7f6 f954 	bl	800029c <__adddf3>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	4640      	mov	r0, r8
 8009ffa:	4649      	mov	r1, r9
 8009ffc:	f7f6 fd94 	bl	8000b28 <__aeabi_dcmpgt>
 800a000:	2800      	cmp	r0, #0
 800a002:	d173      	bne.n	800a0ec <_dtoa_r+0x6c4>
 800a004:	4652      	mov	r2, sl
 800a006:	465b      	mov	r3, fp
 800a008:	4913      	ldr	r1, [pc, #76]	; (800a058 <_dtoa_r+0x630>)
 800a00a:	2000      	movs	r0, #0
 800a00c:	f7f6 f944 	bl	8000298 <__aeabi_dsub>
 800a010:	4602      	mov	r2, r0
 800a012:	460b      	mov	r3, r1
 800a014:	4640      	mov	r0, r8
 800a016:	4649      	mov	r1, r9
 800a018:	f7f6 fd68 	bl	8000aec <__aeabi_dcmplt>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	f43f af35 	beq.w	8009e8c <_dtoa_r+0x464>
 800a022:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a024:	1e6b      	subs	r3, r5, #1
 800a026:	930f      	str	r3, [sp, #60]	; 0x3c
 800a028:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a02c:	2b30      	cmp	r3, #48	; 0x30
 800a02e:	d0f8      	beq.n	800a022 <_dtoa_r+0x5fa>
 800a030:	9700      	str	r7, [sp, #0]
 800a032:	e049      	b.n	800a0c8 <_dtoa_r+0x6a0>
 800a034:	4b05      	ldr	r3, [pc, #20]	; (800a04c <_dtoa_r+0x624>)
 800a036:	f7f6 fae7 	bl	8000608 <__aeabi_dmul>
 800a03a:	4680      	mov	r8, r0
 800a03c:	4689      	mov	r9, r1
 800a03e:	e7bd      	b.n	8009fbc <_dtoa_r+0x594>
 800a040:	0800bfc8 	.word	0x0800bfc8
 800a044:	0800bfa0 	.word	0x0800bfa0
 800a048:	3ff00000 	.word	0x3ff00000
 800a04c:	40240000 	.word	0x40240000
 800a050:	401c0000 	.word	0x401c0000
 800a054:	40140000 	.word	0x40140000
 800a058:	3fe00000 	.word	0x3fe00000
 800a05c:	9d01      	ldr	r5, [sp, #4]
 800a05e:	4656      	mov	r6, sl
 800a060:	465f      	mov	r7, fp
 800a062:	4642      	mov	r2, r8
 800a064:	464b      	mov	r3, r9
 800a066:	4630      	mov	r0, r6
 800a068:	4639      	mov	r1, r7
 800a06a:	f7f6 fbf7 	bl	800085c <__aeabi_ddiv>
 800a06e:	f7f6 fd7b 	bl	8000b68 <__aeabi_d2iz>
 800a072:	4682      	mov	sl, r0
 800a074:	f7f6 fa5e 	bl	8000534 <__aeabi_i2d>
 800a078:	4642      	mov	r2, r8
 800a07a:	464b      	mov	r3, r9
 800a07c:	f7f6 fac4 	bl	8000608 <__aeabi_dmul>
 800a080:	4602      	mov	r2, r0
 800a082:	460b      	mov	r3, r1
 800a084:	4630      	mov	r0, r6
 800a086:	4639      	mov	r1, r7
 800a088:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a08c:	f7f6 f904 	bl	8000298 <__aeabi_dsub>
 800a090:	f805 6b01 	strb.w	r6, [r5], #1
 800a094:	9e01      	ldr	r6, [sp, #4]
 800a096:	9f03      	ldr	r7, [sp, #12]
 800a098:	1bae      	subs	r6, r5, r6
 800a09a:	42b7      	cmp	r7, r6
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	d135      	bne.n	800a10e <_dtoa_r+0x6e6>
 800a0a2:	f7f6 f8fb 	bl	800029c <__adddf3>
 800a0a6:	4642      	mov	r2, r8
 800a0a8:	464b      	mov	r3, r9
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	460f      	mov	r7, r1
 800a0ae:	f7f6 fd3b 	bl	8000b28 <__aeabi_dcmpgt>
 800a0b2:	b9d0      	cbnz	r0, 800a0ea <_dtoa_r+0x6c2>
 800a0b4:	4642      	mov	r2, r8
 800a0b6:	464b      	mov	r3, r9
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	4639      	mov	r1, r7
 800a0bc:	f7f6 fd0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0c0:	b110      	cbz	r0, 800a0c8 <_dtoa_r+0x6a0>
 800a0c2:	f01a 0f01 	tst.w	sl, #1
 800a0c6:	d110      	bne.n	800a0ea <_dtoa_r+0x6c2>
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	ee18 1a10 	vmov	r1, s16
 800a0ce:	f000 faf3 	bl	800a6b8 <_Bfree>
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	9800      	ldr	r0, [sp, #0]
 800a0d6:	702b      	strb	r3, [r5, #0]
 800a0d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0da:	3001      	adds	r0, #1
 800a0dc:	6018      	str	r0, [r3, #0]
 800a0de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f43f acf1 	beq.w	8009ac8 <_dtoa_r+0xa0>
 800a0e6:	601d      	str	r5, [r3, #0]
 800a0e8:	e4ee      	b.n	8009ac8 <_dtoa_r+0xa0>
 800a0ea:	9f00      	ldr	r7, [sp, #0]
 800a0ec:	462b      	mov	r3, r5
 800a0ee:	461d      	mov	r5, r3
 800a0f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0f4:	2a39      	cmp	r2, #57	; 0x39
 800a0f6:	d106      	bne.n	800a106 <_dtoa_r+0x6de>
 800a0f8:	9a01      	ldr	r2, [sp, #4]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d1f7      	bne.n	800a0ee <_dtoa_r+0x6c6>
 800a0fe:	9901      	ldr	r1, [sp, #4]
 800a100:	2230      	movs	r2, #48	; 0x30
 800a102:	3701      	adds	r7, #1
 800a104:	700a      	strb	r2, [r1, #0]
 800a106:	781a      	ldrb	r2, [r3, #0]
 800a108:	3201      	adds	r2, #1
 800a10a:	701a      	strb	r2, [r3, #0]
 800a10c:	e790      	b.n	800a030 <_dtoa_r+0x608>
 800a10e:	4ba6      	ldr	r3, [pc, #664]	; (800a3a8 <_dtoa_r+0x980>)
 800a110:	2200      	movs	r2, #0
 800a112:	f7f6 fa79 	bl	8000608 <__aeabi_dmul>
 800a116:	2200      	movs	r2, #0
 800a118:	2300      	movs	r3, #0
 800a11a:	4606      	mov	r6, r0
 800a11c:	460f      	mov	r7, r1
 800a11e:	f7f6 fcdb 	bl	8000ad8 <__aeabi_dcmpeq>
 800a122:	2800      	cmp	r0, #0
 800a124:	d09d      	beq.n	800a062 <_dtoa_r+0x63a>
 800a126:	e7cf      	b.n	800a0c8 <_dtoa_r+0x6a0>
 800a128:	9a08      	ldr	r2, [sp, #32]
 800a12a:	2a00      	cmp	r2, #0
 800a12c:	f000 80d7 	beq.w	800a2de <_dtoa_r+0x8b6>
 800a130:	9a06      	ldr	r2, [sp, #24]
 800a132:	2a01      	cmp	r2, #1
 800a134:	f300 80ba 	bgt.w	800a2ac <_dtoa_r+0x884>
 800a138:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a13a:	2a00      	cmp	r2, #0
 800a13c:	f000 80b2 	beq.w	800a2a4 <_dtoa_r+0x87c>
 800a140:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a144:	9e07      	ldr	r6, [sp, #28]
 800a146:	9d04      	ldr	r5, [sp, #16]
 800a148:	9a04      	ldr	r2, [sp, #16]
 800a14a:	441a      	add	r2, r3
 800a14c:	9204      	str	r2, [sp, #16]
 800a14e:	9a05      	ldr	r2, [sp, #20]
 800a150:	2101      	movs	r1, #1
 800a152:	441a      	add	r2, r3
 800a154:	4620      	mov	r0, r4
 800a156:	9205      	str	r2, [sp, #20]
 800a158:	f000 fb66 	bl	800a828 <__i2b>
 800a15c:	4607      	mov	r7, r0
 800a15e:	2d00      	cmp	r5, #0
 800a160:	dd0c      	ble.n	800a17c <_dtoa_r+0x754>
 800a162:	9b05      	ldr	r3, [sp, #20]
 800a164:	2b00      	cmp	r3, #0
 800a166:	dd09      	ble.n	800a17c <_dtoa_r+0x754>
 800a168:	42ab      	cmp	r3, r5
 800a16a:	9a04      	ldr	r2, [sp, #16]
 800a16c:	bfa8      	it	ge
 800a16e:	462b      	movge	r3, r5
 800a170:	1ad2      	subs	r2, r2, r3
 800a172:	9204      	str	r2, [sp, #16]
 800a174:	9a05      	ldr	r2, [sp, #20]
 800a176:	1aed      	subs	r5, r5, r3
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	9305      	str	r3, [sp, #20]
 800a17c:	9b07      	ldr	r3, [sp, #28]
 800a17e:	b31b      	cbz	r3, 800a1c8 <_dtoa_r+0x7a0>
 800a180:	9b08      	ldr	r3, [sp, #32]
 800a182:	2b00      	cmp	r3, #0
 800a184:	f000 80af 	beq.w	800a2e6 <_dtoa_r+0x8be>
 800a188:	2e00      	cmp	r6, #0
 800a18a:	dd13      	ble.n	800a1b4 <_dtoa_r+0x78c>
 800a18c:	4639      	mov	r1, r7
 800a18e:	4632      	mov	r2, r6
 800a190:	4620      	mov	r0, r4
 800a192:	f000 fc09 	bl	800a9a8 <__pow5mult>
 800a196:	ee18 2a10 	vmov	r2, s16
 800a19a:	4601      	mov	r1, r0
 800a19c:	4607      	mov	r7, r0
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f000 fb58 	bl	800a854 <__multiply>
 800a1a4:	ee18 1a10 	vmov	r1, s16
 800a1a8:	4680      	mov	r8, r0
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f000 fa84 	bl	800a6b8 <_Bfree>
 800a1b0:	ee08 8a10 	vmov	s16, r8
 800a1b4:	9b07      	ldr	r3, [sp, #28]
 800a1b6:	1b9a      	subs	r2, r3, r6
 800a1b8:	d006      	beq.n	800a1c8 <_dtoa_r+0x7a0>
 800a1ba:	ee18 1a10 	vmov	r1, s16
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f000 fbf2 	bl	800a9a8 <__pow5mult>
 800a1c4:	ee08 0a10 	vmov	s16, r0
 800a1c8:	2101      	movs	r1, #1
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f000 fb2c 	bl	800a828 <__i2b>
 800a1d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	4606      	mov	r6, r0
 800a1d6:	f340 8088 	ble.w	800a2ea <_dtoa_r+0x8c2>
 800a1da:	461a      	mov	r2, r3
 800a1dc:	4601      	mov	r1, r0
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f000 fbe2 	bl	800a9a8 <__pow5mult>
 800a1e4:	9b06      	ldr	r3, [sp, #24]
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	4606      	mov	r6, r0
 800a1ea:	f340 8081 	ble.w	800a2f0 <_dtoa_r+0x8c8>
 800a1ee:	f04f 0800 	mov.w	r8, #0
 800a1f2:	6933      	ldr	r3, [r6, #16]
 800a1f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a1f8:	6918      	ldr	r0, [r3, #16]
 800a1fa:	f000 fac5 	bl	800a788 <__hi0bits>
 800a1fe:	f1c0 0020 	rsb	r0, r0, #32
 800a202:	9b05      	ldr	r3, [sp, #20]
 800a204:	4418      	add	r0, r3
 800a206:	f010 001f 	ands.w	r0, r0, #31
 800a20a:	f000 8092 	beq.w	800a332 <_dtoa_r+0x90a>
 800a20e:	f1c0 0320 	rsb	r3, r0, #32
 800a212:	2b04      	cmp	r3, #4
 800a214:	f340 808a 	ble.w	800a32c <_dtoa_r+0x904>
 800a218:	f1c0 001c 	rsb	r0, r0, #28
 800a21c:	9b04      	ldr	r3, [sp, #16]
 800a21e:	4403      	add	r3, r0
 800a220:	9304      	str	r3, [sp, #16]
 800a222:	9b05      	ldr	r3, [sp, #20]
 800a224:	4403      	add	r3, r0
 800a226:	4405      	add	r5, r0
 800a228:	9305      	str	r3, [sp, #20]
 800a22a:	9b04      	ldr	r3, [sp, #16]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	dd07      	ble.n	800a240 <_dtoa_r+0x818>
 800a230:	ee18 1a10 	vmov	r1, s16
 800a234:	461a      	mov	r2, r3
 800a236:	4620      	mov	r0, r4
 800a238:	f000 fc10 	bl	800aa5c <__lshift>
 800a23c:	ee08 0a10 	vmov	s16, r0
 800a240:	9b05      	ldr	r3, [sp, #20]
 800a242:	2b00      	cmp	r3, #0
 800a244:	dd05      	ble.n	800a252 <_dtoa_r+0x82a>
 800a246:	4631      	mov	r1, r6
 800a248:	461a      	mov	r2, r3
 800a24a:	4620      	mov	r0, r4
 800a24c:	f000 fc06 	bl	800aa5c <__lshift>
 800a250:	4606      	mov	r6, r0
 800a252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a254:	2b00      	cmp	r3, #0
 800a256:	d06e      	beq.n	800a336 <_dtoa_r+0x90e>
 800a258:	ee18 0a10 	vmov	r0, s16
 800a25c:	4631      	mov	r1, r6
 800a25e:	f000 fc6d 	bl	800ab3c <__mcmp>
 800a262:	2800      	cmp	r0, #0
 800a264:	da67      	bge.n	800a336 <_dtoa_r+0x90e>
 800a266:	9b00      	ldr	r3, [sp, #0]
 800a268:	3b01      	subs	r3, #1
 800a26a:	ee18 1a10 	vmov	r1, s16
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	220a      	movs	r2, #10
 800a272:	2300      	movs	r3, #0
 800a274:	4620      	mov	r0, r4
 800a276:	f000 fa41 	bl	800a6fc <__multadd>
 800a27a:	9b08      	ldr	r3, [sp, #32]
 800a27c:	ee08 0a10 	vmov	s16, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	f000 81b1 	beq.w	800a5e8 <_dtoa_r+0xbc0>
 800a286:	2300      	movs	r3, #0
 800a288:	4639      	mov	r1, r7
 800a28a:	220a      	movs	r2, #10
 800a28c:	4620      	mov	r0, r4
 800a28e:	f000 fa35 	bl	800a6fc <__multadd>
 800a292:	9b02      	ldr	r3, [sp, #8]
 800a294:	2b00      	cmp	r3, #0
 800a296:	4607      	mov	r7, r0
 800a298:	f300 808e 	bgt.w	800a3b8 <_dtoa_r+0x990>
 800a29c:	9b06      	ldr	r3, [sp, #24]
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	dc51      	bgt.n	800a346 <_dtoa_r+0x91e>
 800a2a2:	e089      	b.n	800a3b8 <_dtoa_r+0x990>
 800a2a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2aa:	e74b      	b.n	800a144 <_dtoa_r+0x71c>
 800a2ac:	9b03      	ldr	r3, [sp, #12]
 800a2ae:	1e5e      	subs	r6, r3, #1
 800a2b0:	9b07      	ldr	r3, [sp, #28]
 800a2b2:	42b3      	cmp	r3, r6
 800a2b4:	bfbf      	itttt	lt
 800a2b6:	9b07      	ldrlt	r3, [sp, #28]
 800a2b8:	9607      	strlt	r6, [sp, #28]
 800a2ba:	1af2      	sublt	r2, r6, r3
 800a2bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a2be:	bfb6      	itet	lt
 800a2c0:	189b      	addlt	r3, r3, r2
 800a2c2:	1b9e      	subge	r6, r3, r6
 800a2c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a2c6:	9b03      	ldr	r3, [sp, #12]
 800a2c8:	bfb8      	it	lt
 800a2ca:	2600      	movlt	r6, #0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	bfb7      	itett	lt
 800a2d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a2d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a2d8:	1a9d      	sublt	r5, r3, r2
 800a2da:	2300      	movlt	r3, #0
 800a2dc:	e734      	b.n	800a148 <_dtoa_r+0x720>
 800a2de:	9e07      	ldr	r6, [sp, #28]
 800a2e0:	9d04      	ldr	r5, [sp, #16]
 800a2e2:	9f08      	ldr	r7, [sp, #32]
 800a2e4:	e73b      	b.n	800a15e <_dtoa_r+0x736>
 800a2e6:	9a07      	ldr	r2, [sp, #28]
 800a2e8:	e767      	b.n	800a1ba <_dtoa_r+0x792>
 800a2ea:	9b06      	ldr	r3, [sp, #24]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	dc18      	bgt.n	800a322 <_dtoa_r+0x8fa>
 800a2f0:	f1ba 0f00 	cmp.w	sl, #0
 800a2f4:	d115      	bne.n	800a322 <_dtoa_r+0x8fa>
 800a2f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2fa:	b993      	cbnz	r3, 800a322 <_dtoa_r+0x8fa>
 800a2fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a300:	0d1b      	lsrs	r3, r3, #20
 800a302:	051b      	lsls	r3, r3, #20
 800a304:	b183      	cbz	r3, 800a328 <_dtoa_r+0x900>
 800a306:	9b04      	ldr	r3, [sp, #16]
 800a308:	3301      	adds	r3, #1
 800a30a:	9304      	str	r3, [sp, #16]
 800a30c:	9b05      	ldr	r3, [sp, #20]
 800a30e:	3301      	adds	r3, #1
 800a310:	9305      	str	r3, [sp, #20]
 800a312:	f04f 0801 	mov.w	r8, #1
 800a316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f47f af6a 	bne.w	800a1f2 <_dtoa_r+0x7ca>
 800a31e:	2001      	movs	r0, #1
 800a320:	e76f      	b.n	800a202 <_dtoa_r+0x7da>
 800a322:	f04f 0800 	mov.w	r8, #0
 800a326:	e7f6      	b.n	800a316 <_dtoa_r+0x8ee>
 800a328:	4698      	mov	r8, r3
 800a32a:	e7f4      	b.n	800a316 <_dtoa_r+0x8ee>
 800a32c:	f43f af7d 	beq.w	800a22a <_dtoa_r+0x802>
 800a330:	4618      	mov	r0, r3
 800a332:	301c      	adds	r0, #28
 800a334:	e772      	b.n	800a21c <_dtoa_r+0x7f4>
 800a336:	9b03      	ldr	r3, [sp, #12]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	dc37      	bgt.n	800a3ac <_dtoa_r+0x984>
 800a33c:	9b06      	ldr	r3, [sp, #24]
 800a33e:	2b02      	cmp	r3, #2
 800a340:	dd34      	ble.n	800a3ac <_dtoa_r+0x984>
 800a342:	9b03      	ldr	r3, [sp, #12]
 800a344:	9302      	str	r3, [sp, #8]
 800a346:	9b02      	ldr	r3, [sp, #8]
 800a348:	b96b      	cbnz	r3, 800a366 <_dtoa_r+0x93e>
 800a34a:	4631      	mov	r1, r6
 800a34c:	2205      	movs	r2, #5
 800a34e:	4620      	mov	r0, r4
 800a350:	f000 f9d4 	bl	800a6fc <__multadd>
 800a354:	4601      	mov	r1, r0
 800a356:	4606      	mov	r6, r0
 800a358:	ee18 0a10 	vmov	r0, s16
 800a35c:	f000 fbee 	bl	800ab3c <__mcmp>
 800a360:	2800      	cmp	r0, #0
 800a362:	f73f adbb 	bgt.w	8009edc <_dtoa_r+0x4b4>
 800a366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a368:	9d01      	ldr	r5, [sp, #4]
 800a36a:	43db      	mvns	r3, r3
 800a36c:	9300      	str	r3, [sp, #0]
 800a36e:	f04f 0800 	mov.w	r8, #0
 800a372:	4631      	mov	r1, r6
 800a374:	4620      	mov	r0, r4
 800a376:	f000 f99f 	bl	800a6b8 <_Bfree>
 800a37a:	2f00      	cmp	r7, #0
 800a37c:	f43f aea4 	beq.w	800a0c8 <_dtoa_r+0x6a0>
 800a380:	f1b8 0f00 	cmp.w	r8, #0
 800a384:	d005      	beq.n	800a392 <_dtoa_r+0x96a>
 800a386:	45b8      	cmp	r8, r7
 800a388:	d003      	beq.n	800a392 <_dtoa_r+0x96a>
 800a38a:	4641      	mov	r1, r8
 800a38c:	4620      	mov	r0, r4
 800a38e:	f000 f993 	bl	800a6b8 <_Bfree>
 800a392:	4639      	mov	r1, r7
 800a394:	4620      	mov	r0, r4
 800a396:	f000 f98f 	bl	800a6b8 <_Bfree>
 800a39a:	e695      	b.n	800a0c8 <_dtoa_r+0x6a0>
 800a39c:	2600      	movs	r6, #0
 800a39e:	4637      	mov	r7, r6
 800a3a0:	e7e1      	b.n	800a366 <_dtoa_r+0x93e>
 800a3a2:	9700      	str	r7, [sp, #0]
 800a3a4:	4637      	mov	r7, r6
 800a3a6:	e599      	b.n	8009edc <_dtoa_r+0x4b4>
 800a3a8:	40240000 	.word	0x40240000
 800a3ac:	9b08      	ldr	r3, [sp, #32]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f000 80ca 	beq.w	800a548 <_dtoa_r+0xb20>
 800a3b4:	9b03      	ldr	r3, [sp, #12]
 800a3b6:	9302      	str	r3, [sp, #8]
 800a3b8:	2d00      	cmp	r5, #0
 800a3ba:	dd05      	ble.n	800a3c8 <_dtoa_r+0x9a0>
 800a3bc:	4639      	mov	r1, r7
 800a3be:	462a      	mov	r2, r5
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f000 fb4b 	bl	800aa5c <__lshift>
 800a3c6:	4607      	mov	r7, r0
 800a3c8:	f1b8 0f00 	cmp.w	r8, #0
 800a3cc:	d05b      	beq.n	800a486 <_dtoa_r+0xa5e>
 800a3ce:	6879      	ldr	r1, [r7, #4]
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f000 f931 	bl	800a638 <_Balloc>
 800a3d6:	4605      	mov	r5, r0
 800a3d8:	b928      	cbnz	r0, 800a3e6 <_dtoa_r+0x9be>
 800a3da:	4b87      	ldr	r3, [pc, #540]	; (800a5f8 <_dtoa_r+0xbd0>)
 800a3dc:	4602      	mov	r2, r0
 800a3de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a3e2:	f7ff bb3b 	b.w	8009a5c <_dtoa_r+0x34>
 800a3e6:	693a      	ldr	r2, [r7, #16]
 800a3e8:	3202      	adds	r2, #2
 800a3ea:	0092      	lsls	r2, r2, #2
 800a3ec:	f107 010c 	add.w	r1, r7, #12
 800a3f0:	300c      	adds	r0, #12
 800a3f2:	f000 f913 	bl	800a61c <memcpy>
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	4629      	mov	r1, r5
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f000 fb2e 	bl	800aa5c <__lshift>
 800a400:	9b01      	ldr	r3, [sp, #4]
 800a402:	f103 0901 	add.w	r9, r3, #1
 800a406:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a40a:	4413      	add	r3, r2
 800a40c:	9305      	str	r3, [sp, #20]
 800a40e:	f00a 0301 	and.w	r3, sl, #1
 800a412:	46b8      	mov	r8, r7
 800a414:	9304      	str	r3, [sp, #16]
 800a416:	4607      	mov	r7, r0
 800a418:	4631      	mov	r1, r6
 800a41a:	ee18 0a10 	vmov	r0, s16
 800a41e:	f7ff fa75 	bl	800990c <quorem>
 800a422:	4641      	mov	r1, r8
 800a424:	9002      	str	r0, [sp, #8]
 800a426:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a42a:	ee18 0a10 	vmov	r0, s16
 800a42e:	f000 fb85 	bl	800ab3c <__mcmp>
 800a432:	463a      	mov	r2, r7
 800a434:	9003      	str	r0, [sp, #12]
 800a436:	4631      	mov	r1, r6
 800a438:	4620      	mov	r0, r4
 800a43a:	f000 fb9b 	bl	800ab74 <__mdiff>
 800a43e:	68c2      	ldr	r2, [r0, #12]
 800a440:	f109 3bff 	add.w	fp, r9, #4294967295
 800a444:	4605      	mov	r5, r0
 800a446:	bb02      	cbnz	r2, 800a48a <_dtoa_r+0xa62>
 800a448:	4601      	mov	r1, r0
 800a44a:	ee18 0a10 	vmov	r0, s16
 800a44e:	f000 fb75 	bl	800ab3c <__mcmp>
 800a452:	4602      	mov	r2, r0
 800a454:	4629      	mov	r1, r5
 800a456:	4620      	mov	r0, r4
 800a458:	9207      	str	r2, [sp, #28]
 800a45a:	f000 f92d 	bl	800a6b8 <_Bfree>
 800a45e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a462:	ea43 0102 	orr.w	r1, r3, r2
 800a466:	9b04      	ldr	r3, [sp, #16]
 800a468:	430b      	orrs	r3, r1
 800a46a:	464d      	mov	r5, r9
 800a46c:	d10f      	bne.n	800a48e <_dtoa_r+0xa66>
 800a46e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a472:	d02a      	beq.n	800a4ca <_dtoa_r+0xaa2>
 800a474:	9b03      	ldr	r3, [sp, #12]
 800a476:	2b00      	cmp	r3, #0
 800a478:	dd02      	ble.n	800a480 <_dtoa_r+0xa58>
 800a47a:	9b02      	ldr	r3, [sp, #8]
 800a47c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a480:	f88b a000 	strb.w	sl, [fp]
 800a484:	e775      	b.n	800a372 <_dtoa_r+0x94a>
 800a486:	4638      	mov	r0, r7
 800a488:	e7ba      	b.n	800a400 <_dtoa_r+0x9d8>
 800a48a:	2201      	movs	r2, #1
 800a48c:	e7e2      	b.n	800a454 <_dtoa_r+0xa2c>
 800a48e:	9b03      	ldr	r3, [sp, #12]
 800a490:	2b00      	cmp	r3, #0
 800a492:	db04      	blt.n	800a49e <_dtoa_r+0xa76>
 800a494:	9906      	ldr	r1, [sp, #24]
 800a496:	430b      	orrs	r3, r1
 800a498:	9904      	ldr	r1, [sp, #16]
 800a49a:	430b      	orrs	r3, r1
 800a49c:	d122      	bne.n	800a4e4 <_dtoa_r+0xabc>
 800a49e:	2a00      	cmp	r2, #0
 800a4a0:	ddee      	ble.n	800a480 <_dtoa_r+0xa58>
 800a4a2:	ee18 1a10 	vmov	r1, s16
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f000 fad7 	bl	800aa5c <__lshift>
 800a4ae:	4631      	mov	r1, r6
 800a4b0:	ee08 0a10 	vmov	s16, r0
 800a4b4:	f000 fb42 	bl	800ab3c <__mcmp>
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	dc03      	bgt.n	800a4c4 <_dtoa_r+0xa9c>
 800a4bc:	d1e0      	bne.n	800a480 <_dtoa_r+0xa58>
 800a4be:	f01a 0f01 	tst.w	sl, #1
 800a4c2:	d0dd      	beq.n	800a480 <_dtoa_r+0xa58>
 800a4c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4c8:	d1d7      	bne.n	800a47a <_dtoa_r+0xa52>
 800a4ca:	2339      	movs	r3, #57	; 0x39
 800a4cc:	f88b 3000 	strb.w	r3, [fp]
 800a4d0:	462b      	mov	r3, r5
 800a4d2:	461d      	mov	r5, r3
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4da:	2a39      	cmp	r2, #57	; 0x39
 800a4dc:	d071      	beq.n	800a5c2 <_dtoa_r+0xb9a>
 800a4de:	3201      	adds	r2, #1
 800a4e0:	701a      	strb	r2, [r3, #0]
 800a4e2:	e746      	b.n	800a372 <_dtoa_r+0x94a>
 800a4e4:	2a00      	cmp	r2, #0
 800a4e6:	dd07      	ble.n	800a4f8 <_dtoa_r+0xad0>
 800a4e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4ec:	d0ed      	beq.n	800a4ca <_dtoa_r+0xaa2>
 800a4ee:	f10a 0301 	add.w	r3, sl, #1
 800a4f2:	f88b 3000 	strb.w	r3, [fp]
 800a4f6:	e73c      	b.n	800a372 <_dtoa_r+0x94a>
 800a4f8:	9b05      	ldr	r3, [sp, #20]
 800a4fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a4fe:	4599      	cmp	r9, r3
 800a500:	d047      	beq.n	800a592 <_dtoa_r+0xb6a>
 800a502:	ee18 1a10 	vmov	r1, s16
 800a506:	2300      	movs	r3, #0
 800a508:	220a      	movs	r2, #10
 800a50a:	4620      	mov	r0, r4
 800a50c:	f000 f8f6 	bl	800a6fc <__multadd>
 800a510:	45b8      	cmp	r8, r7
 800a512:	ee08 0a10 	vmov	s16, r0
 800a516:	f04f 0300 	mov.w	r3, #0
 800a51a:	f04f 020a 	mov.w	r2, #10
 800a51e:	4641      	mov	r1, r8
 800a520:	4620      	mov	r0, r4
 800a522:	d106      	bne.n	800a532 <_dtoa_r+0xb0a>
 800a524:	f000 f8ea 	bl	800a6fc <__multadd>
 800a528:	4680      	mov	r8, r0
 800a52a:	4607      	mov	r7, r0
 800a52c:	f109 0901 	add.w	r9, r9, #1
 800a530:	e772      	b.n	800a418 <_dtoa_r+0x9f0>
 800a532:	f000 f8e3 	bl	800a6fc <__multadd>
 800a536:	4639      	mov	r1, r7
 800a538:	4680      	mov	r8, r0
 800a53a:	2300      	movs	r3, #0
 800a53c:	220a      	movs	r2, #10
 800a53e:	4620      	mov	r0, r4
 800a540:	f000 f8dc 	bl	800a6fc <__multadd>
 800a544:	4607      	mov	r7, r0
 800a546:	e7f1      	b.n	800a52c <_dtoa_r+0xb04>
 800a548:	9b03      	ldr	r3, [sp, #12]
 800a54a:	9302      	str	r3, [sp, #8]
 800a54c:	9d01      	ldr	r5, [sp, #4]
 800a54e:	ee18 0a10 	vmov	r0, s16
 800a552:	4631      	mov	r1, r6
 800a554:	f7ff f9da 	bl	800990c <quorem>
 800a558:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a55c:	9b01      	ldr	r3, [sp, #4]
 800a55e:	f805 ab01 	strb.w	sl, [r5], #1
 800a562:	1aea      	subs	r2, r5, r3
 800a564:	9b02      	ldr	r3, [sp, #8]
 800a566:	4293      	cmp	r3, r2
 800a568:	dd09      	ble.n	800a57e <_dtoa_r+0xb56>
 800a56a:	ee18 1a10 	vmov	r1, s16
 800a56e:	2300      	movs	r3, #0
 800a570:	220a      	movs	r2, #10
 800a572:	4620      	mov	r0, r4
 800a574:	f000 f8c2 	bl	800a6fc <__multadd>
 800a578:	ee08 0a10 	vmov	s16, r0
 800a57c:	e7e7      	b.n	800a54e <_dtoa_r+0xb26>
 800a57e:	9b02      	ldr	r3, [sp, #8]
 800a580:	2b00      	cmp	r3, #0
 800a582:	bfc8      	it	gt
 800a584:	461d      	movgt	r5, r3
 800a586:	9b01      	ldr	r3, [sp, #4]
 800a588:	bfd8      	it	le
 800a58a:	2501      	movle	r5, #1
 800a58c:	441d      	add	r5, r3
 800a58e:	f04f 0800 	mov.w	r8, #0
 800a592:	ee18 1a10 	vmov	r1, s16
 800a596:	2201      	movs	r2, #1
 800a598:	4620      	mov	r0, r4
 800a59a:	f000 fa5f 	bl	800aa5c <__lshift>
 800a59e:	4631      	mov	r1, r6
 800a5a0:	ee08 0a10 	vmov	s16, r0
 800a5a4:	f000 faca 	bl	800ab3c <__mcmp>
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	dc91      	bgt.n	800a4d0 <_dtoa_r+0xaa8>
 800a5ac:	d102      	bne.n	800a5b4 <_dtoa_r+0xb8c>
 800a5ae:	f01a 0f01 	tst.w	sl, #1
 800a5b2:	d18d      	bne.n	800a4d0 <_dtoa_r+0xaa8>
 800a5b4:	462b      	mov	r3, r5
 800a5b6:	461d      	mov	r5, r3
 800a5b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5bc:	2a30      	cmp	r2, #48	; 0x30
 800a5be:	d0fa      	beq.n	800a5b6 <_dtoa_r+0xb8e>
 800a5c0:	e6d7      	b.n	800a372 <_dtoa_r+0x94a>
 800a5c2:	9a01      	ldr	r2, [sp, #4]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d184      	bne.n	800a4d2 <_dtoa_r+0xaaa>
 800a5c8:	9b00      	ldr	r3, [sp, #0]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	2331      	movs	r3, #49	; 0x31
 800a5d0:	7013      	strb	r3, [r2, #0]
 800a5d2:	e6ce      	b.n	800a372 <_dtoa_r+0x94a>
 800a5d4:	4b09      	ldr	r3, [pc, #36]	; (800a5fc <_dtoa_r+0xbd4>)
 800a5d6:	f7ff ba95 	b.w	8009b04 <_dtoa_r+0xdc>
 800a5da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f47f aa6e 	bne.w	8009abe <_dtoa_r+0x96>
 800a5e2:	4b07      	ldr	r3, [pc, #28]	; (800a600 <_dtoa_r+0xbd8>)
 800a5e4:	f7ff ba8e 	b.w	8009b04 <_dtoa_r+0xdc>
 800a5e8:	9b02      	ldr	r3, [sp, #8]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	dcae      	bgt.n	800a54c <_dtoa_r+0xb24>
 800a5ee:	9b06      	ldr	r3, [sp, #24]
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	f73f aea8 	bgt.w	800a346 <_dtoa_r+0x91e>
 800a5f6:	e7a9      	b.n	800a54c <_dtoa_r+0xb24>
 800a5f8:	0800bf33 	.word	0x0800bf33
 800a5fc:	0800be90 	.word	0x0800be90
 800a600:	0800beb4 	.word	0x0800beb4

0800a604 <_localeconv_r>:
 800a604:	4800      	ldr	r0, [pc, #0]	; (800a608 <_localeconv_r+0x4>)
 800a606:	4770      	bx	lr
 800a608:	20000160 	.word	0x20000160

0800a60c <malloc>:
 800a60c:	4b02      	ldr	r3, [pc, #8]	; (800a618 <malloc+0xc>)
 800a60e:	4601      	mov	r1, r0
 800a610:	6818      	ldr	r0, [r3, #0]
 800a612:	f000 bc17 	b.w	800ae44 <_malloc_r>
 800a616:	bf00      	nop
 800a618:	2000000c 	.word	0x2000000c

0800a61c <memcpy>:
 800a61c:	440a      	add	r2, r1
 800a61e:	4291      	cmp	r1, r2
 800a620:	f100 33ff 	add.w	r3, r0, #4294967295
 800a624:	d100      	bne.n	800a628 <memcpy+0xc>
 800a626:	4770      	bx	lr
 800a628:	b510      	push	{r4, lr}
 800a62a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a62e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a632:	4291      	cmp	r1, r2
 800a634:	d1f9      	bne.n	800a62a <memcpy+0xe>
 800a636:	bd10      	pop	{r4, pc}

0800a638 <_Balloc>:
 800a638:	b570      	push	{r4, r5, r6, lr}
 800a63a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a63c:	4604      	mov	r4, r0
 800a63e:	460d      	mov	r5, r1
 800a640:	b976      	cbnz	r6, 800a660 <_Balloc+0x28>
 800a642:	2010      	movs	r0, #16
 800a644:	f7ff ffe2 	bl	800a60c <malloc>
 800a648:	4602      	mov	r2, r0
 800a64a:	6260      	str	r0, [r4, #36]	; 0x24
 800a64c:	b920      	cbnz	r0, 800a658 <_Balloc+0x20>
 800a64e:	4b18      	ldr	r3, [pc, #96]	; (800a6b0 <_Balloc+0x78>)
 800a650:	4818      	ldr	r0, [pc, #96]	; (800a6b4 <_Balloc+0x7c>)
 800a652:	2166      	movs	r1, #102	; 0x66
 800a654:	f000 fdd6 	bl	800b204 <__assert_func>
 800a658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a65c:	6006      	str	r6, [r0, #0]
 800a65e:	60c6      	str	r6, [r0, #12]
 800a660:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a662:	68f3      	ldr	r3, [r6, #12]
 800a664:	b183      	cbz	r3, 800a688 <_Balloc+0x50>
 800a666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a66e:	b9b8      	cbnz	r0, 800a6a0 <_Balloc+0x68>
 800a670:	2101      	movs	r1, #1
 800a672:	fa01 f605 	lsl.w	r6, r1, r5
 800a676:	1d72      	adds	r2, r6, #5
 800a678:	0092      	lsls	r2, r2, #2
 800a67a:	4620      	mov	r0, r4
 800a67c:	f000 fb60 	bl	800ad40 <_calloc_r>
 800a680:	b160      	cbz	r0, 800a69c <_Balloc+0x64>
 800a682:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a686:	e00e      	b.n	800a6a6 <_Balloc+0x6e>
 800a688:	2221      	movs	r2, #33	; 0x21
 800a68a:	2104      	movs	r1, #4
 800a68c:	4620      	mov	r0, r4
 800a68e:	f000 fb57 	bl	800ad40 <_calloc_r>
 800a692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a694:	60f0      	str	r0, [r6, #12]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1e4      	bne.n	800a666 <_Balloc+0x2e>
 800a69c:	2000      	movs	r0, #0
 800a69e:	bd70      	pop	{r4, r5, r6, pc}
 800a6a0:	6802      	ldr	r2, [r0, #0]
 800a6a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a6ac:	e7f7      	b.n	800a69e <_Balloc+0x66>
 800a6ae:	bf00      	nop
 800a6b0:	0800bec1 	.word	0x0800bec1
 800a6b4:	0800bf44 	.word	0x0800bf44

0800a6b8 <_Bfree>:
 800a6b8:	b570      	push	{r4, r5, r6, lr}
 800a6ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a6bc:	4605      	mov	r5, r0
 800a6be:	460c      	mov	r4, r1
 800a6c0:	b976      	cbnz	r6, 800a6e0 <_Bfree+0x28>
 800a6c2:	2010      	movs	r0, #16
 800a6c4:	f7ff ffa2 	bl	800a60c <malloc>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	6268      	str	r0, [r5, #36]	; 0x24
 800a6cc:	b920      	cbnz	r0, 800a6d8 <_Bfree+0x20>
 800a6ce:	4b09      	ldr	r3, [pc, #36]	; (800a6f4 <_Bfree+0x3c>)
 800a6d0:	4809      	ldr	r0, [pc, #36]	; (800a6f8 <_Bfree+0x40>)
 800a6d2:	218a      	movs	r1, #138	; 0x8a
 800a6d4:	f000 fd96 	bl	800b204 <__assert_func>
 800a6d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6dc:	6006      	str	r6, [r0, #0]
 800a6de:	60c6      	str	r6, [r0, #12]
 800a6e0:	b13c      	cbz	r4, 800a6f2 <_Bfree+0x3a>
 800a6e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a6e4:	6862      	ldr	r2, [r4, #4]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6ec:	6021      	str	r1, [r4, #0]
 800a6ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6f2:	bd70      	pop	{r4, r5, r6, pc}
 800a6f4:	0800bec1 	.word	0x0800bec1
 800a6f8:	0800bf44 	.word	0x0800bf44

0800a6fc <__multadd>:
 800a6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a700:	690d      	ldr	r5, [r1, #16]
 800a702:	4607      	mov	r7, r0
 800a704:	460c      	mov	r4, r1
 800a706:	461e      	mov	r6, r3
 800a708:	f101 0c14 	add.w	ip, r1, #20
 800a70c:	2000      	movs	r0, #0
 800a70e:	f8dc 3000 	ldr.w	r3, [ip]
 800a712:	b299      	uxth	r1, r3
 800a714:	fb02 6101 	mla	r1, r2, r1, r6
 800a718:	0c1e      	lsrs	r6, r3, #16
 800a71a:	0c0b      	lsrs	r3, r1, #16
 800a71c:	fb02 3306 	mla	r3, r2, r6, r3
 800a720:	b289      	uxth	r1, r1
 800a722:	3001      	adds	r0, #1
 800a724:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a728:	4285      	cmp	r5, r0
 800a72a:	f84c 1b04 	str.w	r1, [ip], #4
 800a72e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a732:	dcec      	bgt.n	800a70e <__multadd+0x12>
 800a734:	b30e      	cbz	r6, 800a77a <__multadd+0x7e>
 800a736:	68a3      	ldr	r3, [r4, #8]
 800a738:	42ab      	cmp	r3, r5
 800a73a:	dc19      	bgt.n	800a770 <__multadd+0x74>
 800a73c:	6861      	ldr	r1, [r4, #4]
 800a73e:	4638      	mov	r0, r7
 800a740:	3101      	adds	r1, #1
 800a742:	f7ff ff79 	bl	800a638 <_Balloc>
 800a746:	4680      	mov	r8, r0
 800a748:	b928      	cbnz	r0, 800a756 <__multadd+0x5a>
 800a74a:	4602      	mov	r2, r0
 800a74c:	4b0c      	ldr	r3, [pc, #48]	; (800a780 <__multadd+0x84>)
 800a74e:	480d      	ldr	r0, [pc, #52]	; (800a784 <__multadd+0x88>)
 800a750:	21b5      	movs	r1, #181	; 0xb5
 800a752:	f000 fd57 	bl	800b204 <__assert_func>
 800a756:	6922      	ldr	r2, [r4, #16]
 800a758:	3202      	adds	r2, #2
 800a75a:	f104 010c 	add.w	r1, r4, #12
 800a75e:	0092      	lsls	r2, r2, #2
 800a760:	300c      	adds	r0, #12
 800a762:	f7ff ff5b 	bl	800a61c <memcpy>
 800a766:	4621      	mov	r1, r4
 800a768:	4638      	mov	r0, r7
 800a76a:	f7ff ffa5 	bl	800a6b8 <_Bfree>
 800a76e:	4644      	mov	r4, r8
 800a770:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a774:	3501      	adds	r5, #1
 800a776:	615e      	str	r6, [r3, #20]
 800a778:	6125      	str	r5, [r4, #16]
 800a77a:	4620      	mov	r0, r4
 800a77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a780:	0800bf33 	.word	0x0800bf33
 800a784:	0800bf44 	.word	0x0800bf44

0800a788 <__hi0bits>:
 800a788:	0c03      	lsrs	r3, r0, #16
 800a78a:	041b      	lsls	r3, r3, #16
 800a78c:	b9d3      	cbnz	r3, 800a7c4 <__hi0bits+0x3c>
 800a78e:	0400      	lsls	r0, r0, #16
 800a790:	2310      	movs	r3, #16
 800a792:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a796:	bf04      	itt	eq
 800a798:	0200      	lsleq	r0, r0, #8
 800a79a:	3308      	addeq	r3, #8
 800a79c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a7a0:	bf04      	itt	eq
 800a7a2:	0100      	lsleq	r0, r0, #4
 800a7a4:	3304      	addeq	r3, #4
 800a7a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a7aa:	bf04      	itt	eq
 800a7ac:	0080      	lsleq	r0, r0, #2
 800a7ae:	3302      	addeq	r3, #2
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	db05      	blt.n	800a7c0 <__hi0bits+0x38>
 800a7b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a7b8:	f103 0301 	add.w	r3, r3, #1
 800a7bc:	bf08      	it	eq
 800a7be:	2320      	moveq	r3, #32
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	4770      	bx	lr
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	e7e4      	b.n	800a792 <__hi0bits+0xa>

0800a7c8 <__lo0bits>:
 800a7c8:	6803      	ldr	r3, [r0, #0]
 800a7ca:	f013 0207 	ands.w	r2, r3, #7
 800a7ce:	4601      	mov	r1, r0
 800a7d0:	d00b      	beq.n	800a7ea <__lo0bits+0x22>
 800a7d2:	07da      	lsls	r2, r3, #31
 800a7d4:	d423      	bmi.n	800a81e <__lo0bits+0x56>
 800a7d6:	0798      	lsls	r0, r3, #30
 800a7d8:	bf49      	itett	mi
 800a7da:	085b      	lsrmi	r3, r3, #1
 800a7dc:	089b      	lsrpl	r3, r3, #2
 800a7de:	2001      	movmi	r0, #1
 800a7e0:	600b      	strmi	r3, [r1, #0]
 800a7e2:	bf5c      	itt	pl
 800a7e4:	600b      	strpl	r3, [r1, #0]
 800a7e6:	2002      	movpl	r0, #2
 800a7e8:	4770      	bx	lr
 800a7ea:	b298      	uxth	r0, r3
 800a7ec:	b9a8      	cbnz	r0, 800a81a <__lo0bits+0x52>
 800a7ee:	0c1b      	lsrs	r3, r3, #16
 800a7f0:	2010      	movs	r0, #16
 800a7f2:	b2da      	uxtb	r2, r3
 800a7f4:	b90a      	cbnz	r2, 800a7fa <__lo0bits+0x32>
 800a7f6:	3008      	adds	r0, #8
 800a7f8:	0a1b      	lsrs	r3, r3, #8
 800a7fa:	071a      	lsls	r2, r3, #28
 800a7fc:	bf04      	itt	eq
 800a7fe:	091b      	lsreq	r3, r3, #4
 800a800:	3004      	addeq	r0, #4
 800a802:	079a      	lsls	r2, r3, #30
 800a804:	bf04      	itt	eq
 800a806:	089b      	lsreq	r3, r3, #2
 800a808:	3002      	addeq	r0, #2
 800a80a:	07da      	lsls	r2, r3, #31
 800a80c:	d403      	bmi.n	800a816 <__lo0bits+0x4e>
 800a80e:	085b      	lsrs	r3, r3, #1
 800a810:	f100 0001 	add.w	r0, r0, #1
 800a814:	d005      	beq.n	800a822 <__lo0bits+0x5a>
 800a816:	600b      	str	r3, [r1, #0]
 800a818:	4770      	bx	lr
 800a81a:	4610      	mov	r0, r2
 800a81c:	e7e9      	b.n	800a7f2 <__lo0bits+0x2a>
 800a81e:	2000      	movs	r0, #0
 800a820:	4770      	bx	lr
 800a822:	2020      	movs	r0, #32
 800a824:	4770      	bx	lr
	...

0800a828 <__i2b>:
 800a828:	b510      	push	{r4, lr}
 800a82a:	460c      	mov	r4, r1
 800a82c:	2101      	movs	r1, #1
 800a82e:	f7ff ff03 	bl	800a638 <_Balloc>
 800a832:	4602      	mov	r2, r0
 800a834:	b928      	cbnz	r0, 800a842 <__i2b+0x1a>
 800a836:	4b05      	ldr	r3, [pc, #20]	; (800a84c <__i2b+0x24>)
 800a838:	4805      	ldr	r0, [pc, #20]	; (800a850 <__i2b+0x28>)
 800a83a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a83e:	f000 fce1 	bl	800b204 <__assert_func>
 800a842:	2301      	movs	r3, #1
 800a844:	6144      	str	r4, [r0, #20]
 800a846:	6103      	str	r3, [r0, #16]
 800a848:	bd10      	pop	{r4, pc}
 800a84a:	bf00      	nop
 800a84c:	0800bf33 	.word	0x0800bf33
 800a850:	0800bf44 	.word	0x0800bf44

0800a854 <__multiply>:
 800a854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a858:	4691      	mov	r9, r2
 800a85a:	690a      	ldr	r2, [r1, #16]
 800a85c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a860:	429a      	cmp	r2, r3
 800a862:	bfb8      	it	lt
 800a864:	460b      	movlt	r3, r1
 800a866:	460c      	mov	r4, r1
 800a868:	bfbc      	itt	lt
 800a86a:	464c      	movlt	r4, r9
 800a86c:	4699      	movlt	r9, r3
 800a86e:	6927      	ldr	r7, [r4, #16]
 800a870:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a874:	68a3      	ldr	r3, [r4, #8]
 800a876:	6861      	ldr	r1, [r4, #4]
 800a878:	eb07 060a 	add.w	r6, r7, sl
 800a87c:	42b3      	cmp	r3, r6
 800a87e:	b085      	sub	sp, #20
 800a880:	bfb8      	it	lt
 800a882:	3101      	addlt	r1, #1
 800a884:	f7ff fed8 	bl	800a638 <_Balloc>
 800a888:	b930      	cbnz	r0, 800a898 <__multiply+0x44>
 800a88a:	4602      	mov	r2, r0
 800a88c:	4b44      	ldr	r3, [pc, #272]	; (800a9a0 <__multiply+0x14c>)
 800a88e:	4845      	ldr	r0, [pc, #276]	; (800a9a4 <__multiply+0x150>)
 800a890:	f240 115d 	movw	r1, #349	; 0x15d
 800a894:	f000 fcb6 	bl	800b204 <__assert_func>
 800a898:	f100 0514 	add.w	r5, r0, #20
 800a89c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a8a0:	462b      	mov	r3, r5
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	4543      	cmp	r3, r8
 800a8a6:	d321      	bcc.n	800a8ec <__multiply+0x98>
 800a8a8:	f104 0314 	add.w	r3, r4, #20
 800a8ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a8b0:	f109 0314 	add.w	r3, r9, #20
 800a8b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a8b8:	9202      	str	r2, [sp, #8]
 800a8ba:	1b3a      	subs	r2, r7, r4
 800a8bc:	3a15      	subs	r2, #21
 800a8be:	f022 0203 	bic.w	r2, r2, #3
 800a8c2:	3204      	adds	r2, #4
 800a8c4:	f104 0115 	add.w	r1, r4, #21
 800a8c8:	428f      	cmp	r7, r1
 800a8ca:	bf38      	it	cc
 800a8cc:	2204      	movcc	r2, #4
 800a8ce:	9201      	str	r2, [sp, #4]
 800a8d0:	9a02      	ldr	r2, [sp, #8]
 800a8d2:	9303      	str	r3, [sp, #12]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d80c      	bhi.n	800a8f2 <__multiply+0x9e>
 800a8d8:	2e00      	cmp	r6, #0
 800a8da:	dd03      	ble.n	800a8e4 <__multiply+0x90>
 800a8dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d05a      	beq.n	800a99a <__multiply+0x146>
 800a8e4:	6106      	str	r6, [r0, #16]
 800a8e6:	b005      	add	sp, #20
 800a8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ec:	f843 2b04 	str.w	r2, [r3], #4
 800a8f0:	e7d8      	b.n	800a8a4 <__multiply+0x50>
 800a8f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a8f6:	f1ba 0f00 	cmp.w	sl, #0
 800a8fa:	d024      	beq.n	800a946 <__multiply+0xf2>
 800a8fc:	f104 0e14 	add.w	lr, r4, #20
 800a900:	46a9      	mov	r9, r5
 800a902:	f04f 0c00 	mov.w	ip, #0
 800a906:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a90a:	f8d9 1000 	ldr.w	r1, [r9]
 800a90e:	fa1f fb82 	uxth.w	fp, r2
 800a912:	b289      	uxth	r1, r1
 800a914:	fb0a 110b 	mla	r1, sl, fp, r1
 800a918:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a91c:	f8d9 2000 	ldr.w	r2, [r9]
 800a920:	4461      	add	r1, ip
 800a922:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a926:	fb0a c20b 	mla	r2, sl, fp, ip
 800a92a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a92e:	b289      	uxth	r1, r1
 800a930:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a934:	4577      	cmp	r7, lr
 800a936:	f849 1b04 	str.w	r1, [r9], #4
 800a93a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a93e:	d8e2      	bhi.n	800a906 <__multiply+0xb2>
 800a940:	9a01      	ldr	r2, [sp, #4]
 800a942:	f845 c002 	str.w	ip, [r5, r2]
 800a946:	9a03      	ldr	r2, [sp, #12]
 800a948:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a94c:	3304      	adds	r3, #4
 800a94e:	f1b9 0f00 	cmp.w	r9, #0
 800a952:	d020      	beq.n	800a996 <__multiply+0x142>
 800a954:	6829      	ldr	r1, [r5, #0]
 800a956:	f104 0c14 	add.w	ip, r4, #20
 800a95a:	46ae      	mov	lr, r5
 800a95c:	f04f 0a00 	mov.w	sl, #0
 800a960:	f8bc b000 	ldrh.w	fp, [ip]
 800a964:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a968:	fb09 220b 	mla	r2, r9, fp, r2
 800a96c:	4492      	add	sl, r2
 800a96e:	b289      	uxth	r1, r1
 800a970:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a974:	f84e 1b04 	str.w	r1, [lr], #4
 800a978:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a97c:	f8be 1000 	ldrh.w	r1, [lr]
 800a980:	0c12      	lsrs	r2, r2, #16
 800a982:	fb09 1102 	mla	r1, r9, r2, r1
 800a986:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a98a:	4567      	cmp	r7, ip
 800a98c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a990:	d8e6      	bhi.n	800a960 <__multiply+0x10c>
 800a992:	9a01      	ldr	r2, [sp, #4]
 800a994:	50a9      	str	r1, [r5, r2]
 800a996:	3504      	adds	r5, #4
 800a998:	e79a      	b.n	800a8d0 <__multiply+0x7c>
 800a99a:	3e01      	subs	r6, #1
 800a99c:	e79c      	b.n	800a8d8 <__multiply+0x84>
 800a99e:	bf00      	nop
 800a9a0:	0800bf33 	.word	0x0800bf33
 800a9a4:	0800bf44 	.word	0x0800bf44

0800a9a8 <__pow5mult>:
 800a9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9ac:	4615      	mov	r5, r2
 800a9ae:	f012 0203 	ands.w	r2, r2, #3
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	460f      	mov	r7, r1
 800a9b6:	d007      	beq.n	800a9c8 <__pow5mult+0x20>
 800a9b8:	4c25      	ldr	r4, [pc, #148]	; (800aa50 <__pow5mult+0xa8>)
 800a9ba:	3a01      	subs	r2, #1
 800a9bc:	2300      	movs	r3, #0
 800a9be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9c2:	f7ff fe9b 	bl	800a6fc <__multadd>
 800a9c6:	4607      	mov	r7, r0
 800a9c8:	10ad      	asrs	r5, r5, #2
 800a9ca:	d03d      	beq.n	800aa48 <__pow5mult+0xa0>
 800a9cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a9ce:	b97c      	cbnz	r4, 800a9f0 <__pow5mult+0x48>
 800a9d0:	2010      	movs	r0, #16
 800a9d2:	f7ff fe1b 	bl	800a60c <malloc>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	6270      	str	r0, [r6, #36]	; 0x24
 800a9da:	b928      	cbnz	r0, 800a9e8 <__pow5mult+0x40>
 800a9dc:	4b1d      	ldr	r3, [pc, #116]	; (800aa54 <__pow5mult+0xac>)
 800a9de:	481e      	ldr	r0, [pc, #120]	; (800aa58 <__pow5mult+0xb0>)
 800a9e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a9e4:	f000 fc0e 	bl	800b204 <__assert_func>
 800a9e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9ec:	6004      	str	r4, [r0, #0]
 800a9ee:	60c4      	str	r4, [r0, #12]
 800a9f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a9f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9f8:	b94c      	cbnz	r4, 800aa0e <__pow5mult+0x66>
 800a9fa:	f240 2171 	movw	r1, #625	; 0x271
 800a9fe:	4630      	mov	r0, r6
 800aa00:	f7ff ff12 	bl	800a828 <__i2b>
 800aa04:	2300      	movs	r3, #0
 800aa06:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	6003      	str	r3, [r0, #0]
 800aa0e:	f04f 0900 	mov.w	r9, #0
 800aa12:	07eb      	lsls	r3, r5, #31
 800aa14:	d50a      	bpl.n	800aa2c <__pow5mult+0x84>
 800aa16:	4639      	mov	r1, r7
 800aa18:	4622      	mov	r2, r4
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	f7ff ff1a 	bl	800a854 <__multiply>
 800aa20:	4639      	mov	r1, r7
 800aa22:	4680      	mov	r8, r0
 800aa24:	4630      	mov	r0, r6
 800aa26:	f7ff fe47 	bl	800a6b8 <_Bfree>
 800aa2a:	4647      	mov	r7, r8
 800aa2c:	106d      	asrs	r5, r5, #1
 800aa2e:	d00b      	beq.n	800aa48 <__pow5mult+0xa0>
 800aa30:	6820      	ldr	r0, [r4, #0]
 800aa32:	b938      	cbnz	r0, 800aa44 <__pow5mult+0x9c>
 800aa34:	4622      	mov	r2, r4
 800aa36:	4621      	mov	r1, r4
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f7ff ff0b 	bl	800a854 <__multiply>
 800aa3e:	6020      	str	r0, [r4, #0]
 800aa40:	f8c0 9000 	str.w	r9, [r0]
 800aa44:	4604      	mov	r4, r0
 800aa46:	e7e4      	b.n	800aa12 <__pow5mult+0x6a>
 800aa48:	4638      	mov	r0, r7
 800aa4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa4e:	bf00      	nop
 800aa50:	0800c090 	.word	0x0800c090
 800aa54:	0800bec1 	.word	0x0800bec1
 800aa58:	0800bf44 	.word	0x0800bf44

0800aa5c <__lshift>:
 800aa5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa60:	460c      	mov	r4, r1
 800aa62:	6849      	ldr	r1, [r1, #4]
 800aa64:	6923      	ldr	r3, [r4, #16]
 800aa66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa6a:	68a3      	ldr	r3, [r4, #8]
 800aa6c:	4607      	mov	r7, r0
 800aa6e:	4691      	mov	r9, r2
 800aa70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa74:	f108 0601 	add.w	r6, r8, #1
 800aa78:	42b3      	cmp	r3, r6
 800aa7a:	db0b      	blt.n	800aa94 <__lshift+0x38>
 800aa7c:	4638      	mov	r0, r7
 800aa7e:	f7ff fddb 	bl	800a638 <_Balloc>
 800aa82:	4605      	mov	r5, r0
 800aa84:	b948      	cbnz	r0, 800aa9a <__lshift+0x3e>
 800aa86:	4602      	mov	r2, r0
 800aa88:	4b2a      	ldr	r3, [pc, #168]	; (800ab34 <__lshift+0xd8>)
 800aa8a:	482b      	ldr	r0, [pc, #172]	; (800ab38 <__lshift+0xdc>)
 800aa8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa90:	f000 fbb8 	bl	800b204 <__assert_func>
 800aa94:	3101      	adds	r1, #1
 800aa96:	005b      	lsls	r3, r3, #1
 800aa98:	e7ee      	b.n	800aa78 <__lshift+0x1c>
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	f100 0114 	add.w	r1, r0, #20
 800aaa0:	f100 0210 	add.w	r2, r0, #16
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	4553      	cmp	r3, sl
 800aaa8:	db37      	blt.n	800ab1a <__lshift+0xbe>
 800aaaa:	6920      	ldr	r0, [r4, #16]
 800aaac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aab0:	f104 0314 	add.w	r3, r4, #20
 800aab4:	f019 091f 	ands.w	r9, r9, #31
 800aab8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aabc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aac0:	d02f      	beq.n	800ab22 <__lshift+0xc6>
 800aac2:	f1c9 0e20 	rsb	lr, r9, #32
 800aac6:	468a      	mov	sl, r1
 800aac8:	f04f 0c00 	mov.w	ip, #0
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	fa02 f209 	lsl.w	r2, r2, r9
 800aad2:	ea42 020c 	orr.w	r2, r2, ip
 800aad6:	f84a 2b04 	str.w	r2, [sl], #4
 800aada:	f853 2b04 	ldr.w	r2, [r3], #4
 800aade:	4298      	cmp	r0, r3
 800aae0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aae4:	d8f2      	bhi.n	800aacc <__lshift+0x70>
 800aae6:	1b03      	subs	r3, r0, r4
 800aae8:	3b15      	subs	r3, #21
 800aaea:	f023 0303 	bic.w	r3, r3, #3
 800aaee:	3304      	adds	r3, #4
 800aaf0:	f104 0215 	add.w	r2, r4, #21
 800aaf4:	4290      	cmp	r0, r2
 800aaf6:	bf38      	it	cc
 800aaf8:	2304      	movcc	r3, #4
 800aafa:	f841 c003 	str.w	ip, [r1, r3]
 800aafe:	f1bc 0f00 	cmp.w	ip, #0
 800ab02:	d001      	beq.n	800ab08 <__lshift+0xac>
 800ab04:	f108 0602 	add.w	r6, r8, #2
 800ab08:	3e01      	subs	r6, #1
 800ab0a:	4638      	mov	r0, r7
 800ab0c:	612e      	str	r6, [r5, #16]
 800ab0e:	4621      	mov	r1, r4
 800ab10:	f7ff fdd2 	bl	800a6b8 <_Bfree>
 800ab14:	4628      	mov	r0, r5
 800ab16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab1e:	3301      	adds	r3, #1
 800ab20:	e7c1      	b.n	800aaa6 <__lshift+0x4a>
 800ab22:	3904      	subs	r1, #4
 800ab24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab28:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab2c:	4298      	cmp	r0, r3
 800ab2e:	d8f9      	bhi.n	800ab24 <__lshift+0xc8>
 800ab30:	e7ea      	b.n	800ab08 <__lshift+0xac>
 800ab32:	bf00      	nop
 800ab34:	0800bf33 	.word	0x0800bf33
 800ab38:	0800bf44 	.word	0x0800bf44

0800ab3c <__mcmp>:
 800ab3c:	b530      	push	{r4, r5, lr}
 800ab3e:	6902      	ldr	r2, [r0, #16]
 800ab40:	690c      	ldr	r4, [r1, #16]
 800ab42:	1b12      	subs	r2, r2, r4
 800ab44:	d10e      	bne.n	800ab64 <__mcmp+0x28>
 800ab46:	f100 0314 	add.w	r3, r0, #20
 800ab4a:	3114      	adds	r1, #20
 800ab4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ab58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ab5c:	42a5      	cmp	r5, r4
 800ab5e:	d003      	beq.n	800ab68 <__mcmp+0x2c>
 800ab60:	d305      	bcc.n	800ab6e <__mcmp+0x32>
 800ab62:	2201      	movs	r2, #1
 800ab64:	4610      	mov	r0, r2
 800ab66:	bd30      	pop	{r4, r5, pc}
 800ab68:	4283      	cmp	r3, r0
 800ab6a:	d3f3      	bcc.n	800ab54 <__mcmp+0x18>
 800ab6c:	e7fa      	b.n	800ab64 <__mcmp+0x28>
 800ab6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab72:	e7f7      	b.n	800ab64 <__mcmp+0x28>

0800ab74 <__mdiff>:
 800ab74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab78:	460c      	mov	r4, r1
 800ab7a:	4606      	mov	r6, r0
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	4620      	mov	r0, r4
 800ab80:	4690      	mov	r8, r2
 800ab82:	f7ff ffdb 	bl	800ab3c <__mcmp>
 800ab86:	1e05      	subs	r5, r0, #0
 800ab88:	d110      	bne.n	800abac <__mdiff+0x38>
 800ab8a:	4629      	mov	r1, r5
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	f7ff fd53 	bl	800a638 <_Balloc>
 800ab92:	b930      	cbnz	r0, 800aba2 <__mdiff+0x2e>
 800ab94:	4b3a      	ldr	r3, [pc, #232]	; (800ac80 <__mdiff+0x10c>)
 800ab96:	4602      	mov	r2, r0
 800ab98:	f240 2132 	movw	r1, #562	; 0x232
 800ab9c:	4839      	ldr	r0, [pc, #228]	; (800ac84 <__mdiff+0x110>)
 800ab9e:	f000 fb31 	bl	800b204 <__assert_func>
 800aba2:	2301      	movs	r3, #1
 800aba4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abac:	bfa4      	itt	ge
 800abae:	4643      	movge	r3, r8
 800abb0:	46a0      	movge	r8, r4
 800abb2:	4630      	mov	r0, r6
 800abb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800abb8:	bfa6      	itte	ge
 800abba:	461c      	movge	r4, r3
 800abbc:	2500      	movge	r5, #0
 800abbe:	2501      	movlt	r5, #1
 800abc0:	f7ff fd3a 	bl	800a638 <_Balloc>
 800abc4:	b920      	cbnz	r0, 800abd0 <__mdiff+0x5c>
 800abc6:	4b2e      	ldr	r3, [pc, #184]	; (800ac80 <__mdiff+0x10c>)
 800abc8:	4602      	mov	r2, r0
 800abca:	f44f 7110 	mov.w	r1, #576	; 0x240
 800abce:	e7e5      	b.n	800ab9c <__mdiff+0x28>
 800abd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800abd4:	6926      	ldr	r6, [r4, #16]
 800abd6:	60c5      	str	r5, [r0, #12]
 800abd8:	f104 0914 	add.w	r9, r4, #20
 800abdc:	f108 0514 	add.w	r5, r8, #20
 800abe0:	f100 0e14 	add.w	lr, r0, #20
 800abe4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800abe8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800abec:	f108 0210 	add.w	r2, r8, #16
 800abf0:	46f2      	mov	sl, lr
 800abf2:	2100      	movs	r1, #0
 800abf4:	f859 3b04 	ldr.w	r3, [r9], #4
 800abf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800abfc:	fa1f f883 	uxth.w	r8, r3
 800ac00:	fa11 f18b 	uxtah	r1, r1, fp
 800ac04:	0c1b      	lsrs	r3, r3, #16
 800ac06:	eba1 0808 	sub.w	r8, r1, r8
 800ac0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ac0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ac12:	fa1f f888 	uxth.w	r8, r8
 800ac16:	1419      	asrs	r1, r3, #16
 800ac18:	454e      	cmp	r6, r9
 800ac1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ac1e:	f84a 3b04 	str.w	r3, [sl], #4
 800ac22:	d8e7      	bhi.n	800abf4 <__mdiff+0x80>
 800ac24:	1b33      	subs	r3, r6, r4
 800ac26:	3b15      	subs	r3, #21
 800ac28:	f023 0303 	bic.w	r3, r3, #3
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	3415      	adds	r4, #21
 800ac30:	42a6      	cmp	r6, r4
 800ac32:	bf38      	it	cc
 800ac34:	2304      	movcc	r3, #4
 800ac36:	441d      	add	r5, r3
 800ac38:	4473      	add	r3, lr
 800ac3a:	469e      	mov	lr, r3
 800ac3c:	462e      	mov	r6, r5
 800ac3e:	4566      	cmp	r6, ip
 800ac40:	d30e      	bcc.n	800ac60 <__mdiff+0xec>
 800ac42:	f10c 0203 	add.w	r2, ip, #3
 800ac46:	1b52      	subs	r2, r2, r5
 800ac48:	f022 0203 	bic.w	r2, r2, #3
 800ac4c:	3d03      	subs	r5, #3
 800ac4e:	45ac      	cmp	ip, r5
 800ac50:	bf38      	it	cc
 800ac52:	2200      	movcc	r2, #0
 800ac54:	441a      	add	r2, r3
 800ac56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ac5a:	b17b      	cbz	r3, 800ac7c <__mdiff+0x108>
 800ac5c:	6107      	str	r7, [r0, #16]
 800ac5e:	e7a3      	b.n	800aba8 <__mdiff+0x34>
 800ac60:	f856 8b04 	ldr.w	r8, [r6], #4
 800ac64:	fa11 f288 	uxtah	r2, r1, r8
 800ac68:	1414      	asrs	r4, r2, #16
 800ac6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ac6e:	b292      	uxth	r2, r2
 800ac70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ac74:	f84e 2b04 	str.w	r2, [lr], #4
 800ac78:	1421      	asrs	r1, r4, #16
 800ac7a:	e7e0      	b.n	800ac3e <__mdiff+0xca>
 800ac7c:	3f01      	subs	r7, #1
 800ac7e:	e7ea      	b.n	800ac56 <__mdiff+0xe2>
 800ac80:	0800bf33 	.word	0x0800bf33
 800ac84:	0800bf44 	.word	0x0800bf44

0800ac88 <__d2b>:
 800ac88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac8c:	4689      	mov	r9, r1
 800ac8e:	2101      	movs	r1, #1
 800ac90:	ec57 6b10 	vmov	r6, r7, d0
 800ac94:	4690      	mov	r8, r2
 800ac96:	f7ff fccf 	bl	800a638 <_Balloc>
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	b930      	cbnz	r0, 800acac <__d2b+0x24>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	4b25      	ldr	r3, [pc, #148]	; (800ad38 <__d2b+0xb0>)
 800aca2:	4826      	ldr	r0, [pc, #152]	; (800ad3c <__d2b+0xb4>)
 800aca4:	f240 310a 	movw	r1, #778	; 0x30a
 800aca8:	f000 faac 	bl	800b204 <__assert_func>
 800acac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800acb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800acb4:	bb35      	cbnz	r5, 800ad04 <__d2b+0x7c>
 800acb6:	2e00      	cmp	r6, #0
 800acb8:	9301      	str	r3, [sp, #4]
 800acba:	d028      	beq.n	800ad0e <__d2b+0x86>
 800acbc:	4668      	mov	r0, sp
 800acbe:	9600      	str	r6, [sp, #0]
 800acc0:	f7ff fd82 	bl	800a7c8 <__lo0bits>
 800acc4:	9900      	ldr	r1, [sp, #0]
 800acc6:	b300      	cbz	r0, 800ad0a <__d2b+0x82>
 800acc8:	9a01      	ldr	r2, [sp, #4]
 800acca:	f1c0 0320 	rsb	r3, r0, #32
 800acce:	fa02 f303 	lsl.w	r3, r2, r3
 800acd2:	430b      	orrs	r3, r1
 800acd4:	40c2      	lsrs	r2, r0
 800acd6:	6163      	str	r3, [r4, #20]
 800acd8:	9201      	str	r2, [sp, #4]
 800acda:	9b01      	ldr	r3, [sp, #4]
 800acdc:	61a3      	str	r3, [r4, #24]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	bf14      	ite	ne
 800ace2:	2202      	movne	r2, #2
 800ace4:	2201      	moveq	r2, #1
 800ace6:	6122      	str	r2, [r4, #16]
 800ace8:	b1d5      	cbz	r5, 800ad20 <__d2b+0x98>
 800acea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800acee:	4405      	add	r5, r0
 800acf0:	f8c9 5000 	str.w	r5, [r9]
 800acf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800acf8:	f8c8 0000 	str.w	r0, [r8]
 800acfc:	4620      	mov	r0, r4
 800acfe:	b003      	add	sp, #12
 800ad00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad08:	e7d5      	b.n	800acb6 <__d2b+0x2e>
 800ad0a:	6161      	str	r1, [r4, #20]
 800ad0c:	e7e5      	b.n	800acda <__d2b+0x52>
 800ad0e:	a801      	add	r0, sp, #4
 800ad10:	f7ff fd5a 	bl	800a7c8 <__lo0bits>
 800ad14:	9b01      	ldr	r3, [sp, #4]
 800ad16:	6163      	str	r3, [r4, #20]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	6122      	str	r2, [r4, #16]
 800ad1c:	3020      	adds	r0, #32
 800ad1e:	e7e3      	b.n	800ace8 <__d2b+0x60>
 800ad20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad28:	f8c9 0000 	str.w	r0, [r9]
 800ad2c:	6918      	ldr	r0, [r3, #16]
 800ad2e:	f7ff fd2b 	bl	800a788 <__hi0bits>
 800ad32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad36:	e7df      	b.n	800acf8 <__d2b+0x70>
 800ad38:	0800bf33 	.word	0x0800bf33
 800ad3c:	0800bf44 	.word	0x0800bf44

0800ad40 <_calloc_r>:
 800ad40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad42:	fba1 2402 	umull	r2, r4, r1, r2
 800ad46:	b94c      	cbnz	r4, 800ad5c <_calloc_r+0x1c>
 800ad48:	4611      	mov	r1, r2
 800ad4a:	9201      	str	r2, [sp, #4]
 800ad4c:	f000 f87a 	bl	800ae44 <_malloc_r>
 800ad50:	9a01      	ldr	r2, [sp, #4]
 800ad52:	4605      	mov	r5, r0
 800ad54:	b930      	cbnz	r0, 800ad64 <_calloc_r+0x24>
 800ad56:	4628      	mov	r0, r5
 800ad58:	b003      	add	sp, #12
 800ad5a:	bd30      	pop	{r4, r5, pc}
 800ad5c:	220c      	movs	r2, #12
 800ad5e:	6002      	str	r2, [r0, #0]
 800ad60:	2500      	movs	r5, #0
 800ad62:	e7f8      	b.n	800ad56 <_calloc_r+0x16>
 800ad64:	4621      	mov	r1, r4
 800ad66:	f7fe f93f 	bl	8008fe8 <memset>
 800ad6a:	e7f4      	b.n	800ad56 <_calloc_r+0x16>

0800ad6c <_free_r>:
 800ad6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad6e:	2900      	cmp	r1, #0
 800ad70:	d044      	beq.n	800adfc <_free_r+0x90>
 800ad72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad76:	9001      	str	r0, [sp, #4]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f1a1 0404 	sub.w	r4, r1, #4
 800ad7e:	bfb8      	it	lt
 800ad80:	18e4      	addlt	r4, r4, r3
 800ad82:	f000 fa9b 	bl	800b2bc <__malloc_lock>
 800ad86:	4a1e      	ldr	r2, [pc, #120]	; (800ae00 <_free_r+0x94>)
 800ad88:	9801      	ldr	r0, [sp, #4]
 800ad8a:	6813      	ldr	r3, [r2, #0]
 800ad8c:	b933      	cbnz	r3, 800ad9c <_free_r+0x30>
 800ad8e:	6063      	str	r3, [r4, #4]
 800ad90:	6014      	str	r4, [r2, #0]
 800ad92:	b003      	add	sp, #12
 800ad94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad98:	f000 ba96 	b.w	800b2c8 <__malloc_unlock>
 800ad9c:	42a3      	cmp	r3, r4
 800ad9e:	d908      	bls.n	800adb2 <_free_r+0x46>
 800ada0:	6825      	ldr	r5, [r4, #0]
 800ada2:	1961      	adds	r1, r4, r5
 800ada4:	428b      	cmp	r3, r1
 800ada6:	bf01      	itttt	eq
 800ada8:	6819      	ldreq	r1, [r3, #0]
 800adaa:	685b      	ldreq	r3, [r3, #4]
 800adac:	1949      	addeq	r1, r1, r5
 800adae:	6021      	streq	r1, [r4, #0]
 800adb0:	e7ed      	b.n	800ad8e <_free_r+0x22>
 800adb2:	461a      	mov	r2, r3
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	b10b      	cbz	r3, 800adbc <_free_r+0x50>
 800adb8:	42a3      	cmp	r3, r4
 800adba:	d9fa      	bls.n	800adb2 <_free_r+0x46>
 800adbc:	6811      	ldr	r1, [r2, #0]
 800adbe:	1855      	adds	r5, r2, r1
 800adc0:	42a5      	cmp	r5, r4
 800adc2:	d10b      	bne.n	800addc <_free_r+0x70>
 800adc4:	6824      	ldr	r4, [r4, #0]
 800adc6:	4421      	add	r1, r4
 800adc8:	1854      	adds	r4, r2, r1
 800adca:	42a3      	cmp	r3, r4
 800adcc:	6011      	str	r1, [r2, #0]
 800adce:	d1e0      	bne.n	800ad92 <_free_r+0x26>
 800add0:	681c      	ldr	r4, [r3, #0]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	6053      	str	r3, [r2, #4]
 800add6:	4421      	add	r1, r4
 800add8:	6011      	str	r1, [r2, #0]
 800adda:	e7da      	b.n	800ad92 <_free_r+0x26>
 800addc:	d902      	bls.n	800ade4 <_free_r+0x78>
 800adde:	230c      	movs	r3, #12
 800ade0:	6003      	str	r3, [r0, #0]
 800ade2:	e7d6      	b.n	800ad92 <_free_r+0x26>
 800ade4:	6825      	ldr	r5, [r4, #0]
 800ade6:	1961      	adds	r1, r4, r5
 800ade8:	428b      	cmp	r3, r1
 800adea:	bf04      	itt	eq
 800adec:	6819      	ldreq	r1, [r3, #0]
 800adee:	685b      	ldreq	r3, [r3, #4]
 800adf0:	6063      	str	r3, [r4, #4]
 800adf2:	bf04      	itt	eq
 800adf4:	1949      	addeq	r1, r1, r5
 800adf6:	6021      	streq	r1, [r4, #0]
 800adf8:	6054      	str	r4, [r2, #4]
 800adfa:	e7ca      	b.n	800ad92 <_free_r+0x26>
 800adfc:	b003      	add	sp, #12
 800adfe:	bd30      	pop	{r4, r5, pc}
 800ae00:	200004f8 	.word	0x200004f8

0800ae04 <sbrk_aligned>:
 800ae04:	b570      	push	{r4, r5, r6, lr}
 800ae06:	4e0e      	ldr	r6, [pc, #56]	; (800ae40 <sbrk_aligned+0x3c>)
 800ae08:	460c      	mov	r4, r1
 800ae0a:	6831      	ldr	r1, [r6, #0]
 800ae0c:	4605      	mov	r5, r0
 800ae0e:	b911      	cbnz	r1, 800ae16 <sbrk_aligned+0x12>
 800ae10:	f000 f9e8 	bl	800b1e4 <_sbrk_r>
 800ae14:	6030      	str	r0, [r6, #0]
 800ae16:	4621      	mov	r1, r4
 800ae18:	4628      	mov	r0, r5
 800ae1a:	f000 f9e3 	bl	800b1e4 <_sbrk_r>
 800ae1e:	1c43      	adds	r3, r0, #1
 800ae20:	d00a      	beq.n	800ae38 <sbrk_aligned+0x34>
 800ae22:	1cc4      	adds	r4, r0, #3
 800ae24:	f024 0403 	bic.w	r4, r4, #3
 800ae28:	42a0      	cmp	r0, r4
 800ae2a:	d007      	beq.n	800ae3c <sbrk_aligned+0x38>
 800ae2c:	1a21      	subs	r1, r4, r0
 800ae2e:	4628      	mov	r0, r5
 800ae30:	f000 f9d8 	bl	800b1e4 <_sbrk_r>
 800ae34:	3001      	adds	r0, #1
 800ae36:	d101      	bne.n	800ae3c <sbrk_aligned+0x38>
 800ae38:	f04f 34ff 	mov.w	r4, #4294967295
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	bd70      	pop	{r4, r5, r6, pc}
 800ae40:	200004fc 	.word	0x200004fc

0800ae44 <_malloc_r>:
 800ae44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae48:	1ccd      	adds	r5, r1, #3
 800ae4a:	f025 0503 	bic.w	r5, r5, #3
 800ae4e:	3508      	adds	r5, #8
 800ae50:	2d0c      	cmp	r5, #12
 800ae52:	bf38      	it	cc
 800ae54:	250c      	movcc	r5, #12
 800ae56:	2d00      	cmp	r5, #0
 800ae58:	4607      	mov	r7, r0
 800ae5a:	db01      	blt.n	800ae60 <_malloc_r+0x1c>
 800ae5c:	42a9      	cmp	r1, r5
 800ae5e:	d905      	bls.n	800ae6c <_malloc_r+0x28>
 800ae60:	230c      	movs	r3, #12
 800ae62:	603b      	str	r3, [r7, #0]
 800ae64:	2600      	movs	r6, #0
 800ae66:	4630      	mov	r0, r6
 800ae68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae6c:	4e2e      	ldr	r6, [pc, #184]	; (800af28 <_malloc_r+0xe4>)
 800ae6e:	f000 fa25 	bl	800b2bc <__malloc_lock>
 800ae72:	6833      	ldr	r3, [r6, #0]
 800ae74:	461c      	mov	r4, r3
 800ae76:	bb34      	cbnz	r4, 800aec6 <_malloc_r+0x82>
 800ae78:	4629      	mov	r1, r5
 800ae7a:	4638      	mov	r0, r7
 800ae7c:	f7ff ffc2 	bl	800ae04 <sbrk_aligned>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	4604      	mov	r4, r0
 800ae84:	d14d      	bne.n	800af22 <_malloc_r+0xde>
 800ae86:	6834      	ldr	r4, [r6, #0]
 800ae88:	4626      	mov	r6, r4
 800ae8a:	2e00      	cmp	r6, #0
 800ae8c:	d140      	bne.n	800af10 <_malloc_r+0xcc>
 800ae8e:	6823      	ldr	r3, [r4, #0]
 800ae90:	4631      	mov	r1, r6
 800ae92:	4638      	mov	r0, r7
 800ae94:	eb04 0803 	add.w	r8, r4, r3
 800ae98:	f000 f9a4 	bl	800b1e4 <_sbrk_r>
 800ae9c:	4580      	cmp	r8, r0
 800ae9e:	d13a      	bne.n	800af16 <_malloc_r+0xd2>
 800aea0:	6821      	ldr	r1, [r4, #0]
 800aea2:	3503      	adds	r5, #3
 800aea4:	1a6d      	subs	r5, r5, r1
 800aea6:	f025 0503 	bic.w	r5, r5, #3
 800aeaa:	3508      	adds	r5, #8
 800aeac:	2d0c      	cmp	r5, #12
 800aeae:	bf38      	it	cc
 800aeb0:	250c      	movcc	r5, #12
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	4638      	mov	r0, r7
 800aeb6:	f7ff ffa5 	bl	800ae04 <sbrk_aligned>
 800aeba:	3001      	adds	r0, #1
 800aebc:	d02b      	beq.n	800af16 <_malloc_r+0xd2>
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	442b      	add	r3, r5
 800aec2:	6023      	str	r3, [r4, #0]
 800aec4:	e00e      	b.n	800aee4 <_malloc_r+0xa0>
 800aec6:	6822      	ldr	r2, [r4, #0]
 800aec8:	1b52      	subs	r2, r2, r5
 800aeca:	d41e      	bmi.n	800af0a <_malloc_r+0xc6>
 800aecc:	2a0b      	cmp	r2, #11
 800aece:	d916      	bls.n	800aefe <_malloc_r+0xba>
 800aed0:	1961      	adds	r1, r4, r5
 800aed2:	42a3      	cmp	r3, r4
 800aed4:	6025      	str	r5, [r4, #0]
 800aed6:	bf18      	it	ne
 800aed8:	6059      	strne	r1, [r3, #4]
 800aeda:	6863      	ldr	r3, [r4, #4]
 800aedc:	bf08      	it	eq
 800aede:	6031      	streq	r1, [r6, #0]
 800aee0:	5162      	str	r2, [r4, r5]
 800aee2:	604b      	str	r3, [r1, #4]
 800aee4:	4638      	mov	r0, r7
 800aee6:	f104 060b 	add.w	r6, r4, #11
 800aeea:	f000 f9ed 	bl	800b2c8 <__malloc_unlock>
 800aeee:	f026 0607 	bic.w	r6, r6, #7
 800aef2:	1d23      	adds	r3, r4, #4
 800aef4:	1af2      	subs	r2, r6, r3
 800aef6:	d0b6      	beq.n	800ae66 <_malloc_r+0x22>
 800aef8:	1b9b      	subs	r3, r3, r6
 800aefa:	50a3      	str	r3, [r4, r2]
 800aefc:	e7b3      	b.n	800ae66 <_malloc_r+0x22>
 800aefe:	6862      	ldr	r2, [r4, #4]
 800af00:	42a3      	cmp	r3, r4
 800af02:	bf0c      	ite	eq
 800af04:	6032      	streq	r2, [r6, #0]
 800af06:	605a      	strne	r2, [r3, #4]
 800af08:	e7ec      	b.n	800aee4 <_malloc_r+0xa0>
 800af0a:	4623      	mov	r3, r4
 800af0c:	6864      	ldr	r4, [r4, #4]
 800af0e:	e7b2      	b.n	800ae76 <_malloc_r+0x32>
 800af10:	4634      	mov	r4, r6
 800af12:	6876      	ldr	r6, [r6, #4]
 800af14:	e7b9      	b.n	800ae8a <_malloc_r+0x46>
 800af16:	230c      	movs	r3, #12
 800af18:	603b      	str	r3, [r7, #0]
 800af1a:	4638      	mov	r0, r7
 800af1c:	f000 f9d4 	bl	800b2c8 <__malloc_unlock>
 800af20:	e7a1      	b.n	800ae66 <_malloc_r+0x22>
 800af22:	6025      	str	r5, [r4, #0]
 800af24:	e7de      	b.n	800aee4 <_malloc_r+0xa0>
 800af26:	bf00      	nop
 800af28:	200004f8 	.word	0x200004f8

0800af2c <__ssputs_r>:
 800af2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af30:	688e      	ldr	r6, [r1, #8]
 800af32:	429e      	cmp	r6, r3
 800af34:	4682      	mov	sl, r0
 800af36:	460c      	mov	r4, r1
 800af38:	4690      	mov	r8, r2
 800af3a:	461f      	mov	r7, r3
 800af3c:	d838      	bhi.n	800afb0 <__ssputs_r+0x84>
 800af3e:	898a      	ldrh	r2, [r1, #12]
 800af40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af44:	d032      	beq.n	800afac <__ssputs_r+0x80>
 800af46:	6825      	ldr	r5, [r4, #0]
 800af48:	6909      	ldr	r1, [r1, #16]
 800af4a:	eba5 0901 	sub.w	r9, r5, r1
 800af4e:	6965      	ldr	r5, [r4, #20]
 800af50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af58:	3301      	adds	r3, #1
 800af5a:	444b      	add	r3, r9
 800af5c:	106d      	asrs	r5, r5, #1
 800af5e:	429d      	cmp	r5, r3
 800af60:	bf38      	it	cc
 800af62:	461d      	movcc	r5, r3
 800af64:	0553      	lsls	r3, r2, #21
 800af66:	d531      	bpl.n	800afcc <__ssputs_r+0xa0>
 800af68:	4629      	mov	r1, r5
 800af6a:	f7ff ff6b 	bl	800ae44 <_malloc_r>
 800af6e:	4606      	mov	r6, r0
 800af70:	b950      	cbnz	r0, 800af88 <__ssputs_r+0x5c>
 800af72:	230c      	movs	r3, #12
 800af74:	f8ca 3000 	str.w	r3, [sl]
 800af78:	89a3      	ldrh	r3, [r4, #12]
 800af7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af7e:	81a3      	strh	r3, [r4, #12]
 800af80:	f04f 30ff 	mov.w	r0, #4294967295
 800af84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af88:	6921      	ldr	r1, [r4, #16]
 800af8a:	464a      	mov	r2, r9
 800af8c:	f7ff fb46 	bl	800a61c <memcpy>
 800af90:	89a3      	ldrh	r3, [r4, #12]
 800af92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af9a:	81a3      	strh	r3, [r4, #12]
 800af9c:	6126      	str	r6, [r4, #16]
 800af9e:	6165      	str	r5, [r4, #20]
 800afa0:	444e      	add	r6, r9
 800afa2:	eba5 0509 	sub.w	r5, r5, r9
 800afa6:	6026      	str	r6, [r4, #0]
 800afa8:	60a5      	str	r5, [r4, #8]
 800afaa:	463e      	mov	r6, r7
 800afac:	42be      	cmp	r6, r7
 800afae:	d900      	bls.n	800afb2 <__ssputs_r+0x86>
 800afb0:	463e      	mov	r6, r7
 800afb2:	6820      	ldr	r0, [r4, #0]
 800afb4:	4632      	mov	r2, r6
 800afb6:	4641      	mov	r1, r8
 800afb8:	f000 f966 	bl	800b288 <memmove>
 800afbc:	68a3      	ldr	r3, [r4, #8]
 800afbe:	1b9b      	subs	r3, r3, r6
 800afc0:	60a3      	str	r3, [r4, #8]
 800afc2:	6823      	ldr	r3, [r4, #0]
 800afc4:	4433      	add	r3, r6
 800afc6:	6023      	str	r3, [r4, #0]
 800afc8:	2000      	movs	r0, #0
 800afca:	e7db      	b.n	800af84 <__ssputs_r+0x58>
 800afcc:	462a      	mov	r2, r5
 800afce:	f000 f981 	bl	800b2d4 <_realloc_r>
 800afd2:	4606      	mov	r6, r0
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d1e1      	bne.n	800af9c <__ssputs_r+0x70>
 800afd8:	6921      	ldr	r1, [r4, #16]
 800afda:	4650      	mov	r0, sl
 800afdc:	f7ff fec6 	bl	800ad6c <_free_r>
 800afe0:	e7c7      	b.n	800af72 <__ssputs_r+0x46>
	...

0800afe4 <_svfiprintf_r>:
 800afe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe8:	4698      	mov	r8, r3
 800afea:	898b      	ldrh	r3, [r1, #12]
 800afec:	061b      	lsls	r3, r3, #24
 800afee:	b09d      	sub	sp, #116	; 0x74
 800aff0:	4607      	mov	r7, r0
 800aff2:	460d      	mov	r5, r1
 800aff4:	4614      	mov	r4, r2
 800aff6:	d50e      	bpl.n	800b016 <_svfiprintf_r+0x32>
 800aff8:	690b      	ldr	r3, [r1, #16]
 800affa:	b963      	cbnz	r3, 800b016 <_svfiprintf_r+0x32>
 800affc:	2140      	movs	r1, #64	; 0x40
 800affe:	f7ff ff21 	bl	800ae44 <_malloc_r>
 800b002:	6028      	str	r0, [r5, #0]
 800b004:	6128      	str	r0, [r5, #16]
 800b006:	b920      	cbnz	r0, 800b012 <_svfiprintf_r+0x2e>
 800b008:	230c      	movs	r3, #12
 800b00a:	603b      	str	r3, [r7, #0]
 800b00c:	f04f 30ff 	mov.w	r0, #4294967295
 800b010:	e0d1      	b.n	800b1b6 <_svfiprintf_r+0x1d2>
 800b012:	2340      	movs	r3, #64	; 0x40
 800b014:	616b      	str	r3, [r5, #20]
 800b016:	2300      	movs	r3, #0
 800b018:	9309      	str	r3, [sp, #36]	; 0x24
 800b01a:	2320      	movs	r3, #32
 800b01c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b020:	f8cd 800c 	str.w	r8, [sp, #12]
 800b024:	2330      	movs	r3, #48	; 0x30
 800b026:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b1d0 <_svfiprintf_r+0x1ec>
 800b02a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b02e:	f04f 0901 	mov.w	r9, #1
 800b032:	4623      	mov	r3, r4
 800b034:	469a      	mov	sl, r3
 800b036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b03a:	b10a      	cbz	r2, 800b040 <_svfiprintf_r+0x5c>
 800b03c:	2a25      	cmp	r2, #37	; 0x25
 800b03e:	d1f9      	bne.n	800b034 <_svfiprintf_r+0x50>
 800b040:	ebba 0b04 	subs.w	fp, sl, r4
 800b044:	d00b      	beq.n	800b05e <_svfiprintf_r+0x7a>
 800b046:	465b      	mov	r3, fp
 800b048:	4622      	mov	r2, r4
 800b04a:	4629      	mov	r1, r5
 800b04c:	4638      	mov	r0, r7
 800b04e:	f7ff ff6d 	bl	800af2c <__ssputs_r>
 800b052:	3001      	adds	r0, #1
 800b054:	f000 80aa 	beq.w	800b1ac <_svfiprintf_r+0x1c8>
 800b058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b05a:	445a      	add	r2, fp
 800b05c:	9209      	str	r2, [sp, #36]	; 0x24
 800b05e:	f89a 3000 	ldrb.w	r3, [sl]
 800b062:	2b00      	cmp	r3, #0
 800b064:	f000 80a2 	beq.w	800b1ac <_svfiprintf_r+0x1c8>
 800b068:	2300      	movs	r3, #0
 800b06a:	f04f 32ff 	mov.w	r2, #4294967295
 800b06e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b072:	f10a 0a01 	add.w	sl, sl, #1
 800b076:	9304      	str	r3, [sp, #16]
 800b078:	9307      	str	r3, [sp, #28]
 800b07a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b07e:	931a      	str	r3, [sp, #104]	; 0x68
 800b080:	4654      	mov	r4, sl
 800b082:	2205      	movs	r2, #5
 800b084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b088:	4851      	ldr	r0, [pc, #324]	; (800b1d0 <_svfiprintf_r+0x1ec>)
 800b08a:	f7f5 f8b1 	bl	80001f0 <memchr>
 800b08e:	9a04      	ldr	r2, [sp, #16]
 800b090:	b9d8      	cbnz	r0, 800b0ca <_svfiprintf_r+0xe6>
 800b092:	06d0      	lsls	r0, r2, #27
 800b094:	bf44      	itt	mi
 800b096:	2320      	movmi	r3, #32
 800b098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b09c:	0711      	lsls	r1, r2, #28
 800b09e:	bf44      	itt	mi
 800b0a0:	232b      	movmi	r3, #43	; 0x2b
 800b0a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0a6:	f89a 3000 	ldrb.w	r3, [sl]
 800b0aa:	2b2a      	cmp	r3, #42	; 0x2a
 800b0ac:	d015      	beq.n	800b0da <_svfiprintf_r+0xf6>
 800b0ae:	9a07      	ldr	r2, [sp, #28]
 800b0b0:	4654      	mov	r4, sl
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	f04f 0c0a 	mov.w	ip, #10
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0be:	3b30      	subs	r3, #48	; 0x30
 800b0c0:	2b09      	cmp	r3, #9
 800b0c2:	d94e      	bls.n	800b162 <_svfiprintf_r+0x17e>
 800b0c4:	b1b0      	cbz	r0, 800b0f4 <_svfiprintf_r+0x110>
 800b0c6:	9207      	str	r2, [sp, #28]
 800b0c8:	e014      	b.n	800b0f4 <_svfiprintf_r+0x110>
 800b0ca:	eba0 0308 	sub.w	r3, r0, r8
 800b0ce:	fa09 f303 	lsl.w	r3, r9, r3
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	9304      	str	r3, [sp, #16]
 800b0d6:	46a2      	mov	sl, r4
 800b0d8:	e7d2      	b.n	800b080 <_svfiprintf_r+0x9c>
 800b0da:	9b03      	ldr	r3, [sp, #12]
 800b0dc:	1d19      	adds	r1, r3, #4
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	9103      	str	r1, [sp, #12]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	bfbb      	ittet	lt
 800b0e6:	425b      	neglt	r3, r3
 800b0e8:	f042 0202 	orrlt.w	r2, r2, #2
 800b0ec:	9307      	strge	r3, [sp, #28]
 800b0ee:	9307      	strlt	r3, [sp, #28]
 800b0f0:	bfb8      	it	lt
 800b0f2:	9204      	strlt	r2, [sp, #16]
 800b0f4:	7823      	ldrb	r3, [r4, #0]
 800b0f6:	2b2e      	cmp	r3, #46	; 0x2e
 800b0f8:	d10c      	bne.n	800b114 <_svfiprintf_r+0x130>
 800b0fa:	7863      	ldrb	r3, [r4, #1]
 800b0fc:	2b2a      	cmp	r3, #42	; 0x2a
 800b0fe:	d135      	bne.n	800b16c <_svfiprintf_r+0x188>
 800b100:	9b03      	ldr	r3, [sp, #12]
 800b102:	1d1a      	adds	r2, r3, #4
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	9203      	str	r2, [sp, #12]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	bfb8      	it	lt
 800b10c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b110:	3402      	adds	r4, #2
 800b112:	9305      	str	r3, [sp, #20]
 800b114:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b1e0 <_svfiprintf_r+0x1fc>
 800b118:	7821      	ldrb	r1, [r4, #0]
 800b11a:	2203      	movs	r2, #3
 800b11c:	4650      	mov	r0, sl
 800b11e:	f7f5 f867 	bl	80001f0 <memchr>
 800b122:	b140      	cbz	r0, 800b136 <_svfiprintf_r+0x152>
 800b124:	2340      	movs	r3, #64	; 0x40
 800b126:	eba0 000a 	sub.w	r0, r0, sl
 800b12a:	fa03 f000 	lsl.w	r0, r3, r0
 800b12e:	9b04      	ldr	r3, [sp, #16]
 800b130:	4303      	orrs	r3, r0
 800b132:	3401      	adds	r4, #1
 800b134:	9304      	str	r3, [sp, #16]
 800b136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b13a:	4826      	ldr	r0, [pc, #152]	; (800b1d4 <_svfiprintf_r+0x1f0>)
 800b13c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b140:	2206      	movs	r2, #6
 800b142:	f7f5 f855 	bl	80001f0 <memchr>
 800b146:	2800      	cmp	r0, #0
 800b148:	d038      	beq.n	800b1bc <_svfiprintf_r+0x1d8>
 800b14a:	4b23      	ldr	r3, [pc, #140]	; (800b1d8 <_svfiprintf_r+0x1f4>)
 800b14c:	bb1b      	cbnz	r3, 800b196 <_svfiprintf_r+0x1b2>
 800b14e:	9b03      	ldr	r3, [sp, #12]
 800b150:	3307      	adds	r3, #7
 800b152:	f023 0307 	bic.w	r3, r3, #7
 800b156:	3308      	adds	r3, #8
 800b158:	9303      	str	r3, [sp, #12]
 800b15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b15c:	4433      	add	r3, r6
 800b15e:	9309      	str	r3, [sp, #36]	; 0x24
 800b160:	e767      	b.n	800b032 <_svfiprintf_r+0x4e>
 800b162:	fb0c 3202 	mla	r2, ip, r2, r3
 800b166:	460c      	mov	r4, r1
 800b168:	2001      	movs	r0, #1
 800b16a:	e7a5      	b.n	800b0b8 <_svfiprintf_r+0xd4>
 800b16c:	2300      	movs	r3, #0
 800b16e:	3401      	adds	r4, #1
 800b170:	9305      	str	r3, [sp, #20]
 800b172:	4619      	mov	r1, r3
 800b174:	f04f 0c0a 	mov.w	ip, #10
 800b178:	4620      	mov	r0, r4
 800b17a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b17e:	3a30      	subs	r2, #48	; 0x30
 800b180:	2a09      	cmp	r2, #9
 800b182:	d903      	bls.n	800b18c <_svfiprintf_r+0x1a8>
 800b184:	2b00      	cmp	r3, #0
 800b186:	d0c5      	beq.n	800b114 <_svfiprintf_r+0x130>
 800b188:	9105      	str	r1, [sp, #20]
 800b18a:	e7c3      	b.n	800b114 <_svfiprintf_r+0x130>
 800b18c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b190:	4604      	mov	r4, r0
 800b192:	2301      	movs	r3, #1
 800b194:	e7f0      	b.n	800b178 <_svfiprintf_r+0x194>
 800b196:	ab03      	add	r3, sp, #12
 800b198:	9300      	str	r3, [sp, #0]
 800b19a:	462a      	mov	r2, r5
 800b19c:	4b0f      	ldr	r3, [pc, #60]	; (800b1dc <_svfiprintf_r+0x1f8>)
 800b19e:	a904      	add	r1, sp, #16
 800b1a0:	4638      	mov	r0, r7
 800b1a2:	f7fd ffc9 	bl	8009138 <_printf_float>
 800b1a6:	1c42      	adds	r2, r0, #1
 800b1a8:	4606      	mov	r6, r0
 800b1aa:	d1d6      	bne.n	800b15a <_svfiprintf_r+0x176>
 800b1ac:	89ab      	ldrh	r3, [r5, #12]
 800b1ae:	065b      	lsls	r3, r3, #25
 800b1b0:	f53f af2c 	bmi.w	800b00c <_svfiprintf_r+0x28>
 800b1b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1b6:	b01d      	add	sp, #116	; 0x74
 800b1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1bc:	ab03      	add	r3, sp, #12
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	462a      	mov	r2, r5
 800b1c2:	4b06      	ldr	r3, [pc, #24]	; (800b1dc <_svfiprintf_r+0x1f8>)
 800b1c4:	a904      	add	r1, sp, #16
 800b1c6:	4638      	mov	r0, r7
 800b1c8:	f7fe fa5a 	bl	8009680 <_printf_i>
 800b1cc:	e7eb      	b.n	800b1a6 <_svfiprintf_r+0x1c2>
 800b1ce:	bf00      	nop
 800b1d0:	0800c09c 	.word	0x0800c09c
 800b1d4:	0800c0a6 	.word	0x0800c0a6
 800b1d8:	08009139 	.word	0x08009139
 800b1dc:	0800af2d 	.word	0x0800af2d
 800b1e0:	0800c0a2 	.word	0x0800c0a2

0800b1e4 <_sbrk_r>:
 800b1e4:	b538      	push	{r3, r4, r5, lr}
 800b1e6:	4d06      	ldr	r5, [pc, #24]	; (800b200 <_sbrk_r+0x1c>)
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	4608      	mov	r0, r1
 800b1ee:	602b      	str	r3, [r5, #0]
 800b1f0:	f7f6 ff82 	bl	80020f8 <_sbrk>
 800b1f4:	1c43      	adds	r3, r0, #1
 800b1f6:	d102      	bne.n	800b1fe <_sbrk_r+0x1a>
 800b1f8:	682b      	ldr	r3, [r5, #0]
 800b1fa:	b103      	cbz	r3, 800b1fe <_sbrk_r+0x1a>
 800b1fc:	6023      	str	r3, [r4, #0]
 800b1fe:	bd38      	pop	{r3, r4, r5, pc}
 800b200:	20000500 	.word	0x20000500

0800b204 <__assert_func>:
 800b204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b206:	4614      	mov	r4, r2
 800b208:	461a      	mov	r2, r3
 800b20a:	4b09      	ldr	r3, [pc, #36]	; (800b230 <__assert_func+0x2c>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4605      	mov	r5, r0
 800b210:	68d8      	ldr	r0, [r3, #12]
 800b212:	b14c      	cbz	r4, 800b228 <__assert_func+0x24>
 800b214:	4b07      	ldr	r3, [pc, #28]	; (800b234 <__assert_func+0x30>)
 800b216:	9100      	str	r1, [sp, #0]
 800b218:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b21c:	4906      	ldr	r1, [pc, #24]	; (800b238 <__assert_func+0x34>)
 800b21e:	462b      	mov	r3, r5
 800b220:	f000 f80e 	bl	800b240 <fiprintf>
 800b224:	f000 faac 	bl	800b780 <abort>
 800b228:	4b04      	ldr	r3, [pc, #16]	; (800b23c <__assert_func+0x38>)
 800b22a:	461c      	mov	r4, r3
 800b22c:	e7f3      	b.n	800b216 <__assert_func+0x12>
 800b22e:	bf00      	nop
 800b230:	2000000c 	.word	0x2000000c
 800b234:	0800c0ad 	.word	0x0800c0ad
 800b238:	0800c0ba 	.word	0x0800c0ba
 800b23c:	0800c0e8 	.word	0x0800c0e8

0800b240 <fiprintf>:
 800b240:	b40e      	push	{r1, r2, r3}
 800b242:	b503      	push	{r0, r1, lr}
 800b244:	4601      	mov	r1, r0
 800b246:	ab03      	add	r3, sp, #12
 800b248:	4805      	ldr	r0, [pc, #20]	; (800b260 <fiprintf+0x20>)
 800b24a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b24e:	6800      	ldr	r0, [r0, #0]
 800b250:	9301      	str	r3, [sp, #4]
 800b252:	f000 f897 	bl	800b384 <_vfiprintf_r>
 800b256:	b002      	add	sp, #8
 800b258:	f85d eb04 	ldr.w	lr, [sp], #4
 800b25c:	b003      	add	sp, #12
 800b25e:	4770      	bx	lr
 800b260:	2000000c 	.word	0x2000000c

0800b264 <__ascii_mbtowc>:
 800b264:	b082      	sub	sp, #8
 800b266:	b901      	cbnz	r1, 800b26a <__ascii_mbtowc+0x6>
 800b268:	a901      	add	r1, sp, #4
 800b26a:	b142      	cbz	r2, 800b27e <__ascii_mbtowc+0x1a>
 800b26c:	b14b      	cbz	r3, 800b282 <__ascii_mbtowc+0x1e>
 800b26e:	7813      	ldrb	r3, [r2, #0]
 800b270:	600b      	str	r3, [r1, #0]
 800b272:	7812      	ldrb	r2, [r2, #0]
 800b274:	1e10      	subs	r0, r2, #0
 800b276:	bf18      	it	ne
 800b278:	2001      	movne	r0, #1
 800b27a:	b002      	add	sp, #8
 800b27c:	4770      	bx	lr
 800b27e:	4610      	mov	r0, r2
 800b280:	e7fb      	b.n	800b27a <__ascii_mbtowc+0x16>
 800b282:	f06f 0001 	mvn.w	r0, #1
 800b286:	e7f8      	b.n	800b27a <__ascii_mbtowc+0x16>

0800b288 <memmove>:
 800b288:	4288      	cmp	r0, r1
 800b28a:	b510      	push	{r4, lr}
 800b28c:	eb01 0402 	add.w	r4, r1, r2
 800b290:	d902      	bls.n	800b298 <memmove+0x10>
 800b292:	4284      	cmp	r4, r0
 800b294:	4623      	mov	r3, r4
 800b296:	d807      	bhi.n	800b2a8 <memmove+0x20>
 800b298:	1e43      	subs	r3, r0, #1
 800b29a:	42a1      	cmp	r1, r4
 800b29c:	d008      	beq.n	800b2b0 <memmove+0x28>
 800b29e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2a6:	e7f8      	b.n	800b29a <memmove+0x12>
 800b2a8:	4402      	add	r2, r0
 800b2aa:	4601      	mov	r1, r0
 800b2ac:	428a      	cmp	r2, r1
 800b2ae:	d100      	bne.n	800b2b2 <memmove+0x2a>
 800b2b0:	bd10      	pop	{r4, pc}
 800b2b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2ba:	e7f7      	b.n	800b2ac <memmove+0x24>

0800b2bc <__malloc_lock>:
 800b2bc:	4801      	ldr	r0, [pc, #4]	; (800b2c4 <__malloc_lock+0x8>)
 800b2be:	f000 bc1f 	b.w	800bb00 <__retarget_lock_acquire_recursive>
 800b2c2:	bf00      	nop
 800b2c4:	20000504 	.word	0x20000504

0800b2c8 <__malloc_unlock>:
 800b2c8:	4801      	ldr	r0, [pc, #4]	; (800b2d0 <__malloc_unlock+0x8>)
 800b2ca:	f000 bc1a 	b.w	800bb02 <__retarget_lock_release_recursive>
 800b2ce:	bf00      	nop
 800b2d0:	20000504 	.word	0x20000504

0800b2d4 <_realloc_r>:
 800b2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d8:	4680      	mov	r8, r0
 800b2da:	4614      	mov	r4, r2
 800b2dc:	460e      	mov	r6, r1
 800b2de:	b921      	cbnz	r1, 800b2ea <_realloc_r+0x16>
 800b2e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e4:	4611      	mov	r1, r2
 800b2e6:	f7ff bdad 	b.w	800ae44 <_malloc_r>
 800b2ea:	b92a      	cbnz	r2, 800b2f8 <_realloc_r+0x24>
 800b2ec:	f7ff fd3e 	bl	800ad6c <_free_r>
 800b2f0:	4625      	mov	r5, r4
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2f8:	f000 fc6a 	bl	800bbd0 <_malloc_usable_size_r>
 800b2fc:	4284      	cmp	r4, r0
 800b2fe:	4607      	mov	r7, r0
 800b300:	d802      	bhi.n	800b308 <_realloc_r+0x34>
 800b302:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b306:	d812      	bhi.n	800b32e <_realloc_r+0x5a>
 800b308:	4621      	mov	r1, r4
 800b30a:	4640      	mov	r0, r8
 800b30c:	f7ff fd9a 	bl	800ae44 <_malloc_r>
 800b310:	4605      	mov	r5, r0
 800b312:	2800      	cmp	r0, #0
 800b314:	d0ed      	beq.n	800b2f2 <_realloc_r+0x1e>
 800b316:	42bc      	cmp	r4, r7
 800b318:	4622      	mov	r2, r4
 800b31a:	4631      	mov	r1, r6
 800b31c:	bf28      	it	cs
 800b31e:	463a      	movcs	r2, r7
 800b320:	f7ff f97c 	bl	800a61c <memcpy>
 800b324:	4631      	mov	r1, r6
 800b326:	4640      	mov	r0, r8
 800b328:	f7ff fd20 	bl	800ad6c <_free_r>
 800b32c:	e7e1      	b.n	800b2f2 <_realloc_r+0x1e>
 800b32e:	4635      	mov	r5, r6
 800b330:	e7df      	b.n	800b2f2 <_realloc_r+0x1e>

0800b332 <__sfputc_r>:
 800b332:	6893      	ldr	r3, [r2, #8]
 800b334:	3b01      	subs	r3, #1
 800b336:	2b00      	cmp	r3, #0
 800b338:	b410      	push	{r4}
 800b33a:	6093      	str	r3, [r2, #8]
 800b33c:	da08      	bge.n	800b350 <__sfputc_r+0x1e>
 800b33e:	6994      	ldr	r4, [r2, #24]
 800b340:	42a3      	cmp	r3, r4
 800b342:	db01      	blt.n	800b348 <__sfputc_r+0x16>
 800b344:	290a      	cmp	r1, #10
 800b346:	d103      	bne.n	800b350 <__sfputc_r+0x1e>
 800b348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b34c:	f000 b94a 	b.w	800b5e4 <__swbuf_r>
 800b350:	6813      	ldr	r3, [r2, #0]
 800b352:	1c58      	adds	r0, r3, #1
 800b354:	6010      	str	r0, [r2, #0]
 800b356:	7019      	strb	r1, [r3, #0]
 800b358:	4608      	mov	r0, r1
 800b35a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <__sfputs_r>:
 800b360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b362:	4606      	mov	r6, r0
 800b364:	460f      	mov	r7, r1
 800b366:	4614      	mov	r4, r2
 800b368:	18d5      	adds	r5, r2, r3
 800b36a:	42ac      	cmp	r4, r5
 800b36c:	d101      	bne.n	800b372 <__sfputs_r+0x12>
 800b36e:	2000      	movs	r0, #0
 800b370:	e007      	b.n	800b382 <__sfputs_r+0x22>
 800b372:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b376:	463a      	mov	r2, r7
 800b378:	4630      	mov	r0, r6
 800b37a:	f7ff ffda 	bl	800b332 <__sfputc_r>
 800b37e:	1c43      	adds	r3, r0, #1
 800b380:	d1f3      	bne.n	800b36a <__sfputs_r+0xa>
 800b382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b384 <_vfiprintf_r>:
 800b384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b388:	460d      	mov	r5, r1
 800b38a:	b09d      	sub	sp, #116	; 0x74
 800b38c:	4614      	mov	r4, r2
 800b38e:	4698      	mov	r8, r3
 800b390:	4606      	mov	r6, r0
 800b392:	b118      	cbz	r0, 800b39c <_vfiprintf_r+0x18>
 800b394:	6983      	ldr	r3, [r0, #24]
 800b396:	b90b      	cbnz	r3, 800b39c <_vfiprintf_r+0x18>
 800b398:	f000 fb14 	bl	800b9c4 <__sinit>
 800b39c:	4b89      	ldr	r3, [pc, #548]	; (800b5c4 <_vfiprintf_r+0x240>)
 800b39e:	429d      	cmp	r5, r3
 800b3a0:	d11b      	bne.n	800b3da <_vfiprintf_r+0x56>
 800b3a2:	6875      	ldr	r5, [r6, #4]
 800b3a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3a6:	07d9      	lsls	r1, r3, #31
 800b3a8:	d405      	bmi.n	800b3b6 <_vfiprintf_r+0x32>
 800b3aa:	89ab      	ldrh	r3, [r5, #12]
 800b3ac:	059a      	lsls	r2, r3, #22
 800b3ae:	d402      	bmi.n	800b3b6 <_vfiprintf_r+0x32>
 800b3b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3b2:	f000 fba5 	bl	800bb00 <__retarget_lock_acquire_recursive>
 800b3b6:	89ab      	ldrh	r3, [r5, #12]
 800b3b8:	071b      	lsls	r3, r3, #28
 800b3ba:	d501      	bpl.n	800b3c0 <_vfiprintf_r+0x3c>
 800b3bc:	692b      	ldr	r3, [r5, #16]
 800b3be:	b9eb      	cbnz	r3, 800b3fc <_vfiprintf_r+0x78>
 800b3c0:	4629      	mov	r1, r5
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	f000 f96e 	bl	800b6a4 <__swsetup_r>
 800b3c8:	b1c0      	cbz	r0, 800b3fc <_vfiprintf_r+0x78>
 800b3ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3cc:	07dc      	lsls	r4, r3, #31
 800b3ce:	d50e      	bpl.n	800b3ee <_vfiprintf_r+0x6a>
 800b3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d4:	b01d      	add	sp, #116	; 0x74
 800b3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3da:	4b7b      	ldr	r3, [pc, #492]	; (800b5c8 <_vfiprintf_r+0x244>)
 800b3dc:	429d      	cmp	r5, r3
 800b3de:	d101      	bne.n	800b3e4 <_vfiprintf_r+0x60>
 800b3e0:	68b5      	ldr	r5, [r6, #8]
 800b3e2:	e7df      	b.n	800b3a4 <_vfiprintf_r+0x20>
 800b3e4:	4b79      	ldr	r3, [pc, #484]	; (800b5cc <_vfiprintf_r+0x248>)
 800b3e6:	429d      	cmp	r5, r3
 800b3e8:	bf08      	it	eq
 800b3ea:	68f5      	ldreq	r5, [r6, #12]
 800b3ec:	e7da      	b.n	800b3a4 <_vfiprintf_r+0x20>
 800b3ee:	89ab      	ldrh	r3, [r5, #12]
 800b3f0:	0598      	lsls	r0, r3, #22
 800b3f2:	d4ed      	bmi.n	800b3d0 <_vfiprintf_r+0x4c>
 800b3f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3f6:	f000 fb84 	bl	800bb02 <__retarget_lock_release_recursive>
 800b3fa:	e7e9      	b.n	800b3d0 <_vfiprintf_r+0x4c>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b400:	2320      	movs	r3, #32
 800b402:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b406:	f8cd 800c 	str.w	r8, [sp, #12]
 800b40a:	2330      	movs	r3, #48	; 0x30
 800b40c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b5d0 <_vfiprintf_r+0x24c>
 800b410:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b414:	f04f 0901 	mov.w	r9, #1
 800b418:	4623      	mov	r3, r4
 800b41a:	469a      	mov	sl, r3
 800b41c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b420:	b10a      	cbz	r2, 800b426 <_vfiprintf_r+0xa2>
 800b422:	2a25      	cmp	r2, #37	; 0x25
 800b424:	d1f9      	bne.n	800b41a <_vfiprintf_r+0x96>
 800b426:	ebba 0b04 	subs.w	fp, sl, r4
 800b42a:	d00b      	beq.n	800b444 <_vfiprintf_r+0xc0>
 800b42c:	465b      	mov	r3, fp
 800b42e:	4622      	mov	r2, r4
 800b430:	4629      	mov	r1, r5
 800b432:	4630      	mov	r0, r6
 800b434:	f7ff ff94 	bl	800b360 <__sfputs_r>
 800b438:	3001      	adds	r0, #1
 800b43a:	f000 80aa 	beq.w	800b592 <_vfiprintf_r+0x20e>
 800b43e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b440:	445a      	add	r2, fp
 800b442:	9209      	str	r2, [sp, #36]	; 0x24
 800b444:	f89a 3000 	ldrb.w	r3, [sl]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f000 80a2 	beq.w	800b592 <_vfiprintf_r+0x20e>
 800b44e:	2300      	movs	r3, #0
 800b450:	f04f 32ff 	mov.w	r2, #4294967295
 800b454:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b458:	f10a 0a01 	add.w	sl, sl, #1
 800b45c:	9304      	str	r3, [sp, #16]
 800b45e:	9307      	str	r3, [sp, #28]
 800b460:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b464:	931a      	str	r3, [sp, #104]	; 0x68
 800b466:	4654      	mov	r4, sl
 800b468:	2205      	movs	r2, #5
 800b46a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b46e:	4858      	ldr	r0, [pc, #352]	; (800b5d0 <_vfiprintf_r+0x24c>)
 800b470:	f7f4 febe 	bl	80001f0 <memchr>
 800b474:	9a04      	ldr	r2, [sp, #16]
 800b476:	b9d8      	cbnz	r0, 800b4b0 <_vfiprintf_r+0x12c>
 800b478:	06d1      	lsls	r1, r2, #27
 800b47a:	bf44      	itt	mi
 800b47c:	2320      	movmi	r3, #32
 800b47e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b482:	0713      	lsls	r3, r2, #28
 800b484:	bf44      	itt	mi
 800b486:	232b      	movmi	r3, #43	; 0x2b
 800b488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b48c:	f89a 3000 	ldrb.w	r3, [sl]
 800b490:	2b2a      	cmp	r3, #42	; 0x2a
 800b492:	d015      	beq.n	800b4c0 <_vfiprintf_r+0x13c>
 800b494:	9a07      	ldr	r2, [sp, #28]
 800b496:	4654      	mov	r4, sl
 800b498:	2000      	movs	r0, #0
 800b49a:	f04f 0c0a 	mov.w	ip, #10
 800b49e:	4621      	mov	r1, r4
 800b4a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4a4:	3b30      	subs	r3, #48	; 0x30
 800b4a6:	2b09      	cmp	r3, #9
 800b4a8:	d94e      	bls.n	800b548 <_vfiprintf_r+0x1c4>
 800b4aa:	b1b0      	cbz	r0, 800b4da <_vfiprintf_r+0x156>
 800b4ac:	9207      	str	r2, [sp, #28]
 800b4ae:	e014      	b.n	800b4da <_vfiprintf_r+0x156>
 800b4b0:	eba0 0308 	sub.w	r3, r0, r8
 800b4b4:	fa09 f303 	lsl.w	r3, r9, r3
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	9304      	str	r3, [sp, #16]
 800b4bc:	46a2      	mov	sl, r4
 800b4be:	e7d2      	b.n	800b466 <_vfiprintf_r+0xe2>
 800b4c0:	9b03      	ldr	r3, [sp, #12]
 800b4c2:	1d19      	adds	r1, r3, #4
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	9103      	str	r1, [sp, #12]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	bfbb      	ittet	lt
 800b4cc:	425b      	neglt	r3, r3
 800b4ce:	f042 0202 	orrlt.w	r2, r2, #2
 800b4d2:	9307      	strge	r3, [sp, #28]
 800b4d4:	9307      	strlt	r3, [sp, #28]
 800b4d6:	bfb8      	it	lt
 800b4d8:	9204      	strlt	r2, [sp, #16]
 800b4da:	7823      	ldrb	r3, [r4, #0]
 800b4dc:	2b2e      	cmp	r3, #46	; 0x2e
 800b4de:	d10c      	bne.n	800b4fa <_vfiprintf_r+0x176>
 800b4e0:	7863      	ldrb	r3, [r4, #1]
 800b4e2:	2b2a      	cmp	r3, #42	; 0x2a
 800b4e4:	d135      	bne.n	800b552 <_vfiprintf_r+0x1ce>
 800b4e6:	9b03      	ldr	r3, [sp, #12]
 800b4e8:	1d1a      	adds	r2, r3, #4
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	9203      	str	r2, [sp, #12]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	bfb8      	it	lt
 800b4f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4f6:	3402      	adds	r4, #2
 800b4f8:	9305      	str	r3, [sp, #20]
 800b4fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b5e0 <_vfiprintf_r+0x25c>
 800b4fe:	7821      	ldrb	r1, [r4, #0]
 800b500:	2203      	movs	r2, #3
 800b502:	4650      	mov	r0, sl
 800b504:	f7f4 fe74 	bl	80001f0 <memchr>
 800b508:	b140      	cbz	r0, 800b51c <_vfiprintf_r+0x198>
 800b50a:	2340      	movs	r3, #64	; 0x40
 800b50c:	eba0 000a 	sub.w	r0, r0, sl
 800b510:	fa03 f000 	lsl.w	r0, r3, r0
 800b514:	9b04      	ldr	r3, [sp, #16]
 800b516:	4303      	orrs	r3, r0
 800b518:	3401      	adds	r4, #1
 800b51a:	9304      	str	r3, [sp, #16]
 800b51c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b520:	482c      	ldr	r0, [pc, #176]	; (800b5d4 <_vfiprintf_r+0x250>)
 800b522:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b526:	2206      	movs	r2, #6
 800b528:	f7f4 fe62 	bl	80001f0 <memchr>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d03f      	beq.n	800b5b0 <_vfiprintf_r+0x22c>
 800b530:	4b29      	ldr	r3, [pc, #164]	; (800b5d8 <_vfiprintf_r+0x254>)
 800b532:	bb1b      	cbnz	r3, 800b57c <_vfiprintf_r+0x1f8>
 800b534:	9b03      	ldr	r3, [sp, #12]
 800b536:	3307      	adds	r3, #7
 800b538:	f023 0307 	bic.w	r3, r3, #7
 800b53c:	3308      	adds	r3, #8
 800b53e:	9303      	str	r3, [sp, #12]
 800b540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b542:	443b      	add	r3, r7
 800b544:	9309      	str	r3, [sp, #36]	; 0x24
 800b546:	e767      	b.n	800b418 <_vfiprintf_r+0x94>
 800b548:	fb0c 3202 	mla	r2, ip, r2, r3
 800b54c:	460c      	mov	r4, r1
 800b54e:	2001      	movs	r0, #1
 800b550:	e7a5      	b.n	800b49e <_vfiprintf_r+0x11a>
 800b552:	2300      	movs	r3, #0
 800b554:	3401      	adds	r4, #1
 800b556:	9305      	str	r3, [sp, #20]
 800b558:	4619      	mov	r1, r3
 800b55a:	f04f 0c0a 	mov.w	ip, #10
 800b55e:	4620      	mov	r0, r4
 800b560:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b564:	3a30      	subs	r2, #48	; 0x30
 800b566:	2a09      	cmp	r2, #9
 800b568:	d903      	bls.n	800b572 <_vfiprintf_r+0x1ee>
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d0c5      	beq.n	800b4fa <_vfiprintf_r+0x176>
 800b56e:	9105      	str	r1, [sp, #20]
 800b570:	e7c3      	b.n	800b4fa <_vfiprintf_r+0x176>
 800b572:	fb0c 2101 	mla	r1, ip, r1, r2
 800b576:	4604      	mov	r4, r0
 800b578:	2301      	movs	r3, #1
 800b57a:	e7f0      	b.n	800b55e <_vfiprintf_r+0x1da>
 800b57c:	ab03      	add	r3, sp, #12
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	462a      	mov	r2, r5
 800b582:	4b16      	ldr	r3, [pc, #88]	; (800b5dc <_vfiprintf_r+0x258>)
 800b584:	a904      	add	r1, sp, #16
 800b586:	4630      	mov	r0, r6
 800b588:	f7fd fdd6 	bl	8009138 <_printf_float>
 800b58c:	4607      	mov	r7, r0
 800b58e:	1c78      	adds	r0, r7, #1
 800b590:	d1d6      	bne.n	800b540 <_vfiprintf_r+0x1bc>
 800b592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b594:	07d9      	lsls	r1, r3, #31
 800b596:	d405      	bmi.n	800b5a4 <_vfiprintf_r+0x220>
 800b598:	89ab      	ldrh	r3, [r5, #12]
 800b59a:	059a      	lsls	r2, r3, #22
 800b59c:	d402      	bmi.n	800b5a4 <_vfiprintf_r+0x220>
 800b59e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5a0:	f000 faaf 	bl	800bb02 <__retarget_lock_release_recursive>
 800b5a4:	89ab      	ldrh	r3, [r5, #12]
 800b5a6:	065b      	lsls	r3, r3, #25
 800b5a8:	f53f af12 	bmi.w	800b3d0 <_vfiprintf_r+0x4c>
 800b5ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5ae:	e711      	b.n	800b3d4 <_vfiprintf_r+0x50>
 800b5b0:	ab03      	add	r3, sp, #12
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	462a      	mov	r2, r5
 800b5b6:	4b09      	ldr	r3, [pc, #36]	; (800b5dc <_vfiprintf_r+0x258>)
 800b5b8:	a904      	add	r1, sp, #16
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	f7fe f860 	bl	8009680 <_printf_i>
 800b5c0:	e7e4      	b.n	800b58c <_vfiprintf_r+0x208>
 800b5c2:	bf00      	nop
 800b5c4:	0800c214 	.word	0x0800c214
 800b5c8:	0800c234 	.word	0x0800c234
 800b5cc:	0800c1f4 	.word	0x0800c1f4
 800b5d0:	0800c09c 	.word	0x0800c09c
 800b5d4:	0800c0a6 	.word	0x0800c0a6
 800b5d8:	08009139 	.word	0x08009139
 800b5dc:	0800b361 	.word	0x0800b361
 800b5e0:	0800c0a2 	.word	0x0800c0a2

0800b5e4 <__swbuf_r>:
 800b5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e6:	460e      	mov	r6, r1
 800b5e8:	4614      	mov	r4, r2
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	b118      	cbz	r0, 800b5f6 <__swbuf_r+0x12>
 800b5ee:	6983      	ldr	r3, [r0, #24]
 800b5f0:	b90b      	cbnz	r3, 800b5f6 <__swbuf_r+0x12>
 800b5f2:	f000 f9e7 	bl	800b9c4 <__sinit>
 800b5f6:	4b21      	ldr	r3, [pc, #132]	; (800b67c <__swbuf_r+0x98>)
 800b5f8:	429c      	cmp	r4, r3
 800b5fa:	d12b      	bne.n	800b654 <__swbuf_r+0x70>
 800b5fc:	686c      	ldr	r4, [r5, #4]
 800b5fe:	69a3      	ldr	r3, [r4, #24]
 800b600:	60a3      	str	r3, [r4, #8]
 800b602:	89a3      	ldrh	r3, [r4, #12]
 800b604:	071a      	lsls	r2, r3, #28
 800b606:	d52f      	bpl.n	800b668 <__swbuf_r+0x84>
 800b608:	6923      	ldr	r3, [r4, #16]
 800b60a:	b36b      	cbz	r3, 800b668 <__swbuf_r+0x84>
 800b60c:	6923      	ldr	r3, [r4, #16]
 800b60e:	6820      	ldr	r0, [r4, #0]
 800b610:	1ac0      	subs	r0, r0, r3
 800b612:	6963      	ldr	r3, [r4, #20]
 800b614:	b2f6      	uxtb	r6, r6
 800b616:	4283      	cmp	r3, r0
 800b618:	4637      	mov	r7, r6
 800b61a:	dc04      	bgt.n	800b626 <__swbuf_r+0x42>
 800b61c:	4621      	mov	r1, r4
 800b61e:	4628      	mov	r0, r5
 800b620:	f000 f93c 	bl	800b89c <_fflush_r>
 800b624:	bb30      	cbnz	r0, 800b674 <__swbuf_r+0x90>
 800b626:	68a3      	ldr	r3, [r4, #8]
 800b628:	3b01      	subs	r3, #1
 800b62a:	60a3      	str	r3, [r4, #8]
 800b62c:	6823      	ldr	r3, [r4, #0]
 800b62e:	1c5a      	adds	r2, r3, #1
 800b630:	6022      	str	r2, [r4, #0]
 800b632:	701e      	strb	r6, [r3, #0]
 800b634:	6963      	ldr	r3, [r4, #20]
 800b636:	3001      	adds	r0, #1
 800b638:	4283      	cmp	r3, r0
 800b63a:	d004      	beq.n	800b646 <__swbuf_r+0x62>
 800b63c:	89a3      	ldrh	r3, [r4, #12]
 800b63e:	07db      	lsls	r3, r3, #31
 800b640:	d506      	bpl.n	800b650 <__swbuf_r+0x6c>
 800b642:	2e0a      	cmp	r6, #10
 800b644:	d104      	bne.n	800b650 <__swbuf_r+0x6c>
 800b646:	4621      	mov	r1, r4
 800b648:	4628      	mov	r0, r5
 800b64a:	f000 f927 	bl	800b89c <_fflush_r>
 800b64e:	b988      	cbnz	r0, 800b674 <__swbuf_r+0x90>
 800b650:	4638      	mov	r0, r7
 800b652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b654:	4b0a      	ldr	r3, [pc, #40]	; (800b680 <__swbuf_r+0x9c>)
 800b656:	429c      	cmp	r4, r3
 800b658:	d101      	bne.n	800b65e <__swbuf_r+0x7a>
 800b65a:	68ac      	ldr	r4, [r5, #8]
 800b65c:	e7cf      	b.n	800b5fe <__swbuf_r+0x1a>
 800b65e:	4b09      	ldr	r3, [pc, #36]	; (800b684 <__swbuf_r+0xa0>)
 800b660:	429c      	cmp	r4, r3
 800b662:	bf08      	it	eq
 800b664:	68ec      	ldreq	r4, [r5, #12]
 800b666:	e7ca      	b.n	800b5fe <__swbuf_r+0x1a>
 800b668:	4621      	mov	r1, r4
 800b66a:	4628      	mov	r0, r5
 800b66c:	f000 f81a 	bl	800b6a4 <__swsetup_r>
 800b670:	2800      	cmp	r0, #0
 800b672:	d0cb      	beq.n	800b60c <__swbuf_r+0x28>
 800b674:	f04f 37ff 	mov.w	r7, #4294967295
 800b678:	e7ea      	b.n	800b650 <__swbuf_r+0x6c>
 800b67a:	bf00      	nop
 800b67c:	0800c214 	.word	0x0800c214
 800b680:	0800c234 	.word	0x0800c234
 800b684:	0800c1f4 	.word	0x0800c1f4

0800b688 <__ascii_wctomb>:
 800b688:	b149      	cbz	r1, 800b69e <__ascii_wctomb+0x16>
 800b68a:	2aff      	cmp	r2, #255	; 0xff
 800b68c:	bf85      	ittet	hi
 800b68e:	238a      	movhi	r3, #138	; 0x8a
 800b690:	6003      	strhi	r3, [r0, #0]
 800b692:	700a      	strbls	r2, [r1, #0]
 800b694:	f04f 30ff 	movhi.w	r0, #4294967295
 800b698:	bf98      	it	ls
 800b69a:	2001      	movls	r0, #1
 800b69c:	4770      	bx	lr
 800b69e:	4608      	mov	r0, r1
 800b6a0:	4770      	bx	lr
	...

0800b6a4 <__swsetup_r>:
 800b6a4:	4b32      	ldr	r3, [pc, #200]	; (800b770 <__swsetup_r+0xcc>)
 800b6a6:	b570      	push	{r4, r5, r6, lr}
 800b6a8:	681d      	ldr	r5, [r3, #0]
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	460c      	mov	r4, r1
 800b6ae:	b125      	cbz	r5, 800b6ba <__swsetup_r+0x16>
 800b6b0:	69ab      	ldr	r3, [r5, #24]
 800b6b2:	b913      	cbnz	r3, 800b6ba <__swsetup_r+0x16>
 800b6b4:	4628      	mov	r0, r5
 800b6b6:	f000 f985 	bl	800b9c4 <__sinit>
 800b6ba:	4b2e      	ldr	r3, [pc, #184]	; (800b774 <__swsetup_r+0xd0>)
 800b6bc:	429c      	cmp	r4, r3
 800b6be:	d10f      	bne.n	800b6e0 <__swsetup_r+0x3c>
 800b6c0:	686c      	ldr	r4, [r5, #4]
 800b6c2:	89a3      	ldrh	r3, [r4, #12]
 800b6c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6c8:	0719      	lsls	r1, r3, #28
 800b6ca:	d42c      	bmi.n	800b726 <__swsetup_r+0x82>
 800b6cc:	06dd      	lsls	r5, r3, #27
 800b6ce:	d411      	bmi.n	800b6f4 <__swsetup_r+0x50>
 800b6d0:	2309      	movs	r3, #9
 800b6d2:	6033      	str	r3, [r6, #0]
 800b6d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6d8:	81a3      	strh	r3, [r4, #12]
 800b6da:	f04f 30ff 	mov.w	r0, #4294967295
 800b6de:	e03e      	b.n	800b75e <__swsetup_r+0xba>
 800b6e0:	4b25      	ldr	r3, [pc, #148]	; (800b778 <__swsetup_r+0xd4>)
 800b6e2:	429c      	cmp	r4, r3
 800b6e4:	d101      	bne.n	800b6ea <__swsetup_r+0x46>
 800b6e6:	68ac      	ldr	r4, [r5, #8]
 800b6e8:	e7eb      	b.n	800b6c2 <__swsetup_r+0x1e>
 800b6ea:	4b24      	ldr	r3, [pc, #144]	; (800b77c <__swsetup_r+0xd8>)
 800b6ec:	429c      	cmp	r4, r3
 800b6ee:	bf08      	it	eq
 800b6f0:	68ec      	ldreq	r4, [r5, #12]
 800b6f2:	e7e6      	b.n	800b6c2 <__swsetup_r+0x1e>
 800b6f4:	0758      	lsls	r0, r3, #29
 800b6f6:	d512      	bpl.n	800b71e <__swsetup_r+0x7a>
 800b6f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6fa:	b141      	cbz	r1, 800b70e <__swsetup_r+0x6a>
 800b6fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b700:	4299      	cmp	r1, r3
 800b702:	d002      	beq.n	800b70a <__swsetup_r+0x66>
 800b704:	4630      	mov	r0, r6
 800b706:	f7ff fb31 	bl	800ad6c <_free_r>
 800b70a:	2300      	movs	r3, #0
 800b70c:	6363      	str	r3, [r4, #52]	; 0x34
 800b70e:	89a3      	ldrh	r3, [r4, #12]
 800b710:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b714:	81a3      	strh	r3, [r4, #12]
 800b716:	2300      	movs	r3, #0
 800b718:	6063      	str	r3, [r4, #4]
 800b71a:	6923      	ldr	r3, [r4, #16]
 800b71c:	6023      	str	r3, [r4, #0]
 800b71e:	89a3      	ldrh	r3, [r4, #12]
 800b720:	f043 0308 	orr.w	r3, r3, #8
 800b724:	81a3      	strh	r3, [r4, #12]
 800b726:	6923      	ldr	r3, [r4, #16]
 800b728:	b94b      	cbnz	r3, 800b73e <__swsetup_r+0x9a>
 800b72a:	89a3      	ldrh	r3, [r4, #12]
 800b72c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b734:	d003      	beq.n	800b73e <__swsetup_r+0x9a>
 800b736:	4621      	mov	r1, r4
 800b738:	4630      	mov	r0, r6
 800b73a:	f000 fa09 	bl	800bb50 <__smakebuf_r>
 800b73e:	89a0      	ldrh	r0, [r4, #12]
 800b740:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b744:	f010 0301 	ands.w	r3, r0, #1
 800b748:	d00a      	beq.n	800b760 <__swsetup_r+0xbc>
 800b74a:	2300      	movs	r3, #0
 800b74c:	60a3      	str	r3, [r4, #8]
 800b74e:	6963      	ldr	r3, [r4, #20]
 800b750:	425b      	negs	r3, r3
 800b752:	61a3      	str	r3, [r4, #24]
 800b754:	6923      	ldr	r3, [r4, #16]
 800b756:	b943      	cbnz	r3, 800b76a <__swsetup_r+0xc6>
 800b758:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b75c:	d1ba      	bne.n	800b6d4 <__swsetup_r+0x30>
 800b75e:	bd70      	pop	{r4, r5, r6, pc}
 800b760:	0781      	lsls	r1, r0, #30
 800b762:	bf58      	it	pl
 800b764:	6963      	ldrpl	r3, [r4, #20]
 800b766:	60a3      	str	r3, [r4, #8]
 800b768:	e7f4      	b.n	800b754 <__swsetup_r+0xb0>
 800b76a:	2000      	movs	r0, #0
 800b76c:	e7f7      	b.n	800b75e <__swsetup_r+0xba>
 800b76e:	bf00      	nop
 800b770:	2000000c 	.word	0x2000000c
 800b774:	0800c214 	.word	0x0800c214
 800b778:	0800c234 	.word	0x0800c234
 800b77c:	0800c1f4 	.word	0x0800c1f4

0800b780 <abort>:
 800b780:	b508      	push	{r3, lr}
 800b782:	2006      	movs	r0, #6
 800b784:	f000 fa54 	bl	800bc30 <raise>
 800b788:	2001      	movs	r0, #1
 800b78a:	f7f6 fc3d 	bl	8002008 <_exit>
	...

0800b790 <__sflush_r>:
 800b790:	898a      	ldrh	r2, [r1, #12]
 800b792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b796:	4605      	mov	r5, r0
 800b798:	0710      	lsls	r0, r2, #28
 800b79a:	460c      	mov	r4, r1
 800b79c:	d458      	bmi.n	800b850 <__sflush_r+0xc0>
 800b79e:	684b      	ldr	r3, [r1, #4]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	dc05      	bgt.n	800b7b0 <__sflush_r+0x20>
 800b7a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	dc02      	bgt.n	800b7b0 <__sflush_r+0x20>
 800b7aa:	2000      	movs	r0, #0
 800b7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7b2:	2e00      	cmp	r6, #0
 800b7b4:	d0f9      	beq.n	800b7aa <__sflush_r+0x1a>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7bc:	682f      	ldr	r7, [r5, #0]
 800b7be:	602b      	str	r3, [r5, #0]
 800b7c0:	d032      	beq.n	800b828 <__sflush_r+0x98>
 800b7c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7c4:	89a3      	ldrh	r3, [r4, #12]
 800b7c6:	075a      	lsls	r2, r3, #29
 800b7c8:	d505      	bpl.n	800b7d6 <__sflush_r+0x46>
 800b7ca:	6863      	ldr	r3, [r4, #4]
 800b7cc:	1ac0      	subs	r0, r0, r3
 800b7ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7d0:	b10b      	cbz	r3, 800b7d6 <__sflush_r+0x46>
 800b7d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7d4:	1ac0      	subs	r0, r0, r3
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	4602      	mov	r2, r0
 800b7da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7dc:	6a21      	ldr	r1, [r4, #32]
 800b7de:	4628      	mov	r0, r5
 800b7e0:	47b0      	blx	r6
 800b7e2:	1c43      	adds	r3, r0, #1
 800b7e4:	89a3      	ldrh	r3, [r4, #12]
 800b7e6:	d106      	bne.n	800b7f6 <__sflush_r+0x66>
 800b7e8:	6829      	ldr	r1, [r5, #0]
 800b7ea:	291d      	cmp	r1, #29
 800b7ec:	d82c      	bhi.n	800b848 <__sflush_r+0xb8>
 800b7ee:	4a2a      	ldr	r2, [pc, #168]	; (800b898 <__sflush_r+0x108>)
 800b7f0:	40ca      	lsrs	r2, r1
 800b7f2:	07d6      	lsls	r6, r2, #31
 800b7f4:	d528      	bpl.n	800b848 <__sflush_r+0xb8>
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	6062      	str	r2, [r4, #4]
 800b7fa:	04d9      	lsls	r1, r3, #19
 800b7fc:	6922      	ldr	r2, [r4, #16]
 800b7fe:	6022      	str	r2, [r4, #0]
 800b800:	d504      	bpl.n	800b80c <__sflush_r+0x7c>
 800b802:	1c42      	adds	r2, r0, #1
 800b804:	d101      	bne.n	800b80a <__sflush_r+0x7a>
 800b806:	682b      	ldr	r3, [r5, #0]
 800b808:	b903      	cbnz	r3, 800b80c <__sflush_r+0x7c>
 800b80a:	6560      	str	r0, [r4, #84]	; 0x54
 800b80c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b80e:	602f      	str	r7, [r5, #0]
 800b810:	2900      	cmp	r1, #0
 800b812:	d0ca      	beq.n	800b7aa <__sflush_r+0x1a>
 800b814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b818:	4299      	cmp	r1, r3
 800b81a:	d002      	beq.n	800b822 <__sflush_r+0x92>
 800b81c:	4628      	mov	r0, r5
 800b81e:	f7ff faa5 	bl	800ad6c <_free_r>
 800b822:	2000      	movs	r0, #0
 800b824:	6360      	str	r0, [r4, #52]	; 0x34
 800b826:	e7c1      	b.n	800b7ac <__sflush_r+0x1c>
 800b828:	6a21      	ldr	r1, [r4, #32]
 800b82a:	2301      	movs	r3, #1
 800b82c:	4628      	mov	r0, r5
 800b82e:	47b0      	blx	r6
 800b830:	1c41      	adds	r1, r0, #1
 800b832:	d1c7      	bne.n	800b7c4 <__sflush_r+0x34>
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d0c4      	beq.n	800b7c4 <__sflush_r+0x34>
 800b83a:	2b1d      	cmp	r3, #29
 800b83c:	d001      	beq.n	800b842 <__sflush_r+0xb2>
 800b83e:	2b16      	cmp	r3, #22
 800b840:	d101      	bne.n	800b846 <__sflush_r+0xb6>
 800b842:	602f      	str	r7, [r5, #0]
 800b844:	e7b1      	b.n	800b7aa <__sflush_r+0x1a>
 800b846:	89a3      	ldrh	r3, [r4, #12]
 800b848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b84c:	81a3      	strh	r3, [r4, #12]
 800b84e:	e7ad      	b.n	800b7ac <__sflush_r+0x1c>
 800b850:	690f      	ldr	r7, [r1, #16]
 800b852:	2f00      	cmp	r7, #0
 800b854:	d0a9      	beq.n	800b7aa <__sflush_r+0x1a>
 800b856:	0793      	lsls	r3, r2, #30
 800b858:	680e      	ldr	r6, [r1, #0]
 800b85a:	bf08      	it	eq
 800b85c:	694b      	ldreq	r3, [r1, #20]
 800b85e:	600f      	str	r7, [r1, #0]
 800b860:	bf18      	it	ne
 800b862:	2300      	movne	r3, #0
 800b864:	eba6 0807 	sub.w	r8, r6, r7
 800b868:	608b      	str	r3, [r1, #8]
 800b86a:	f1b8 0f00 	cmp.w	r8, #0
 800b86e:	dd9c      	ble.n	800b7aa <__sflush_r+0x1a>
 800b870:	6a21      	ldr	r1, [r4, #32]
 800b872:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b874:	4643      	mov	r3, r8
 800b876:	463a      	mov	r2, r7
 800b878:	4628      	mov	r0, r5
 800b87a:	47b0      	blx	r6
 800b87c:	2800      	cmp	r0, #0
 800b87e:	dc06      	bgt.n	800b88e <__sflush_r+0xfe>
 800b880:	89a3      	ldrh	r3, [r4, #12]
 800b882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b886:	81a3      	strh	r3, [r4, #12]
 800b888:	f04f 30ff 	mov.w	r0, #4294967295
 800b88c:	e78e      	b.n	800b7ac <__sflush_r+0x1c>
 800b88e:	4407      	add	r7, r0
 800b890:	eba8 0800 	sub.w	r8, r8, r0
 800b894:	e7e9      	b.n	800b86a <__sflush_r+0xda>
 800b896:	bf00      	nop
 800b898:	20400001 	.word	0x20400001

0800b89c <_fflush_r>:
 800b89c:	b538      	push	{r3, r4, r5, lr}
 800b89e:	690b      	ldr	r3, [r1, #16]
 800b8a0:	4605      	mov	r5, r0
 800b8a2:	460c      	mov	r4, r1
 800b8a4:	b913      	cbnz	r3, 800b8ac <_fflush_r+0x10>
 800b8a6:	2500      	movs	r5, #0
 800b8a8:	4628      	mov	r0, r5
 800b8aa:	bd38      	pop	{r3, r4, r5, pc}
 800b8ac:	b118      	cbz	r0, 800b8b6 <_fflush_r+0x1a>
 800b8ae:	6983      	ldr	r3, [r0, #24]
 800b8b0:	b90b      	cbnz	r3, 800b8b6 <_fflush_r+0x1a>
 800b8b2:	f000 f887 	bl	800b9c4 <__sinit>
 800b8b6:	4b14      	ldr	r3, [pc, #80]	; (800b908 <_fflush_r+0x6c>)
 800b8b8:	429c      	cmp	r4, r3
 800b8ba:	d11b      	bne.n	800b8f4 <_fflush_r+0x58>
 800b8bc:	686c      	ldr	r4, [r5, #4]
 800b8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d0ef      	beq.n	800b8a6 <_fflush_r+0xa>
 800b8c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8c8:	07d0      	lsls	r0, r2, #31
 800b8ca:	d404      	bmi.n	800b8d6 <_fflush_r+0x3a>
 800b8cc:	0599      	lsls	r1, r3, #22
 800b8ce:	d402      	bmi.n	800b8d6 <_fflush_r+0x3a>
 800b8d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8d2:	f000 f915 	bl	800bb00 <__retarget_lock_acquire_recursive>
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	4621      	mov	r1, r4
 800b8da:	f7ff ff59 	bl	800b790 <__sflush_r>
 800b8de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8e0:	07da      	lsls	r2, r3, #31
 800b8e2:	4605      	mov	r5, r0
 800b8e4:	d4e0      	bmi.n	800b8a8 <_fflush_r+0xc>
 800b8e6:	89a3      	ldrh	r3, [r4, #12]
 800b8e8:	059b      	lsls	r3, r3, #22
 800b8ea:	d4dd      	bmi.n	800b8a8 <_fflush_r+0xc>
 800b8ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8ee:	f000 f908 	bl	800bb02 <__retarget_lock_release_recursive>
 800b8f2:	e7d9      	b.n	800b8a8 <_fflush_r+0xc>
 800b8f4:	4b05      	ldr	r3, [pc, #20]	; (800b90c <_fflush_r+0x70>)
 800b8f6:	429c      	cmp	r4, r3
 800b8f8:	d101      	bne.n	800b8fe <_fflush_r+0x62>
 800b8fa:	68ac      	ldr	r4, [r5, #8]
 800b8fc:	e7df      	b.n	800b8be <_fflush_r+0x22>
 800b8fe:	4b04      	ldr	r3, [pc, #16]	; (800b910 <_fflush_r+0x74>)
 800b900:	429c      	cmp	r4, r3
 800b902:	bf08      	it	eq
 800b904:	68ec      	ldreq	r4, [r5, #12]
 800b906:	e7da      	b.n	800b8be <_fflush_r+0x22>
 800b908:	0800c214 	.word	0x0800c214
 800b90c:	0800c234 	.word	0x0800c234
 800b910:	0800c1f4 	.word	0x0800c1f4

0800b914 <std>:
 800b914:	2300      	movs	r3, #0
 800b916:	b510      	push	{r4, lr}
 800b918:	4604      	mov	r4, r0
 800b91a:	e9c0 3300 	strd	r3, r3, [r0]
 800b91e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b922:	6083      	str	r3, [r0, #8]
 800b924:	8181      	strh	r1, [r0, #12]
 800b926:	6643      	str	r3, [r0, #100]	; 0x64
 800b928:	81c2      	strh	r2, [r0, #14]
 800b92a:	6183      	str	r3, [r0, #24]
 800b92c:	4619      	mov	r1, r3
 800b92e:	2208      	movs	r2, #8
 800b930:	305c      	adds	r0, #92	; 0x5c
 800b932:	f7fd fb59 	bl	8008fe8 <memset>
 800b936:	4b05      	ldr	r3, [pc, #20]	; (800b94c <std+0x38>)
 800b938:	6263      	str	r3, [r4, #36]	; 0x24
 800b93a:	4b05      	ldr	r3, [pc, #20]	; (800b950 <std+0x3c>)
 800b93c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b93e:	4b05      	ldr	r3, [pc, #20]	; (800b954 <std+0x40>)
 800b940:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b942:	4b05      	ldr	r3, [pc, #20]	; (800b958 <std+0x44>)
 800b944:	6224      	str	r4, [r4, #32]
 800b946:	6323      	str	r3, [r4, #48]	; 0x30
 800b948:	bd10      	pop	{r4, pc}
 800b94a:	bf00      	nop
 800b94c:	0800bc69 	.word	0x0800bc69
 800b950:	0800bc8b 	.word	0x0800bc8b
 800b954:	0800bcc3 	.word	0x0800bcc3
 800b958:	0800bce7 	.word	0x0800bce7

0800b95c <_cleanup_r>:
 800b95c:	4901      	ldr	r1, [pc, #4]	; (800b964 <_cleanup_r+0x8>)
 800b95e:	f000 b8af 	b.w	800bac0 <_fwalk_reent>
 800b962:	bf00      	nop
 800b964:	0800b89d 	.word	0x0800b89d

0800b968 <__sfmoreglue>:
 800b968:	b570      	push	{r4, r5, r6, lr}
 800b96a:	2268      	movs	r2, #104	; 0x68
 800b96c:	1e4d      	subs	r5, r1, #1
 800b96e:	4355      	muls	r5, r2
 800b970:	460e      	mov	r6, r1
 800b972:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b976:	f7ff fa65 	bl	800ae44 <_malloc_r>
 800b97a:	4604      	mov	r4, r0
 800b97c:	b140      	cbz	r0, 800b990 <__sfmoreglue+0x28>
 800b97e:	2100      	movs	r1, #0
 800b980:	e9c0 1600 	strd	r1, r6, [r0]
 800b984:	300c      	adds	r0, #12
 800b986:	60a0      	str	r0, [r4, #8]
 800b988:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b98c:	f7fd fb2c 	bl	8008fe8 <memset>
 800b990:	4620      	mov	r0, r4
 800b992:	bd70      	pop	{r4, r5, r6, pc}

0800b994 <__sfp_lock_acquire>:
 800b994:	4801      	ldr	r0, [pc, #4]	; (800b99c <__sfp_lock_acquire+0x8>)
 800b996:	f000 b8b3 	b.w	800bb00 <__retarget_lock_acquire_recursive>
 800b99a:	bf00      	nop
 800b99c:	20000505 	.word	0x20000505

0800b9a0 <__sfp_lock_release>:
 800b9a0:	4801      	ldr	r0, [pc, #4]	; (800b9a8 <__sfp_lock_release+0x8>)
 800b9a2:	f000 b8ae 	b.w	800bb02 <__retarget_lock_release_recursive>
 800b9a6:	bf00      	nop
 800b9a8:	20000505 	.word	0x20000505

0800b9ac <__sinit_lock_acquire>:
 800b9ac:	4801      	ldr	r0, [pc, #4]	; (800b9b4 <__sinit_lock_acquire+0x8>)
 800b9ae:	f000 b8a7 	b.w	800bb00 <__retarget_lock_acquire_recursive>
 800b9b2:	bf00      	nop
 800b9b4:	20000506 	.word	0x20000506

0800b9b8 <__sinit_lock_release>:
 800b9b8:	4801      	ldr	r0, [pc, #4]	; (800b9c0 <__sinit_lock_release+0x8>)
 800b9ba:	f000 b8a2 	b.w	800bb02 <__retarget_lock_release_recursive>
 800b9be:	bf00      	nop
 800b9c0:	20000506 	.word	0x20000506

0800b9c4 <__sinit>:
 800b9c4:	b510      	push	{r4, lr}
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	f7ff fff0 	bl	800b9ac <__sinit_lock_acquire>
 800b9cc:	69a3      	ldr	r3, [r4, #24]
 800b9ce:	b11b      	cbz	r3, 800b9d8 <__sinit+0x14>
 800b9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9d4:	f7ff bff0 	b.w	800b9b8 <__sinit_lock_release>
 800b9d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b9dc:	6523      	str	r3, [r4, #80]	; 0x50
 800b9de:	4b13      	ldr	r3, [pc, #76]	; (800ba2c <__sinit+0x68>)
 800b9e0:	4a13      	ldr	r2, [pc, #76]	; (800ba30 <__sinit+0x6c>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b9e6:	42a3      	cmp	r3, r4
 800b9e8:	bf04      	itt	eq
 800b9ea:	2301      	moveq	r3, #1
 800b9ec:	61a3      	streq	r3, [r4, #24]
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f000 f820 	bl	800ba34 <__sfp>
 800b9f4:	6060      	str	r0, [r4, #4]
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f000 f81c 	bl	800ba34 <__sfp>
 800b9fc:	60a0      	str	r0, [r4, #8]
 800b9fe:	4620      	mov	r0, r4
 800ba00:	f000 f818 	bl	800ba34 <__sfp>
 800ba04:	2200      	movs	r2, #0
 800ba06:	60e0      	str	r0, [r4, #12]
 800ba08:	2104      	movs	r1, #4
 800ba0a:	6860      	ldr	r0, [r4, #4]
 800ba0c:	f7ff ff82 	bl	800b914 <std>
 800ba10:	68a0      	ldr	r0, [r4, #8]
 800ba12:	2201      	movs	r2, #1
 800ba14:	2109      	movs	r1, #9
 800ba16:	f7ff ff7d 	bl	800b914 <std>
 800ba1a:	68e0      	ldr	r0, [r4, #12]
 800ba1c:	2202      	movs	r2, #2
 800ba1e:	2112      	movs	r1, #18
 800ba20:	f7ff ff78 	bl	800b914 <std>
 800ba24:	2301      	movs	r3, #1
 800ba26:	61a3      	str	r3, [r4, #24]
 800ba28:	e7d2      	b.n	800b9d0 <__sinit+0xc>
 800ba2a:	bf00      	nop
 800ba2c:	0800be7c 	.word	0x0800be7c
 800ba30:	0800b95d 	.word	0x0800b95d

0800ba34 <__sfp>:
 800ba34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba36:	4607      	mov	r7, r0
 800ba38:	f7ff ffac 	bl	800b994 <__sfp_lock_acquire>
 800ba3c:	4b1e      	ldr	r3, [pc, #120]	; (800bab8 <__sfp+0x84>)
 800ba3e:	681e      	ldr	r6, [r3, #0]
 800ba40:	69b3      	ldr	r3, [r6, #24]
 800ba42:	b913      	cbnz	r3, 800ba4a <__sfp+0x16>
 800ba44:	4630      	mov	r0, r6
 800ba46:	f7ff ffbd 	bl	800b9c4 <__sinit>
 800ba4a:	3648      	adds	r6, #72	; 0x48
 800ba4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba50:	3b01      	subs	r3, #1
 800ba52:	d503      	bpl.n	800ba5c <__sfp+0x28>
 800ba54:	6833      	ldr	r3, [r6, #0]
 800ba56:	b30b      	cbz	r3, 800ba9c <__sfp+0x68>
 800ba58:	6836      	ldr	r6, [r6, #0]
 800ba5a:	e7f7      	b.n	800ba4c <__sfp+0x18>
 800ba5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba60:	b9d5      	cbnz	r5, 800ba98 <__sfp+0x64>
 800ba62:	4b16      	ldr	r3, [pc, #88]	; (800babc <__sfp+0x88>)
 800ba64:	60e3      	str	r3, [r4, #12]
 800ba66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba6a:	6665      	str	r5, [r4, #100]	; 0x64
 800ba6c:	f000 f847 	bl	800bafe <__retarget_lock_init_recursive>
 800ba70:	f7ff ff96 	bl	800b9a0 <__sfp_lock_release>
 800ba74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba7c:	6025      	str	r5, [r4, #0]
 800ba7e:	61a5      	str	r5, [r4, #24]
 800ba80:	2208      	movs	r2, #8
 800ba82:	4629      	mov	r1, r5
 800ba84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba88:	f7fd faae 	bl	8008fe8 <memset>
 800ba8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba94:	4620      	mov	r0, r4
 800ba96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba98:	3468      	adds	r4, #104	; 0x68
 800ba9a:	e7d9      	b.n	800ba50 <__sfp+0x1c>
 800ba9c:	2104      	movs	r1, #4
 800ba9e:	4638      	mov	r0, r7
 800baa0:	f7ff ff62 	bl	800b968 <__sfmoreglue>
 800baa4:	4604      	mov	r4, r0
 800baa6:	6030      	str	r0, [r6, #0]
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d1d5      	bne.n	800ba58 <__sfp+0x24>
 800baac:	f7ff ff78 	bl	800b9a0 <__sfp_lock_release>
 800bab0:	230c      	movs	r3, #12
 800bab2:	603b      	str	r3, [r7, #0]
 800bab4:	e7ee      	b.n	800ba94 <__sfp+0x60>
 800bab6:	bf00      	nop
 800bab8:	0800be7c 	.word	0x0800be7c
 800babc:	ffff0001 	.word	0xffff0001

0800bac0 <_fwalk_reent>:
 800bac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bac4:	4606      	mov	r6, r0
 800bac6:	4688      	mov	r8, r1
 800bac8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bacc:	2700      	movs	r7, #0
 800bace:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bad2:	f1b9 0901 	subs.w	r9, r9, #1
 800bad6:	d505      	bpl.n	800bae4 <_fwalk_reent+0x24>
 800bad8:	6824      	ldr	r4, [r4, #0]
 800bada:	2c00      	cmp	r4, #0
 800badc:	d1f7      	bne.n	800bace <_fwalk_reent+0xe>
 800bade:	4638      	mov	r0, r7
 800bae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bae4:	89ab      	ldrh	r3, [r5, #12]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d907      	bls.n	800bafa <_fwalk_reent+0x3a>
 800baea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800baee:	3301      	adds	r3, #1
 800baf0:	d003      	beq.n	800bafa <_fwalk_reent+0x3a>
 800baf2:	4629      	mov	r1, r5
 800baf4:	4630      	mov	r0, r6
 800baf6:	47c0      	blx	r8
 800baf8:	4307      	orrs	r7, r0
 800bafa:	3568      	adds	r5, #104	; 0x68
 800bafc:	e7e9      	b.n	800bad2 <_fwalk_reent+0x12>

0800bafe <__retarget_lock_init_recursive>:
 800bafe:	4770      	bx	lr

0800bb00 <__retarget_lock_acquire_recursive>:
 800bb00:	4770      	bx	lr

0800bb02 <__retarget_lock_release_recursive>:
 800bb02:	4770      	bx	lr

0800bb04 <__swhatbuf_r>:
 800bb04:	b570      	push	{r4, r5, r6, lr}
 800bb06:	460e      	mov	r6, r1
 800bb08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb0c:	2900      	cmp	r1, #0
 800bb0e:	b096      	sub	sp, #88	; 0x58
 800bb10:	4614      	mov	r4, r2
 800bb12:	461d      	mov	r5, r3
 800bb14:	da08      	bge.n	800bb28 <__swhatbuf_r+0x24>
 800bb16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	602a      	str	r2, [r5, #0]
 800bb1e:	061a      	lsls	r2, r3, #24
 800bb20:	d410      	bmi.n	800bb44 <__swhatbuf_r+0x40>
 800bb22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb26:	e00e      	b.n	800bb46 <__swhatbuf_r+0x42>
 800bb28:	466a      	mov	r2, sp
 800bb2a:	f000 f903 	bl	800bd34 <_fstat_r>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	dbf1      	blt.n	800bb16 <__swhatbuf_r+0x12>
 800bb32:	9a01      	ldr	r2, [sp, #4]
 800bb34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb3c:	425a      	negs	r2, r3
 800bb3e:	415a      	adcs	r2, r3
 800bb40:	602a      	str	r2, [r5, #0]
 800bb42:	e7ee      	b.n	800bb22 <__swhatbuf_r+0x1e>
 800bb44:	2340      	movs	r3, #64	; 0x40
 800bb46:	2000      	movs	r0, #0
 800bb48:	6023      	str	r3, [r4, #0]
 800bb4a:	b016      	add	sp, #88	; 0x58
 800bb4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bb50 <__smakebuf_r>:
 800bb50:	898b      	ldrh	r3, [r1, #12]
 800bb52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb54:	079d      	lsls	r5, r3, #30
 800bb56:	4606      	mov	r6, r0
 800bb58:	460c      	mov	r4, r1
 800bb5a:	d507      	bpl.n	800bb6c <__smakebuf_r+0x1c>
 800bb5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	6123      	str	r3, [r4, #16]
 800bb64:	2301      	movs	r3, #1
 800bb66:	6163      	str	r3, [r4, #20]
 800bb68:	b002      	add	sp, #8
 800bb6a:	bd70      	pop	{r4, r5, r6, pc}
 800bb6c:	ab01      	add	r3, sp, #4
 800bb6e:	466a      	mov	r2, sp
 800bb70:	f7ff ffc8 	bl	800bb04 <__swhatbuf_r>
 800bb74:	9900      	ldr	r1, [sp, #0]
 800bb76:	4605      	mov	r5, r0
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f7ff f963 	bl	800ae44 <_malloc_r>
 800bb7e:	b948      	cbnz	r0, 800bb94 <__smakebuf_r+0x44>
 800bb80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb84:	059a      	lsls	r2, r3, #22
 800bb86:	d4ef      	bmi.n	800bb68 <__smakebuf_r+0x18>
 800bb88:	f023 0303 	bic.w	r3, r3, #3
 800bb8c:	f043 0302 	orr.w	r3, r3, #2
 800bb90:	81a3      	strh	r3, [r4, #12]
 800bb92:	e7e3      	b.n	800bb5c <__smakebuf_r+0xc>
 800bb94:	4b0d      	ldr	r3, [pc, #52]	; (800bbcc <__smakebuf_r+0x7c>)
 800bb96:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb98:	89a3      	ldrh	r3, [r4, #12]
 800bb9a:	6020      	str	r0, [r4, #0]
 800bb9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bba0:	81a3      	strh	r3, [r4, #12]
 800bba2:	9b00      	ldr	r3, [sp, #0]
 800bba4:	6163      	str	r3, [r4, #20]
 800bba6:	9b01      	ldr	r3, [sp, #4]
 800bba8:	6120      	str	r0, [r4, #16]
 800bbaa:	b15b      	cbz	r3, 800bbc4 <__smakebuf_r+0x74>
 800bbac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	f000 f8d1 	bl	800bd58 <_isatty_r>
 800bbb6:	b128      	cbz	r0, 800bbc4 <__smakebuf_r+0x74>
 800bbb8:	89a3      	ldrh	r3, [r4, #12]
 800bbba:	f023 0303 	bic.w	r3, r3, #3
 800bbbe:	f043 0301 	orr.w	r3, r3, #1
 800bbc2:	81a3      	strh	r3, [r4, #12]
 800bbc4:	89a0      	ldrh	r0, [r4, #12]
 800bbc6:	4305      	orrs	r5, r0
 800bbc8:	81a5      	strh	r5, [r4, #12]
 800bbca:	e7cd      	b.n	800bb68 <__smakebuf_r+0x18>
 800bbcc:	0800b95d 	.word	0x0800b95d

0800bbd0 <_malloc_usable_size_r>:
 800bbd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbd4:	1f18      	subs	r0, r3, #4
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	bfbc      	itt	lt
 800bbda:	580b      	ldrlt	r3, [r1, r0]
 800bbdc:	18c0      	addlt	r0, r0, r3
 800bbde:	4770      	bx	lr

0800bbe0 <_raise_r>:
 800bbe0:	291f      	cmp	r1, #31
 800bbe2:	b538      	push	{r3, r4, r5, lr}
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	460d      	mov	r5, r1
 800bbe8:	d904      	bls.n	800bbf4 <_raise_r+0x14>
 800bbea:	2316      	movs	r3, #22
 800bbec:	6003      	str	r3, [r0, #0]
 800bbee:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf2:	bd38      	pop	{r3, r4, r5, pc}
 800bbf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbf6:	b112      	cbz	r2, 800bbfe <_raise_r+0x1e>
 800bbf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbfc:	b94b      	cbnz	r3, 800bc12 <_raise_r+0x32>
 800bbfe:	4620      	mov	r0, r4
 800bc00:	f000 f830 	bl	800bc64 <_getpid_r>
 800bc04:	462a      	mov	r2, r5
 800bc06:	4601      	mov	r1, r0
 800bc08:	4620      	mov	r0, r4
 800bc0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc0e:	f000 b817 	b.w	800bc40 <_kill_r>
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d00a      	beq.n	800bc2c <_raise_r+0x4c>
 800bc16:	1c59      	adds	r1, r3, #1
 800bc18:	d103      	bne.n	800bc22 <_raise_r+0x42>
 800bc1a:	2316      	movs	r3, #22
 800bc1c:	6003      	str	r3, [r0, #0]
 800bc1e:	2001      	movs	r0, #1
 800bc20:	e7e7      	b.n	800bbf2 <_raise_r+0x12>
 800bc22:	2400      	movs	r4, #0
 800bc24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc28:	4628      	mov	r0, r5
 800bc2a:	4798      	blx	r3
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	e7e0      	b.n	800bbf2 <_raise_r+0x12>

0800bc30 <raise>:
 800bc30:	4b02      	ldr	r3, [pc, #8]	; (800bc3c <raise+0xc>)
 800bc32:	4601      	mov	r1, r0
 800bc34:	6818      	ldr	r0, [r3, #0]
 800bc36:	f7ff bfd3 	b.w	800bbe0 <_raise_r>
 800bc3a:	bf00      	nop
 800bc3c:	2000000c 	.word	0x2000000c

0800bc40 <_kill_r>:
 800bc40:	b538      	push	{r3, r4, r5, lr}
 800bc42:	4d07      	ldr	r5, [pc, #28]	; (800bc60 <_kill_r+0x20>)
 800bc44:	2300      	movs	r3, #0
 800bc46:	4604      	mov	r4, r0
 800bc48:	4608      	mov	r0, r1
 800bc4a:	4611      	mov	r1, r2
 800bc4c:	602b      	str	r3, [r5, #0]
 800bc4e:	f7f6 f9cb 	bl	8001fe8 <_kill>
 800bc52:	1c43      	adds	r3, r0, #1
 800bc54:	d102      	bne.n	800bc5c <_kill_r+0x1c>
 800bc56:	682b      	ldr	r3, [r5, #0]
 800bc58:	b103      	cbz	r3, 800bc5c <_kill_r+0x1c>
 800bc5a:	6023      	str	r3, [r4, #0]
 800bc5c:	bd38      	pop	{r3, r4, r5, pc}
 800bc5e:	bf00      	nop
 800bc60:	20000500 	.word	0x20000500

0800bc64 <_getpid_r>:
 800bc64:	f7f6 b9b8 	b.w	8001fd8 <_getpid>

0800bc68 <__sread>:
 800bc68:	b510      	push	{r4, lr}
 800bc6a:	460c      	mov	r4, r1
 800bc6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc70:	f000 f894 	bl	800bd9c <_read_r>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	bfab      	itete	ge
 800bc78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc7a:	89a3      	ldrhlt	r3, [r4, #12]
 800bc7c:	181b      	addge	r3, r3, r0
 800bc7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc82:	bfac      	ite	ge
 800bc84:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc86:	81a3      	strhlt	r3, [r4, #12]
 800bc88:	bd10      	pop	{r4, pc}

0800bc8a <__swrite>:
 800bc8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc8e:	461f      	mov	r7, r3
 800bc90:	898b      	ldrh	r3, [r1, #12]
 800bc92:	05db      	lsls	r3, r3, #23
 800bc94:	4605      	mov	r5, r0
 800bc96:	460c      	mov	r4, r1
 800bc98:	4616      	mov	r6, r2
 800bc9a:	d505      	bpl.n	800bca8 <__swrite+0x1e>
 800bc9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bca0:	2302      	movs	r3, #2
 800bca2:	2200      	movs	r2, #0
 800bca4:	f000 f868 	bl	800bd78 <_lseek_r>
 800bca8:	89a3      	ldrh	r3, [r4, #12]
 800bcaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcb2:	81a3      	strh	r3, [r4, #12]
 800bcb4:	4632      	mov	r2, r6
 800bcb6:	463b      	mov	r3, r7
 800bcb8:	4628      	mov	r0, r5
 800bcba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcbe:	f000 b817 	b.w	800bcf0 <_write_r>

0800bcc2 <__sseek>:
 800bcc2:	b510      	push	{r4, lr}
 800bcc4:	460c      	mov	r4, r1
 800bcc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcca:	f000 f855 	bl	800bd78 <_lseek_r>
 800bcce:	1c43      	adds	r3, r0, #1
 800bcd0:	89a3      	ldrh	r3, [r4, #12]
 800bcd2:	bf15      	itete	ne
 800bcd4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bcd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bcda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bcde:	81a3      	strheq	r3, [r4, #12]
 800bce0:	bf18      	it	ne
 800bce2:	81a3      	strhne	r3, [r4, #12]
 800bce4:	bd10      	pop	{r4, pc}

0800bce6 <__sclose>:
 800bce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcea:	f000 b813 	b.w	800bd14 <_close_r>
	...

0800bcf0 <_write_r>:
 800bcf0:	b538      	push	{r3, r4, r5, lr}
 800bcf2:	4d07      	ldr	r5, [pc, #28]	; (800bd10 <_write_r+0x20>)
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	4608      	mov	r0, r1
 800bcf8:	4611      	mov	r1, r2
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	602a      	str	r2, [r5, #0]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	f7f6 f9a9 	bl	8002056 <_write>
 800bd04:	1c43      	adds	r3, r0, #1
 800bd06:	d102      	bne.n	800bd0e <_write_r+0x1e>
 800bd08:	682b      	ldr	r3, [r5, #0]
 800bd0a:	b103      	cbz	r3, 800bd0e <_write_r+0x1e>
 800bd0c:	6023      	str	r3, [r4, #0]
 800bd0e:	bd38      	pop	{r3, r4, r5, pc}
 800bd10:	20000500 	.word	0x20000500

0800bd14 <_close_r>:
 800bd14:	b538      	push	{r3, r4, r5, lr}
 800bd16:	4d06      	ldr	r5, [pc, #24]	; (800bd30 <_close_r+0x1c>)
 800bd18:	2300      	movs	r3, #0
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	4608      	mov	r0, r1
 800bd1e:	602b      	str	r3, [r5, #0]
 800bd20:	f7f6 f9b5 	bl	800208e <_close>
 800bd24:	1c43      	adds	r3, r0, #1
 800bd26:	d102      	bne.n	800bd2e <_close_r+0x1a>
 800bd28:	682b      	ldr	r3, [r5, #0]
 800bd2a:	b103      	cbz	r3, 800bd2e <_close_r+0x1a>
 800bd2c:	6023      	str	r3, [r4, #0]
 800bd2e:	bd38      	pop	{r3, r4, r5, pc}
 800bd30:	20000500 	.word	0x20000500

0800bd34 <_fstat_r>:
 800bd34:	b538      	push	{r3, r4, r5, lr}
 800bd36:	4d07      	ldr	r5, [pc, #28]	; (800bd54 <_fstat_r+0x20>)
 800bd38:	2300      	movs	r3, #0
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	4608      	mov	r0, r1
 800bd3e:	4611      	mov	r1, r2
 800bd40:	602b      	str	r3, [r5, #0]
 800bd42:	f7f6 f9b0 	bl	80020a6 <_fstat>
 800bd46:	1c43      	adds	r3, r0, #1
 800bd48:	d102      	bne.n	800bd50 <_fstat_r+0x1c>
 800bd4a:	682b      	ldr	r3, [r5, #0]
 800bd4c:	b103      	cbz	r3, 800bd50 <_fstat_r+0x1c>
 800bd4e:	6023      	str	r3, [r4, #0]
 800bd50:	bd38      	pop	{r3, r4, r5, pc}
 800bd52:	bf00      	nop
 800bd54:	20000500 	.word	0x20000500

0800bd58 <_isatty_r>:
 800bd58:	b538      	push	{r3, r4, r5, lr}
 800bd5a:	4d06      	ldr	r5, [pc, #24]	; (800bd74 <_isatty_r+0x1c>)
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	4604      	mov	r4, r0
 800bd60:	4608      	mov	r0, r1
 800bd62:	602b      	str	r3, [r5, #0]
 800bd64:	f7f6 f9af 	bl	80020c6 <_isatty>
 800bd68:	1c43      	adds	r3, r0, #1
 800bd6a:	d102      	bne.n	800bd72 <_isatty_r+0x1a>
 800bd6c:	682b      	ldr	r3, [r5, #0]
 800bd6e:	b103      	cbz	r3, 800bd72 <_isatty_r+0x1a>
 800bd70:	6023      	str	r3, [r4, #0]
 800bd72:	bd38      	pop	{r3, r4, r5, pc}
 800bd74:	20000500 	.word	0x20000500

0800bd78 <_lseek_r>:
 800bd78:	b538      	push	{r3, r4, r5, lr}
 800bd7a:	4d07      	ldr	r5, [pc, #28]	; (800bd98 <_lseek_r+0x20>)
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	4608      	mov	r0, r1
 800bd80:	4611      	mov	r1, r2
 800bd82:	2200      	movs	r2, #0
 800bd84:	602a      	str	r2, [r5, #0]
 800bd86:	461a      	mov	r2, r3
 800bd88:	f7f6 f9a8 	bl	80020dc <_lseek>
 800bd8c:	1c43      	adds	r3, r0, #1
 800bd8e:	d102      	bne.n	800bd96 <_lseek_r+0x1e>
 800bd90:	682b      	ldr	r3, [r5, #0]
 800bd92:	b103      	cbz	r3, 800bd96 <_lseek_r+0x1e>
 800bd94:	6023      	str	r3, [r4, #0]
 800bd96:	bd38      	pop	{r3, r4, r5, pc}
 800bd98:	20000500 	.word	0x20000500

0800bd9c <_read_r>:
 800bd9c:	b538      	push	{r3, r4, r5, lr}
 800bd9e:	4d07      	ldr	r5, [pc, #28]	; (800bdbc <_read_r+0x20>)
 800bda0:	4604      	mov	r4, r0
 800bda2:	4608      	mov	r0, r1
 800bda4:	4611      	mov	r1, r2
 800bda6:	2200      	movs	r2, #0
 800bda8:	602a      	str	r2, [r5, #0]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	f7f6 f936 	bl	800201c <_read>
 800bdb0:	1c43      	adds	r3, r0, #1
 800bdb2:	d102      	bne.n	800bdba <_read_r+0x1e>
 800bdb4:	682b      	ldr	r3, [r5, #0]
 800bdb6:	b103      	cbz	r3, 800bdba <_read_r+0x1e>
 800bdb8:	6023      	str	r3, [r4, #0]
 800bdba:	bd38      	pop	{r3, r4, r5, pc}
 800bdbc:	20000500 	.word	0x20000500

0800bdc0 <_init>:
 800bdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc2:	bf00      	nop
 800bdc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdc6:	bc08      	pop	{r3}
 800bdc8:	469e      	mov	lr, r3
 800bdca:	4770      	bx	lr

0800bdcc <_fini>:
 800bdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdce:	bf00      	nop
 800bdd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdd2:	bc08      	pop	{r3}
 800bdd4:	469e      	mov	lr, r3
 800bdd6:	4770      	bx	lr
