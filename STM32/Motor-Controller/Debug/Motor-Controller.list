
Motor-Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078b4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007a4c  08007a4c  00017a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a84  08007a84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007a84  08007a84  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a84  08007a84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a88  08007a88  00017a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000298  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002a4  200002a4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001325d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002472  00000000  00000000  00033299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00035710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e98  00000000  00000000  00036680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021803  00000000  00000000  00037518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e51  00000000  00000000  00058d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2746  00000000  00000000  0006cb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f2b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004350  00000000  00000000  0013f304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007a34 	.word	0x08007a34

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08007a34 	.word	0x08007a34

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr
 8000ac4:	0000      	movs	r0, r0
	...

08000ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aca:	b0a5      	sub	sp, #148	; 0x94
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ace:	f001 f81f 	bl	8001b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad2:	f000 fa59 	bl	8000f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad6:	f000 fcb5 	bl	8001444 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ada:	f000 fc95 	bl	8001408 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ade:	f000 fabd 	bl	800105c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ae2:	f000 fb3b 	bl	800115c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ae6:	f000 fb8b 	bl	8001200 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000aea:	f000 fc5b 	bl	80013a4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000aee:	f000 fc09 	bl	8001304 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	uint32_t ADC_Value[2];
	uint8_t txbuffer[100];

	uint8_t input = SLIDERS;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	HAL_UART_Receive_IT(&huart2, UART_RX_Byte, 1);
 8000af8:	2201      	movs	r2, #1
 8000afa:	49cd      	ldr	r1, [pc, #820]	; (8000e30 <main+0x368>)
 8000afc:	48cd      	ldr	r0, [pc, #820]	; (8000e34 <main+0x36c>)
 8000afe:	f005 fd81 	bl	8006604 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8000b02:	48cd      	ldr	r0, [pc, #820]	; (8000e38 <main+0x370>)
 8000b04:	f004 fa8a 	bl	800501c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000b08:	48cc      	ldr	r0, [pc, #816]	; (8000e3c <main+0x374>)
 8000b0a:	f004 fa87 	bl	800501c <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, ADC_Value, 2); // start adc in DMA mode
 8000b0e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b12:	2202      	movs	r2, #2
 8000b14:	4619      	mov	r1, r3
 8000b16:	48ca      	ldr	r0, [pc, #808]	; (8000e40 <main+0x378>)
 8000b18:	f001 fa78 	bl	800200c <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	48c9      	ldr	r0, [pc, #804]	; (8000e44 <main+0x37c>)
 8000b20:	f004 fb4e 	bl	80051c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000b24:	2104      	movs	r1, #4
 8000b26:	48c7      	ldr	r0, [pc, #796]	; (8000e44 <main+0x37c>)
 8000b28:	f004 fb4a 	bl	80051c0 <HAL_TIM_PWM_Start>

	for (int i = 0; i < 100; i++) {
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000b32:	e00c      	b.n	8000b4e <main+0x86>
		txbuffer[i] = (uint8_t) *" ";
 8000b34:	2120      	movs	r1, #32
 8000b36:	f107 020c 	add.w	r2, r7, #12
 8000b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b3e:	4413      	add	r3, r2
 8000b40:	460a      	mov	r2, r1
 8000b42:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++) {
 8000b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b48:	3301      	adds	r3, #1
 8000b4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b52:	2b63      	cmp	r3, #99	; 0x63
 8000b54:	ddee      	ble.n	8000b34 <main+0x6c>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		double slider1 = (ADC_Value[0] / 2047.0) - 1.0;
 8000b56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fc7f 	bl	800045c <__aeabi_ui2d>
 8000b5e:	a3aa      	add	r3, pc, #680	; (adr r3, 8000e08 <main+0x340>)
 8000b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b64:	f7ff fe1e 	bl	80007a4 <__aeabi_ddiv>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 0200 	mov.w	r2, #0
 8000b74:	4bb4      	ldr	r3, [pc, #720]	; (8000e48 <main+0x380>)
 8000b76:	f7ff fb33 	bl	80001e0 <__aeabi_dsub>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
		double slider2 = (ADC_Value[1] / 2047.0) - 1.0;
 8000b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fc69 	bl	800045c <__aeabi_ui2d>
 8000b8a:	a39f      	add	r3, pc, #636	; (adr r3, 8000e08 <main+0x340>)
 8000b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b90:	f7ff fe08 	bl	80007a4 <__aeabi_ddiv>
 8000b94:	4602      	mov	r2, r0
 8000b96:	460b      	mov	r3, r1
 8000b98:	4610      	mov	r0, r2
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f04f 0200 	mov.w	r2, #0
 8000ba0:	4ba9      	ldr	r3, [pc, #676]	; (8000e48 <main+0x380>)
 8000ba2:	f7ff fb1d 	bl	80001e0 <__aeabi_dsub>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	460b      	mov	r3, r1
 8000baa:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

		if (input == SLIDERS) {
 8000bae:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f040 810c 	bne.w	8000dd0 <main+0x308>
			if (slider1 > THRESHOLD_OFF) {
 8000bb8:	a395      	add	r3, pc, #596	; (adr r3, 8000e10 <main+0x348>)
 8000bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8000bc2:	f7ff ff55 	bl	8000a70 <__aeabi_dcmpgt>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d02e      	beq.n	8000c2a <main+0x162>
				HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, 1);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2180      	movs	r1, #128	; 0x80
 8000bd0:	489e      	ldr	r0, [pc, #632]	; (8000e4c <main+0x384>)
 8000bd2:	f002 fd0b 	bl	80035ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_a_rev_GPIO_Port, Motor_a_rev_Pin, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bdc:	489c      	ldr	r0, [pc, #624]	; (8000e50 <main+0x388>)
 8000bde:	f002 fd05 	bl	80035ec <HAL_GPIO_WritePin>
				TIM2->CCR1 = ((slider1 - THRESHOLD_OFF)
 8000be2:	a38b      	add	r3, pc, #556	; (adr r3, 8000e10 <main+0x348>)
 8000be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8000bec:	f7ff faf8 	bl	80001e0 <__aeabi_dsub>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	4610      	mov	r0, r2
 8000bf6:	4619      	mov	r1, r3
						/ (THRESHOLD_FULL - THRESHOLD_OFF)) * 999.0;
 8000bf8:	a387      	add	r3, pc, #540	; (adr r3, 8000e18 <main+0x350>)
 8000bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfe:	f7ff fdd1 	bl	80007a4 <__aeabi_ddiv>
 8000c02:	4602      	mov	r2, r0
 8000c04:	460b      	mov	r3, r1
 8000c06:	4610      	mov	r0, r2
 8000c08:	4619      	mov	r1, r3
 8000c0a:	a385      	add	r3, pc, #532	; (adr r3, 8000e20 <main+0x358>)
 8000c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c10:	f7ff fc9e 	bl	8000550 <__aeabi_dmul>
 8000c14:	4602      	mov	r2, r0
 8000c16:	460b      	mov	r3, r1
				TIM2->CCR1 = ((slider1 - THRESHOLD_OFF)
 8000c18:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f7ff ff30 	bl	8000a84 <__aeabi_d2uiz>
 8000c24:	4603      	mov	r3, r0
 8000c26:	6373      	str	r3, [r6, #52]	; 0x34
 8000c28:	e04d      	b.n	8000cc6 <main+0x1fe>
			} else if (slider1 < -THRESHOLD_OFF) {
 8000c2a:	a37f      	add	r3, pc, #508	; (adr r3, 8000e28 <main+0x360>)
 8000c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c30:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8000c34:	f7ff fefe 	bl	8000a34 <__aeabi_dcmplt>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d034      	beq.n	8000ca8 <main+0x1e0>
				HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	4882      	ldr	r0, [pc, #520]	; (8000e4c <main+0x384>)
 8000c44:	f002 fcd2 	bl	80035ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_a_rev_GPIO_Port, Motor_a_rev_Pin, 1);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4e:	4880      	ldr	r0, [pc, #512]	; (8000e50 <main+0x388>)
 8000c50:	f002 fccc 	bl	80035ec <HAL_GPIO_WritePin>
				TIM2->CCR1 = ((-slider1 - THRESHOLD_OFF)
 8000c54:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8000c58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c5c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000c60:	a36b      	add	r3, pc, #428	; (adr r3, 8000e10 <main+0x348>)
 8000c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c66:	4620      	mov	r0, r4
 8000c68:	4629      	mov	r1, r5
 8000c6a:	f7ff fab9 	bl	80001e0 <__aeabi_dsub>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	460b      	mov	r3, r1
 8000c72:	4610      	mov	r0, r2
 8000c74:	4619      	mov	r1, r3
						/ (THRESHOLD_FULL - THRESHOLD_OFF)) * 999.0;
 8000c76:	a368      	add	r3, pc, #416	; (adr r3, 8000e18 <main+0x350>)
 8000c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7c:	f7ff fd92 	bl	80007a4 <__aeabi_ddiv>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	4610      	mov	r0, r2
 8000c86:	4619      	mov	r1, r3
 8000c88:	a365      	add	r3, pc, #404	; (adr r3, 8000e20 <main+0x358>)
 8000c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8e:	f7ff fc5f 	bl	8000550 <__aeabi_dmul>
 8000c92:	4602      	mov	r2, r0
 8000c94:	460b      	mov	r3, r1
				TIM2->CCR1 = ((-slider1 - THRESHOLD_OFF)
 8000c96:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f7ff fef1 	bl	8000a84 <__aeabi_d2uiz>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6373      	str	r3, [r6, #52]	; 0x34
 8000ca6:	e00e      	b.n	8000cc6 <main+0x1fe>
			} else {
				HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	4867      	ldr	r0, [pc, #412]	; (8000e4c <main+0x384>)
 8000cae:	f002 fc9d 	bl	80035ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_a_rev_GPIO_Port, Motor_a_rev_Pin, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb8:	4865      	ldr	r0, [pc, #404]	; (8000e50 <main+0x388>)
 8000cba:	f002 fc97 	bl	80035ec <HAL_GPIO_WritePin>
				TIM2->CCR1 = 0;
 8000cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	635a      	str	r2, [r3, #52]	; 0x34
			}

			if (slider2 > THRESHOLD_OFF) {
 8000cc6:	a352      	add	r3, pc, #328	; (adr r3, 8000e10 <main+0x348>)
 8000cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ccc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8000cd0:	f7ff fece 	bl	8000a70 <__aeabi_dcmpgt>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d02d      	beq.n	8000d36 <main+0x26e>
				HAL_GPIO_WritePin(Motor_b_fwd_GPIO_Port, Motor_b_fwd_Pin, 1);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2104      	movs	r1, #4
 8000cde:	485c      	ldr	r0, [pc, #368]	; (8000e50 <main+0x388>)
 8000ce0:	f002 fc84 	bl	80035ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_b_rev_GPIO_Port, Motor_b_rev_Pin, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	4859      	ldr	r0, [pc, #356]	; (8000e50 <main+0x388>)
 8000cea:	f002 fc7f 	bl	80035ec <HAL_GPIO_WritePin>
				TIM2->CCR2 = ((slider2 - THRESHOLD_OFF)
 8000cee:	a348      	add	r3, pc, #288	; (adr r3, 8000e10 <main+0x348>)
 8000cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8000cf8:	f7ff fa72 	bl	80001e0 <__aeabi_dsub>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	4610      	mov	r0, r2
 8000d02:	4619      	mov	r1, r3
						/ (THRESHOLD_FULL - THRESHOLD_OFF)) * 999.0;
 8000d04:	a344      	add	r3, pc, #272	; (adr r3, 8000e18 <main+0x350>)
 8000d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0a:	f7ff fd4b 	bl	80007a4 <__aeabi_ddiv>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	460b      	mov	r3, r1
 8000d12:	4610      	mov	r0, r2
 8000d14:	4619      	mov	r1, r3
 8000d16:	a342      	add	r3, pc, #264	; (adr r3, 8000e20 <main+0x358>)
 8000d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1c:	f7ff fc18 	bl	8000550 <__aeabi_dmul>
 8000d20:	4602      	mov	r2, r0
 8000d22:	460b      	mov	r3, r1
				TIM2->CCR2 = ((slider2 - THRESHOLD_OFF)
 8000d24:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8000d28:	4610      	mov	r0, r2
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f7ff feaa 	bl	8000a84 <__aeabi_d2uiz>
 8000d30:	4603      	mov	r3, r0
 8000d32:	63b3      	str	r3, [r6, #56]	; 0x38
 8000d34:	e0ec      	b.n	8000f10 <main+0x448>
			} else if (slider2 < -THRESHOLD_OFF) {
 8000d36:	a33c      	add	r3, pc, #240	; (adr r3, 8000e28 <main+0x360>)
 8000d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8000d40:	f7ff fe78 	bl	8000a34 <__aeabi_dcmplt>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d033      	beq.n	8000db2 <main+0x2ea>
				HAL_GPIO_WritePin(Motor_b_fwd_GPIO_Port, Motor_b_fwd_Pin, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	4840      	ldr	r0, [pc, #256]	; (8000e50 <main+0x388>)
 8000d50:	f002 fc4c 	bl	80035ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_b_rev_GPIO_Port, Motor_b_rev_Pin, 1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2108      	movs	r1, #8
 8000d58:	483d      	ldr	r0, [pc, #244]	; (8000e50 <main+0x388>)
 8000d5a:	f002 fc47 	bl	80035ec <HAL_GPIO_WritePin>
				TIM2->CCR2 = ((-slider2 - THRESHOLD_OFF)
 8000d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d64:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	a329      	add	r3, pc, #164	; (adr r3, 8000e10 <main+0x348>)
 8000d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d74:	f7ff fa34 	bl	80001e0 <__aeabi_dsub>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4610      	mov	r0, r2
 8000d7e:	4619      	mov	r1, r3
						/ (THRESHOLD_FULL - THRESHOLD_OFF)) * 999.0;
 8000d80:	a325      	add	r3, pc, #148	; (adr r3, 8000e18 <main+0x350>)
 8000d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d86:	f7ff fd0d 	bl	80007a4 <__aeabi_ddiv>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	4610      	mov	r0, r2
 8000d90:	4619      	mov	r1, r3
 8000d92:	a323      	add	r3, pc, #140	; (adr r3, 8000e20 <main+0x358>)
 8000d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d98:	f7ff fbda 	bl	8000550 <__aeabi_dmul>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
				TIM2->CCR2 = ((-slider2 - THRESHOLD_OFF)
 8000da0:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8000da4:	4610      	mov	r0, r2
 8000da6:	4619      	mov	r1, r3
 8000da8:	f7ff fe6c 	bl	8000a84 <__aeabi_d2uiz>
 8000dac:	4603      	mov	r3, r0
 8000dae:	63b3      	str	r3, [r6, #56]	; 0x38
 8000db0:	e0ae      	b.n	8000f10 <main+0x448>
			} else {
				HAL_GPIO_WritePin(Motor_b_fwd_GPIO_Port, Motor_b_fwd_Pin, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2104      	movs	r1, #4
 8000db6:	4826      	ldr	r0, [pc, #152]	; (8000e50 <main+0x388>)
 8000db8:	f002 fc18 	bl	80035ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_b_rev_GPIO_Port, Motor_b_rev_Pin, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2108      	movs	r1, #8
 8000dc0:	4823      	ldr	r0, [pc, #140]	; (8000e50 <main+0x388>)
 8000dc2:	f002 fc13 	bl	80035ec <HAL_GPIO_WritePin>
				TIM2->CCR2 = 0;
 8000dc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dca:	2200      	movs	r2, #0
 8000dcc:	639a      	str	r2, [r3, #56]	; 0x38
 8000dce:	e09f      	b.n	8000f10 <main+0x448>
			}
		}else if (input==UART){
 8000dd0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	f040 809b 	bne.w	8000f10 <main+0x448>

			if (UART_RX_Motor_a > 0) {
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <main+0x38c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	dd3a      	ble.n	8000e58 <main+0x390>
				HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, 1);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	4819      	ldr	r0, [pc, #100]	; (8000e4c <main+0x384>)
 8000de8:	f002 fc00 	bl	80035ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_a_rev_GPIO_Port, Motor_a_rev_Pin, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df2:	4817      	ldr	r0, [pc, #92]	; (8000e50 <main+0x388>)
 8000df4:	f002 fbfa 	bl	80035ec <HAL_GPIO_WritePin>
				TIM2->CCR1 = UART_RX_Motor_a;
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <main+0x38c>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e00:	635a      	str	r2, [r3, #52]	; 0x34
 8000e02:	e04e      	b.n	8000ea2 <main+0x3da>
 8000e04:	f3af 8000 	nop.w
 8000e08:	00000000 	.word	0x00000000
 8000e0c:	409ffc00 	.word	0x409ffc00
 8000e10:	9999999a 	.word	0x9999999a
 8000e14:	3fc99999 	.word	0x3fc99999
 8000e18:	66666666 	.word	0x66666666
 8000e1c:	3fe66666 	.word	0x3fe66666
 8000e20:	00000000 	.word	0x00000000
 8000e24:	408f3800 	.word	0x408f3800
 8000e28:	9999999a 	.word	0x9999999a
 8000e2c:	bfc99999 	.word	0xbfc99999
 8000e30:	20000290 	.word	0x20000290
 8000e34:	200001a0 	.word	0x200001a0
 8000e38:	200000bc 	.word	0x200000bc
 8000e3c:	20000154 	.word	0x20000154
 8000e40:	20000028 	.word	0x20000028
 8000e44:	20000108 	.word	0x20000108
 8000e48:	3ff00000 	.word	0x3ff00000
 8000e4c:	48000400 	.word	0x48000400
 8000e50:	48000800 	.word	0x48000800
 8000e54:	20000294 	.word	0x20000294
			} else if (UART_RX_Motor_a < 0) {
 8000e58:	4b44      	ldr	r3, [pc, #272]	; (8000f6c <main+0x4a4>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	da11      	bge.n	8000e84 <main+0x3bc>
				HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2180      	movs	r1, #128	; 0x80
 8000e64:	4842      	ldr	r0, [pc, #264]	; (8000f70 <main+0x4a8>)
 8000e66:	f002 fbc1 	bl	80035ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_a_rev_GPIO_Port, Motor_a_rev_Pin, 1);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e70:	4840      	ldr	r0, [pc, #256]	; (8000f74 <main+0x4ac>)
 8000e72:	f002 fbbb 	bl	80035ec <HAL_GPIO_WritePin>
				TIM2->CCR1 = -UART_RX_Motor_a;
 8000e76:	4b3d      	ldr	r3, [pc, #244]	; (8000f6c <main+0x4a4>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	425a      	negs	r2, r3
 8000e7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e80:	635a      	str	r2, [r3, #52]	; 0x34
 8000e82:	e00e      	b.n	8000ea2 <main+0x3da>
			} else {
				HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	4839      	ldr	r0, [pc, #228]	; (8000f70 <main+0x4a8>)
 8000e8a:	f002 fbaf 	bl	80035ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_a_rev_GPIO_Port, Motor_a_rev_Pin, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e94:	4837      	ldr	r0, [pc, #220]	; (8000f74 <main+0x4ac>)
 8000e96:	f002 fba9 	bl	80035ec <HAL_GPIO_WritePin>
				TIM2->CCR1 = 0;
 8000e9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	635a      	str	r2, [r3, #52]	; 0x34
			}

			if (UART_RX_Motor_b > 0) {
 8000ea2:	4b35      	ldr	r3, [pc, #212]	; (8000f78 <main+0x4b0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	dd0f      	ble.n	8000eca <main+0x402>
				HAL_GPIO_WritePin(Motor_b_fwd_GPIO_Port, Motor_b_fwd_Pin, 1);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2104      	movs	r1, #4
 8000eae:	4831      	ldr	r0, [pc, #196]	; (8000f74 <main+0x4ac>)
 8000eb0:	f002 fb9c 	bl	80035ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_b_rev_GPIO_Port, Motor_b_rev_Pin, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2108      	movs	r1, #8
 8000eb8:	482e      	ldr	r0, [pc, #184]	; (8000f74 <main+0x4ac>)
 8000eba:	f002 fb97 	bl	80035ec <HAL_GPIO_WritePin>
				TIM2->CCR2 = UART_RX_Motor_b;
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <main+0x4b0>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ec8:	e022      	b.n	8000f10 <main+0x448>
			} else if (UART_RX_Motor_b < 0) {
 8000eca:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <main+0x4b0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	da10      	bge.n	8000ef4 <main+0x42c>
				HAL_GPIO_WritePin(Motor_b_fwd_GPIO_Port, Motor_b_fwd_Pin, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2104      	movs	r1, #4
 8000ed6:	4827      	ldr	r0, [pc, #156]	; (8000f74 <main+0x4ac>)
 8000ed8:	f002 fb88 	bl	80035ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_b_rev_GPIO_Port, Motor_b_rev_Pin, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2108      	movs	r1, #8
 8000ee0:	4824      	ldr	r0, [pc, #144]	; (8000f74 <main+0x4ac>)
 8000ee2:	f002 fb83 	bl	80035ec <HAL_GPIO_WritePin>
				TIM2->CCR2 = -UART_RX_Motor_b;
 8000ee6:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <main+0x4b0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	425a      	negs	r2, r3
 8000eec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef0:	639a      	str	r2, [r3, #56]	; 0x38
 8000ef2:	e00d      	b.n	8000f10 <main+0x448>
			} else {
				HAL_GPIO_WritePin(Motor_b_fwd_GPIO_Port, Motor_b_fwd_Pin, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	481e      	ldr	r0, [pc, #120]	; (8000f74 <main+0x4ac>)
 8000efa:	f002 fb77 	bl	80035ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor_b_rev_GPIO_Port, Motor_b_rev_Pin, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2108      	movs	r1, #8
 8000f02:	481c      	ldr	r0, [pc, #112]	; (8000f74 <main+0x4ac>)
 8000f04:	f002 fb72 	bl	80035ec <HAL_GPIO_WritePin>
				TIM2->CCR2 = 0;
 8000f08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}

		if (TIM3_flag == 1){
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <main+0x4b4>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d120      	bne.n	8000f5c <main+0x494>
			TIM3_flag = 0;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <main+0x4b4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
			num2str(TIM2->CCR1, &txbuffer[0], 4);
 8000f20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f26:	4618      	mov	r0, r3
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f000 faea 	bl	8001508 <num2str>
			num2str(TIM2->CCR2, &txbuffer[5], 4);
 8000f34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	3305      	adds	r3, #5
 8000f42:	2204      	movs	r2, #4
 8000f44:	4619      	mov	r1, r3
 8000f46:	f000 fadf 	bl	8001508 <num2str>
			txbuffer[9] = (uint8_t) *"\n";
 8000f4a:	230a      	movs	r3, #10
 8000f4c:	757b      	strb	r3, [r7, #21]
			HAL_UART_Transmit(&huart2, txbuffer, 10, 50);
 8000f4e:	f107 010c 	add.w	r1, r7, #12
 8000f52:	2332      	movs	r3, #50	; 0x32
 8000f54:	220a      	movs	r2, #10
 8000f56:	480a      	ldr	r0, [pc, #40]	; (8000f80 <main+0x4b8>)
 8000f58:	f005 faca 	bl	80064f0 <HAL_UART_Transmit>
		}
		if (UART_RX_Flag == 1) {
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <main+0x4bc>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	f47f adf8 	bne.w	8000b56 <main+0x8e>
			UART_RX_Handler();
 8000f66:	f000 fb4d 	bl	8001604 <UART_RX_Handler>
	while (1) {
 8000f6a:	e5f4      	b.n	8000b56 <main+0x8e>
 8000f6c:	20000294 	.word	0x20000294
 8000f70:	48000400 	.word	0x48000400
 8000f74:	48000800 	.word	0x48000800
 8000f78:	20000298 	.word	0x20000298
 8000f7c:	2000029c 	.word	0x2000029c
 8000f80:	200001a0 	.word	0x200001a0
 8000f84:	20000291 	.word	0x20000291

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0a6      	sub	sp, #152	; 0x98
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f92:	2228      	movs	r2, #40	; 0x28
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f006 fd44 	bl	8007a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2258      	movs	r2, #88	; 0x58
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f006 fd36 	bl	8007a24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fd4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 fb18 	bl	800361c <HAL_RCC_OscConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ff2:	f000 fb77 	bl	80016e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff6:	230f      	movs	r3, #15
 8000ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001006:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800100c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001010:	2102      	movs	r1, #2
 8001012:	4618      	mov	r0, r3
 8001014:	f003 fb56 	bl	80046c4 <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800101e:	f000 fb61 	bl	80016e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <SystemClock_Config+0xd0>)
 8001024:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800102a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001030:	2300      	movs	r3, #0
 8001032:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001034:	2300      	movs	r3, #0
 8001036:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001038:	2300      	movs	r3, #0
 800103a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	4618      	mov	r0, r3
 8001040:	f003 fd76 	bl	8004b30 <HAL_RCCEx_PeriphCLKConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800104a:	f000 fb4b 	bl	80016e4 <Error_Handler>
  }
}
 800104e:	bf00      	nop
 8001050:	3798      	adds	r7, #152	; 0x98
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	00301082 	.word	0x00301082

0800105c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
 800107c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800107e:	4b36      	ldr	r3, [pc, #216]	; (8001158 <MX_ADC1_Init+0xfc>)
 8001080:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001084:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001086:	4b34      	ldr	r3, [pc, #208]	; (8001158 <MX_ADC1_Init+0xfc>)
 8001088:	2200      	movs	r2, #0
 800108a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800108c:	4b32      	ldr	r3, [pc, #200]	; (8001158 <MX_ADC1_Init+0xfc>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001092:	4b31      	ldr	r3, [pc, #196]	; (8001158 <MX_ADC1_Init+0xfc>)
 8001094:	2201      	movs	r2, #1
 8001096:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001098:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <MX_ADC1_Init+0xfc>)
 800109a:	2200      	movs	r2, #0
 800109c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109e:	4b2e      	ldr	r3, [pc, #184]	; (8001158 <MX_ADC1_Init+0xfc>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010a6:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <MX_ADC1_Init+0xfc>)
 80010a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80010ae:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <MX_ADC1_Init+0xfc>)
 80010b0:	f44f 7210 	mov.w	r2, #576	; 0x240
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b6:	4b28      	ldr	r3, [pc, #160]	; (8001158 <MX_ADC1_Init+0xfc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <MX_ADC1_Init+0xfc>)
 80010be:	2202      	movs	r2, #2
 80010c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <MX_ADC1_Init+0xfc>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ca:	4b23      	ldr	r3, [pc, #140]	; (8001158 <MX_ADC1_Init+0xfc>)
 80010cc:	2204      	movs	r2, #4
 80010ce:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010d0:	4b21      	ldr	r3, [pc, #132]	; (8001158 <MX_ADC1_Init+0xfc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010d6:	4b20      	ldr	r3, [pc, #128]	; (8001158 <MX_ADC1_Init+0xfc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010dc:	481e      	ldr	r0, [pc, #120]	; (8001158 <MX_ADC1_Init+0xfc>)
 80010de:	f000 fd9b 	bl	8001c18 <HAL_ADC_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010e8:	f000 fafc 	bl	80016e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4818      	ldr	r0, [pc, #96]	; (8001158 <MX_ADC1_Init+0xfc>)
 80010f8:	f001 fb90 	bl	800281c <HAL_ADCEx_MultiModeConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001102:	f000 faef 	bl	80016e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001106:	2301      	movs	r3, #1
 8001108:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110a:	2301      	movs	r3, #1
 800110c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	480d      	ldr	r0, [pc, #52]	; (8001158 <MX_ADC1_Init+0xfc>)
 8001124:	f001 f88e 	bl	8002244 <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800112e:	f000 fad9 	bl	80016e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001132:	2302      	movs	r3, #2
 8001134:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001136:	2302      	movs	r3, #2
 8001138:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <MX_ADC1_Init+0xfc>)
 8001140:	f001 f880 	bl	8002244 <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 800114a:	f000 facb 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	; 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000028 	.word	0x20000028

0800115c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <MX_TIM1_Init+0x9c>)
 800117c:	4a1f      	ldr	r2, [pc, #124]	; (80011fc <MX_TIM1_Init+0xa0>)
 800117e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_TIM1_Init+0x9c>)
 8001182:	2247      	movs	r2, #71	; 0x47
 8001184:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <MX_TIM1_Init+0x9c>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_TIM1_Init+0x9c>)
 800118e:	2263      	movs	r2, #99	; 0x63
 8001190:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_TIM1_Init+0x9c>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_TIM1_Init+0x9c>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_TIM1_Init+0x9c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011a4:	4814      	ldr	r0, [pc, #80]	; (80011f8 <MX_TIM1_Init+0x9c>)
 80011a6:	f003 fee1 	bl	8004f6c <HAL_TIM_Base_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80011b0:	f000 fa98 	bl	80016e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	4619      	mov	r1, r3
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <MX_TIM1_Init+0x9c>)
 80011c2:	f004 fb3d 	bl	8005840 <HAL_TIM_ConfigClockSource>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80011cc:	f000 fa8a 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011d0:	2320      	movs	r3, #32
 80011d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_TIM1_Init+0x9c>)
 80011e2:	f005 f88d 	bl	8006300 <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80011ec:	f000 fa7a 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200000bc 	.word	0x200000bc
 80011fc:	40012c00 	.word	0x40012c00

08001200 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08e      	sub	sp, #56	; 0x38
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001220:	463b      	mov	r3, r7
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
 800122e:	615a      	str	r2, [r3, #20]
 8001230:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001232:	4b33      	ldr	r3, [pc, #204]	; (8001300 <MX_TIM2_Init+0x100>)
 8001234:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001238:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <MX_TIM2_Init+0x100>)
 800123c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001240:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <MX_TIM2_Init+0x100>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001248:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <MX_TIM2_Init+0x100>)
 800124a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800124e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001250:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <MX_TIM2_Init+0x100>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001256:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <MX_TIM2_Init+0x100>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800125c:	4828      	ldr	r0, [pc, #160]	; (8001300 <MX_TIM2_Init+0x100>)
 800125e:	f003 fe85 	bl	8004f6c <HAL_TIM_Base_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001268:	f000 fa3c 	bl	80016e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001276:	4619      	mov	r1, r3
 8001278:	4821      	ldr	r0, [pc, #132]	; (8001300 <MX_TIM2_Init+0x100>)
 800127a:	f004 fae1 	bl	8005840 <HAL_TIM_ConfigClockSource>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001284:	f000 fa2e 	bl	80016e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001288:	481d      	ldr	r0, [pc, #116]	; (8001300 <MX_TIM2_Init+0x100>)
 800128a:	f003 ff37 	bl	80050fc <HAL_TIM_PWM_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001294:	f000 fa26 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	4816      	ldr	r0, [pc, #88]	; (8001300 <MX_TIM2_Init+0x100>)
 80012a8:	f005 f82a 	bl	8006300 <HAL_TIMEx_MasterConfigSynchronization>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80012b2:	f000 fa17 	bl	80016e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b6:	2360      	movs	r3, #96	; 0x60
 80012b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c6:	463b      	mov	r3, r7
 80012c8:	2200      	movs	r2, #0
 80012ca:	4619      	mov	r1, r3
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <MX_TIM2_Init+0x100>)
 80012ce:	f004 f9a3 	bl	8005618 <HAL_TIM_PWM_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80012d8:	f000 fa04 	bl	80016e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	2204      	movs	r2, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4807      	ldr	r0, [pc, #28]	; (8001300 <MX_TIM2_Init+0x100>)
 80012e4:	f004 f998 	bl	8005618 <HAL_TIM_PWM_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80012ee:	f000 f9f9 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012f2:	4803      	ldr	r0, [pc, #12]	; (8001300 <MX_TIM2_Init+0x100>)
 80012f4:	f000 fadc 	bl	80018b0 <HAL_TIM_MspPostInit>

}
 80012f8:	bf00      	nop
 80012fa:	3738      	adds	r7, #56	; 0x38
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000108 	.word	0x20000108

08001304 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_TIM3_Init+0x98>)
 8001324:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <MX_TIM3_Init+0x9c>)
 8001326:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_TIM3_Init+0x98>)
 800132a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800132e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM3_Init+0x98>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_TIM3_Init+0x98>)
 8001338:	f242 7210 	movw	r2, #10000	; 0x2710
 800133c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_TIM3_Init+0x98>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_TIM3_Init+0x98>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800134a:	4814      	ldr	r0, [pc, #80]	; (800139c <MX_TIM3_Init+0x98>)
 800134c:	f003 fe0e 	bl	8004f6c <HAL_TIM_Base_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001356:	f000 f9c5 	bl	80016e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_TIM3_Init+0x98>)
 8001368:	f004 fa6a 	bl	8005840 <HAL_TIM_ConfigClockSource>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001372:	f000 f9b7 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MX_TIM3_Init+0x98>)
 8001384:	f004 ffbc 	bl	8006300 <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800138e:	f000 f9a9 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3720      	adds	r7, #32
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000154 	.word	0x20000154
 80013a0:	40000400 	.word	0x40000400

080013a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <MX_USART2_UART_Init+0x5c>)
 80013aa:	4a16      	ldr	r2, [pc, #88]	; (8001404 <MX_USART2_UART_Init+0x60>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_USART2_UART_Init+0x5c>)
 80013b0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80013b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <MX_USART2_UART_Init+0x5c>)
 80013b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013bc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <MX_USART2_UART_Init+0x5c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_USART2_UART_Init+0x5c>)
 80013c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_USART2_UART_Init+0x5c>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MX_USART2_UART_Init+0x5c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_USART2_UART_Init+0x5c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <MX_USART2_UART_Init+0x5c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_USART2_UART_Init+0x5c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_USART2_UART_Init+0x5c>)
 80013ec:	f005 f832 	bl	8006454 <HAL_UART_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80013f6:	f000 f975 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200001a0 	.word	0x200001a0
 8001404:	40004400 	.word	0x40004400

08001408 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_DMA_Init+0x38>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <MX_DMA_Init+0x38>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6153      	str	r3, [r2, #20]
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_DMA_Init+0x38>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	200b      	movs	r0, #11
 800142c:	f001 fcf3 	bl	8002e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001430:	200b      	movs	r0, #11
 8001432:	f001 fd0c 	bl	8002e4e <HAL_NVIC_EnableIRQ>

}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <MX_GPIO_Init+0xb8>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	4a27      	ldr	r2, [pc, #156]	; (80014fc <MX_GPIO_Init+0xb8>)
 8001460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001464:	6153      	str	r3, [r2, #20]
 8001466:	4b25      	ldr	r3, [pc, #148]	; (80014fc <MX_GPIO_Init+0xb8>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b22      	ldr	r3, [pc, #136]	; (80014fc <MX_GPIO_Init+0xb8>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	4a21      	ldr	r2, [pc, #132]	; (80014fc <MX_GPIO_Init+0xb8>)
 8001478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147c:	6153      	str	r3, [r2, #20]
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <MX_GPIO_Init+0xb8>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <MX_GPIO_Init+0xb8>)
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <MX_GPIO_Init+0xb8>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001494:	6153      	str	r3, [r2, #20]
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <MX_GPIO_Init+0xb8>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor_a_rev_Pin|Motor_b_fwd_Pin|Motor_b_rev_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	f242 010c 	movw	r1, #8204	; 0x200c
 80014a8:	4815      	ldr	r0, [pc, #84]	; (8001500 <MX_GPIO_Init+0xbc>)
 80014aa:	f002 f89f 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_a_fwd_GPIO_Port, Motor_a_fwd_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	4814      	ldr	r0, [pc, #80]	; (8001504 <MX_GPIO_Init+0xc0>)
 80014b4:	f002 f89a 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor_a_rev_Pin Motor_b_fwd_Pin Motor_b_rev_Pin */
  GPIO_InitStruct.Pin = Motor_a_rev_Pin|Motor_b_fwd_Pin|Motor_b_rev_Pin;
 80014b8:	f242 030c 	movw	r3, #8204	; 0x200c
 80014bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4619      	mov	r1, r3
 80014d0:	480b      	ldr	r0, [pc, #44]	; (8001500 <MX_GPIO_Init+0xbc>)
 80014d2:	f001 ff01 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_a_fwd_Pin */
  GPIO_InitStruct.Pin = Motor_a_fwd_Pin;
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Motor_a_fwd_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_GPIO_Init+0xc0>)
 80014ee:	f001 fef3 	bl	80032d8 <HAL_GPIO_Init>

}
 80014f2:	bf00      	nop
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000
 8001500:	48000800 	.word	0x48000800
 8001504:	48000400 	.word	0x48000400

08001508 <num2str>:
double clamp(double d, double min, double max) {
	const double t = d < min ? min : d;
	return t > max ? max : t;
}

void num2str(int num, uint8_t *string, int numdigits) {
 8001508:	b480      	push	{r7}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
	int unit = 1;
 8001514:	2301      	movs	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numdigits; i++) {
 8001518:	2300      	movs	r3, #0
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	e021      	b.n	8001562 <num2str+0x5a>
		string[numdigits - i - 1] = (num / unit) % 10 + 48;
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fb92 f2f3 	sdiv	r2, r2, r3
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <num2str+0x70>)
 8001528:	fb83 1302 	smull	r1, r3, r3, r2
 800152c:	1099      	asrs	r1, r3, #2
 800152e:	17d3      	asrs	r3, r2, #31
 8001530:	1ac9      	subs	r1, r1, r3
 8001532:	460b      	mov	r3, r1
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	440b      	add	r3, r1
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	1ad1      	subs	r1, r2, r3
 800153c:	b2ca      	uxtb	r2, r1
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1acb      	subs	r3, r1, r3
 8001544:	3b01      	subs	r3, #1
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	440b      	add	r3, r1
 800154a:	3230      	adds	r2, #48	; 0x30
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	701a      	strb	r2, [r3, #0]
		unit = unit * 10;
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numdigits; i++) {
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	3301      	adds	r3, #1
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	429a      	cmp	r2, r3
 8001568:	dbd9      	blt.n	800151e <num2str+0x16>
	}
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	371c      	adds	r7, #28
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	66666667 	.word	0x66666667

0800157c <str2num>:
int str2num(uint8_t *string, int numdigits) {
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
	int unit = 1;
 8001586:	2301      	movs	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
	int num = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < numdigits; i++) {
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	e016      	b.n	80015c2 <str2num+0x46>
		num = num + (string[numdigits - i - 1] - 48) * unit;
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	3b01      	subs	r3, #1
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	4413      	add	r3, r2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	3b30      	subs	r3, #48	; 0x30
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4413      	add	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
		unit = unit * 10;
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numdigits; i++) {
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3301      	adds	r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	dbe4      	blt.n	8001594 <str2num+0x18>
	}
	return num;
 80015ca:	693b      	ldr	r3, [r7, #16]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	371c      	adds	r7, #28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	UART_RX_Flag = 1;
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_UART_RxCpltCallback+0x20>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, UART_RX_Byte, 1);
 80015e6:	2201      	movs	r2, #1
 80015e8:	4904      	ldr	r1, [pc, #16]	; (80015fc <HAL_UART_RxCpltCallback+0x24>)
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <HAL_UART_RxCpltCallback+0x28>)
 80015ec:	f005 f80a 	bl	8006604 <HAL_UART_Receive_IT>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000291 	.word	0x20000291
 80015fc:	20000290 	.word	0x20000290
 8001600:	200001a0 	.word	0x200001a0

08001604 <UART_RX_Handler>:
void UART_RX_Handler(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	UART_RX_Flag = 0;
 8001608:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <UART_RX_Handler+0xbc>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
	UART_RX_Message[UART_RX_Pos] = UART_RX_Byte[0];
 800160e:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <UART_RX_Handler+0xc0>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <UART_RX_Handler+0xc4>)
 8001616:	7819      	ldrb	r1, [r3, #0]
 8001618:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <UART_RX_Handler+0xc8>)
 800161a:	5499      	strb	r1, [r3, r2]
	UART_RX_Pos += 1;
 800161c:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <UART_RX_Handler+0xc0>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <UART_RX_Handler+0xc0>)
 8001626:	701a      	strb	r2, [r3, #0]
	if (UART_RX_Byte[0] == (uint8_t)* "\n"){
 8001628:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <UART_RX_Handler+0xc4>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	220a      	movs	r2, #10
 800162e:	4293      	cmp	r3, r2
 8001630:	d144      	bne.n	80016bc <UART_RX_Handler+0xb8>
		if (UART_RX_Message[0] == (uint8_t)* "+"){
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <UART_RX_Handler+0xc8>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	222b      	movs	r2, #43	; 0x2b
 8001638:	4293      	cmp	r3, r2
 800163a:	d107      	bne.n	800164c <UART_RX_Handler+0x48>
			UART_RX_Motor_a = str2num(&UART_RX_Message[1],3);
 800163c:	2103      	movs	r1, #3
 800163e:	4824      	ldr	r0, [pc, #144]	; (80016d0 <UART_RX_Handler+0xcc>)
 8001640:	f7ff ff9c 	bl	800157c <str2num>
 8001644:	4603      	mov	r3, r0
 8001646:	4a23      	ldr	r2, [pc, #140]	; (80016d4 <UART_RX_Handler+0xd0>)
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e00c      	b.n	8001666 <UART_RX_Handler+0x62>
		}else if (UART_RX_Message[0] == (uint8_t)* "-"){
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <UART_RX_Handler+0xc8>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	222d      	movs	r2, #45	; 0x2d
 8001652:	4293      	cmp	r3, r2
 8001654:	d107      	bne.n	8001666 <UART_RX_Handler+0x62>
			UART_RX_Motor_a = -str2num(&UART_RX_Message[1],3);
 8001656:	2103      	movs	r1, #3
 8001658:	481d      	ldr	r0, [pc, #116]	; (80016d0 <UART_RX_Handler+0xcc>)
 800165a:	f7ff ff8f 	bl	800157c <str2num>
 800165e:	4603      	mov	r3, r0
 8001660:	425b      	negs	r3, r3
 8001662:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <UART_RX_Handler+0xd0>)
 8001664:	6013      	str	r3, [r2, #0]
		}
		if (UART_RX_Message[5] == (uint8_t)* "+"){
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <UART_RX_Handler+0xc8>)
 8001668:	795b      	ldrb	r3, [r3, #5]
 800166a:	222b      	movs	r2, #43	; 0x2b
 800166c:	4293      	cmp	r3, r2
 800166e:	d107      	bne.n	8001680 <UART_RX_Handler+0x7c>
			UART_RX_Motor_b = str2num(&UART_RX_Message[6],3);
 8001670:	2103      	movs	r1, #3
 8001672:	4819      	ldr	r0, [pc, #100]	; (80016d8 <UART_RX_Handler+0xd4>)
 8001674:	f7ff ff82 	bl	800157c <str2num>
 8001678:	4603      	mov	r3, r0
 800167a:	4a18      	ldr	r2, [pc, #96]	; (80016dc <UART_RX_Handler+0xd8>)
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e00c      	b.n	800169a <UART_RX_Handler+0x96>
		}else if (UART_RX_Message[5] == (uint8_t)* "-"){
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <UART_RX_Handler+0xc8>)
 8001682:	795b      	ldrb	r3, [r3, #5]
 8001684:	222d      	movs	r2, #45	; 0x2d
 8001686:	4293      	cmp	r3, r2
 8001688:	d107      	bne.n	800169a <UART_RX_Handler+0x96>
			UART_RX_Motor_b = -str2num(&UART_RX_Message[6],3);
 800168a:	2103      	movs	r1, #3
 800168c:	4812      	ldr	r0, [pc, #72]	; (80016d8 <UART_RX_Handler+0xd4>)
 800168e:	f7ff ff75 	bl	800157c <str2num>
 8001692:	4603      	mov	r3, r0
 8001694:	425b      	negs	r3, r3
 8001696:	4a11      	ldr	r2, [pc, #68]	; (80016dc <UART_RX_Handler+0xd8>)
 8001698:	6013      	str	r3, [r2, #0]
		}
		if (UART_RX_Message[10] == (uint8_t)* "P"){
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <UART_RX_Handler+0xc8>)
 800169c:	7a9b      	ldrb	r3, [r3, #10]
 800169e:	2250      	movs	r2, #80	; 0x50
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d108      	bne.n	80016b6 <UART_RX_Handler+0xb2>
			TIM2->PSC = str2num(&UART_RX_Message[11],3) - 1;
 80016a4:	2103      	movs	r1, #3
 80016a6:	480e      	ldr	r0, [pc, #56]	; (80016e0 <UART_RX_Handler+0xdc>)
 80016a8:	f7ff ff68 	bl	800157c <str2num>
 80016ac:	4603      	mov	r3, r0
 80016ae:	1e5a      	subs	r2, r3, #1
 80016b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28
		}
		UART_RX_Pos = 0;
 80016b6:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <UART_RX_Handler+0xc0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
	}
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000291 	.word	0x20000291
 80016c4:	20000228 	.word	0x20000228
 80016c8:	20000290 	.word	0x20000290
 80016cc:	2000022c 	.word	0x2000022c
 80016d0:	2000022d 	.word	0x2000022d
 80016d4:	20000294 	.word	0x20000294
 80016d8:	20000232 	.word	0x20000232
 80016dc:	20000298 	.word	0x20000298
 80016e0:	20000237 	.word	0x20000237

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016ec:	e7fe      	b.n	80016ec <Error_Handler+0x8>
	...

080016f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_MspInit+0x44>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <HAL_MspInit+0x44>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6193      	str	r3, [r2, #24]
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_MspInit+0x44>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_MspInit+0x44>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	4a08      	ldr	r2, [pc, #32]	; (8001734 <HAL_MspInit+0x44>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	61d3      	str	r3, [r2, #28]
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_MspInit+0x44>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001758:	d14c      	bne.n	80017f4 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800175a:	4b28      	ldr	r3, [pc, #160]	; (80017fc <HAL_ADC_MspInit+0xc4>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	4a27      	ldr	r2, [pc, #156]	; (80017fc <HAL_ADC_MspInit+0xc4>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6153      	str	r3, [r2, #20]
 8001766:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_ADC_MspInit+0xc4>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b22      	ldr	r3, [pc, #136]	; (80017fc <HAL_ADC_MspInit+0xc4>)
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	4a21      	ldr	r2, [pc, #132]	; (80017fc <HAL_ADC_MspInit+0xc4>)
 8001778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177c:	6153      	str	r3, [r2, #20]
 800177e:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <HAL_ADC_MspInit+0xc4>)
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800178a:	2303      	movs	r3, #3
 800178c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178e:	2303      	movs	r3, #3
 8001790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a0:	f001 fd9a 	bl	80032d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <HAL_ADC_MspInit+0xc8>)
 80017a6:	4a17      	ldr	r2, [pc, #92]	; (8001804 <HAL_ADC_MspInit+0xcc>)
 80017a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_ADC_MspInit+0xc8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <HAL_ADC_MspInit+0xc8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_ADC_MspInit+0xc8>)
 80017b8:	2280      	movs	r2, #128	; 0x80
 80017ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_ADC_MspInit+0xc8>)
 80017be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_ADC_MspInit+0xc8>)
 80017c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <HAL_ADC_MspInit+0xc8>)
 80017ce:	2220      	movs	r2, #32
 80017d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_ADC_MspInit+0xc8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017d8:	4809      	ldr	r0, [pc, #36]	; (8001800 <HAL_ADC_MspInit+0xc8>)
 80017da:	f001 fb52 	bl	8002e82 <HAL_DMA_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80017e4:	f7ff ff7e 	bl	80016e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a05      	ldr	r2, [pc, #20]	; (8001800 <HAL_ADC_MspInit+0xc8>)
 80017ec:	639a      	str	r2, [r3, #56]	; 0x38
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <HAL_ADC_MspInit+0xc8>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017f4:	bf00      	nop
 80017f6:	3728      	adds	r7, #40	; 0x28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40021000 	.word	0x40021000
 8001800:	20000078 	.word	0x20000078
 8001804:	40020008 	.word	0x40020008

08001808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a23      	ldr	r2, [pc, #140]	; (80018a4 <HAL_TIM_Base_MspInit+0x9c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d114      	bne.n	8001844 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800181a:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <HAL_TIM_Base_MspInit+0xa0>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	4a22      	ldr	r2, [pc, #136]	; (80018a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001820:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001824:	6193      	str	r3, [r2, #24]
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	201a      	movs	r0, #26
 8001838:	f001 faed 	bl	8002e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800183c:	201a      	movs	r0, #26
 800183e:	f001 fb06 	bl	8002e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001842:	e02a      	b.n	800189a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800184c:	d10c      	bne.n	8001868 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	61d3      	str	r3, [r2, #28]
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_TIM_Base_MspInit+0xa0>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
}
 8001866:	e018      	b.n	800189a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <HAL_TIM_Base_MspInit+0xa4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d113      	bne.n	800189a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	61d3      	str	r3, [r2, #28]
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	201d      	movs	r0, #29
 8001890:	f001 fac1 	bl	8002e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001894:	201d      	movs	r0, #29
 8001896:	f001 fada 	bl	8002e4e <HAL_NVIC_EnableIRQ>
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40012c00 	.word	0x40012c00
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40000400 	.word	0x40000400

080018b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d0:	d139      	bne.n	8001946 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <HAL_TIM_MspPostInit+0xa0>)
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	4a1e      	ldr	r2, [pc, #120]	; (8001950 <HAL_TIM_MspPostInit+0xa0>)
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018dc:	6153      	str	r3, [r2, #20]
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <HAL_TIM_MspPostInit+0xa0>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_TIM_MspPostInit+0xa0>)
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	4a18      	ldr	r2, [pc, #96]	; (8001950 <HAL_TIM_MspPostInit+0xa0>)
 80018f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f4:	6153      	str	r3, [r2, #20]
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <HAL_TIM_MspPostInit+0xa0>)
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001914:	2301      	movs	r3, #1
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001922:	f001 fcd9 	bl	80032d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001926:	2308      	movs	r3, #8
 8001928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001936:	2301      	movs	r3, #1
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	4804      	ldr	r0, [pc, #16]	; (8001954 <HAL_TIM_MspPostInit+0xa4>)
 8001942:	f001 fcc9 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001946:	bf00      	nop
 8001948:	3728      	adds	r7, #40	; 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000
 8001954:	48000400 	.word	0x48000400

08001958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1b      	ldr	r2, [pc, #108]	; (80019e4 <HAL_UART_MspInit+0x8c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d130      	bne.n	80019dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800197a:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <HAL_UART_MspInit+0x90>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	4a1a      	ldr	r2, [pc, #104]	; (80019e8 <HAL_UART_MspInit+0x90>)
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	61d3      	str	r3, [r2, #28]
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <HAL_UART_MspInit+0x90>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_UART_MspInit+0x90>)
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <HAL_UART_MspInit+0x90>)
 8001998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199c:	6153      	str	r3, [r2, #20]
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_UART_MspInit+0x90>)
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019aa:	230c      	movs	r3, #12
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b6:	2303      	movs	r3, #3
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ba:	2307      	movs	r3, #7
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c8:	f001 fc86 	bl	80032d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2100      	movs	r1, #0
 80019d0:	2026      	movs	r0, #38	; 0x26
 80019d2:	f001 fa20 	bl	8002e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019d6:	2026      	movs	r0, #38	; 0x26
 80019d8:	f001 fa39 	bl	8002e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019dc:	bf00      	nop
 80019de:	3728      	adds	r7, #40	; 0x28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40004400 	.word	0x40004400
 80019e8:	40021000 	.word	0x40021000

080019ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <NMI_Handler+0x4>

080019f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <HardFault_Handler+0x4>

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <MemManage_Handler+0x4>

080019fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <BusFault_Handler+0x4>

08001a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <UsageFault_Handler+0x4>

08001a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a38:	f000 f8b0 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <DMA1_Channel1_IRQHandler+0x10>)
 8001a46:	f001 fb39 	bl	80030bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000078 	.word	0x20000078

08001a54 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001a5a:	f003 fcbd 	bl	80053d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200000bc 	.word	0x200000bc

08001a68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	TIM3_flag = 1;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <TIM3_IRQHandler+0x14>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a72:	4803      	ldr	r0, [pc, #12]	; (8001a80 <TIM3_IRQHandler+0x18>)
 8001a74:	f003 fcb0 	bl	80053d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2000029c 	.word	0x2000029c
 8001a80:	20000154 	.word	0x20000154

08001a84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <USART2_IRQHandler+0x10>)
 8001a8a:	f004 fdff 	bl	800668c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200001a0 	.word	0x200001a0

08001a98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <SystemInit+0x20>)
 8001a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <SystemInit+0x20>)
 8001aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ac0:	f7ff ffea 	bl	8001a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac4:	480c      	ldr	r0, [pc, #48]	; (8001af8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ac6:	490d      	ldr	r1, [pc, #52]	; (8001afc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <LoopForever+0xe>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001acc:	e002      	b.n	8001ad4 <LoopCopyDataInit>

08001ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad2:	3304      	adds	r3, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad8:	d3f9      	bcc.n	8001ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001adc:	4c0a      	ldr	r4, [pc, #40]	; (8001b08 <LoopForever+0x16>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae0:	e001      	b.n	8001ae6 <LoopFillZerobss>

08001ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae4:	3204      	adds	r2, #4

08001ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae8:	d3fb      	bcc.n	8001ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aea:	f005 ff77 	bl	80079dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aee:	f7fe ffeb 	bl	8000ac8 <main>

08001af2 <LoopForever>:

LoopForever:
    b LoopForever
 8001af2:	e7fe      	b.n	8001af2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001af4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001afc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b00:	08007a8c 	.word	0x08007a8c
  ldr r2, =_sbss
 8001b04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b08:	200002a4 	.word	0x200002a4

08001b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b0c:	e7fe      	b.n	8001b0c <ADC1_2_IRQHandler>
	...

08001b10 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_Init+0x28>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_Init+0x28>)
 8001b1a:	f043 0310 	orr.w	r3, r3, #16
 8001b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f001 f96d 	bl	8002e00 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b26:	200f      	movs	r0, #15
 8001b28:	f000 f808 	bl	8001b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2c:	f7ff fde0 	bl	80016f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40022000 	.word	0x40022000

08001b3c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x54>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x58>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f001 f985 	bl	8002e6a <HAL_SYSTICK_Config>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00e      	b.n	8001b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d80a      	bhi.n	8001b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b70:	2200      	movs	r2, #0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f001 f94d 	bl	8002e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <HAL_InitTick+0x5c>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000000 	.word	0x20000000
 8001b94:	20000008 	.word	0x20000008
 8001b98:	20000004 	.word	0x20000004

08001b9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x24>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_IncTick+0x24>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000008 	.word	0x20000008
 8001bc0:	200002a0 	.word	0x200002a0

08001bc4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	200002a0 	.word	0x200002a0

08001bdc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b09a      	sub	sp, #104	; 0x68
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e1e3      	b.n	8002000 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d176      	bne.n	8001d38 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d152      	bne.n	8001cf8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff fd63 	bl	8001738 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d13b      	bne.n	8001cf8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 ff87 	bl	8002b94 <ADC_Disable>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d12f      	bne.n	8001cf8 <HAL_ADC_Init+0xe0>
 8001c98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d12b      	bne.n	8001cf8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ca8:	f023 0302 	bic.w	r3, r3, #2
 8001cac:	f043 0202 	orr.w	r2, r3, #2
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cc2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cd2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd4:	4b92      	ldr	r3, [pc, #584]	; (8001f20 <HAL_ADC_Init+0x308>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a92      	ldr	r2, [pc, #584]	; (8001f24 <HAL_ADC_Init+0x30c>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	0c9a      	lsrs	r2, r3, #18
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cea:	e002      	b.n	8001cf2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f9      	bne.n	8001cec <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d14:	d110      	bne.n	8001d38 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f023 0312 	bic.w	r3, r3, #18
 8001d1e:	f043 0210 	orr.w	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f043 0201 	orr.w	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f040 8150 	bne.w	8001fe6 <HAL_ADC_Init+0x3ce>
 8001d46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 814b 	bne.w	8001fe6 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f040 8143 	bne.w	8001fe6 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d68:	f043 0202 	orr.w	r2, r3, #2
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d78:	d004      	beq.n	8001d84 <HAL_ADC_Init+0x16c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a6a      	ldr	r2, [pc, #424]	; (8001f28 <HAL_ADC_Init+0x310>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_Init+0x170>
 8001d84:	4b69      	ldr	r3, [pc, #420]	; (8001f2c <HAL_ADC_Init+0x314>)
 8001d86:	e000      	b.n	8001d8a <HAL_ADC_Init+0x172>
 8001d88:	4b69      	ldr	r3, [pc, #420]	; (8001f30 <HAL_ADC_Init+0x318>)
 8001d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d94:	d102      	bne.n	8001d9c <HAL_ADC_Init+0x184>
 8001d96:	4b64      	ldr	r3, [pc, #400]	; (8001f28 <HAL_ADC_Init+0x310>)
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	e01a      	b.n	8001dd2 <HAL_ADC_Init+0x1ba>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a61      	ldr	r2, [pc, #388]	; (8001f28 <HAL_ADC_Init+0x310>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d103      	bne.n	8001dae <HAL_ADC_Init+0x196>
 8001da6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	e011      	b.n	8001dd2 <HAL_ADC_Init+0x1ba>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a60      	ldr	r2, [pc, #384]	; (8001f34 <HAL_ADC_Init+0x31c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d102      	bne.n	8001dbe <HAL_ADC_Init+0x1a6>
 8001db8:	4b5f      	ldr	r3, [pc, #380]	; (8001f38 <HAL_ADC_Init+0x320>)
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	e009      	b.n	8001dd2 <HAL_ADC_Init+0x1ba>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a5d      	ldr	r2, [pc, #372]	; (8001f38 <HAL_ADC_Init+0x320>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d102      	bne.n	8001dce <HAL_ADC_Init+0x1b6>
 8001dc8:	4b5a      	ldr	r3, [pc, #360]	; (8001f34 <HAL_ADC_Init+0x31c>)
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e001      	b.n	8001dd2 <HAL_ADC_Init+0x1ba>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d108      	bne.n	8001df2 <HAL_ADC_Init+0x1da>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_ADC_Init+0x1da>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_ADC_Init+0x1dc>
 8001df2:	2300      	movs	r3, #0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d11c      	bne.n	8001e32 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001df8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d010      	beq.n	8001e20 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_ADC_Init+0x202>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_Init+0x202>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_ADC_Init+0x204>
 8001e1a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d108      	bne.n	8001e32 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e30:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7e5b      	ldrb	r3, [r3, #25]
 8001e36:	035b      	lsls	r3, r3, #13
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3c:	2a01      	cmp	r2, #1
 8001e3e:	d002      	beq.n	8001e46 <HAL_ADC_Init+0x22e>
 8001e40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e44:	e000      	b.n	8001e48 <HAL_ADC_Init+0x230>
 8001e46:	2200      	movs	r2, #0
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d11b      	bne.n	8001e9e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7e5b      	ldrb	r3, [r3, #25]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d109      	bne.n	8001e82 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	3b01      	subs	r3, #1
 8001e74:	045a      	lsls	r2, r3, #17
 8001e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7e:	663b      	str	r3, [r7, #96]	; 0x60
 8001e80:	e00d      	b.n	8001e9e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001e8a:	f043 0220 	orr.w	r2, r3, #32
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f043 0201 	orr.w	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d054      	beq.n	8001f50 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a22      	ldr	r2, [pc, #136]	; (8001f34 <HAL_ADC_Init+0x31c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d004      	beq.n	8001eba <HAL_ADC_Init+0x2a2>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a20      	ldr	r2, [pc, #128]	; (8001f38 <HAL_ADC_Init+0x320>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d140      	bne.n	8001f3c <HAL_ADC_Init+0x324>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001ec2:	d02a      	beq.n	8001f1a <HAL_ADC_Init+0x302>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ecc:	d022      	beq.n	8001f14 <HAL_ADC_Init+0x2fc>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001ed6:	d01a      	beq.n	8001f0e <HAL_ADC_Init+0x2f6>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001ee0:	d012      	beq.n	8001f08 <HAL_ADC_Init+0x2f0>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001eea:	d00a      	beq.n	8001f02 <HAL_ADC_Init+0x2ea>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001ef4:	d002      	beq.n	8001efc <HAL_ADC_Init+0x2e4>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	e023      	b.n	8001f44 <HAL_ADC_Init+0x32c>
 8001efc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f00:	e020      	b.n	8001f44 <HAL_ADC_Init+0x32c>
 8001f02:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001f06:	e01d      	b.n	8001f44 <HAL_ADC_Init+0x32c>
 8001f08:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001f0c:	e01a      	b.n	8001f44 <HAL_ADC_Init+0x32c>
 8001f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f12:	e017      	b.n	8001f44 <HAL_ADC_Init+0x32c>
 8001f14:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001f18:	e014      	b.n	8001f44 <HAL_ADC_Init+0x32c>
 8001f1a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001f1e:	e011      	b.n	8001f44 <HAL_ADC_Init+0x32c>
 8001f20:	20000000 	.word	0x20000000
 8001f24:	431bde83 	.word	0x431bde83
 8001f28:	50000100 	.word	0x50000100
 8001f2c:	50000300 	.word	0x50000300
 8001f30:	50000700 	.word	0x50000700
 8001f34:	50000400 	.word	0x50000400
 8001f38:	50000500 	.word	0x50000500
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d114      	bne.n	8001f88 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f6c:	f023 0302 	bic.w	r3, r3, #2
 8001f70:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7e1b      	ldrb	r3, [r3, #24]
 8001f76:	039a      	lsls	r2, r3, #14
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4313      	orrs	r3, r2
 8001f82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f84:	4313      	orrs	r3, r2
 8001f86:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <HAL_ADC_Init+0x3f0>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d10c      	bne.n	8001fbe <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f023 010f 	bic.w	r1, r3, #15
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	1e5a      	subs	r2, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
 8001fbc:	e007      	b.n	8001fce <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 020f 	bic.w	r2, r2, #15
 8001fcc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f023 0303 	bic.w	r3, r3, #3
 8001fdc:	f043 0201 	orr.w	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40
 8001fe4:	e00a      	b.n	8001ffc <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f023 0312 	bic.w	r3, r3, #18
 8001fee:	f043 0210 	orr.w	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001ffc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002000:	4618      	mov	r0, r3
 8002002:	3768      	adds	r7, #104	; 0x68
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	fff0c007 	.word	0xfff0c007

0800200c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	2b00      	cmp	r3, #0
 8002028:	f040 80f7 	bne.w	800221a <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_ADC_Start_DMA+0x2e>
 8002036:	2302      	movs	r3, #2
 8002038:	e0f2      	b.n	8002220 <HAL_ADC_Start_DMA+0x214>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800204a:	d004      	beq.n	8002056 <HAL_ADC_Start_DMA+0x4a>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a75      	ldr	r2, [pc, #468]	; (8002228 <HAL_ADC_Start_DMA+0x21c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d109      	bne.n	800206a <HAL_ADC_Start_DMA+0x5e>
 8002056:	4b75      	ldr	r3, [pc, #468]	; (800222c <HAL_ADC_Start_DMA+0x220>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 031f 	and.w	r3, r3, #31
 800205e:	2b00      	cmp	r3, #0
 8002060:	bf0c      	ite	eq
 8002062:	2301      	moveq	r3, #1
 8002064:	2300      	movne	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	e008      	b.n	800207c <HAL_ADC_Start_DMA+0x70>
 800206a:	4b71      	ldr	r3, [pc, #452]	; (8002230 <HAL_ADC_Start_DMA+0x224>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	2b00      	cmp	r3, #0
 8002074:	bf0c      	ite	eq
 8002076:	2301      	moveq	r3, #1
 8002078:	2300      	movne	r3, #0
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80c5 	beq.w	800220c <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 fd22 	bl	8002acc <ADC_Enable>
 8002088:	4603      	mov	r3, r0
 800208a:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800208c:	7dfb      	ldrb	r3, [r7, #23]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f040 80b7 	bne.w	8002202 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020b0:	d004      	beq.n	80020bc <HAL_ADC_Start_DMA+0xb0>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a5c      	ldr	r2, [pc, #368]	; (8002228 <HAL_ADC_Start_DMA+0x21c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d106      	bne.n	80020ca <HAL_ADC_Start_DMA+0xbe>
 80020bc:	4b5b      	ldr	r3, [pc, #364]	; (800222c <HAL_ADC_Start_DMA+0x220>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d010      	beq.n	80020ea <HAL_ADC_Start_DMA+0xde>
 80020c8:	e005      	b.n	80020d6 <HAL_ADC_Start_DMA+0xca>
 80020ca:	4b59      	ldr	r3, [pc, #356]	; (8002230 <HAL_ADC_Start_DMA+0x224>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_ADC_Start_DMA+0xde>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020de:	d004      	beq.n	80020ea <HAL_ADC_Start_DMA+0xde>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a53      	ldr	r2, [pc, #332]	; (8002234 <HAL_ADC_Start_DMA+0x228>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d115      	bne.n	8002116 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d036      	beq.n	8002172 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800210c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002114:	e02d      	b.n	8002172 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800212a:	d004      	beq.n	8002136 <HAL_ADC_Start_DMA+0x12a>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a3d      	ldr	r2, [pc, #244]	; (8002228 <HAL_ADC_Start_DMA+0x21c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d10a      	bne.n	800214c <HAL_ADC_Start_DMA+0x140>
 8002136:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf14      	ite	ne
 8002144:	2301      	movne	r3, #1
 8002146:	2300      	moveq	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	e008      	b.n	800215e <HAL_ADC_Start_DMA+0x152>
 800214c:	4b39      	ldr	r3, [pc, #228]	; (8002234 <HAL_ADC_Start_DMA+0x228>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf14      	ite	ne
 8002158:	2301      	movne	r3, #1
 800215a:	2300      	moveq	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800216a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800217a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800217e:	d106      	bne.n	800218e <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	f023 0206 	bic.w	r2, r3, #6
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	645a      	str	r2, [r3, #68]	; 0x44
 800218c:	e002      	b.n	8002194 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a0:	4a25      	ldr	r2, [pc, #148]	; (8002238 <HAL_ADC_Start_DMA+0x22c>)
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a8:	4a24      	ldr	r2, [pc, #144]	; (800223c <HAL_ADC_Start_DMA+0x230>)
 80021aa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b0:	4a23      	ldr	r2, [pc, #140]	; (8002240 <HAL_ADC_Start_DMA+0x234>)
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	221c      	movs	r2, #28
 80021ba:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0210 	orr.w	r2, r2, #16
 80021ca:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	3340      	adds	r3, #64	; 0x40
 80021e6:	4619      	mov	r1, r3
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f000 fe90 	bl	8002f10 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0204 	orr.w	r2, r2, #4
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	e00d      	b.n	800221e <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800220a:	e008      	b.n	800221e <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002218:	e001      	b.n	800221e <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800221e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	50000100 	.word	0x50000100
 800222c:	50000300 	.word	0x50000300
 8002230:	50000700 	.word	0x50000700
 8002234:	50000400 	.word	0x50000400
 8002238:	08002a01 	.word	0x08002a01
 800223c:	08002a7b 	.word	0x08002a7b
 8002240:	08002a97 	.word	0x08002a97

08002244 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002244:	b480      	push	{r7}
 8002246:	b09b      	sub	sp, #108	; 0x6c
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x22>
 8002262:	2302      	movs	r3, #2
 8002264:	e2ca      	b.n	80027fc <HAL_ADC_ConfigChannel+0x5b8>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	f040 82ae 	bne.w	80027da <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b04      	cmp	r3, #4
 8002284:	d81c      	bhi.n	80022c0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	461a      	mov	r2, r3
 800229a:	231f      	movs	r3, #31
 800229c:	4093      	lsls	r3, r2
 800229e:	43db      	mvns	r3, r3
 80022a0:	4019      	ands	r1, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	fa00 f203 	lsl.w	r2, r0, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30
 80022be:	e063      	b.n	8002388 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b09      	cmp	r3, #9
 80022c6:	d81e      	bhi.n	8002306 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	3b1e      	subs	r3, #30
 80022dc:	221f      	movs	r2, #31
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	4019      	ands	r1, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	3b1e      	subs	r3, #30
 80022f8:	fa00 f203 	lsl.w	r2, r0, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	635a      	str	r2, [r3, #52]	; 0x34
 8002304:	e040      	b.n	8002388 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b0e      	cmp	r3, #14
 800230c:	d81e      	bhi.n	800234c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	3b3c      	subs	r3, #60	; 0x3c
 8002322:	221f      	movs	r2, #31
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	4019      	ands	r1, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	3b3c      	subs	r3, #60	; 0x3c
 800233e:	fa00 f203 	lsl.w	r2, r0, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	639a      	str	r2, [r3, #56]	; 0x38
 800234a:	e01d      	b.n	8002388 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	3b5a      	subs	r3, #90	; 0x5a
 8002360:	221f      	movs	r2, #31
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	4019      	ands	r1, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	3b5a      	subs	r3, #90	; 0x5a
 800237c:	fa00 f203 	lsl.w	r2, r0, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 80e5 	bne.w	8002562 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b09      	cmp	r3, #9
 800239e:	d91c      	bls.n	80023da <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6999      	ldr	r1, [r3, #24]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	3b1e      	subs	r3, #30
 80023b2:	2207      	movs	r2, #7
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	4019      	ands	r1, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6898      	ldr	r0, [r3, #8]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	3b1e      	subs	r3, #30
 80023cc:	fa00 f203 	lsl.w	r2, r0, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	619a      	str	r2, [r3, #24]
 80023d8:	e019      	b.n	800240e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6959      	ldr	r1, [r3, #20]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	2207      	movs	r2, #7
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	4019      	ands	r1, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6898      	ldr	r0, [r3, #8]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	fa00 f203 	lsl.w	r2, r0, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	08db      	lsrs	r3, r3, #3
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	3b01      	subs	r3, #1
 800242c:	2b03      	cmp	r3, #3
 800242e:	d84f      	bhi.n	80024d0 <HAL_ADC_ConfigChannel+0x28c>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <HAL_ADC_ConfigChannel+0x1f4>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002449 	.word	0x08002449
 800243c:	0800246b 	.word	0x0800246b
 8002440:	0800248d 	.word	0x0800248d
 8002444:	080024af 	.word	0x080024af
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800244e:	4b9a      	ldr	r3, [pc, #616]	; (80026b8 <HAL_ADC_ConfigChannel+0x474>)
 8002450:	4013      	ands	r3, r2
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	0691      	lsls	r1, r2, #26
 8002458:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800245a:	430a      	orrs	r2, r1
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002466:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002468:	e07e      	b.n	8002568 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002470:	4b91      	ldr	r3, [pc, #580]	; (80026b8 <HAL_ADC_ConfigChannel+0x474>)
 8002472:	4013      	ands	r3, r2
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	0691      	lsls	r1, r2, #26
 800247a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800247c:	430a      	orrs	r2, r1
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002488:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800248a:	e06d      	b.n	8002568 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002492:	4b89      	ldr	r3, [pc, #548]	; (80026b8 <HAL_ADC_ConfigChannel+0x474>)
 8002494:	4013      	ands	r3, r2
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	0691      	lsls	r1, r2, #26
 800249c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800249e:	430a      	orrs	r2, r1
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024aa:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024ac:	e05c      	b.n	8002568 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024b4:	4b80      	ldr	r3, [pc, #512]	; (80026b8 <HAL_ADC_ConfigChannel+0x474>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	0691      	lsls	r1, r2, #26
 80024be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024c0:	430a      	orrs	r2, r1
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024cc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024ce:	e04b      	b.n	8002568 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	069b      	lsls	r3, r3, #26
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d107      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024f2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	069b      	lsls	r3, r3, #26
 8002504:	429a      	cmp	r2, r3
 8002506:	d107      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002516:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800251e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	069b      	lsls	r3, r3, #26
 8002528:	429a      	cmp	r2, r3
 800252a:	d107      	bne.n	800253c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800253a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	069b      	lsls	r3, r3, #26
 800254c:	429a      	cmp	r2, r3
 800254e:	d10a      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800255e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002560:	e001      	b.n	8002566 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002562:	bf00      	nop
 8002564:	e000      	b.n	8002568 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002566:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d108      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x344>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x344>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <HAL_ADC_ConfigChannel+0x346>
 8002588:	2300      	movs	r3, #0
 800258a:	2b00      	cmp	r3, #0
 800258c:	f040 8130 	bne.w	80027f0 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d00f      	beq.n	80025b8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2201      	movs	r2, #1
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43da      	mvns	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	400a      	ands	r2, r1
 80025b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80025b6:	e049      	b.n	800264c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2201      	movs	r2, #1
 80025c6:	409a      	lsls	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b09      	cmp	r3, #9
 80025d8:	d91c      	bls.n	8002614 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6999      	ldr	r1, [r3, #24]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	3b1b      	subs	r3, #27
 80025ec:	2207      	movs	r2, #7
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	4019      	ands	r1, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6898      	ldr	r0, [r3, #8]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	3b1b      	subs	r3, #27
 8002606:	fa00 f203 	lsl.w	r2, r0, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	619a      	str	r2, [r3, #24]
 8002612:	e01b      	b.n	800264c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6959      	ldr	r1, [r3, #20]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	2207      	movs	r2, #7
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	4019      	ands	r1, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6898      	ldr	r0, [r3, #8]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	fa00 f203 	lsl.w	r2, r0, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002654:	d004      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x41c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a18      	ldr	r2, [pc, #96]	; (80026bc <HAL_ADC_ConfigChannel+0x478>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d101      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x420>
 8002660:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <HAL_ADC_ConfigChannel+0x47c>)
 8002662:	e000      	b.n	8002666 <HAL_ADC_ConfigChannel+0x422>
 8002664:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <HAL_ADC_ConfigChannel+0x480>)
 8002666:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b10      	cmp	r3, #16
 800266e:	d105      	bne.n	800267c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002678:	2b00      	cmp	r3, #0
 800267a:	d015      	beq.n	80026a8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002680:	2b11      	cmp	r3, #17
 8002682:	d105      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00b      	beq.n	80026a8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002694:	2b12      	cmp	r3, #18
 8002696:	f040 80ab 	bne.w	80027f0 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800269a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 80a4 	bne.w	80027f0 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026b0:	d10a      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x484>
 80026b2:	4b02      	ldr	r3, [pc, #8]	; (80026bc <HAL_ADC_ConfigChannel+0x478>)
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	e022      	b.n	80026fe <HAL_ADC_ConfigChannel+0x4ba>
 80026b8:	83fff000 	.word	0x83fff000
 80026bc:	50000100 	.word	0x50000100
 80026c0:	50000300 	.word	0x50000300
 80026c4:	50000700 	.word	0x50000700
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a4e      	ldr	r2, [pc, #312]	; (8002808 <HAL_ADC_ConfigChannel+0x5c4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d103      	bne.n	80026da <HAL_ADC_ConfigChannel+0x496>
 80026d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	e011      	b.n	80026fe <HAL_ADC_ConfigChannel+0x4ba>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a4b      	ldr	r2, [pc, #300]	; (800280c <HAL_ADC_ConfigChannel+0x5c8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d102      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x4a6>
 80026e4:	4b4a      	ldr	r3, [pc, #296]	; (8002810 <HAL_ADC_ConfigChannel+0x5cc>)
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	e009      	b.n	80026fe <HAL_ADC_ConfigChannel+0x4ba>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a48      	ldr	r2, [pc, #288]	; (8002810 <HAL_ADC_ConfigChannel+0x5cc>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d102      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x4b6>
 80026f4:	4b45      	ldr	r3, [pc, #276]	; (800280c <HAL_ADC_ConfigChannel+0x5c8>)
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e001      	b.n	80026fe <HAL_ADC_ConfigChannel+0x4ba>
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d108      	bne.n	800271e <HAL_ADC_ConfigChannel+0x4da>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_ADC_ConfigChannel+0x4da>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_ADC_ConfigChannel+0x4dc>
 800271e:	2300      	movs	r3, #0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d150      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002724:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002726:	2b00      	cmp	r3, #0
 8002728:	d010      	beq.n	800274c <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d107      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x502>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x502>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_ADC_ConfigChannel+0x504>
 8002746:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002748:	2b00      	cmp	r3, #0
 800274a:	d13c      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b10      	cmp	r3, #16
 8002752:	d11d      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x54c>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800275c:	d118      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800275e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002768:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800276a:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <HAL_ADC_ConfigChannel+0x5d0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a2a      	ldr	r2, [pc, #168]	; (8002818 <HAL_ADC_ConfigChannel+0x5d4>)
 8002770:	fba2 2303 	umull	r2, r3, r2, r3
 8002774:	0c9a      	lsrs	r2, r3, #18
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002780:	e002      	b.n	8002788 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	3b01      	subs	r3, #1
 8002786:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f9      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800278e:	e02e      	b.n	80027ee <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b11      	cmp	r3, #17
 8002796:	d10b      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x56c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a0:	d106      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80027a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80027aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ac:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027ae:	e01e      	b.n	80027ee <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b12      	cmp	r3, #18
 80027b6:	d11a      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80027b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027c4:	e013      	b.n	80027ee <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f043 0220 	orr.w	r2, r3, #32
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80027d8:	e00a      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f043 0220 	orr.w	r2, r3, #32
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80027ec:	e000      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027ee:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	376c      	adds	r7, #108	; 0x6c
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	50000100 	.word	0x50000100
 800280c:	50000400 	.word	0x50000400
 8002810:	50000500 	.word	0x50000500
 8002814:	20000000 	.word	0x20000000
 8002818:	431bde83 	.word	0x431bde83

0800281c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800281c:	b480      	push	{r7}
 800281e:	b099      	sub	sp, #100	; 0x64
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002834:	d102      	bne.n	800283c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002836:	4b6d      	ldr	r3, [pc, #436]	; (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	e01a      	b.n	8002872 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a6a      	ldr	r2, [pc, #424]	; (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d103      	bne.n	800284e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002846:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	e011      	b.n	8002872 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a67      	ldr	r2, [pc, #412]	; (80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d102      	bne.n	800285e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002858:	4b66      	ldr	r3, [pc, #408]	; (80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	e009      	b.n	8002872 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a64      	ldr	r2, [pc, #400]	; (80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d102      	bne.n	800286e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002868:	4b61      	ldr	r3, [pc, #388]	; (80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	e001      	b.n	8002872 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0b0      	b.n	80029de <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002886:	2302      	movs	r3, #2
 8002888:	e0a9      	b.n	80029de <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	f040 808d 	bne.w	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 8086 	bne.w	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028b8:	d004      	beq.n	80028c4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a4b      	ldr	r2, [pc, #300]	; (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d101      	bne.n	80028c8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80028c4:	4b4c      	ldr	r3, [pc, #304]	; (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80028c6:	e000      	b.n	80028ca <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80028c8:	4b4c      	ldr	r3, [pc, #304]	; (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80028ca:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d040      	beq.n	8002956 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80028d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028e6:	035b      	lsls	r3, r3, #13
 80028e8:	430b      	orrs	r3, r1
 80028ea:	431a      	orrs	r2, r3
 80028ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ee:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d108      	bne.n	8002910 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002910:	2300      	movs	r3, #0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d15c      	bne.n	80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d107      	bne.n	8002932 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002932:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002934:	2b00      	cmp	r3, #0
 8002936:	d14b      	bne.n	80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002938:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002940:	f023 030f 	bic.w	r3, r3, #15
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	6811      	ldr	r1, [r2, #0]
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	6892      	ldr	r2, [r2, #8]
 800294c:	430a      	orrs	r2, r1
 800294e:	431a      	orrs	r2, r3
 8002950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002952:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002954:	e03c      	b.n	80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002956:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800295e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002960:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d108      	bne.n	8002982 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002982:	2300      	movs	r3, #0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d123      	bne.n	80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d107      	bne.n	80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80029a4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d112      	bne.n	80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80029aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029b2:	f023 030f 	bic.w	r3, r3, #15
 80029b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029b8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029ba:	e009      	b.n	80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f043 0220 	orr.w	r2, r3, #32
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80029ce:	e000      	b.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029d0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80029da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80029de:	4618      	mov	r0, r3
 80029e0:	3764      	adds	r7, #100	; 0x64
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	50000100 	.word	0x50000100
 80029f0:	50000400 	.word	0x50000400
 80029f4:	50000500 	.word	0x50000500
 80029f8:	50000300 	.word	0x50000300
 80029fc:	50000700 	.word	0x50000700

08002a00 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d126      	bne.n	8002a68 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d115      	bne.n	8002a60 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d111      	bne.n	8002a60 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d105      	bne.n	8002a60 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f043 0201 	orr.w	r2, r3, #1
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f7ff f8bb 	bl	8001bdc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002a66:	e004      	b.n	8002a72 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
}
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f7ff f8b1 	bl	8001bf0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	f043 0204 	orr.w	r2, r3, #4
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f7ff f8a1 	bl	8001c04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d108      	bne.n	8002af8 <ADC_Enable+0x2c>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <ADC_Enable+0x2c>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <ADC_Enable+0x2e>
 8002af8:	2300      	movs	r3, #0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d143      	bne.n	8002b86 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <ADC_Enable+0xc4>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00d      	beq.n	8002b28 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	f043 0210 	orr.w	r2, r3, #16
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1c:	f043 0201 	orr.w	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e02f      	b.n	8002b88 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002b38:	f7ff f844 	bl	8001bc4 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b3e:	e01b      	b.n	8002b78 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b40:	f7ff f840 	bl	8001bc4 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d914      	bls.n	8002b78 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d00d      	beq.n	8002b78 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f043 0210 	orr.w	r2, r3, #16
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6c:	f043 0201 	orr.w	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e007      	b.n	8002b88 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d1dc      	bne.n	8002b40 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	8000003f 	.word	0x8000003f

08002b94 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d108      	bne.n	8002bc0 <ADC_Disable+0x2c>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <ADC_Disable+0x2c>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <ADC_Disable+0x2e>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d047      	beq.n	8002c56 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 030d 	and.w	r3, r3, #13
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d10f      	bne.n	8002bf4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0202 	orr.w	r2, r2, #2
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2203      	movs	r2, #3
 8002bea:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002bec:	f7fe ffea 	bl	8001bc4 <HAL_GetTick>
 8002bf0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002bf2:	e029      	b.n	8002c48 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f043 0210 	orr.w	r2, r3, #16
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c04:	f043 0201 	orr.w	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e023      	b.n	8002c58 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c10:	f7fe ffd8 	bl	8001bc4 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d914      	bls.n	8002c48 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d10d      	bne.n	8002c48 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	f043 0210 	orr.w	r2, r3, #16
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3c:	f043 0201 	orr.w	r2, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e007      	b.n	8002c58 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d0dc      	beq.n	8002c10 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c92:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	60d3      	str	r3, [r2, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cac:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	f003 0307 	and.w	r3, r3, #7
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	db0b      	blt.n	8002cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	f003 021f 	and.w	r2, r3, #31
 8002cdc:	4907      	ldr	r1, [pc, #28]	; (8002cfc <__NVIC_EnableIRQ+0x38>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	e000e100 	.word	0xe000e100

08002d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	6039      	str	r1, [r7, #0]
 8002d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	db0a      	blt.n	8002d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	490c      	ldr	r1, [pc, #48]	; (8002d4c <__NVIC_SetPriority+0x4c>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	0112      	lsls	r2, r2, #4
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	440b      	add	r3, r1
 8002d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d28:	e00a      	b.n	8002d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4908      	ldr	r1, [pc, #32]	; (8002d50 <__NVIC_SetPriority+0x50>)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	3b04      	subs	r3, #4
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	761a      	strb	r2, [r3, #24]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000e100 	.word	0xe000e100
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	; 0x24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f1c3 0307 	rsb	r3, r3, #7
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	bf28      	it	cs
 8002d72:	2304      	movcs	r3, #4
 8002d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d902      	bls.n	8002d84 <NVIC_EncodePriority+0x30>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3b03      	subs	r3, #3
 8002d82:	e000      	b.n	8002d86 <NVIC_EncodePriority+0x32>
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	f04f 32ff 	mov.w	r2, #4294967295
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43da      	mvns	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	401a      	ands	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	43d9      	mvns	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	4313      	orrs	r3, r2
         );
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3724      	adds	r7, #36	; 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dcc:	d301      	bcc.n	8002dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00f      	b.n	8002df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <SysTick_Config+0x40>)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dda:	210f      	movs	r1, #15
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8002de0:	f7ff ff8e 	bl	8002d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <SysTick_Config+0x40>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dea:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <SysTick_Config+0x40>)
 8002dec:	2207      	movs	r2, #7
 8002dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	e000e010 	.word	0xe000e010

08002e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff ff29 	bl	8002c60 <__NVIC_SetPriorityGrouping>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e28:	f7ff ff3e 	bl	8002ca8 <__NVIC_GetPriorityGrouping>
 8002e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	f7ff ff8e 	bl	8002d54 <NVIC_EncodePriority>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff5d 	bl	8002d00 <__NVIC_SetPriority>
}
 8002e46:	bf00      	nop
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	4603      	mov	r3, r0
 8002e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff31 	bl	8002cc4 <__NVIC_EnableIRQ>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ffa2 	bl	8002dbc <SysTick_Config>
 8002e78:	4603      	mov	r3, r0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e037      	b.n	8002f08 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002eae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002eb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f9b8 	bl	8003260 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}  
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_DMA_Start_IT+0x20>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e04a      	b.n	8002fc6 <HAL_DMA_Start_IT+0xb6>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d13a      	bne.n	8002fb8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2202      	movs	r2, #2
 8002f46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0201 	bic.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f94b 	bl	8003202 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 020e 	orr.w	r2, r2, #14
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e00f      	b.n	8002fa6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 020a 	orr.w	r2, r2, #10
 8002f94:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0204 	bic.w	r2, r2, #4
 8002fa4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	e005      	b.n	8002fc4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d008      	beq.n	8002ff2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e020      	b.n	8003034 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 020e 	bic.w	r2, r2, #14
 8003000:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0201 	bic.w	r2, r2, #1
 8003010:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301a:	2101      	movs	r1, #1
 800301c:	fa01 f202 	lsl.w	r2, r1, r2
 8003020:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003052:	2b02      	cmp	r3, #2
 8003054:	d005      	beq.n	8003062 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2204      	movs	r2, #4
 800305a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
 8003060:	e027      	b.n	80030b2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 020e 	bic.w	r2, r2, #14
 8003070:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0201 	bic.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308a:	2101      	movs	r1, #1
 800308c:	fa01 f202 	lsl.w	r2, r1, r2
 8003090:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	4798      	blx	r3
    } 
  }
  return status;
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	2204      	movs	r2, #4
 80030da:	409a      	lsls	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d024      	beq.n	800312e <HAL_DMA_IRQHandler+0x72>
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d01f      	beq.n	800312e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d107      	bne.n	800310c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0204 	bic.w	r2, r2, #4
 800310a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003114:	2104      	movs	r1, #4
 8003116:	fa01 f202 	lsl.w	r2, r1, r2
 800311a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	2b00      	cmp	r3, #0
 8003122:	d06a      	beq.n	80031fa <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800312c:	e065      	b.n	80031fa <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	2202      	movs	r2, #2
 8003134:	409a      	lsls	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4013      	ands	r3, r2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d02c      	beq.n	8003198 <HAL_DMA_IRQHandler+0xdc>
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d027      	beq.n	8003198 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10b      	bne.n	800316e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 020a 	bic.w	r2, r2, #10
 8003164:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	2102      	movs	r1, #2
 8003178:	fa01 f202 	lsl.w	r2, r1, r2
 800317c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	2b00      	cmp	r3, #0
 800318c:	d035      	beq.n	80031fa <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003196:	e030      	b.n	80031fa <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	2208      	movs	r2, #8
 800319e:	409a      	lsls	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d028      	beq.n	80031fa <HAL_DMA_IRQHandler+0x13e>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d023      	beq.n	80031fa <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 020e 	bic.w	r2, r2, #14
 80031c0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ca:	2101      	movs	r1, #1
 80031cc:	fa01 f202 	lsl.w	r2, r1, r2
 80031d0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d004      	beq.n	80031fa <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
    }
  }
}  
 80031f8:	e7ff      	b.n	80031fa <HAL_DMA_IRQHandler+0x13e>
 80031fa:	bf00      	nop
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003202:	b480      	push	{r7}
 8003204:	b085      	sub	sp, #20
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	2101      	movs	r1, #1
 800321a:	fa01 f202 	lsl.w	r2, r1, r2
 800321e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b10      	cmp	r3, #16
 800322e:	d108      	bne.n	8003242 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003240:	e007      	b.n	8003252 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	60da      	str	r2, [r3, #12]
}
 8003252:	bf00      	nop
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <DMA_CalcBaseAndBitshift+0x60>)
 8003270:	429a      	cmp	r2, r3
 8003272:	d80f      	bhi.n	8003294 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <DMA_CalcBaseAndBitshift+0x64>)
 800327c:	4413      	add	r3, r2
 800327e:	4a12      	ldr	r2, [pc, #72]	; (80032c8 <DMA_CalcBaseAndBitshift+0x68>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	009a      	lsls	r2, r3, #2
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a0f      	ldr	r2, [pc, #60]	; (80032cc <DMA_CalcBaseAndBitshift+0x6c>)
 8003290:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003292:	e00e      	b.n	80032b2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <DMA_CalcBaseAndBitshift+0x70>)
 800329c:	4413      	add	r3, r2
 800329e:	4a0a      	ldr	r2, [pc, #40]	; (80032c8 <DMA_CalcBaseAndBitshift+0x68>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	009a      	lsls	r2, r3, #2
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <DMA_CalcBaseAndBitshift+0x74>)
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40020407 	.word	0x40020407
 80032c4:	bffdfff8 	.word	0xbffdfff8
 80032c8:	cccccccd 	.word	0xcccccccd
 80032cc:	40020000 	.word	0x40020000
 80032d0:	bffdfbf8 	.word	0xbffdfbf8
 80032d4:	40020400 	.word	0x40020400

080032d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032e6:	e160      	b.n	80035aa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	2101      	movs	r1, #1
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	4013      	ands	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 8152 	beq.w	80035a4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d005      	beq.n	8003318 <HAL_GPIO_Init+0x40>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d130      	bne.n	800337a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	2203      	movs	r2, #3
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800334e:	2201      	movs	r2, #1
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4013      	ands	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	091b      	lsrs	r3, r3, #4
 8003364:	f003 0201 	and.w	r2, r3, #1
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b03      	cmp	r3, #3
 8003384:	d017      	beq.n	80033b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	2203      	movs	r2, #3
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4013      	ands	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d123      	bne.n	800340a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	08da      	lsrs	r2, r3, #3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3208      	adds	r2, #8
 80033ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	220f      	movs	r2, #15
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	08da      	lsrs	r2, r3, #3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3208      	adds	r2, #8
 8003404:	6939      	ldr	r1, [r7, #16]
 8003406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	2203      	movs	r2, #3
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4013      	ands	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0203 	and.w	r2, r3, #3
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80ac 	beq.w	80035a4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344c:	4b5e      	ldr	r3, [pc, #376]	; (80035c8 <HAL_GPIO_Init+0x2f0>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	4a5d      	ldr	r2, [pc, #372]	; (80035c8 <HAL_GPIO_Init+0x2f0>)
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	6193      	str	r3, [r2, #24]
 8003458:	4b5b      	ldr	r3, [pc, #364]	; (80035c8 <HAL_GPIO_Init+0x2f0>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003464:	4a59      	ldr	r2, [pc, #356]	; (80035cc <HAL_GPIO_Init+0x2f4>)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	089b      	lsrs	r3, r3, #2
 800346a:	3302      	adds	r3, #2
 800346c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003470:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	220f      	movs	r2, #15
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4013      	ands	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800348e:	d025      	beq.n	80034dc <HAL_GPIO_Init+0x204>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a4f      	ldr	r2, [pc, #316]	; (80035d0 <HAL_GPIO_Init+0x2f8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d01f      	beq.n	80034d8 <HAL_GPIO_Init+0x200>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a4e      	ldr	r2, [pc, #312]	; (80035d4 <HAL_GPIO_Init+0x2fc>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d019      	beq.n	80034d4 <HAL_GPIO_Init+0x1fc>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a4d      	ldr	r2, [pc, #308]	; (80035d8 <HAL_GPIO_Init+0x300>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d013      	beq.n	80034d0 <HAL_GPIO_Init+0x1f8>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a4c      	ldr	r2, [pc, #304]	; (80035dc <HAL_GPIO_Init+0x304>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d00d      	beq.n	80034cc <HAL_GPIO_Init+0x1f4>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a4b      	ldr	r2, [pc, #300]	; (80035e0 <HAL_GPIO_Init+0x308>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d007      	beq.n	80034c8 <HAL_GPIO_Init+0x1f0>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a4a      	ldr	r2, [pc, #296]	; (80035e4 <HAL_GPIO_Init+0x30c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d101      	bne.n	80034c4 <HAL_GPIO_Init+0x1ec>
 80034c0:	2306      	movs	r3, #6
 80034c2:	e00c      	b.n	80034de <HAL_GPIO_Init+0x206>
 80034c4:	2307      	movs	r3, #7
 80034c6:	e00a      	b.n	80034de <HAL_GPIO_Init+0x206>
 80034c8:	2305      	movs	r3, #5
 80034ca:	e008      	b.n	80034de <HAL_GPIO_Init+0x206>
 80034cc:	2304      	movs	r3, #4
 80034ce:	e006      	b.n	80034de <HAL_GPIO_Init+0x206>
 80034d0:	2303      	movs	r3, #3
 80034d2:	e004      	b.n	80034de <HAL_GPIO_Init+0x206>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e002      	b.n	80034de <HAL_GPIO_Init+0x206>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <HAL_GPIO_Init+0x206>
 80034dc:	2300      	movs	r3, #0
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	f002 0203 	and.w	r2, r2, #3
 80034e4:	0092      	lsls	r2, r2, #2
 80034e6:	4093      	lsls	r3, r2
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034ee:	4937      	ldr	r1, [pc, #220]	; (80035cc <HAL_GPIO_Init+0x2f4>)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	089b      	lsrs	r3, r3, #2
 80034f4:	3302      	adds	r3, #2
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034fc:	4b3a      	ldr	r3, [pc, #232]	; (80035e8 <HAL_GPIO_Init+0x310>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	43db      	mvns	r3, r3
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4013      	ands	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003520:	4a31      	ldr	r2, [pc, #196]	; (80035e8 <HAL_GPIO_Init+0x310>)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003526:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <HAL_GPIO_Init+0x310>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	43db      	mvns	r3, r3
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4013      	ands	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800354a:	4a27      	ldr	r2, [pc, #156]	; (80035e8 <HAL_GPIO_Init+0x310>)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003550:	4b25      	ldr	r3, [pc, #148]	; (80035e8 <HAL_GPIO_Init+0x310>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	43db      	mvns	r3, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003574:	4a1c      	ldr	r2, [pc, #112]	; (80035e8 <HAL_GPIO_Init+0x310>)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800357a:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <HAL_GPIO_Init+0x310>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800359e:	4a12      	ldr	r2, [pc, #72]	; (80035e8 <HAL_GPIO_Init+0x310>)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3301      	adds	r3, #1
 80035a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	fa22 f303 	lsr.w	r3, r2, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f47f ae97 	bne.w	80032e8 <HAL_GPIO_Init+0x10>
  }
}
 80035ba:	bf00      	nop
 80035bc:	bf00      	nop
 80035be:	371c      	adds	r7, #28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40010000 	.word	0x40010000
 80035d0:	48000400 	.word	0x48000400
 80035d4:	48000800 	.word	0x48000800
 80035d8:	48000c00 	.word	0x48000c00
 80035dc:	48001000 	.word	0x48001000
 80035e0:	48001400 	.word	0x48001400
 80035e4:	48001800 	.word	0x48001800
 80035e8:	40010400 	.word	0x40010400

080035ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
 80035f8:	4613      	mov	r3, r2
 80035fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035fc:	787b      	ldrb	r3, [r7, #1]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003602:	887a      	ldrh	r2, [r7, #2]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003608:	e002      	b.n	8003610 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003622:	af00      	add	r7, sp, #0
 8003624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003628:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800362c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800362e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003632:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d102      	bne.n	8003642 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f001 b83a 	b.w	80046b6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003646:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 816f 	beq.w	8003936 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003658:	4bb5      	ldr	r3, [pc, #724]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b04      	cmp	r3, #4
 8003662:	d00c      	beq.n	800367e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003664:	4bb2      	ldr	r3, [pc, #712]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 030c 	and.w	r3, r3, #12
 800366c:	2b08      	cmp	r3, #8
 800366e:	d15c      	bne.n	800372a <HAL_RCC_OscConfig+0x10e>
 8003670:	4baf      	ldr	r3, [pc, #700]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800367c:	d155      	bne.n	800372a <HAL_RCC_OscConfig+0x10e>
 800367e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003682:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003692:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003696:	fab3 f383 	clz	r3, r3
 800369a:	b2db      	uxtb	r3, r3
 800369c:	095b      	lsrs	r3, r3, #5
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d102      	bne.n	80036b0 <HAL_RCC_OscConfig+0x94>
 80036aa:	4ba1      	ldr	r3, [pc, #644]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	e015      	b.n	80036dc <HAL_RCC_OscConfig+0xc0>
 80036b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036b4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80036bc:	fa93 f3a3 	rbit	r3, r3
 80036c0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80036c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036c8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80036cc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80036d0:	fa93 f3a3 	rbit	r3, r3
 80036d4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80036d8:	4b95      	ldr	r3, [pc, #596]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036e0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80036e4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80036e8:	fa92 f2a2 	rbit	r2, r2
 80036ec:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80036f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80036f4:	fab2 f282 	clz	r2, r2
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	f042 0220 	orr.w	r2, r2, #32
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	f002 021f 	and.w	r2, r2, #31
 8003704:	2101      	movs	r1, #1
 8003706:	fa01 f202 	lsl.w	r2, r1, r2
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 8111 	beq.w	8003934 <HAL_RCC_OscConfig+0x318>
 8003712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003716:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	f040 8108 	bne.w	8003934 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	f000 bfc6 	b.w	80046b6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800372a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800372e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373a:	d106      	bne.n	800374a <HAL_RCC_OscConfig+0x12e>
 800373c:	4b7c      	ldr	r3, [pc, #496]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a7b      	ldr	r2, [pc, #492]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 8003742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	e036      	b.n	80037b8 <HAL_RCC_OscConfig+0x19c>
 800374a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800374e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10c      	bne.n	8003774 <HAL_RCC_OscConfig+0x158>
 800375a:	4b75      	ldr	r3, [pc, #468]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a74      	ldr	r2, [pc, #464]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 8003760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	4b72      	ldr	r3, [pc, #456]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a71      	ldr	r2, [pc, #452]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 800376c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e021      	b.n	80037b8 <HAL_RCC_OscConfig+0x19c>
 8003774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003778:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003784:	d10c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x184>
 8003786:	4b6a      	ldr	r3, [pc, #424]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a69      	ldr	r2, [pc, #420]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 800378c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	4b67      	ldr	r3, [pc, #412]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a66      	ldr	r2, [pc, #408]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 8003798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e00b      	b.n	80037b8 <HAL_RCC_OscConfig+0x19c>
 80037a0:	4b63      	ldr	r3, [pc, #396]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a62      	ldr	r2, [pc, #392]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 80037a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4b60      	ldr	r3, [pc, #384]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a5f      	ldr	r2, [pc, #380]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 80037b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037b6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d059      	beq.n	800387c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fe f9fc 	bl	8001bc4 <HAL_GetTick>
 80037cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d0:	e00a      	b.n	80037e8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d2:	f7fe f9f7 	bl	8001bc4 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	; 0x64
 80037e0:	d902      	bls.n	80037e8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	f000 bf67 	b.w	80046b6 <HAL_RCC_OscConfig+0x109a>
 80037e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ec:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80037fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003800:	fab3 f383 	clz	r3, r3
 8003804:	b2db      	uxtb	r3, r3
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f043 0301 	orr.w	r3, r3, #1
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	d102      	bne.n	800381a <HAL_RCC_OscConfig+0x1fe>
 8003814:	4b46      	ldr	r3, [pc, #280]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	e015      	b.n	8003846 <HAL_RCC_OscConfig+0x22a>
 800381a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800381e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800382e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003832:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003836:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003842:	4b3b      	ldr	r3, [pc, #236]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800384a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800384e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003852:	fa92 f2a2 	rbit	r2, r2
 8003856:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800385a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800385e:	fab2 f282 	clz	r2, r2
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	f042 0220 	orr.w	r2, r2, #32
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	f002 021f 	and.w	r2, r2, #31
 800386e:	2101      	movs	r1, #1
 8003870:	fa01 f202 	lsl.w	r2, r1, r2
 8003874:	4013      	ands	r3, r2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0ab      	beq.n	80037d2 <HAL_RCC_OscConfig+0x1b6>
 800387a:	e05c      	b.n	8003936 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7fe f9a2 	bl	8001bc4 <HAL_GetTick>
 8003880:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003884:	e00a      	b.n	800389c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003886:	f7fe f99d 	bl	8001bc4 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	; 0x64
 8003894:	d902      	bls.n	800389c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	f000 bf0d 	b.w	80046b6 <HAL_RCC_OscConfig+0x109a>
 800389c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038a0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80038a8:	fa93 f3a3 	rbit	r3, r3
 80038ac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80038b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b4:	fab3 f383 	clz	r3, r3
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d102      	bne.n	80038ce <HAL_RCC_OscConfig+0x2b2>
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	e015      	b.n	80038fa <HAL_RCC_OscConfig+0x2de>
 80038ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038d2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80038da:	fa93 f3a3 	rbit	r3, r3
 80038de:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80038e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80038ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80038f6:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <HAL_RCC_OscConfig+0x314>)
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038fe:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003902:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003906:	fa92 f2a2 	rbit	r2, r2
 800390a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800390e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003912:	fab2 f282 	clz	r2, r2
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	f042 0220 	orr.w	r2, r2, #32
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	f002 021f 	and.w	r2, r2, #31
 8003922:	2101      	movs	r1, #1
 8003924:	fa01 f202 	lsl.w	r2, r1, r2
 8003928:	4013      	ands	r3, r2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1ab      	bne.n	8003886 <HAL_RCC_OscConfig+0x26a>
 800392e:	e002      	b.n	8003936 <HAL_RCC_OscConfig+0x31a>
 8003930:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800393a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 817f 	beq.w	8003c4a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800394c:	4ba7      	ldr	r3, [pc, #668]	; (8003bec <HAL_RCC_OscConfig+0x5d0>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 030c 	and.w	r3, r3, #12
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00c      	beq.n	8003972 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003958:	4ba4      	ldr	r3, [pc, #656]	; (8003bec <HAL_RCC_OscConfig+0x5d0>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	2b08      	cmp	r3, #8
 8003962:	d173      	bne.n	8003a4c <HAL_RCC_OscConfig+0x430>
 8003964:	4ba1      	ldr	r3, [pc, #644]	; (8003bec <HAL_RCC_OscConfig+0x5d0>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800396c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003970:	d16c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x430>
 8003972:	2302      	movs	r3, #2
 8003974:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003978:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800397c:	fa93 f3a3 	rbit	r3, r3
 8003980:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003984:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003988:	fab3 f383 	clz	r3, r3
 800398c:	b2db      	uxtb	r3, r3
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	d102      	bne.n	80039a2 <HAL_RCC_OscConfig+0x386>
 800399c:	4b93      	ldr	r3, [pc, #588]	; (8003bec <HAL_RCC_OscConfig+0x5d0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	e013      	b.n	80039ca <HAL_RCC_OscConfig+0x3ae>
 80039a2:	2302      	movs	r3, #2
 80039a4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80039ac:	fa93 f3a3 	rbit	r3, r3
 80039b0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80039b4:	2302      	movs	r3, #2
 80039b6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80039ba:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80039c6:	4b89      	ldr	r3, [pc, #548]	; (8003bec <HAL_RCC_OscConfig+0x5d0>)
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	2202      	movs	r2, #2
 80039cc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80039d0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80039d4:	fa92 f2a2 	rbit	r2, r2
 80039d8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80039dc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80039e0:	fab2 f282 	clz	r2, r2
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	f042 0220 	orr.w	r2, r2, #32
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	f002 021f 	and.w	r2, r2, #31
 80039f0:	2101      	movs	r1, #1
 80039f2:	fa01 f202 	lsl.w	r2, r1, r2
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <HAL_RCC_OscConfig+0x3f6>
 80039fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d002      	beq.n	8003a12 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f000 be52 	b.w	80046b6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a12:	4b76      	ldr	r3, [pc, #472]	; (8003bec <HAL_RCC_OscConfig+0x5d0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	21f8      	movs	r1, #248	; 0xf8
 8003a28:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003a30:	fa91 f1a1 	rbit	r1, r1
 8003a34:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003a38:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003a3c:	fab1 f181 	clz	r1, r1
 8003a40:	b2c9      	uxtb	r1, r1
 8003a42:	408b      	lsls	r3, r1
 8003a44:	4969      	ldr	r1, [pc, #420]	; (8003bec <HAL_RCC_OscConfig+0x5d0>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4a:	e0fe      	b.n	8003c4a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8088 	beq.w	8003b6e <HAL_RCC_OscConfig+0x552>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a64:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003a68:	fa93 f3a3 	rbit	r3, r3
 8003a6c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003a70:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a74:	fab3 f383 	clz	r3, r3
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	461a      	mov	r2, r3
 8003a86:	2301      	movs	r3, #1
 8003a88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8a:	f7fe f89b 	bl	8001bc4 <HAL_GetTick>
 8003a8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a92:	e00a      	b.n	8003aaa <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a94:	f7fe f896 	bl	8001bc4 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d902      	bls.n	8003aaa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	f000 be06 	b.w	80046b6 <HAL_RCC_OscConfig+0x109a>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003ab4:	fa93 f3a3 	rbit	r3, r3
 8003ab8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003abc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac0:	fab3 f383 	clz	r3, r3
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d102      	bne.n	8003ada <HAL_RCC_OscConfig+0x4be>
 8003ad4:	4b45      	ldr	r3, [pc, #276]	; (8003bec <HAL_RCC_OscConfig+0x5d0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	e013      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e6>
 8003ada:	2302      	movs	r3, #2
 8003adc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003aec:	2302      	movs	r3, #2
 8003aee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003af2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003afe:	4b3b      	ldr	r3, [pc, #236]	; (8003bec <HAL_RCC_OscConfig+0x5d0>)
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2202      	movs	r2, #2
 8003b04:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003b08:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003b0c:	fa92 f2a2 	rbit	r2, r2
 8003b10:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003b14:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003b18:	fab2 f282 	clz	r2, r2
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	f042 0220 	orr.w	r2, r2, #32
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	f002 021f 	and.w	r2, r2, #31
 8003b28:	2101      	movs	r1, #1
 8003b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0af      	beq.n	8003a94 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b34:	4b2d      	ldr	r3, [pc, #180]	; (8003bec <HAL_RCC_OscConfig+0x5d0>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	21f8      	movs	r1, #248	; 0xf8
 8003b4a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003b52:	fa91 f1a1 	rbit	r1, r1
 8003b56:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003b5a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003b5e:	fab1 f181 	clz	r1, r1
 8003b62:	b2c9      	uxtb	r1, r1
 8003b64:	408b      	lsls	r3, r1
 8003b66:	4921      	ldr	r1, [pc, #132]	; (8003bec <HAL_RCC_OscConfig+0x5d0>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	600b      	str	r3, [r1, #0]
 8003b6c:	e06d      	b.n	8003c4a <HAL_RCC_OscConfig+0x62e>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b74:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003b78:	fa93 f3a3 	rbit	r3, r3
 8003b7c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003b80:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b84:	fab3 f383 	clz	r3, r3
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	461a      	mov	r2, r3
 8003b96:	2300      	movs	r3, #0
 8003b98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9a:	f7fe f813 	bl	8001bc4 <HAL_GetTick>
 8003b9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba4:	f7fe f80e 	bl	8001bc4 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d902      	bls.n	8003bba <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	f000 bd7e 	b.w	80046b6 <HAL_RCC_OscConfig+0x109a>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003bc4:	fa93 f3a3 	rbit	r3, r3
 8003bc8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003bcc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd0:	fab3 f383 	clz	r3, r3
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d105      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5d4>
 8003be4:	4b01      	ldr	r3, [pc, #4]	; (8003bec <HAL_RCC_OscConfig+0x5d0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	e016      	b.n	8003c18 <HAL_RCC_OscConfig+0x5fc>
 8003bea:	bf00      	nop
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bfa:	fa93 f3a3 	rbit	r3, r3
 8003bfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003c02:	2302      	movs	r3, #2
 8003c04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003c08:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003c0c:	fa93 f3a3 	rbit	r3, r3
 8003c10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003c14:	4bbf      	ldr	r3, [pc, #764]	; (8003f14 <HAL_RCC_OscConfig+0x8f8>)
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	2202      	movs	r2, #2
 8003c1a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003c1e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003c22:	fa92 f2a2 	rbit	r2, r2
 8003c26:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003c2a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003c2e:	fab2 f282 	clz	r2, r2
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	f042 0220 	orr.w	r2, r2, #32
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	f002 021f 	and.w	r2, r2, #31
 8003c3e:	2101      	movs	r1, #1
 8003c40:	fa01 f202 	lsl.w	r2, r1, r2
 8003c44:	4013      	ands	r3, r2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1ac      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8113 	beq.w	8003e86 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d07c      	beq.n	8003d6a <HAL_RCC_OscConfig+0x74e>
 8003c70:	2301      	movs	r3, #1
 8003c72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c7a:	fa93 f3a3 	rbit	r3, r3
 8003c7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003c82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c86:	fab3 f383 	clz	r3, r3
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4ba2      	ldr	r3, [pc, #648]	; (8003f18 <HAL_RCC_OscConfig+0x8fc>)
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	461a      	mov	r2, r3
 8003c96:	2301      	movs	r3, #1
 8003c98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9a:	f7fd ff93 	bl	8001bc4 <HAL_GetTick>
 8003c9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca2:	e00a      	b.n	8003cba <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca4:	f7fd ff8e 	bl	8001bc4 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d902      	bls.n	8003cba <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	f000 bcfe 	b.w	80046b6 <HAL_RCC_OscConfig+0x109a>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc4:	fa93 f2a3 	rbit	r2, r3
 8003cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ccc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003cda:	2202      	movs	r2, #2
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	fa93 f2a3 	rbit	r2, r3
 8003cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cfa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003cfe:	2202      	movs	r2, #2
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	fa93 f2a3 	rbit	r2, r3
 8003d10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003d18:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1a:	4b7e      	ldr	r3, [pc, #504]	; (8003f14 <HAL_RCC_OscConfig+0x8f8>)
 8003d1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d26:	2102      	movs	r1, #2
 8003d28:	6019      	str	r1, [r3, #0]
 8003d2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	fa93 f1a3 	rbit	r1, r3
 8003d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003d40:	6019      	str	r1, [r3, #0]
  return result;
 8003d42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d46:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	fab3 f383 	clz	r3, r3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d09d      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x688>
 8003d68:	e08d      	b.n	8003e86 <HAL_RCC_OscConfig+0x86a>
 8003d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003d72:	2201      	movs	r2, #1
 8003d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d7a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	fa93 f2a3 	rbit	r2, r3
 8003d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d88:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003d8c:	601a      	str	r2, [r3, #0]
  return result;
 8003d8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d92:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003d96:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d98:	fab3 f383 	clz	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4b5d      	ldr	r3, [pc, #372]	; (8003f18 <HAL_RCC_OscConfig+0x8fc>)
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	461a      	mov	r2, r3
 8003da8:	2300      	movs	r3, #0
 8003daa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dac:	f7fd ff0a 	bl	8001bc4 <HAL_GetTick>
 8003db0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db4:	e00a      	b.n	8003dcc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db6:	f7fd ff05 	bl	8001bc4 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d902      	bls.n	8003dcc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	f000 bc75 	b.w	80046b6 <HAL_RCC_OscConfig+0x109a>
 8003dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dd0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ddc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	fa93 f2a3 	rbit	r2, r3
 8003de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003df4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003df8:	2202      	movs	r2, #2
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	fa93 f2a3 	rbit	r2, r3
 8003e0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e18:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e24:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	fa93 f2a3 	rbit	r2, r3
 8003e2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e32:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003e36:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e38:	4b36      	ldr	r3, [pc, #216]	; (8003f14 <HAL_RCC_OscConfig+0x8f8>)
 8003e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e40:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003e44:	2102      	movs	r1, #2
 8003e46:	6019      	str	r1, [r3, #0]
 8003e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e4c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	fa93 f1a3 	rbit	r1, r3
 8003e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e5a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e5e:	6019      	str	r1, [r3, #0]
  return result;
 8003e60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	fab3 f383 	clz	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f003 031f 	and.w	r3, r3, #31
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d197      	bne.n	8003db6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 81a5 	beq.w	80041e6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ea2:	4b1c      	ldr	r3, [pc, #112]	; (8003f14 <HAL_RCC_OscConfig+0x8f8>)
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d116      	bne.n	8003edc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eae:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <HAL_RCC_OscConfig+0x8f8>)
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	4a18      	ldr	r2, [pc, #96]	; (8003f14 <HAL_RCC_OscConfig+0x8f8>)
 8003eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	61d3      	str	r3, [r2, #28]
 8003eba:	4b16      	ldr	r3, [pc, #88]	; (8003f14 <HAL_RCC_OscConfig+0x8f8>)
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003ec2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ed0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ed4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <HAL_RCC_OscConfig+0x900>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d121      	bne.n	8003f2c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <HAL_RCC_OscConfig+0x900>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a0b      	ldr	r2, [pc, #44]	; (8003f1c <HAL_RCC_OscConfig+0x900>)
 8003eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef4:	f7fd fe66 	bl	8001bc4 <HAL_GetTick>
 8003ef8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efc:	e010      	b.n	8003f20 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efe:	f7fd fe61 	bl	8001bc4 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	; 0x64
 8003f0c:	d908      	bls.n	8003f20 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e3d1      	b.n	80046b6 <HAL_RCC_OscConfig+0x109a>
 8003f12:	bf00      	nop
 8003f14:	40021000 	.word	0x40021000
 8003f18:	10908120 	.word	0x10908120
 8003f1c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f20:	4b8d      	ldr	r3, [pc, #564]	; (8004158 <HAL_RCC_OscConfig+0xb3c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0e8      	beq.n	8003efe <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d106      	bne.n	8003f4a <HAL_RCC_OscConfig+0x92e>
 8003f3c:	4b87      	ldr	r3, [pc, #540]	; (800415c <HAL_RCC_OscConfig+0xb40>)
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	4a86      	ldr	r2, [pc, #536]	; (800415c <HAL_RCC_OscConfig+0xb40>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	6213      	str	r3, [r2, #32]
 8003f48:	e035      	b.n	8003fb6 <HAL_RCC_OscConfig+0x99a>
 8003f4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10c      	bne.n	8003f74 <HAL_RCC_OscConfig+0x958>
 8003f5a:	4b80      	ldr	r3, [pc, #512]	; (800415c <HAL_RCC_OscConfig+0xb40>)
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	4a7f      	ldr	r2, [pc, #508]	; (800415c <HAL_RCC_OscConfig+0xb40>)
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	6213      	str	r3, [r2, #32]
 8003f66:	4b7d      	ldr	r3, [pc, #500]	; (800415c <HAL_RCC_OscConfig+0xb40>)
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	4a7c      	ldr	r2, [pc, #496]	; (800415c <HAL_RCC_OscConfig+0xb40>)
 8003f6c:	f023 0304 	bic.w	r3, r3, #4
 8003f70:	6213      	str	r3, [r2, #32]
 8003f72:	e020      	b.n	8003fb6 <HAL_RCC_OscConfig+0x99a>
 8003f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2b05      	cmp	r3, #5
 8003f82:	d10c      	bne.n	8003f9e <HAL_RCC_OscConfig+0x982>
 8003f84:	4b75      	ldr	r3, [pc, #468]	; (800415c <HAL_RCC_OscConfig+0xb40>)
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	4a74      	ldr	r2, [pc, #464]	; (800415c <HAL_RCC_OscConfig+0xb40>)
 8003f8a:	f043 0304 	orr.w	r3, r3, #4
 8003f8e:	6213      	str	r3, [r2, #32]
 8003f90:	4b72      	ldr	r3, [pc, #456]	; (800415c <HAL_RCC_OscConfig+0xb40>)
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	4a71      	ldr	r2, [pc, #452]	; (800415c <HAL_RCC_OscConfig+0xb40>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6213      	str	r3, [r2, #32]
 8003f9c:	e00b      	b.n	8003fb6 <HAL_RCC_OscConfig+0x99a>
 8003f9e:	4b6f      	ldr	r3, [pc, #444]	; (800415c <HAL_RCC_OscConfig+0xb40>)
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	4a6e      	ldr	r2, [pc, #440]	; (800415c <HAL_RCC_OscConfig+0xb40>)
 8003fa4:	f023 0301 	bic.w	r3, r3, #1
 8003fa8:	6213      	str	r3, [r2, #32]
 8003faa:	4b6c      	ldr	r3, [pc, #432]	; (800415c <HAL_RCC_OscConfig+0xb40>)
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	4a6b      	ldr	r2, [pc, #428]	; (800415c <HAL_RCC_OscConfig+0xb40>)
 8003fb0:	f023 0304 	bic.w	r3, r3, #4
 8003fb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8081 	beq.w	80040ca <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc8:	f7fd fdfc 	bl	8001bc4 <HAL_GetTick>
 8003fcc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd0:	e00b      	b.n	8003fea <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd2:	f7fd fdf7 	bl	8001bc4 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e365      	b.n	80046b6 <HAL_RCC_OscConfig+0x109a>
 8003fea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ffa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	fa93 f2a3 	rbit	r2, r3
 8004004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004008:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004012:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004016:	2202      	movs	r2, #2
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800401e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	fa93 f2a3 	rbit	r2, r3
 8004028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800402c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004030:	601a      	str	r2, [r3, #0]
  return result;
 8004032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004036:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800403a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403c:	fab3 f383 	clz	r3, r3
 8004040:	b2db      	uxtb	r3, r3
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	b2db      	uxtb	r3, r3
 8004046:	f043 0302 	orr.w	r3, r3, #2
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d102      	bne.n	8004056 <HAL_RCC_OscConfig+0xa3a>
 8004050:	4b42      	ldr	r3, [pc, #264]	; (800415c <HAL_RCC_OscConfig+0xb40>)
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	e013      	b.n	800407e <HAL_RCC_OscConfig+0xa62>
 8004056:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800405a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800405e:	2202      	movs	r2, #2
 8004060:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004066:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	fa93 f2a3 	rbit	r2, r3
 8004070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004074:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	4b38      	ldr	r3, [pc, #224]	; (800415c <HAL_RCC_OscConfig+0xb40>)
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004082:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004086:	2102      	movs	r1, #2
 8004088:	6011      	str	r1, [r2, #0]
 800408a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800408e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004092:	6812      	ldr	r2, [r2, #0]
 8004094:	fa92 f1a2 	rbit	r1, r2
 8004098:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800409c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80040a0:	6011      	str	r1, [r2, #0]
  return result;
 80040a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040a6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	fab2 f282 	clz	r2, r2
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	f002 021f 	and.w	r2, r2, #31
 80040bc:	2101      	movs	r1, #1
 80040be:	fa01 f202 	lsl.w	r2, r1, r2
 80040c2:	4013      	ands	r3, r2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d084      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x9b6>
 80040c8:	e083      	b.n	80041d2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ca:	f7fd fd7b 	bl	8001bc4 <HAL_GetTick>
 80040ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d2:	e00b      	b.n	80040ec <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d4:	f7fd fd76 	bl	8001bc4 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e2e4      	b.n	80046b6 <HAL_RCC_OscConfig+0x109a>
 80040ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040f0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80040f4:	2202      	movs	r2, #2
 80040f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040fc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	fa93 f2a3 	rbit	r2, r3
 8004106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800410a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004114:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004118:	2202      	movs	r2, #2
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004120:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	fa93 f2a3 	rbit	r2, r3
 800412a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800412e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004132:	601a      	str	r2, [r3, #0]
  return result;
 8004134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004138:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800413c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413e:	fab3 f383 	clz	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	095b      	lsrs	r3, r3, #5
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f043 0302 	orr.w	r3, r3, #2
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d106      	bne.n	8004160 <HAL_RCC_OscConfig+0xb44>
 8004152:	4b02      	ldr	r3, [pc, #8]	; (800415c <HAL_RCC_OscConfig+0xb40>)
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	e017      	b.n	8004188 <HAL_RCC_OscConfig+0xb6c>
 8004158:	40007000 	.word	0x40007000
 800415c:	40021000 	.word	0x40021000
 8004160:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004164:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004168:	2202      	movs	r2, #2
 800416a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004170:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	fa93 f2a3 	rbit	r2, r3
 800417a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800417e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	4bb3      	ldr	r3, [pc, #716]	; (8004454 <HAL_RCC_OscConfig+0xe38>)
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800418c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004190:	2102      	movs	r1, #2
 8004192:	6011      	str	r1, [r2, #0]
 8004194:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004198:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	fa92 f1a2 	rbit	r1, r2
 80041a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041a6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80041aa:	6011      	str	r1, [r2, #0]
  return result;
 80041ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041b0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	fab2 f282 	clz	r2, r2
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	f002 021f 	and.w	r2, r2, #31
 80041c6:	2101      	movs	r1, #1
 80041c8:	fa01 f202 	lsl.w	r2, r1, r2
 80041cc:	4013      	ands	r3, r2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d180      	bne.n	80040d4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041d2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d105      	bne.n	80041e6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041da:	4b9e      	ldr	r3, [pc, #632]	; (8004454 <HAL_RCC_OscConfig+0xe38>)
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	4a9d      	ldr	r2, [pc, #628]	; (8004454 <HAL_RCC_OscConfig+0xe38>)
 80041e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 825e 	beq.w	80046b4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041f8:	4b96      	ldr	r3, [pc, #600]	; (8004454 <HAL_RCC_OscConfig+0xe38>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 030c 	and.w	r3, r3, #12
 8004200:	2b08      	cmp	r3, #8
 8004202:	f000 821f 	beq.w	8004644 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800420a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	2b02      	cmp	r3, #2
 8004214:	f040 8170 	bne.w	80044f8 <HAL_RCC_OscConfig+0xedc>
 8004218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800421c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004220:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004226:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800422a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	fa93 f2a3 	rbit	r2, r3
 8004234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004238:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800423c:	601a      	str	r2, [r3, #0]
  return result;
 800423e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004242:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004246:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004248:	fab3 f383 	clz	r3, r3
 800424c:	b2db      	uxtb	r3, r3
 800424e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004252:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	461a      	mov	r2, r3
 800425a:	2300      	movs	r3, #0
 800425c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425e:	f7fd fcb1 	bl	8001bc4 <HAL_GetTick>
 8004262:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004266:	e009      	b.n	800427c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004268:	f7fd fcac 	bl	8001bc4 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e21c      	b.n	80046b6 <HAL_RCC_OscConfig+0x109a>
 800427c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004280:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004284:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800428e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	fa93 f2a3 	rbit	r2, r3
 8004298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800429c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80042a0:	601a      	str	r2, [r3, #0]
  return result;
 80042a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80042aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ac:	fab3 f383 	clz	r3, r3
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d102      	bne.n	80042c6 <HAL_RCC_OscConfig+0xcaa>
 80042c0:	4b64      	ldr	r3, [pc, #400]	; (8004454 <HAL_RCC_OscConfig+0xe38>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	e027      	b.n	8004316 <HAL_RCC_OscConfig+0xcfa>
 80042c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042ca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80042ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042d8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	fa93 f2a3 	rbit	r2, r3
 80042e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042e6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042f0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80042f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042fe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	fa93 f2a3 	rbit	r2, r3
 8004308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800430c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	4b50      	ldr	r3, [pc, #320]	; (8004454 <HAL_RCC_OscConfig+0xe38>)
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800431a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800431e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004322:	6011      	str	r1, [r2, #0]
 8004324:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004328:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	fa92 f1a2 	rbit	r1, r2
 8004332:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004336:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800433a:	6011      	str	r1, [r2, #0]
  return result;
 800433c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004340:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004344:	6812      	ldr	r2, [r2, #0]
 8004346:	fab2 f282 	clz	r2, r2
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	f042 0220 	orr.w	r2, r2, #32
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	f002 021f 	and.w	r2, r2, #31
 8004356:	2101      	movs	r1, #1
 8004358:	fa01 f202 	lsl.w	r2, r1, r2
 800435c:	4013      	ands	r3, r2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d182      	bne.n	8004268 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004362:	4b3c      	ldr	r3, [pc, #240]	; (8004454 <HAL_RCC_OscConfig+0xe38>)
 8004364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004366:	f023 020f 	bic.w	r2, r3, #15
 800436a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800436e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	4937      	ldr	r1, [pc, #220]	; (8004454 <HAL_RCC_OscConfig+0xe38>)
 8004378:	4313      	orrs	r3, r2
 800437a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800437c:	4b35      	ldr	r3, [pc, #212]	; (8004454 <HAL_RCC_OscConfig+0xe38>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004388:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6a19      	ldr	r1, [r3, #32]
 8004390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004394:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	430b      	orrs	r3, r1
 800439e:	492d      	ldr	r1, [pc, #180]	; (8004454 <HAL_RCC_OscConfig+0xe38>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	604b      	str	r3, [r1, #4]
 80043a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043a8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80043ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043b6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	fa93 f2a3 	rbit	r2, r3
 80043c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043c4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80043c8:	601a      	str	r2, [r3, #0]
  return result;
 80043ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043ce:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80043d2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043d4:	fab3 f383 	clz	r3, r3
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	461a      	mov	r2, r3
 80043e6:	2301      	movs	r3, #1
 80043e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ea:	f7fd fbeb 	bl	8001bc4 <HAL_GetTick>
 80043ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043f2:	e009      	b.n	8004408 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f4:	f7fd fbe6 	bl	8001bc4 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e156      	b.n	80046b6 <HAL_RCC_OscConfig+0x109a>
 8004408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800440c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004410:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800441a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	fa93 f2a3 	rbit	r2, r3
 8004424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004428:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800442c:	601a      	str	r2, [r3, #0]
  return result;
 800442e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004432:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004436:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004438:	fab3 f383 	clz	r3, r3
 800443c:	b2db      	uxtb	r3, r3
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	d105      	bne.n	8004458 <HAL_RCC_OscConfig+0xe3c>
 800444c:	4b01      	ldr	r3, [pc, #4]	; (8004454 <HAL_RCC_OscConfig+0xe38>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	e02a      	b.n	80044a8 <HAL_RCC_OscConfig+0xe8c>
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000
 8004458:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800445c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004460:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004464:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004466:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800446a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	fa93 f2a3 	rbit	r2, r3
 8004474:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004478:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004482:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004486:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004490:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	fa93 f2a3 	rbit	r2, r3
 800449a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800449e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	4b86      	ldr	r3, [pc, #536]	; (80046c0 <HAL_RCC_OscConfig+0x10a4>)
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80044ac:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80044b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044b4:	6011      	str	r1, [r2, #0]
 80044b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80044ba:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	fa92 f1a2 	rbit	r1, r2
 80044c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80044c8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80044cc:	6011      	str	r1, [r2, #0]
  return result;
 80044ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80044d2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	fab2 f282 	clz	r2, r2
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	f042 0220 	orr.w	r2, r2, #32
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	f002 021f 	and.w	r2, r2, #31
 80044e8:	2101      	movs	r1, #1
 80044ea:	fa01 f202 	lsl.w	r2, r1, r2
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f43f af7f 	beq.w	80043f4 <HAL_RCC_OscConfig+0xdd8>
 80044f6:	e0dd      	b.n	80046b4 <HAL_RCC_OscConfig+0x1098>
 80044f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004500:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004504:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004506:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800450a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	fa93 f2a3 	rbit	r2, r3
 8004514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004518:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800451c:	601a      	str	r2, [r3, #0]
  return result;
 800451e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004522:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004526:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004528:	fab3 f383 	clz	r3, r3
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004532:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	461a      	mov	r2, r3
 800453a:	2300      	movs	r3, #0
 800453c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453e:	f7fd fb41 	bl	8001bc4 <HAL_GetTick>
 8004542:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004546:	e009      	b.n	800455c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004548:	f7fd fb3c 	bl	8001bc4 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e0ac      	b.n	80046b6 <HAL_RCC_OscConfig+0x109a>
 800455c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004560:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004564:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004568:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800456e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	fa93 f2a3 	rbit	r2, r3
 8004578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800457c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004580:	601a      	str	r2, [r3, #0]
  return result;
 8004582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004586:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800458a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800458c:	fab3 f383 	clz	r3, r3
 8004590:	b2db      	uxtb	r3, r3
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d102      	bne.n	80045a6 <HAL_RCC_OscConfig+0xf8a>
 80045a0:	4b47      	ldr	r3, [pc, #284]	; (80046c0 <HAL_RCC_OscConfig+0x10a4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	e027      	b.n	80045f6 <HAL_RCC_OscConfig+0xfda>
 80045a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045aa:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80045ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045b8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	fa93 f2a3 	rbit	r2, r3
 80045c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045d0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80045d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	fa93 f2a3 	rbit	r2, r3
 80045e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045ec:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	4b33      	ldr	r3, [pc, #204]	; (80046c0 <HAL_RCC_OscConfig+0x10a4>)
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80045fa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80045fe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004602:	6011      	str	r1, [r2, #0]
 8004604:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004608:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	fa92 f1a2 	rbit	r1, r2
 8004612:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004616:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800461a:	6011      	str	r1, [r2, #0]
  return result;
 800461c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004620:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004624:	6812      	ldr	r2, [r2, #0]
 8004626:	fab2 f282 	clz	r2, r2
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	f042 0220 	orr.w	r2, r2, #32
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	f002 021f 	and.w	r2, r2, #31
 8004636:	2101      	movs	r1, #1
 8004638:	fa01 f202 	lsl.w	r2, r1, r2
 800463c:	4013      	ands	r3, r2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d182      	bne.n	8004548 <HAL_RCC_OscConfig+0xf2c>
 8004642:	e037      	b.n	80046b4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004644:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004648:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e02e      	b.n	80046b6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004658:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <HAL_RCC_OscConfig+0x10a4>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004660:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <HAL_RCC_OscConfig+0x10a4>)
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004668:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800466c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004674:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	429a      	cmp	r2, r3
 800467e:	d117      	bne.n	80046b0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004680:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004684:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800468c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004694:	429a      	cmp	r2, r3
 8004696:	d10b      	bne.n	80046b0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004698:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800469c:	f003 020f 	and.w	r2, r3, #15
 80046a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d001      	beq.n	80046b4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40021000 	.word	0x40021000

080046c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b09e      	sub	sp, #120	; 0x78
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e162      	b.n	80049a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046dc:	4b90      	ldr	r3, [pc, #576]	; (8004920 <HAL_RCC_ClockConfig+0x25c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d910      	bls.n	800470c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b8d      	ldr	r3, [pc, #564]	; (8004920 <HAL_RCC_ClockConfig+0x25c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 0207 	bic.w	r2, r3, #7
 80046f2:	498b      	ldr	r1, [pc, #556]	; (8004920 <HAL_RCC_ClockConfig+0x25c>)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fa:	4b89      	ldr	r3, [pc, #548]	; (8004920 <HAL_RCC_ClockConfig+0x25c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d001      	beq.n	800470c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e14a      	b.n	80049a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004718:	4b82      	ldr	r3, [pc, #520]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	497f      	ldr	r1, [pc, #508]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 8004726:	4313      	orrs	r3, r2
 8004728:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80dc 	beq.w	80048f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d13c      	bne.n	80047ba <HAL_RCC_ClockConfig+0xf6>
 8004740:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004744:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004748:	fa93 f3a3 	rbit	r3, r3
 800474c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800474e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004750:	fab3 f383 	clz	r3, r3
 8004754:	b2db      	uxtb	r3, r3
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	b2db      	uxtb	r3, r3
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	d102      	bne.n	800476a <HAL_RCC_ClockConfig+0xa6>
 8004764:	4b6f      	ldr	r3, [pc, #444]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	e00f      	b.n	800478a <HAL_RCC_ClockConfig+0xc6>
 800476a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800476e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004770:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004772:	fa93 f3a3 	rbit	r3, r3
 8004776:	667b      	str	r3, [r7, #100]	; 0x64
 8004778:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800477c:	663b      	str	r3, [r7, #96]	; 0x60
 800477e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004780:	fa93 f3a3 	rbit	r3, r3
 8004784:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004786:	4b67      	ldr	r3, [pc, #412]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800478e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004790:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004792:	fa92 f2a2 	rbit	r2, r2
 8004796:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004798:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800479a:	fab2 f282 	clz	r2, r2
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	f042 0220 	orr.w	r2, r2, #32
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	f002 021f 	and.w	r2, r2, #31
 80047aa:	2101      	movs	r1, #1
 80047ac:	fa01 f202 	lsl.w	r2, r1, r2
 80047b0:	4013      	ands	r3, r2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d17b      	bne.n	80048ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e0f3      	b.n	80049a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d13c      	bne.n	800483c <HAL_RCC_ClockConfig+0x178>
 80047c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ca:	fa93 f3a3 	rbit	r3, r3
 80047ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80047d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d2:	fab3 f383 	clz	r3, r3
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	095b      	lsrs	r3, r3, #5
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d102      	bne.n	80047ec <HAL_RCC_ClockConfig+0x128>
 80047e6:	4b4f      	ldr	r3, [pc, #316]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	e00f      	b.n	800480c <HAL_RCC_ClockConfig+0x148>
 80047ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f4:	fa93 f3a3 	rbit	r3, r3
 80047f8:	647b      	str	r3, [r7, #68]	; 0x44
 80047fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004802:	fa93 f3a3 	rbit	r3, r3
 8004806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004808:	4b46      	ldr	r3, [pc, #280]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004810:	63ba      	str	r2, [r7, #56]	; 0x38
 8004812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004814:	fa92 f2a2 	rbit	r2, r2
 8004818:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800481a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800481c:	fab2 f282 	clz	r2, r2
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	f042 0220 	orr.w	r2, r2, #32
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	f002 021f 	and.w	r2, r2, #31
 800482c:	2101      	movs	r1, #1
 800482e:	fa01 f202 	lsl.w	r2, r1, r2
 8004832:	4013      	ands	r3, r2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d13a      	bne.n	80048ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0b2      	b.n	80049a2 <HAL_RCC_ClockConfig+0x2de>
 800483c:	2302      	movs	r3, #2
 800483e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484a:	fab3 f383 	clz	r3, r3
 800484e:	b2db      	uxtb	r3, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b01      	cmp	r3, #1
 800485c:	d102      	bne.n	8004864 <HAL_RCC_ClockConfig+0x1a0>
 800485e:	4b31      	ldr	r3, [pc, #196]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	e00d      	b.n	8004880 <HAL_RCC_ClockConfig+0x1bc>
 8004864:	2302      	movs	r3, #2
 8004866:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
 8004870:	2302      	movs	r3, #2
 8004872:	623b      	str	r3, [r7, #32]
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	fa93 f3a3 	rbit	r3, r3
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	4b29      	ldr	r3, [pc, #164]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	2202      	movs	r2, #2
 8004882:	61ba      	str	r2, [r7, #24]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	fa92 f2a2 	rbit	r2, r2
 800488a:	617a      	str	r2, [r7, #20]
  return result;
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	fab2 f282 	clz	r2, r2
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	f042 0220 	orr.w	r2, r2, #32
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	f002 021f 	and.w	r2, r2, #31
 800489e:	2101      	movs	r1, #1
 80048a0:	fa01 f202 	lsl.w	r2, r1, r2
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e079      	b.n	80049a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ae:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f023 0203 	bic.w	r2, r3, #3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	491a      	ldr	r1, [pc, #104]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048c0:	f7fd f980 	bl	8001bc4 <HAL_GetTick>
 80048c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c6:	e00a      	b.n	80048de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c8:	f7fd f97c 	bl	8001bc4 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e061      	b.n	80049a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048de:	4b11      	ldr	r3, [pc, #68]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f003 020c 	and.w	r2, r3, #12
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d1eb      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <HAL_RCC_ClockConfig+0x25c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d214      	bcs.n	8004928 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fe:	4b08      	ldr	r3, [pc, #32]	; (8004920 <HAL_RCC_ClockConfig+0x25c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f023 0207 	bic.w	r2, r3, #7
 8004906:	4906      	ldr	r1, [pc, #24]	; (8004920 <HAL_RCC_ClockConfig+0x25c>)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	4313      	orrs	r3, r2
 800490c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800490e:	4b04      	ldr	r3, [pc, #16]	; (8004920 <HAL_RCC_ClockConfig+0x25c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d005      	beq.n	8004928 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e040      	b.n	80049a2 <HAL_RCC_ClockConfig+0x2de>
 8004920:	40022000 	.word	0x40022000
 8004924:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d008      	beq.n	8004946 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004934:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <HAL_RCC_ClockConfig+0x2e8>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	491a      	ldr	r1, [pc, #104]	; (80049ac <HAL_RCC_ClockConfig+0x2e8>)
 8004942:	4313      	orrs	r3, r2
 8004944:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b00      	cmp	r3, #0
 8004950:	d009      	beq.n	8004966 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004952:	4b16      	ldr	r3, [pc, #88]	; (80049ac <HAL_RCC_ClockConfig+0x2e8>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	4912      	ldr	r1, [pc, #72]	; (80049ac <HAL_RCC_ClockConfig+0x2e8>)
 8004962:	4313      	orrs	r3, r2
 8004964:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004966:	f000 f829 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 800496a:	4601      	mov	r1, r0
 800496c:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <HAL_RCC_ClockConfig+0x2e8>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004974:	22f0      	movs	r2, #240	; 0xf0
 8004976:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	fa92 f2a2 	rbit	r2, r2
 800497e:	60fa      	str	r2, [r7, #12]
  return result;
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	fab2 f282 	clz	r2, r2
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	40d3      	lsrs	r3, r2
 800498a:	4a09      	ldr	r2, [pc, #36]	; (80049b0 <HAL_RCC_ClockConfig+0x2ec>)
 800498c:	5cd3      	ldrb	r3, [r2, r3]
 800498e:	fa21 f303 	lsr.w	r3, r1, r3
 8004992:	4a08      	ldr	r2, [pc, #32]	; (80049b4 <HAL_RCC_ClockConfig+0x2f0>)
 8004994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004996:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <HAL_RCC_ClockConfig+0x2f4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f7fd f8ce 	bl	8001b3c <HAL_InitTick>
  
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3778      	adds	r7, #120	; 0x78
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000
 80049b0:	08007a4c 	.word	0x08007a4c
 80049b4:	20000000 	.word	0x20000000
 80049b8:	20000004 	.word	0x20000004

080049bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	b08b      	sub	sp, #44	; 0x2c
 80049c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61fb      	str	r3, [r7, #28]
 80049c6:	2300      	movs	r3, #0
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	2300      	movs	r3, #0
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
 80049ce:	2300      	movs	r3, #0
 80049d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80049d6:	4b2a      	ldr	r3, [pc, #168]	; (8004a80 <HAL_RCC_GetSysClockFreq+0xc4>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f003 030c 	and.w	r3, r3, #12
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d002      	beq.n	80049ec <HAL_RCC_GetSysClockFreq+0x30>
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d003      	beq.n	80049f2 <HAL_RCC_GetSysClockFreq+0x36>
 80049ea:	e03f      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049ec:	4b25      	ldr	r3, [pc, #148]	; (8004a84 <HAL_RCC_GetSysClockFreq+0xc8>)
 80049ee:	623b      	str	r3, [r7, #32]
      break;
 80049f0:	e03f      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80049f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80049fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	fa92 f2a2 	rbit	r2, r2
 8004a04:	607a      	str	r2, [r7, #4]
  return result;
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	fab2 f282 	clz	r2, r2
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	40d3      	lsrs	r3, r2
 8004a10:	4a1d      	ldr	r2, [pc, #116]	; (8004a88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004a12:	5cd3      	ldrb	r3, [r2, r3]
 8004a14:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004a16:	4b1a      	ldr	r3, [pc, #104]	; (8004a80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	220f      	movs	r2, #15
 8004a20:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	fa92 f2a2 	rbit	r2, r2
 8004a28:	60fa      	str	r2, [r7, #12]
  return result;
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	fab2 f282 	clz	r2, r2
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	40d3      	lsrs	r3, r2
 8004a34:	4a15      	ldr	r2, [pc, #84]	; (8004a8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a36:	5cd3      	ldrb	r3, [r2, r3]
 8004a38:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a44:	4a0f      	ldr	r2, [pc, #60]	; (8004a84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	fb02 f303 	mul.w	r3, r2, r3
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
 8004a54:	e007      	b.n	8004a66 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a56:	4a0b      	ldr	r2, [pc, #44]	; (8004a84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	623b      	str	r3, [r7, #32]
      break;
 8004a6a:	e002      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004a6e:	623b      	str	r3, [r7, #32]
      break;
 8004a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a72:	6a3b      	ldr	r3, [r7, #32]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	372c      	adds	r7, #44	; 0x2c
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	40021000 	.word	0x40021000
 8004a84:	007a1200 	.word	0x007a1200
 8004a88:	08007a64 	.word	0x08007a64
 8004a8c:	08007a74 	.word	0x08007a74

08004a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a94:	4b03      	ldr	r3, [pc, #12]	; (8004aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a96:	681b      	ldr	r3, [r3, #0]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	20000000 	.word	0x20000000

08004aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004aae:	f7ff ffef 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004ab2:	4601      	mov	r1, r0
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004abc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004ac0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	fa92 f2a2 	rbit	r2, r2
 8004ac8:	603a      	str	r2, [r7, #0]
  return result;
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	fab2 f282 	clz	r2, r2
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	40d3      	lsrs	r3, r2
 8004ad4:	4a04      	ldr	r2, [pc, #16]	; (8004ae8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004ad6:	5cd3      	ldrb	r3, [r2, r3]
 8004ad8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	08007a5c 	.word	0x08007a5c

08004aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004af2:	f7ff ffcd 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004af6:	4601      	mov	r1, r0
 8004af8:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004b00:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004b04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	fa92 f2a2 	rbit	r2, r2
 8004b0c:	603a      	str	r2, [r7, #0]
  return result;
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	fab2 f282 	clz	r2, r2
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	40d3      	lsrs	r3, r2
 8004b18:	4a04      	ldr	r2, [pc, #16]	; (8004b2c <HAL_RCC_GetPCLK2Freq+0x40>)
 8004b1a:	5cd3      	ldrb	r3, [r2, r3]
 8004b1c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	08007a5c 	.word	0x08007a5c

08004b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b092      	sub	sp, #72	; 0x48
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004b40:	2300      	movs	r3, #0
 8004b42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 80d4 	beq.w	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b54:	4b4e      	ldr	r3, [pc, #312]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10e      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b60:	4b4b      	ldr	r3, [pc, #300]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	4a4a      	ldr	r2, [pc, #296]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	61d3      	str	r3, [r2, #28]
 8004b6c:	4b48      	ldr	r3, [pc, #288]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7e:	4b45      	ldr	r3, [pc, #276]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d118      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b8a:	4b42      	ldr	r3, [pc, #264]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a41      	ldr	r2, [pc, #260]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b96:	f7fd f815 	bl	8001bc4 <HAL_GetTick>
 8004b9a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b9e:	f7fd f811 	bl	8001bc4 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b64      	cmp	r3, #100	; 0x64
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e1d6      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb0:	4b38      	ldr	r3, [pc, #224]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0f0      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bbc:	4b34      	ldr	r3, [pc, #208]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 8084 	beq.w	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d07c      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bdc:	4b2c      	ldr	r3, [pc, #176]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	fa93 f3a3 	rbit	r3, r3
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bf6:	fab3 f383 	clz	r3, r3
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	4b26      	ldr	r3, [pc, #152]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	461a      	mov	r2, r3
 8004c06:	2301      	movs	r3, #1
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c12:	fa93 f3a3 	rbit	r3, r3
 8004c16:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c1a:	fab3 f383 	clz	r3, r3
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	461a      	mov	r2, r3
 8004c22:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	461a      	mov	r2, r3
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c2e:	4a18      	ldr	r2, [pc, #96]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c32:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d04b      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3e:	f7fc ffc1 	bl	8001bc4 <HAL_GetTick>
 8004c42:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c44:	e00a      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c46:	f7fc ffbd 	bl	8001bc4 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e180      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	fa93 f3a3 	rbit	r3, r3
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
 8004c68:	2302      	movs	r3, #2
 8004c6a:	623b      	str	r3, [r7, #32]
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	fa93 f3a3 	rbit	r3, r3
 8004c72:	61fb      	str	r3, [r7, #28]
  return result;
 8004c74:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c76:	fab3 f383 	clz	r3, r3
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	f043 0302 	orr.w	r3, r3, #2
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d108      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004c8a:	4b01      	ldr	r3, [pc, #4]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	e00d      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004c90:	40021000 	.word	0x40021000
 8004c94:	40007000 	.word	0x40007000
 8004c98:	10908100 	.word	0x10908100
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	fa93 f3a3 	rbit	r3, r3
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	4b9a      	ldr	r3, [pc, #616]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	2202      	movs	r2, #2
 8004cae:	613a      	str	r2, [r7, #16]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	fa92 f2a2 	rbit	r2, r2
 8004cb6:	60fa      	str	r2, [r7, #12]
  return result;
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	fab2 f282 	clz	r2, r2
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	f002 021f 	and.w	r2, r2, #31
 8004cca:	2101      	movs	r1, #1
 8004ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0b7      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004cd6:	4b8f      	ldr	r3, [pc, #572]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	498c      	ldr	r1, [pc, #560]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ce8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d105      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf0:	4b88      	ldr	r3, [pc, #544]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	4a87      	ldr	r2, [pc, #540]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d08:	4b82      	ldr	r3, [pc, #520]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0c:	f023 0203 	bic.w	r2, r3, #3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	497f      	ldr	r1, [pc, #508]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d008      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d26:	4b7b      	ldr	r3, [pc, #492]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	4978      	ldr	r1, [pc, #480]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d008      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d44:	4b73      	ldr	r3, [pc, #460]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	4970      	ldr	r1, [pc, #448]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0320 	and.w	r3, r3, #32
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d62:	4b6c      	ldr	r3, [pc, #432]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	f023 0210 	bic.w	r2, r3, #16
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	4969      	ldr	r1, [pc, #420]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004d80:	4b64      	ldr	r3, [pc, #400]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8c:	4961      	ldr	r1, [pc, #388]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d008      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d9e:	4b5d      	ldr	r3, [pc, #372]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	f023 0220 	bic.w	r2, r3, #32
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	495a      	ldr	r1, [pc, #360]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dbc:	4b55      	ldr	r3, [pc, #340]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	4952      	ldr	r1, [pc, #328]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dda:	4b4e      	ldr	r3, [pc, #312]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	494b      	ldr	r1, [pc, #300]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004df8:	4b46      	ldr	r3, [pc, #280]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	4943      	ldr	r1, [pc, #268]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d008      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e16:	4b3f      	ldr	r3, [pc, #252]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e22:	493c      	ldr	r1, [pc, #240]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e34:	4b37      	ldr	r3, [pc, #220]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e40:	4934      	ldr	r1, [pc, #208]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d008      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004e52:	4b30      	ldr	r3, [pc, #192]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	492d      	ldr	r1, [pc, #180]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d008      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004e70:	4b28      	ldr	r3, [pc, #160]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7c:	4925      	ldr	r1, [pc, #148]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d008      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004e8e:	4b21      	ldr	r3, [pc, #132]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	491e      	ldr	r1, [pc, #120]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004eac:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	4916      	ldr	r1, [pc, #88]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d008      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed6:	490f      	ldr	r1, [pc, #60]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004ee8:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef4:	4907      	ldr	r1, [pc, #28]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00c      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004f06:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	e002      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004f12:	bf00      	nop
 8004f14:	40021000 	.word	0x40021000
 8004f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1a:	4913      	ldr	r1, [pc, #76]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d008      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004f2c:	4b0e      	ldr	r3, [pc, #56]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f38:	490b      	ldr	r1, [pc, #44]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004f4a:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f56:	4904      	ldr	r1, [pc, #16]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3748      	adds	r7, #72	; 0x48
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40021000 	.word	0x40021000

08004f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e049      	b.n	8005012 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fc fc38 	bl	8001808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f000 fd44 	bl	8005a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b01      	cmp	r3, #1
 800502e:	d001      	beq.n	8005034 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e04f      	b.n	80050d4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a23      	ldr	r2, [pc, #140]	; (80050e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d01d      	beq.n	8005092 <HAL_TIM_Base_Start_IT+0x76>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505e:	d018      	beq.n	8005092 <HAL_TIM_Base_Start_IT+0x76>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1f      	ldr	r2, [pc, #124]	; (80050e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d013      	beq.n	8005092 <HAL_TIM_Base_Start_IT+0x76>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1e      	ldr	r2, [pc, #120]	; (80050e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00e      	beq.n	8005092 <HAL_TIM_Base_Start_IT+0x76>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1c      	ldr	r2, [pc, #112]	; (80050ec <HAL_TIM_Base_Start_IT+0xd0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d009      	beq.n	8005092 <HAL_TIM_Base_Start_IT+0x76>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1b      	ldr	r2, [pc, #108]	; (80050f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d004      	beq.n	8005092 <HAL_TIM_Base_Start_IT+0x76>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d115      	bne.n	80050be <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	4b17      	ldr	r3, [pc, #92]	; (80050f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800509a:	4013      	ands	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b06      	cmp	r3, #6
 80050a2:	d015      	beq.n	80050d0 <HAL_TIM_Base_Start_IT+0xb4>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050aa:	d011      	beq.n	80050d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0201 	orr.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050bc:	e008      	b.n	80050d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0201 	orr.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	e000      	b.n	80050d2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40013400 	.word	0x40013400
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40015000 	.word	0x40015000
 80050f8:	00010007 	.word	0x00010007

080050fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e049      	b.n	80051a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f841 	bl	80051aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3304      	adds	r3, #4
 8005138:	4619      	mov	r1, r3
 800513a:	4610      	mov	r0, r2
 800513c:	f000 fc7c 	bl	8005a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
	...

080051c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d109      	bne.n	80051e4 <HAL_TIM_PWM_Start+0x24>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	bf14      	ite	ne
 80051dc:	2301      	movne	r3, #1
 80051de:	2300      	moveq	r3, #0
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	e03c      	b.n	800525e <HAL_TIM_PWM_Start+0x9e>
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d109      	bne.n	80051fe <HAL_TIM_PWM_Start+0x3e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	bf14      	ite	ne
 80051f6:	2301      	movne	r3, #1
 80051f8:	2300      	moveq	r3, #0
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	e02f      	b.n	800525e <HAL_TIM_PWM_Start+0x9e>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b08      	cmp	r3, #8
 8005202:	d109      	bne.n	8005218 <HAL_TIM_PWM_Start+0x58>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	bf14      	ite	ne
 8005210:	2301      	movne	r3, #1
 8005212:	2300      	moveq	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	e022      	b.n	800525e <HAL_TIM_PWM_Start+0x9e>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b0c      	cmp	r3, #12
 800521c:	d109      	bne.n	8005232 <HAL_TIM_PWM_Start+0x72>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b01      	cmp	r3, #1
 8005228:	bf14      	ite	ne
 800522a:	2301      	movne	r3, #1
 800522c:	2300      	moveq	r3, #0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	e015      	b.n	800525e <HAL_TIM_PWM_Start+0x9e>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b10      	cmp	r3, #16
 8005236:	d109      	bne.n	800524c <HAL_TIM_PWM_Start+0x8c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b01      	cmp	r3, #1
 8005242:	bf14      	ite	ne
 8005244:	2301      	movne	r3, #1
 8005246:	2300      	moveq	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	e008      	b.n	800525e <HAL_TIM_PWM_Start+0x9e>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	bf14      	ite	ne
 8005258:	2301      	movne	r3, #1
 800525a:	2300      	moveq	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e0a1      	b.n	80053aa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <HAL_TIM_PWM_Start+0xb6>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005274:	e023      	b.n	80052be <HAL_TIM_PWM_Start+0xfe>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b04      	cmp	r3, #4
 800527a:	d104      	bne.n	8005286 <HAL_TIM_PWM_Start+0xc6>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005284:	e01b      	b.n	80052be <HAL_TIM_PWM_Start+0xfe>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b08      	cmp	r3, #8
 800528a:	d104      	bne.n	8005296 <HAL_TIM_PWM_Start+0xd6>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005294:	e013      	b.n	80052be <HAL_TIM_PWM_Start+0xfe>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b0c      	cmp	r3, #12
 800529a:	d104      	bne.n	80052a6 <HAL_TIM_PWM_Start+0xe6>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052a4:	e00b      	b.n	80052be <HAL_TIM_PWM_Start+0xfe>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b10      	cmp	r3, #16
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_PWM_Start+0xf6>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052b4:	e003      	b.n	80052be <HAL_TIM_PWM_Start+0xfe>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2201      	movs	r2, #1
 80052c4:	6839      	ldr	r1, [r7, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fff4 	bl	80062b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a38      	ldr	r2, [pc, #224]	; (80053b4 <HAL_TIM_PWM_Start+0x1f4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d018      	beq.n	8005308 <HAL_TIM_PWM_Start+0x148>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a37      	ldr	r2, [pc, #220]	; (80053b8 <HAL_TIM_PWM_Start+0x1f8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d013      	beq.n	8005308 <HAL_TIM_PWM_Start+0x148>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a35      	ldr	r2, [pc, #212]	; (80053bc <HAL_TIM_PWM_Start+0x1fc>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00e      	beq.n	8005308 <HAL_TIM_PWM_Start+0x148>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a34      	ldr	r2, [pc, #208]	; (80053c0 <HAL_TIM_PWM_Start+0x200>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d009      	beq.n	8005308 <HAL_TIM_PWM_Start+0x148>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a32      	ldr	r2, [pc, #200]	; (80053c4 <HAL_TIM_PWM_Start+0x204>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <HAL_TIM_PWM_Start+0x148>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a31      	ldr	r2, [pc, #196]	; (80053c8 <HAL_TIM_PWM_Start+0x208>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d101      	bne.n	800530c <HAL_TIM_PWM_Start+0x14c>
 8005308:	2301      	movs	r3, #1
 800530a:	e000      	b.n	800530e <HAL_TIM_PWM_Start+0x14e>
 800530c:	2300      	movs	r3, #0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d007      	beq.n	8005322 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005320:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a23      	ldr	r2, [pc, #140]	; (80053b4 <HAL_TIM_PWM_Start+0x1f4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d01d      	beq.n	8005368 <HAL_TIM_PWM_Start+0x1a8>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005334:	d018      	beq.n	8005368 <HAL_TIM_PWM_Start+0x1a8>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a24      	ldr	r2, [pc, #144]	; (80053cc <HAL_TIM_PWM_Start+0x20c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d013      	beq.n	8005368 <HAL_TIM_PWM_Start+0x1a8>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a22      	ldr	r2, [pc, #136]	; (80053d0 <HAL_TIM_PWM_Start+0x210>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00e      	beq.n	8005368 <HAL_TIM_PWM_Start+0x1a8>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a1a      	ldr	r2, [pc, #104]	; (80053b8 <HAL_TIM_PWM_Start+0x1f8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d009      	beq.n	8005368 <HAL_TIM_PWM_Start+0x1a8>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a18      	ldr	r2, [pc, #96]	; (80053bc <HAL_TIM_PWM_Start+0x1fc>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d004      	beq.n	8005368 <HAL_TIM_PWM_Start+0x1a8>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a19      	ldr	r2, [pc, #100]	; (80053c8 <HAL_TIM_PWM_Start+0x208>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d115      	bne.n	8005394 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	4b19      	ldr	r3, [pc, #100]	; (80053d4 <HAL_TIM_PWM_Start+0x214>)
 8005370:	4013      	ands	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b06      	cmp	r3, #6
 8005378:	d015      	beq.n	80053a6 <HAL_TIM_PWM_Start+0x1e6>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005380:	d011      	beq.n	80053a6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0201 	orr.w	r2, r2, #1
 8005390:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005392:	e008      	b.n	80053a6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0201 	orr.w	r2, r2, #1
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	e000      	b.n	80053a8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40012c00 	.word	0x40012c00
 80053b8:	40013400 	.word	0x40013400
 80053bc:	40014000 	.word	0x40014000
 80053c0:	40014400 	.word	0x40014400
 80053c4:	40014800 	.word	0x40014800
 80053c8:	40015000 	.word	0x40015000
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	00010007 	.word	0x00010007

080053d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d122      	bne.n	8005434 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d11b      	bne.n	8005434 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f06f 0202 	mvn.w	r2, #2
 8005404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 faed 	bl	80059fa <HAL_TIM_IC_CaptureCallback>
 8005420:	e005      	b.n	800542e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fadf 	bl	80059e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 faf0 	bl	8005a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b04      	cmp	r3, #4
 8005440:	d122      	bne.n	8005488 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b04      	cmp	r3, #4
 800544e:	d11b      	bne.n	8005488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0204 	mvn.w	r2, #4
 8005458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fac3 	bl	80059fa <HAL_TIM_IC_CaptureCallback>
 8005474:	e005      	b.n	8005482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fab5 	bl	80059e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fac6 	bl	8005a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b08      	cmp	r3, #8
 8005494:	d122      	bne.n	80054dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d11b      	bne.n	80054dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0208 	mvn.w	r2, #8
 80054ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2204      	movs	r2, #4
 80054b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fa99 	bl	80059fa <HAL_TIM_IC_CaptureCallback>
 80054c8:	e005      	b.n	80054d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fa8b 	bl	80059e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fa9c 	bl	8005a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0310 	and.w	r3, r3, #16
 80054e6:	2b10      	cmp	r3, #16
 80054e8:	d122      	bne.n	8005530 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0310 	and.w	r3, r3, #16
 80054f4:	2b10      	cmp	r3, #16
 80054f6:	d11b      	bne.n	8005530 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0210 	mvn.w	r2, #16
 8005500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2208      	movs	r2, #8
 8005506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fa6f 	bl	80059fa <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fa61 	bl	80059e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fa72 	bl	8005a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b01      	cmp	r3, #1
 800553c:	d10e      	bne.n	800555c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b01      	cmp	r3, #1
 800554a:	d107      	bne.n	800555c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0201 	mvn.w	r2, #1
 8005554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fa3b 	bl	80059d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005566:	2b80      	cmp	r3, #128	; 0x80
 8005568:	d10e      	bne.n	8005588 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005574:	2b80      	cmp	r3, #128	; 0x80
 8005576:	d107      	bne.n	8005588 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 ff52 	bl	800642c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005596:	d10e      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a2:	2b80      	cmp	r3, #128	; 0x80
 80055a4:	d107      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 ff45 	bl	8006440 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	d10e      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ce:	2b40      	cmp	r3, #64	; 0x40
 80055d0:	d107      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fa20 	bl	8005a22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b20      	cmp	r3, #32
 80055ee:	d10e      	bne.n	800560e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0320 	and.w	r3, r3, #32
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d107      	bne.n	800560e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f06f 0220 	mvn.w	r2, #32
 8005606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 ff05 	bl	8006418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800560e:	bf00      	nop
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005632:	2302      	movs	r3, #2
 8005634:	e0ff      	b.n	8005836 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b14      	cmp	r3, #20
 8005642:	f200 80f0 	bhi.w	8005826 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005646:	a201      	add	r2, pc, #4	; (adr r2, 800564c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	080056a1 	.word	0x080056a1
 8005650:	08005827 	.word	0x08005827
 8005654:	08005827 	.word	0x08005827
 8005658:	08005827 	.word	0x08005827
 800565c:	080056e1 	.word	0x080056e1
 8005660:	08005827 	.word	0x08005827
 8005664:	08005827 	.word	0x08005827
 8005668:	08005827 	.word	0x08005827
 800566c:	08005723 	.word	0x08005723
 8005670:	08005827 	.word	0x08005827
 8005674:	08005827 	.word	0x08005827
 8005678:	08005827 	.word	0x08005827
 800567c:	08005763 	.word	0x08005763
 8005680:	08005827 	.word	0x08005827
 8005684:	08005827 	.word	0x08005827
 8005688:	08005827 	.word	0x08005827
 800568c:	080057a5 	.word	0x080057a5
 8005690:	08005827 	.word	0x08005827
 8005694:	08005827 	.word	0x08005827
 8005698:	08005827 	.word	0x08005827
 800569c:	080057e5 	.word	0x080057e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fa64 	bl	8005b74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0208 	orr.w	r2, r2, #8
 80056ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0204 	bic.w	r2, r2, #4
 80056ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6999      	ldr	r1, [r3, #24]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	691a      	ldr	r2, [r3, #16]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	619a      	str	r2, [r3, #24]
      break;
 80056de:	e0a5      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fade 	bl	8005ca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800570a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6999      	ldr	r1, [r3, #24]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	021a      	lsls	r2, r3, #8
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	619a      	str	r2, [r3, #24]
      break;
 8005720:	e084      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fb51 	bl	8005dd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69da      	ldr	r2, [r3, #28]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0208 	orr.w	r2, r2, #8
 800573c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69da      	ldr	r2, [r3, #28]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0204 	bic.w	r2, r2, #4
 800574c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69d9      	ldr	r1, [r3, #28]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	61da      	str	r2, [r3, #28]
      break;
 8005760:	e064      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68b9      	ldr	r1, [r7, #8]
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fbc3 	bl	8005ef4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800577c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69d9      	ldr	r1, [r3, #28]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	021a      	lsls	r2, r3, #8
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	61da      	str	r2, [r3, #28]
      break;
 80057a2:	e043      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fc12 	bl	8005fd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0208 	orr.w	r2, r2, #8
 80057be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0204 	bic.w	r2, r2, #4
 80057ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057e2:	e023      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fc5c 	bl	80060a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800580e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	021a      	lsls	r2, r3, #8
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005824:	e002      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	75fb      	strb	r3, [r7, #23]
      break;
 800582a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005834:	7dfb      	ldrb	r3, [r7, #23]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop

08005840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_TIM_ConfigClockSource+0x1c>
 8005858:	2302      	movs	r3, #2
 800585a:	e0b6      	b.n	80059ca <HAL_TIM_ConfigClockSource+0x18a>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800587a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800587e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005886:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005898:	d03e      	beq.n	8005918 <HAL_TIM_ConfigClockSource+0xd8>
 800589a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800589e:	f200 8087 	bhi.w	80059b0 <HAL_TIM_ConfigClockSource+0x170>
 80058a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a6:	f000 8086 	beq.w	80059b6 <HAL_TIM_ConfigClockSource+0x176>
 80058aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ae:	d87f      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x170>
 80058b0:	2b70      	cmp	r3, #112	; 0x70
 80058b2:	d01a      	beq.n	80058ea <HAL_TIM_ConfigClockSource+0xaa>
 80058b4:	2b70      	cmp	r3, #112	; 0x70
 80058b6:	d87b      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x170>
 80058b8:	2b60      	cmp	r3, #96	; 0x60
 80058ba:	d050      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x11e>
 80058bc:	2b60      	cmp	r3, #96	; 0x60
 80058be:	d877      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x170>
 80058c0:	2b50      	cmp	r3, #80	; 0x50
 80058c2:	d03c      	beq.n	800593e <HAL_TIM_ConfigClockSource+0xfe>
 80058c4:	2b50      	cmp	r3, #80	; 0x50
 80058c6:	d873      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x170>
 80058c8:	2b40      	cmp	r3, #64	; 0x40
 80058ca:	d058      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x13e>
 80058cc:	2b40      	cmp	r3, #64	; 0x40
 80058ce:	d86f      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x170>
 80058d0:	2b30      	cmp	r3, #48	; 0x30
 80058d2:	d064      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x15e>
 80058d4:	2b30      	cmp	r3, #48	; 0x30
 80058d6:	d86b      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x170>
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d060      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x15e>
 80058dc:	2b20      	cmp	r3, #32
 80058de:	d867      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x170>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d05c      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x15e>
 80058e4:	2b10      	cmp	r3, #16
 80058e6:	d05a      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x15e>
 80058e8:	e062      	b.n	80059b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6818      	ldr	r0, [r3, #0]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	6899      	ldr	r1, [r3, #8]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f000 fcbb 	bl	8006274 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800590c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	609a      	str	r2, [r3, #8]
      break;
 8005916:	e04f      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	6899      	ldr	r1, [r3, #8]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f000 fca4 	bl	8006274 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800593a:	609a      	str	r2, [r3, #8]
      break;
 800593c:	e03c      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6859      	ldr	r1, [r3, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	461a      	mov	r2, r3
 800594c:	f000 fc18 	bl	8006180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2150      	movs	r1, #80	; 0x50
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fc71 	bl	800623e <TIM_ITRx_SetConfig>
      break;
 800595c:	e02c      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	461a      	mov	r2, r3
 800596c:	f000 fc37 	bl	80061de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2160      	movs	r1, #96	; 0x60
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fc61 	bl	800623e <TIM_ITRx_SetConfig>
      break;
 800597c:	e01c      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6859      	ldr	r1, [r3, #4]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	461a      	mov	r2, r3
 800598c:	f000 fbf8 	bl	8006180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2140      	movs	r1, #64	; 0x40
 8005996:	4618      	mov	r0, r3
 8005998:	f000 fc51 	bl	800623e <TIM_ITRx_SetConfig>
      break;
 800599c:	e00c      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f000 fc48 	bl	800623e <TIM_ITRx_SetConfig>
      break;
 80059ae:	e003      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	73fb      	strb	r3, [r7, #15]
      break;
 80059b4:	e000      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80059b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
	...

08005a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a42      	ldr	r2, [pc, #264]	; (8005b54 <TIM_Base_SetConfig+0x11c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d013      	beq.n	8005a78 <TIM_Base_SetConfig+0x40>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a56:	d00f      	beq.n	8005a78 <TIM_Base_SetConfig+0x40>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a3f      	ldr	r2, [pc, #252]	; (8005b58 <TIM_Base_SetConfig+0x120>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00b      	beq.n	8005a78 <TIM_Base_SetConfig+0x40>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a3e      	ldr	r2, [pc, #248]	; (8005b5c <TIM_Base_SetConfig+0x124>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d007      	beq.n	8005a78 <TIM_Base_SetConfig+0x40>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a3d      	ldr	r2, [pc, #244]	; (8005b60 <TIM_Base_SetConfig+0x128>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d003      	beq.n	8005a78 <TIM_Base_SetConfig+0x40>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a3c      	ldr	r2, [pc, #240]	; (8005b64 <TIM_Base_SetConfig+0x12c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d108      	bne.n	8005a8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a31      	ldr	r2, [pc, #196]	; (8005b54 <TIM_Base_SetConfig+0x11c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d01f      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a98:	d01b      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a2e      	ldr	r2, [pc, #184]	; (8005b58 <TIM_Base_SetConfig+0x120>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d017      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a2d      	ldr	r2, [pc, #180]	; (8005b5c <TIM_Base_SetConfig+0x124>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a2c      	ldr	r2, [pc, #176]	; (8005b60 <TIM_Base_SetConfig+0x128>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00f      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a2c      	ldr	r2, [pc, #176]	; (8005b68 <TIM_Base_SetConfig+0x130>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00b      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a2b      	ldr	r2, [pc, #172]	; (8005b6c <TIM_Base_SetConfig+0x134>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d007      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a2a      	ldr	r2, [pc, #168]	; (8005b70 <TIM_Base_SetConfig+0x138>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a25      	ldr	r2, [pc, #148]	; (8005b64 <TIM_Base_SetConfig+0x12c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d108      	bne.n	8005ae4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a12      	ldr	r2, [pc, #72]	; (8005b54 <TIM_Base_SetConfig+0x11c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d013      	beq.n	8005b38 <TIM_Base_SetConfig+0x100>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a13      	ldr	r2, [pc, #76]	; (8005b60 <TIM_Base_SetConfig+0x128>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00f      	beq.n	8005b38 <TIM_Base_SetConfig+0x100>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a13      	ldr	r2, [pc, #76]	; (8005b68 <TIM_Base_SetConfig+0x130>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00b      	beq.n	8005b38 <TIM_Base_SetConfig+0x100>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a12      	ldr	r2, [pc, #72]	; (8005b6c <TIM_Base_SetConfig+0x134>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d007      	beq.n	8005b38 <TIM_Base_SetConfig+0x100>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a11      	ldr	r2, [pc, #68]	; (8005b70 <TIM_Base_SetConfig+0x138>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d003      	beq.n	8005b38 <TIM_Base_SetConfig+0x100>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a0c      	ldr	r2, [pc, #48]	; (8005b64 <TIM_Base_SetConfig+0x12c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d103      	bne.n	8005b40 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	615a      	str	r2, [r3, #20]
}
 8005b46:	bf00      	nop
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40012c00 	.word	0x40012c00
 8005b58:	40000400 	.word	0x40000400
 8005b5c:	40000800 	.word	0x40000800
 8005b60:	40013400 	.word	0x40013400
 8005b64:	40015000 	.word	0x40015000
 8005b68:	40014000 	.word	0x40014000
 8005b6c:	40014400 	.word	0x40014400
 8005b70:	40014800 	.word	0x40014800

08005b74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f023 0201 	bic.w	r2, r3, #1
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 0303 	bic.w	r3, r3, #3
 8005bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f023 0302 	bic.w	r3, r3, #2
 8005bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a30      	ldr	r2, [pc, #192]	; (8005c90 <TIM_OC1_SetConfig+0x11c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d013      	beq.n	8005bfc <TIM_OC1_SetConfig+0x88>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a2f      	ldr	r2, [pc, #188]	; (8005c94 <TIM_OC1_SetConfig+0x120>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00f      	beq.n	8005bfc <TIM_OC1_SetConfig+0x88>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a2e      	ldr	r2, [pc, #184]	; (8005c98 <TIM_OC1_SetConfig+0x124>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00b      	beq.n	8005bfc <TIM_OC1_SetConfig+0x88>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a2d      	ldr	r2, [pc, #180]	; (8005c9c <TIM_OC1_SetConfig+0x128>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d007      	beq.n	8005bfc <TIM_OC1_SetConfig+0x88>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a2c      	ldr	r2, [pc, #176]	; (8005ca0 <TIM_OC1_SetConfig+0x12c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d003      	beq.n	8005bfc <TIM_OC1_SetConfig+0x88>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a2b      	ldr	r2, [pc, #172]	; (8005ca4 <TIM_OC1_SetConfig+0x130>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d10c      	bne.n	8005c16 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f023 0308 	bic.w	r3, r3, #8
 8005c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f023 0304 	bic.w	r3, r3, #4
 8005c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a1d      	ldr	r2, [pc, #116]	; (8005c90 <TIM_OC1_SetConfig+0x11c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d013      	beq.n	8005c46 <TIM_OC1_SetConfig+0xd2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a1c      	ldr	r2, [pc, #112]	; (8005c94 <TIM_OC1_SetConfig+0x120>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00f      	beq.n	8005c46 <TIM_OC1_SetConfig+0xd2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a1b      	ldr	r2, [pc, #108]	; (8005c98 <TIM_OC1_SetConfig+0x124>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00b      	beq.n	8005c46 <TIM_OC1_SetConfig+0xd2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a1a      	ldr	r2, [pc, #104]	; (8005c9c <TIM_OC1_SetConfig+0x128>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d007      	beq.n	8005c46 <TIM_OC1_SetConfig+0xd2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a19      	ldr	r2, [pc, #100]	; (8005ca0 <TIM_OC1_SetConfig+0x12c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d003      	beq.n	8005c46 <TIM_OC1_SetConfig+0xd2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a18      	ldr	r2, [pc, #96]	; (8005ca4 <TIM_OC1_SetConfig+0x130>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d111      	bne.n	8005c6a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	621a      	str	r2, [r3, #32]
}
 8005c84:	bf00      	nop
 8005c86:	371c      	adds	r7, #28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	40012c00 	.word	0x40012c00
 8005c94:	40013400 	.word	0x40013400
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40014400 	.word	0x40014400
 8005ca0:	40014800 	.word	0x40014800
 8005ca4:	40015000 	.word	0x40015000

08005ca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	f023 0210 	bic.w	r2, r3, #16
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	021b      	lsls	r3, r3, #8
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f023 0320 	bic.w	r3, r3, #32
 8005cf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a2c      	ldr	r2, [pc, #176]	; (8005db8 <TIM_OC2_SetConfig+0x110>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d007      	beq.n	8005d1c <TIM_OC2_SetConfig+0x74>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a2b      	ldr	r2, [pc, #172]	; (8005dbc <TIM_OC2_SetConfig+0x114>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <TIM_OC2_SetConfig+0x74>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a2a      	ldr	r2, [pc, #168]	; (8005dc0 <TIM_OC2_SetConfig+0x118>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d10d      	bne.n	8005d38 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a1f      	ldr	r2, [pc, #124]	; (8005db8 <TIM_OC2_SetConfig+0x110>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d013      	beq.n	8005d68 <TIM_OC2_SetConfig+0xc0>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a1e      	ldr	r2, [pc, #120]	; (8005dbc <TIM_OC2_SetConfig+0x114>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00f      	beq.n	8005d68 <TIM_OC2_SetConfig+0xc0>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a1e      	ldr	r2, [pc, #120]	; (8005dc4 <TIM_OC2_SetConfig+0x11c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00b      	beq.n	8005d68 <TIM_OC2_SetConfig+0xc0>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a1d      	ldr	r2, [pc, #116]	; (8005dc8 <TIM_OC2_SetConfig+0x120>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d007      	beq.n	8005d68 <TIM_OC2_SetConfig+0xc0>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a1c      	ldr	r2, [pc, #112]	; (8005dcc <TIM_OC2_SetConfig+0x124>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <TIM_OC2_SetConfig+0xc0>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a17      	ldr	r2, [pc, #92]	; (8005dc0 <TIM_OC2_SetConfig+0x118>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d113      	bne.n	8005d90 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d6e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d76:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	40012c00 	.word	0x40012c00
 8005dbc:	40013400 	.word	0x40013400
 8005dc0:	40015000 	.word	0x40015000
 8005dc4:	40014000 	.word	0x40014000
 8005dc8:	40014400 	.word	0x40014400
 8005dcc:	40014800 	.word	0x40014800

08005dd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0303 	bic.w	r3, r3, #3
 8005e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	021b      	lsls	r3, r3, #8
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a2b      	ldr	r2, [pc, #172]	; (8005edc <TIM_OC3_SetConfig+0x10c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d007      	beq.n	8005e42 <TIM_OC3_SetConfig+0x72>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a2a      	ldr	r2, [pc, #168]	; (8005ee0 <TIM_OC3_SetConfig+0x110>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d003      	beq.n	8005e42 <TIM_OC3_SetConfig+0x72>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a29      	ldr	r2, [pc, #164]	; (8005ee4 <TIM_OC3_SetConfig+0x114>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d10d      	bne.n	8005e5e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e5c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a1e      	ldr	r2, [pc, #120]	; (8005edc <TIM_OC3_SetConfig+0x10c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d013      	beq.n	8005e8e <TIM_OC3_SetConfig+0xbe>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <TIM_OC3_SetConfig+0x110>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00f      	beq.n	8005e8e <TIM_OC3_SetConfig+0xbe>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a1d      	ldr	r2, [pc, #116]	; (8005ee8 <TIM_OC3_SetConfig+0x118>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00b      	beq.n	8005e8e <TIM_OC3_SetConfig+0xbe>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a1c      	ldr	r2, [pc, #112]	; (8005eec <TIM_OC3_SetConfig+0x11c>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d007      	beq.n	8005e8e <TIM_OC3_SetConfig+0xbe>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a1b      	ldr	r2, [pc, #108]	; (8005ef0 <TIM_OC3_SetConfig+0x120>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d003      	beq.n	8005e8e <TIM_OC3_SetConfig+0xbe>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a16      	ldr	r2, [pc, #88]	; (8005ee4 <TIM_OC3_SetConfig+0x114>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d113      	bne.n	8005eb6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	621a      	str	r2, [r3, #32]
}
 8005ed0:	bf00      	nop
 8005ed2:	371c      	adds	r7, #28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	40012c00 	.word	0x40012c00
 8005ee0:	40013400 	.word	0x40013400
 8005ee4:	40015000 	.word	0x40015000
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40014400 	.word	0x40014400
 8005ef0:	40014800 	.word	0x40014800

08005ef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	021b      	lsls	r3, r3, #8
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	031b      	lsls	r3, r3, #12
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a1a      	ldr	r2, [pc, #104]	; (8005fbc <TIM_OC4_SetConfig+0xc8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d013      	beq.n	8005f80 <TIM_OC4_SetConfig+0x8c>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a19      	ldr	r2, [pc, #100]	; (8005fc0 <TIM_OC4_SetConfig+0xcc>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00f      	beq.n	8005f80 <TIM_OC4_SetConfig+0x8c>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a18      	ldr	r2, [pc, #96]	; (8005fc4 <TIM_OC4_SetConfig+0xd0>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00b      	beq.n	8005f80 <TIM_OC4_SetConfig+0x8c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a17      	ldr	r2, [pc, #92]	; (8005fc8 <TIM_OC4_SetConfig+0xd4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d007      	beq.n	8005f80 <TIM_OC4_SetConfig+0x8c>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a16      	ldr	r2, [pc, #88]	; (8005fcc <TIM_OC4_SetConfig+0xd8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d003      	beq.n	8005f80 <TIM_OC4_SetConfig+0x8c>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a15      	ldr	r2, [pc, #84]	; (8005fd0 <TIM_OC4_SetConfig+0xdc>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d109      	bne.n	8005f94 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	019b      	lsls	r3, r3, #6
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	621a      	str	r2, [r3, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	40012c00 	.word	0x40012c00
 8005fc0:	40013400 	.word	0x40013400
 8005fc4:	40014000 	.word	0x40014000
 8005fc8:	40014400 	.word	0x40014400
 8005fcc:	40014800 	.word	0x40014800
 8005fd0:	40015000 	.word	0x40015000

08005fd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006018:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	041b      	lsls	r3, r3, #16
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	4313      	orrs	r3, r2
 8006024:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a19      	ldr	r2, [pc, #100]	; (8006090 <TIM_OC5_SetConfig+0xbc>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <TIM_OC5_SetConfig+0x82>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a18      	ldr	r2, [pc, #96]	; (8006094 <TIM_OC5_SetConfig+0xc0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00f      	beq.n	8006056 <TIM_OC5_SetConfig+0x82>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a17      	ldr	r2, [pc, #92]	; (8006098 <TIM_OC5_SetConfig+0xc4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00b      	beq.n	8006056 <TIM_OC5_SetConfig+0x82>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a16      	ldr	r2, [pc, #88]	; (800609c <TIM_OC5_SetConfig+0xc8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d007      	beq.n	8006056 <TIM_OC5_SetConfig+0x82>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a15      	ldr	r2, [pc, #84]	; (80060a0 <TIM_OC5_SetConfig+0xcc>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d003      	beq.n	8006056 <TIM_OC5_SetConfig+0x82>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a14      	ldr	r2, [pc, #80]	; (80060a4 <TIM_OC5_SetConfig+0xd0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d109      	bne.n	800606a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800605c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	021b      	lsls	r3, r3, #8
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	621a      	str	r2, [r3, #32]
}
 8006084:	bf00      	nop
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	40012c00 	.word	0x40012c00
 8006094:	40013400 	.word	0x40013400
 8006098:	40014000 	.word	0x40014000
 800609c:	40014400 	.word	0x40014400
 80060a0:	40014800 	.word	0x40014800
 80060a4:	40015000 	.word	0x40015000

080060a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	021b      	lsls	r3, r3, #8
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	051b      	lsls	r3, r3, #20
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a1a      	ldr	r2, [pc, #104]	; (8006168 <TIM_OC6_SetConfig+0xc0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d013      	beq.n	800612c <TIM_OC6_SetConfig+0x84>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a19      	ldr	r2, [pc, #100]	; (800616c <TIM_OC6_SetConfig+0xc4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00f      	beq.n	800612c <TIM_OC6_SetConfig+0x84>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a18      	ldr	r2, [pc, #96]	; (8006170 <TIM_OC6_SetConfig+0xc8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00b      	beq.n	800612c <TIM_OC6_SetConfig+0x84>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a17      	ldr	r2, [pc, #92]	; (8006174 <TIM_OC6_SetConfig+0xcc>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d007      	beq.n	800612c <TIM_OC6_SetConfig+0x84>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a16      	ldr	r2, [pc, #88]	; (8006178 <TIM_OC6_SetConfig+0xd0>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d003      	beq.n	800612c <TIM_OC6_SetConfig+0x84>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a15      	ldr	r2, [pc, #84]	; (800617c <TIM_OC6_SetConfig+0xd4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d109      	bne.n	8006140 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006132:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	029b      	lsls	r3, r3, #10
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	4313      	orrs	r3, r2
 800613e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	621a      	str	r2, [r3, #32]
}
 800615a:	bf00      	nop
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40012c00 	.word	0x40012c00
 800616c:	40013400 	.word	0x40013400
 8006170:	40014000 	.word	0x40014000
 8006174:	40014400 	.word	0x40014400
 8006178:	40014800 	.word	0x40014800
 800617c:	40015000 	.word	0x40015000

08006180 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	f023 0201 	bic.w	r2, r3, #1
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f023 030a 	bic.w	r3, r3, #10
 80061bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	621a      	str	r2, [r3, #32]
}
 80061d2:	bf00      	nop
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061de:	b480      	push	{r7}
 80061e0:	b087      	sub	sp, #28
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	f023 0210 	bic.w	r2, r3, #16
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006208:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	031b      	lsls	r3, r3, #12
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4313      	orrs	r3, r2
 8006212:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800621a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	011b      	lsls	r3, r3, #4
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	621a      	str	r2, [r3, #32]
}
 8006232:	bf00      	nop
 8006234:	371c      	adds	r7, #28
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800623e:	b480      	push	{r7}
 8006240:	b085      	sub	sp, #20
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006254:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	f043 0307 	orr.w	r3, r3, #7
 8006260:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	609a      	str	r2, [r3, #8]
}
 8006268:	bf00      	nop
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
 8006280:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800628e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	021a      	lsls	r2, r3, #8
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	431a      	orrs	r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4313      	orrs	r3, r2
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	609a      	str	r2, [r3, #8]
}
 80062a8:	bf00      	nop
 80062aa:	371c      	adds	r7, #28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	f003 031f 	and.w	r3, r3, #31
 80062c6:	2201      	movs	r2, #1
 80062c8:	fa02 f303 	lsl.w	r3, r2, r3
 80062cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6a1a      	ldr	r2, [r3, #32]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	43db      	mvns	r3, r3
 80062d6:	401a      	ands	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a1a      	ldr	r2, [r3, #32]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f003 031f 	and.w	r3, r3, #31
 80062e6:	6879      	ldr	r1, [r7, #4]
 80062e8:	fa01 f303 	lsl.w	r3, r1, r3
 80062ec:	431a      	orrs	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	621a      	str	r2, [r3, #32]
}
 80062f2:	bf00      	nop
 80062f4:	371c      	adds	r7, #28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
	...

08006300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006314:	2302      	movs	r3, #2
 8006316:	e06d      	b.n	80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a30      	ldr	r2, [pc, #192]	; (8006400 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d009      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a2f      	ldr	r2, [pc, #188]	; (8006404 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d004      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a2d      	ldr	r2, [pc, #180]	; (8006408 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d108      	bne.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800635c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	4313      	orrs	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a1e      	ldr	r2, [pc, #120]	; (8006400 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d01d      	beq.n	80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006394:	d018      	beq.n	80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a1c      	ldr	r2, [pc, #112]	; (800640c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d013      	beq.n	80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a1a      	ldr	r2, [pc, #104]	; (8006410 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00e      	beq.n	80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a15      	ldr	r2, [pc, #84]	; (8006404 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d009      	beq.n	80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a16      	ldr	r2, [pc, #88]	; (8006414 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d004      	beq.n	80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a11      	ldr	r2, [pc, #68]	; (8006408 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d10c      	bne.n	80063e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	40012c00 	.word	0x40012c00
 8006404:	40013400 	.word	0x40013400
 8006408:	40015000 	.word	0x40015000
 800640c:	40000400 	.word	0x40000400
 8006410:	40000800 	.word	0x40000800
 8006414:	40014000 	.word	0x40014000

08006418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e040      	b.n	80064e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800646a:	2b00      	cmp	r3, #0
 800646c:	d106      	bne.n	800647c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fb fa6e 	bl	8001958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2224      	movs	r2, #36	; 0x24
 8006480:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0201 	bic.w	r2, r2, #1
 8006490:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fc00 	bl	8006c98 <UART_SetConfig>
 8006498:	4603      	mov	r3, r0
 800649a:	2b01      	cmp	r3, #1
 800649c:	d101      	bne.n	80064a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e022      	b.n	80064e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d002      	beq.n	80064b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fdc8 	bl	8007040 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0201 	orr.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fe4f 	bl	8007184 <UART_CheckIdleState>
 80064e6:	4603      	mov	r3, r0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	; 0x28
 80064f4:	af02      	add	r7, sp, #8
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	4613      	mov	r3, r2
 80064fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006504:	2b20      	cmp	r3, #32
 8006506:	d178      	bne.n	80065fa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <HAL_UART_Transmit+0x24>
 800650e:	88fb      	ldrh	r3, [r7, #6]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e071      	b.n	80065fc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2221      	movs	r2, #33	; 0x21
 8006524:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006526:	f7fb fb4d 	bl	8001bc4 <HAL_GetTick>
 800652a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	88fa      	ldrh	r2, [r7, #6]
 8006530:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	88fa      	ldrh	r2, [r7, #6]
 8006538:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006544:	d108      	bne.n	8006558 <HAL_UART_Transmit+0x68>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d104      	bne.n	8006558 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800654e:	2300      	movs	r3, #0
 8006550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	e003      	b.n	8006560 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800655c:	2300      	movs	r3, #0
 800655e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006560:	e030      	b.n	80065c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2200      	movs	r2, #0
 800656a:	2180      	movs	r1, #128	; 0x80
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 feb1 	bl	80072d4 <UART_WaitOnFlagUntilTimeout>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d004      	beq.n	8006582 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2220      	movs	r2, #32
 800657c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e03c      	b.n	80065fc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10b      	bne.n	80065a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	881a      	ldrh	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006594:	b292      	uxth	r2, r2
 8006596:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	3302      	adds	r3, #2
 800659c:	61bb      	str	r3, [r7, #24]
 800659e:	e008      	b.n	80065b2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	781a      	ldrb	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	b292      	uxth	r2, r2
 80065aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	3301      	adds	r3, #1
 80065b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	3b01      	subs	r3, #1
 80065bc:	b29a      	uxth	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1c8      	bne.n	8006562 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	2200      	movs	r2, #0
 80065d8:	2140      	movs	r1, #64	; 0x40
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 fe7a 	bl	80072d4 <UART_WaitOnFlagUntilTimeout>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d004      	beq.n	80065f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2220      	movs	r2, #32
 80065ea:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e005      	b.n	80065fc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	e000      	b.n	80065fc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80065fa:	2302      	movs	r3, #2
  }
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3720      	adds	r7, #32
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08a      	sub	sp, #40	; 0x28
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	4613      	mov	r3, r2
 8006610:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006618:	2b20      	cmp	r3, #32
 800661a:	d132      	bne.n	8006682 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <HAL_UART_Receive_IT+0x24>
 8006622:	88fb      	ldrh	r3, [r7, #6]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e02b      	b.n	8006684 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d018      	beq.n	8006672 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	613b      	str	r3, [r7, #16]
   return(result);
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	623b      	str	r3, [r7, #32]
 8006660:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	69f9      	ldr	r1, [r7, #28]
 8006664:	6a3a      	ldr	r2, [r7, #32]
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	61bb      	str	r3, [r7, #24]
   return(result);
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e6      	bne.n	8006640 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006672:	88fb      	ldrh	r3, [r7, #6]
 8006674:	461a      	mov	r2, r3
 8006676:	68b9      	ldr	r1, [r7, #8]
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 fe93 	bl	80073a4 <UART_Start_Receive_IT>
 800667e:	4603      	mov	r3, r0
 8006680:	e000      	b.n	8006684 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006682:	2302      	movs	r3, #2
  }
}
 8006684:	4618      	mov	r0, r3
 8006686:	3728      	adds	r7, #40	; 0x28
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b0ba      	sub	sp, #232	; 0xe8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80066b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80066ba:	4013      	ands	r3, r2
 80066bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80066c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d115      	bne.n	80066f4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80066c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066cc:	f003 0320 	and.w	r3, r3, #32
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00f      	beq.n	80066f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d8:	f003 0320 	and.w	r3, r3, #32
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d009      	beq.n	80066f4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 82ab 	beq.w	8006c40 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
      }
      return;
 80066f2:	e2a5      	b.n	8006c40 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 8117 	beq.w	800692c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80066fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800670a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800670e:	4b85      	ldr	r3, [pc, #532]	; (8006924 <HAL_UART_IRQHandler+0x298>)
 8006710:	4013      	ands	r3, r2
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 810a 	beq.w	800692c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d011      	beq.n	8006748 <HAL_UART_IRQHandler+0xbc>
 8006724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00b      	beq.n	8006748 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2201      	movs	r2, #1
 8006736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800673e:	f043 0201 	orr.w	r2, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d011      	beq.n	8006778 <HAL_UART_IRQHandler+0xec>
 8006754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2202      	movs	r2, #2
 8006766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800676e:	f043 0204 	orr.w	r2, r3, #4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b00      	cmp	r3, #0
 8006782:	d011      	beq.n	80067a8 <HAL_UART_IRQHandler+0x11c>
 8006784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00b      	beq.n	80067a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2204      	movs	r2, #4
 8006796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800679e:	f043 0202 	orr.w	r2, r3, #2
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d017      	beq.n	80067e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b8:	f003 0320 	and.w	r3, r3, #32
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d105      	bne.n	80067cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80067c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00b      	beq.n	80067e4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2208      	movs	r2, #8
 80067d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067da:	f043 0208 	orr.w	r2, r3, #8
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d012      	beq.n	8006816 <HAL_UART_IRQHandler+0x18a>
 80067f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00c      	beq.n	8006816 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006804:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800680c:	f043 0220 	orr.w	r2, r3, #32
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 8211 	beq.w	8006c44 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00d      	beq.n	800684a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800682e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d007      	beq.n	800684a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006850:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685e:	2b40      	cmp	r3, #64	; 0x40
 8006860:	d005      	beq.n	800686e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006866:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800686a:	2b00      	cmp	r3, #0
 800686c:	d04f      	beq.n	800690e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fe5e 	bl	8007530 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687e:	2b40      	cmp	r3, #64	; 0x40
 8006880:	d141      	bne.n	8006906 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3308      	adds	r3, #8
 8006888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800689c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3308      	adds	r3, #8
 80068aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1d9      	bne.n	8006882 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d013      	beq.n	80068fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068da:	4a13      	ldr	r2, [pc, #76]	; (8006928 <HAL_UART_IRQHandler+0x29c>)
 80068dc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fc fbac 	bl	8003040 <HAL_DMA_Abort_IT>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d017      	beq.n	800691e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80068f8:	4610      	mov	r0, r2
 80068fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068fc:	e00f      	b.n	800691e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f9b4 	bl	8006c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006904:	e00b      	b.n	800691e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f9b0 	bl	8006c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800690c:	e007      	b.n	800691e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f9ac 	bl	8006c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800691c:	e192      	b.n	8006c44 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691e:	bf00      	nop
    return;
 8006920:	e190      	b.n	8006c44 <HAL_UART_IRQHandler+0x5b8>
 8006922:	bf00      	nop
 8006924:	04000120 	.word	0x04000120
 8006928:	080075f9 	.word	0x080075f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006930:	2b01      	cmp	r3, #1
 8006932:	f040 814b 	bne.w	8006bcc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800693a:	f003 0310 	and.w	r3, r3, #16
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 8144 	beq.w	8006bcc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006948:	f003 0310 	and.w	r3, r3, #16
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 813d 	beq.w	8006bcc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2210      	movs	r2, #16
 8006958:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006964:	2b40      	cmp	r3, #64	; 0x40
 8006966:	f040 80b5 	bne.w	8006ad4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006976:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 8164 	beq.w	8006c48 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800698a:	429a      	cmp	r2, r3
 800698c:	f080 815c 	bcs.w	8006c48 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006996:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	2b20      	cmp	r3, #32
 80069a2:	f000 8086 	beq.w	8006ab2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069b2:	e853 3f00 	ldrex	r3, [r3]
 80069b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	461a      	mov	r2, r3
 80069cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069d4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069e0:	e841 2300 	strex	r3, r2, [r1]
 80069e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1da      	bne.n	80069a6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3308      	adds	r3, #8
 80069f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069fa:	e853 3f00 	ldrex	r3, [r3]
 80069fe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a02:	f023 0301 	bic.w	r3, r3, #1
 8006a06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a20:	e841 2300 	strex	r3, r2, [r1]
 8006a24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e1      	bne.n	80069f0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3308      	adds	r3, #8
 8006a32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a36:	e853 3f00 	ldrex	r3, [r3]
 8006a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a50:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a58:	e841 2300 	strex	r3, r2, [r1]
 8006a5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e3      	bne.n	8006a2c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a7a:	e853 3f00 	ldrex	r3, [r3]
 8006a7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a82:	f023 0310 	bic.w	r3, r3, #16
 8006a86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a94:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a96:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a9c:	e841 2300 	strex	r3, r2, [r1]
 8006aa0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e4      	bne.n	8006a72 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fc fa8e 	bl	8002fce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f8d7 	bl	8006c80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ad2:	e0b9      	b.n	8006c48 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 80ab 	beq.w	8006c4c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006af6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 80a6 	beq.w	8006c4c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b22:	647b      	str	r3, [r7, #68]	; 0x44
 8006b24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e4      	bne.n	8006b00 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	623b      	str	r3, [r7, #32]
   return(result);
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	f023 0301 	bic.w	r3, r3, #1
 8006b4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3308      	adds	r3, #8
 8006b56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b5a:	633a      	str	r2, [r7, #48]	; 0x30
 8006b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e3      	bne.n	8006b36 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 0310 	bic.w	r3, r3, #16
 8006b96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ba4:	61fb      	str	r3, [r7, #28]
 8006ba6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	69b9      	ldr	r1, [r7, #24]
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e4      	bne.n	8006b82 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f85b 	bl	8006c80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bca:	e03f      	b.n	8006c4c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00e      	beq.n	8006bf6 <HAL_UART_IRQHandler+0x56a>
 8006bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d008      	beq.n	8006bf6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006bec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 feea 	bl	80079c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bf4:	e02d      	b.n	8006c52 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00e      	beq.n	8006c20 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d008      	beq.n	8006c20 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d01c      	beq.n	8006c50 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	4798      	blx	r3
    }
    return;
 8006c1e:	e017      	b.n	8006c50 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d012      	beq.n	8006c52 <HAL_UART_IRQHandler+0x5c6>
 8006c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00c      	beq.n	8006c52 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fcf3 	bl	8007624 <UART_EndTransmit_IT>
    return;
 8006c3e:	e008      	b.n	8006c52 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006c40:	bf00      	nop
 8006c42:	e006      	b.n	8006c52 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006c44:	bf00      	nop
 8006c46:	e004      	b.n	8006c52 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006c48:	bf00      	nop
 8006c4a:	e002      	b.n	8006c52 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006c4c:	bf00      	nop
 8006c4e:	e000      	b.n	8006c52 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006c50:	bf00      	nop
  }

}
 8006c52:	37e8      	adds	r7, #232	; 0xe8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689a      	ldr	r2, [r3, #8]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	431a      	orrs	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b92      	ldr	r3, [pc, #584]	; (8006f0c <UART_SetConfig+0x274>)
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	6812      	ldr	r2, [r2, #0]
 8006cca:	6979      	ldr	r1, [r7, #20]
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a80      	ldr	r2, [pc, #512]	; (8006f10 <UART_SetConfig+0x278>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d120      	bne.n	8006d56 <UART_SetConfig+0xbe>
 8006d14:	4b7f      	ldr	r3, [pc, #508]	; (8006f14 <UART_SetConfig+0x27c>)
 8006d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d18:	f003 0303 	and.w	r3, r3, #3
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d817      	bhi.n	8006d50 <UART_SetConfig+0xb8>
 8006d20:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <UART_SetConfig+0x90>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d39 	.word	0x08006d39
 8006d2c:	08006d45 	.word	0x08006d45
 8006d30:	08006d4b 	.word	0x08006d4b
 8006d34:	08006d3f 	.word	0x08006d3f
 8006d38:	2301      	movs	r3, #1
 8006d3a:	77fb      	strb	r3, [r7, #31]
 8006d3c:	e0b5      	b.n	8006eaa <UART_SetConfig+0x212>
 8006d3e:	2302      	movs	r3, #2
 8006d40:	77fb      	strb	r3, [r7, #31]
 8006d42:	e0b2      	b.n	8006eaa <UART_SetConfig+0x212>
 8006d44:	2304      	movs	r3, #4
 8006d46:	77fb      	strb	r3, [r7, #31]
 8006d48:	e0af      	b.n	8006eaa <UART_SetConfig+0x212>
 8006d4a:	2308      	movs	r3, #8
 8006d4c:	77fb      	strb	r3, [r7, #31]
 8006d4e:	e0ac      	b.n	8006eaa <UART_SetConfig+0x212>
 8006d50:	2310      	movs	r3, #16
 8006d52:	77fb      	strb	r3, [r7, #31]
 8006d54:	e0a9      	b.n	8006eaa <UART_SetConfig+0x212>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a6f      	ldr	r2, [pc, #444]	; (8006f18 <UART_SetConfig+0x280>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d124      	bne.n	8006daa <UART_SetConfig+0x112>
 8006d60:	4b6c      	ldr	r3, [pc, #432]	; (8006f14 <UART_SetConfig+0x27c>)
 8006d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d6c:	d011      	beq.n	8006d92 <UART_SetConfig+0xfa>
 8006d6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d72:	d817      	bhi.n	8006da4 <UART_SetConfig+0x10c>
 8006d74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d78:	d011      	beq.n	8006d9e <UART_SetConfig+0x106>
 8006d7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d7e:	d811      	bhi.n	8006da4 <UART_SetConfig+0x10c>
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <UART_SetConfig+0xf4>
 8006d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d88:	d006      	beq.n	8006d98 <UART_SetConfig+0x100>
 8006d8a:	e00b      	b.n	8006da4 <UART_SetConfig+0x10c>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	e08b      	b.n	8006eaa <UART_SetConfig+0x212>
 8006d92:	2302      	movs	r3, #2
 8006d94:	77fb      	strb	r3, [r7, #31]
 8006d96:	e088      	b.n	8006eaa <UART_SetConfig+0x212>
 8006d98:	2304      	movs	r3, #4
 8006d9a:	77fb      	strb	r3, [r7, #31]
 8006d9c:	e085      	b.n	8006eaa <UART_SetConfig+0x212>
 8006d9e:	2308      	movs	r3, #8
 8006da0:	77fb      	strb	r3, [r7, #31]
 8006da2:	e082      	b.n	8006eaa <UART_SetConfig+0x212>
 8006da4:	2310      	movs	r3, #16
 8006da6:	77fb      	strb	r3, [r7, #31]
 8006da8:	e07f      	b.n	8006eaa <UART_SetConfig+0x212>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a5b      	ldr	r2, [pc, #364]	; (8006f1c <UART_SetConfig+0x284>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d124      	bne.n	8006dfe <UART_SetConfig+0x166>
 8006db4:	4b57      	ldr	r3, [pc, #348]	; (8006f14 <UART_SetConfig+0x27c>)
 8006db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006dbc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006dc0:	d011      	beq.n	8006de6 <UART_SetConfig+0x14e>
 8006dc2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006dc6:	d817      	bhi.n	8006df8 <UART_SetConfig+0x160>
 8006dc8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006dcc:	d011      	beq.n	8006df2 <UART_SetConfig+0x15a>
 8006dce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006dd2:	d811      	bhi.n	8006df8 <UART_SetConfig+0x160>
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <UART_SetConfig+0x148>
 8006dd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ddc:	d006      	beq.n	8006dec <UART_SetConfig+0x154>
 8006dde:	e00b      	b.n	8006df8 <UART_SetConfig+0x160>
 8006de0:	2300      	movs	r3, #0
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	e061      	b.n	8006eaa <UART_SetConfig+0x212>
 8006de6:	2302      	movs	r3, #2
 8006de8:	77fb      	strb	r3, [r7, #31]
 8006dea:	e05e      	b.n	8006eaa <UART_SetConfig+0x212>
 8006dec:	2304      	movs	r3, #4
 8006dee:	77fb      	strb	r3, [r7, #31]
 8006df0:	e05b      	b.n	8006eaa <UART_SetConfig+0x212>
 8006df2:	2308      	movs	r3, #8
 8006df4:	77fb      	strb	r3, [r7, #31]
 8006df6:	e058      	b.n	8006eaa <UART_SetConfig+0x212>
 8006df8:	2310      	movs	r3, #16
 8006dfa:	77fb      	strb	r3, [r7, #31]
 8006dfc:	e055      	b.n	8006eaa <UART_SetConfig+0x212>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a47      	ldr	r2, [pc, #284]	; (8006f20 <UART_SetConfig+0x288>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d124      	bne.n	8006e52 <UART_SetConfig+0x1ba>
 8006e08:	4b42      	ldr	r3, [pc, #264]	; (8006f14 <UART_SetConfig+0x27c>)
 8006e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006e10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e14:	d011      	beq.n	8006e3a <UART_SetConfig+0x1a2>
 8006e16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e1a:	d817      	bhi.n	8006e4c <UART_SetConfig+0x1b4>
 8006e1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e20:	d011      	beq.n	8006e46 <UART_SetConfig+0x1ae>
 8006e22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e26:	d811      	bhi.n	8006e4c <UART_SetConfig+0x1b4>
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <UART_SetConfig+0x19c>
 8006e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e30:	d006      	beq.n	8006e40 <UART_SetConfig+0x1a8>
 8006e32:	e00b      	b.n	8006e4c <UART_SetConfig+0x1b4>
 8006e34:	2300      	movs	r3, #0
 8006e36:	77fb      	strb	r3, [r7, #31]
 8006e38:	e037      	b.n	8006eaa <UART_SetConfig+0x212>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	77fb      	strb	r3, [r7, #31]
 8006e3e:	e034      	b.n	8006eaa <UART_SetConfig+0x212>
 8006e40:	2304      	movs	r3, #4
 8006e42:	77fb      	strb	r3, [r7, #31]
 8006e44:	e031      	b.n	8006eaa <UART_SetConfig+0x212>
 8006e46:	2308      	movs	r3, #8
 8006e48:	77fb      	strb	r3, [r7, #31]
 8006e4a:	e02e      	b.n	8006eaa <UART_SetConfig+0x212>
 8006e4c:	2310      	movs	r3, #16
 8006e4e:	77fb      	strb	r3, [r7, #31]
 8006e50:	e02b      	b.n	8006eaa <UART_SetConfig+0x212>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a33      	ldr	r2, [pc, #204]	; (8006f24 <UART_SetConfig+0x28c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d124      	bne.n	8006ea6 <UART_SetConfig+0x20e>
 8006e5c:	4b2d      	ldr	r3, [pc, #180]	; (8006f14 <UART_SetConfig+0x27c>)
 8006e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e60:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006e64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e68:	d011      	beq.n	8006e8e <UART_SetConfig+0x1f6>
 8006e6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e6e:	d817      	bhi.n	8006ea0 <UART_SetConfig+0x208>
 8006e70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e74:	d011      	beq.n	8006e9a <UART_SetConfig+0x202>
 8006e76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e7a:	d811      	bhi.n	8006ea0 <UART_SetConfig+0x208>
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <UART_SetConfig+0x1f0>
 8006e80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e84:	d006      	beq.n	8006e94 <UART_SetConfig+0x1fc>
 8006e86:	e00b      	b.n	8006ea0 <UART_SetConfig+0x208>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	77fb      	strb	r3, [r7, #31]
 8006e8c:	e00d      	b.n	8006eaa <UART_SetConfig+0x212>
 8006e8e:	2302      	movs	r3, #2
 8006e90:	77fb      	strb	r3, [r7, #31]
 8006e92:	e00a      	b.n	8006eaa <UART_SetConfig+0x212>
 8006e94:	2304      	movs	r3, #4
 8006e96:	77fb      	strb	r3, [r7, #31]
 8006e98:	e007      	b.n	8006eaa <UART_SetConfig+0x212>
 8006e9a:	2308      	movs	r3, #8
 8006e9c:	77fb      	strb	r3, [r7, #31]
 8006e9e:	e004      	b.n	8006eaa <UART_SetConfig+0x212>
 8006ea0:	2310      	movs	r3, #16
 8006ea2:	77fb      	strb	r3, [r7, #31]
 8006ea4:	e001      	b.n	8006eaa <UART_SetConfig+0x212>
 8006ea6:	2310      	movs	r3, #16
 8006ea8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb2:	d16b      	bne.n	8006f8c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006eb4:	7ffb      	ldrb	r3, [r7, #31]
 8006eb6:	2b08      	cmp	r3, #8
 8006eb8:	d838      	bhi.n	8006f2c <UART_SetConfig+0x294>
 8006eba:	a201      	add	r2, pc, #4	; (adr r2, 8006ec0 <UART_SetConfig+0x228>)
 8006ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec0:	08006ee5 	.word	0x08006ee5
 8006ec4:	08006eed 	.word	0x08006eed
 8006ec8:	08006ef5 	.word	0x08006ef5
 8006ecc:	08006f2d 	.word	0x08006f2d
 8006ed0:	08006efb 	.word	0x08006efb
 8006ed4:	08006f2d 	.word	0x08006f2d
 8006ed8:	08006f2d 	.word	0x08006f2d
 8006edc:	08006f2d 	.word	0x08006f2d
 8006ee0:	08006f03 	.word	0x08006f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee4:	f7fd fde0 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 8006ee8:	61b8      	str	r0, [r7, #24]
        break;
 8006eea:	e024      	b.n	8006f36 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006eec:	f7fd fdfe 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
 8006ef0:	61b8      	str	r0, [r7, #24]
        break;
 8006ef2:	e020      	b.n	8006f36 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ef4:	4b0c      	ldr	r3, [pc, #48]	; (8006f28 <UART_SetConfig+0x290>)
 8006ef6:	61bb      	str	r3, [r7, #24]
        break;
 8006ef8:	e01d      	b.n	8006f36 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006efa:	f7fd fd5f 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 8006efe:	61b8      	str	r0, [r7, #24]
        break;
 8006f00:	e019      	b.n	8006f36 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f06:	61bb      	str	r3, [r7, #24]
        break;
 8006f08:	e015      	b.n	8006f36 <UART_SetConfig+0x29e>
 8006f0a:	bf00      	nop
 8006f0c:	efff69f3 	.word	0xefff69f3
 8006f10:	40013800 	.word	0x40013800
 8006f14:	40021000 	.word	0x40021000
 8006f18:	40004400 	.word	0x40004400
 8006f1c:	40004800 	.word	0x40004800
 8006f20:	40004c00 	.word	0x40004c00
 8006f24:	40005000 	.word	0x40005000
 8006f28:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	77bb      	strb	r3, [r7, #30]
        break;
 8006f34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d073      	beq.n	8007024 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	005a      	lsls	r2, r3, #1
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	085b      	lsrs	r3, r3, #1
 8006f46:	441a      	add	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	2b0f      	cmp	r3, #15
 8006f56:	d916      	bls.n	8006f86 <UART_SetConfig+0x2ee>
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f5e:	d212      	bcs.n	8006f86 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	f023 030f 	bic.w	r3, r3, #15
 8006f68:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	085b      	lsrs	r3, r3, #1
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	89fb      	ldrh	r3, [r7, #14]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	89fa      	ldrh	r2, [r7, #14]
 8006f82:	60da      	str	r2, [r3, #12]
 8006f84:	e04e      	b.n	8007024 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	77bb      	strb	r3, [r7, #30]
 8006f8a:	e04b      	b.n	8007024 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f8c:	7ffb      	ldrb	r3, [r7, #31]
 8006f8e:	2b08      	cmp	r3, #8
 8006f90:	d827      	bhi.n	8006fe2 <UART_SetConfig+0x34a>
 8006f92:	a201      	add	r2, pc, #4	; (adr r2, 8006f98 <UART_SetConfig+0x300>)
 8006f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f98:	08006fbd 	.word	0x08006fbd
 8006f9c:	08006fc5 	.word	0x08006fc5
 8006fa0:	08006fcd 	.word	0x08006fcd
 8006fa4:	08006fe3 	.word	0x08006fe3
 8006fa8:	08006fd3 	.word	0x08006fd3
 8006fac:	08006fe3 	.word	0x08006fe3
 8006fb0:	08006fe3 	.word	0x08006fe3
 8006fb4:	08006fe3 	.word	0x08006fe3
 8006fb8:	08006fdb 	.word	0x08006fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fbc:	f7fd fd74 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 8006fc0:	61b8      	str	r0, [r7, #24]
        break;
 8006fc2:	e013      	b.n	8006fec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fc4:	f7fd fd92 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
 8006fc8:	61b8      	str	r0, [r7, #24]
        break;
 8006fca:	e00f      	b.n	8006fec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fcc:	4b1b      	ldr	r3, [pc, #108]	; (800703c <UART_SetConfig+0x3a4>)
 8006fce:	61bb      	str	r3, [r7, #24]
        break;
 8006fd0:	e00c      	b.n	8006fec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fd2:	f7fd fcf3 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 8006fd6:	61b8      	str	r0, [r7, #24]
        break;
 8006fd8:	e008      	b.n	8006fec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fde:	61bb      	str	r3, [r7, #24]
        break;
 8006fe0:	e004      	b.n	8006fec <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	77bb      	strb	r3, [r7, #30]
        break;
 8006fea:	bf00      	nop
    }

    if (pclk != 0U)
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d018      	beq.n	8007024 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	085a      	lsrs	r2, r3, #1
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	441a      	add	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	fbb2 f3f3 	udiv	r3, r2, r3
 8007004:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	2b0f      	cmp	r3, #15
 800700a:	d909      	bls.n	8007020 <UART_SetConfig+0x388>
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007012:	d205      	bcs.n	8007020 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	b29a      	uxth	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	60da      	str	r2, [r3, #12]
 800701e:	e001      	b.n	8007024 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007030:	7fbb      	ldrb	r3, [r7, #30]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3720      	adds	r7, #32
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	007a1200 	.word	0x007a1200

08007040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00a      	beq.n	800706a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00a      	beq.n	80070ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	f003 0308 	and.w	r3, r3, #8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00a      	beq.n	80070d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	f003 0310 	and.w	r3, r3, #16
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00a      	beq.n	80070f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	f003 0320 	and.w	r3, r3, #32
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	430a      	orrs	r2, r1
 8007112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711c:	2b00      	cmp	r3, #0
 800711e:	d01a      	beq.n	8007156 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800713e:	d10a      	bne.n	8007156 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00a      	beq.n	8007178 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	430a      	orrs	r2, r1
 8007176:	605a      	str	r2, [r3, #4]
  }
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b098      	sub	sp, #96	; 0x60
 8007188:	af02      	add	r7, sp, #8
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007194:	f7fa fd16 	bl	8001bc4 <HAL_GetTick>
 8007198:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0308 	and.w	r3, r3, #8
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d12e      	bne.n	8007206 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071b0:	2200      	movs	r2, #0
 80071b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f88c 	bl	80072d4 <UART_WaitOnFlagUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d021      	beq.n	8007206 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ca:	e853 3f00 	ldrex	r3, [r3]
 80071ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071d6:	653b      	str	r3, [r7, #80]	; 0x50
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	461a      	mov	r2, r3
 80071de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e0:	647b      	str	r3, [r7, #68]	; 0x44
 80071e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071e8:	e841 2300 	strex	r3, r2, [r1]
 80071ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e6      	bne.n	80071c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2220      	movs	r2, #32
 80071f8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e062      	b.n	80072cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b04      	cmp	r3, #4
 8007212:	d149      	bne.n	80072a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800721c:	2200      	movs	r2, #0
 800721e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f856 	bl	80072d4 <UART_WaitOnFlagUntilTimeout>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d03c      	beq.n	80072a8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	e853 3f00 	ldrex	r3, [r3]
 800723a:	623b      	str	r3, [r7, #32]
   return(result);
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	461a      	mov	r2, r3
 800724a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800724c:	633b      	str	r3, [r7, #48]	; 0x30
 800724e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007254:	e841 2300 	strex	r3, r2, [r1]
 8007258:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800725a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e6      	bne.n	800722e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3308      	adds	r3, #8
 8007266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	e853 3f00 	ldrex	r3, [r3]
 800726e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 0301 	bic.w	r3, r3, #1
 8007276:	64bb      	str	r3, [r7, #72]	; 0x48
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3308      	adds	r3, #8
 800727e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007280:	61fa      	str	r2, [r7, #28]
 8007282:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007284:	69b9      	ldr	r1, [r7, #24]
 8007286:	69fa      	ldr	r2, [r7, #28]
 8007288:	e841 2300 	strex	r3, r2, [r1]
 800728c:	617b      	str	r3, [r7, #20]
   return(result);
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e5      	bne.n	8007260 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2220      	movs	r2, #32
 8007298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e011      	b.n	80072cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2220      	movs	r2, #32
 80072ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2220      	movs	r2, #32
 80072b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3758      	adds	r7, #88	; 0x58
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	4613      	mov	r3, r2
 80072e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e4:	e049      	b.n	800737a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ec:	d045      	beq.n	800737a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ee:	f7fa fc69 	bl	8001bc4 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	69ba      	ldr	r2, [r7, #24]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d302      	bcc.n	8007304 <UART_WaitOnFlagUntilTimeout+0x30>
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e048      	b.n	800739a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0304 	and.w	r3, r3, #4
 8007312:	2b00      	cmp	r3, #0
 8007314:	d031      	beq.n	800737a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	f003 0308 	and.w	r3, r3, #8
 8007320:	2b08      	cmp	r3, #8
 8007322:	d110      	bne.n	8007346 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2208      	movs	r2, #8
 800732a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 f8ff 	bl	8007530 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2208      	movs	r2, #8
 8007336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e029      	b.n	800739a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69db      	ldr	r3, [r3, #28]
 800734c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007354:	d111      	bne.n	800737a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800735e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 f8e5 	bl	8007530 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2220      	movs	r2, #32
 800736a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e00f      	b.n	800739a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69da      	ldr	r2, [r3, #28]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4013      	ands	r3, r2
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	429a      	cmp	r2, r3
 8007388:	bf0c      	ite	eq
 800738a:	2301      	moveq	r3, #1
 800738c:	2300      	movne	r3, #0
 800738e:	b2db      	uxtb	r3, r3
 8007390:	461a      	mov	r2, r3
 8007392:	79fb      	ldrb	r3, [r7, #7]
 8007394:	429a      	cmp	r2, r3
 8007396:	d0a6      	beq.n	80072e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
	...

080073a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b097      	sub	sp, #92	; 0x5c
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	4613      	mov	r3, r2
 80073b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	88fa      	ldrh	r2, [r7, #6]
 80073bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	88fa      	ldrh	r2, [r7, #6]
 80073c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d6:	d10e      	bne.n	80073f6 <UART_Start_Receive_IT+0x52>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d105      	bne.n	80073ec <UART_Start_Receive_IT+0x48>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80073e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073ea:	e02d      	b.n	8007448 <UART_Start_Receive_IT+0xa4>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	22ff      	movs	r2, #255	; 0xff
 80073f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073f4:	e028      	b.n	8007448 <UART_Start_Receive_IT+0xa4>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10d      	bne.n	800741a <UART_Start_Receive_IT+0x76>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d104      	bne.n	8007410 <UART_Start_Receive_IT+0x6c>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	22ff      	movs	r2, #255	; 0xff
 800740a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800740e:	e01b      	b.n	8007448 <UART_Start_Receive_IT+0xa4>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	227f      	movs	r2, #127	; 0x7f
 8007414:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007418:	e016      	b.n	8007448 <UART_Start_Receive_IT+0xa4>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007422:	d10d      	bne.n	8007440 <UART_Start_Receive_IT+0x9c>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d104      	bne.n	8007436 <UART_Start_Receive_IT+0x92>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	227f      	movs	r2, #127	; 0x7f
 8007430:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007434:	e008      	b.n	8007448 <UART_Start_Receive_IT+0xa4>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	223f      	movs	r2, #63	; 0x3f
 800743a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800743e:	e003      	b.n	8007448 <UART_Start_Receive_IT+0xa4>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2222      	movs	r2, #34	; 0x22
 8007454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3308      	adds	r3, #8
 800745e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746a:	f043 0301 	orr.w	r3, r3, #1
 800746e:	657b      	str	r3, [r7, #84]	; 0x54
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3308      	adds	r3, #8
 8007476:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007478:	64ba      	str	r2, [r7, #72]	; 0x48
 800747a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800747e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e5      	bne.n	8007458 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007494:	d107      	bne.n	80074a6 <UART_Start_Receive_IT+0x102>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d103      	bne.n	80074a6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4a21      	ldr	r2, [pc, #132]	; (8007528 <UART_Start_Receive_IT+0x184>)
 80074a2:	669a      	str	r2, [r3, #104]	; 0x68
 80074a4:	e002      	b.n	80074ac <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	4a20      	ldr	r2, [pc, #128]	; (800752c <UART_Start_Receive_IT+0x188>)
 80074aa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d019      	beq.n	80074e8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074bc:	e853 3f00 	ldrex	r3, [r3]
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80074c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d2:	637b      	str	r3, [r7, #52]	; 0x34
 80074d4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074da:	e841 2300 	strex	r3, r2, [r1]
 80074de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e6      	bne.n	80074b4 <UART_Start_Receive_IT+0x110>
 80074e6:	e018      	b.n	800751a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	e853 3f00 	ldrex	r3, [r3]
 80074f4:	613b      	str	r3, [r7, #16]
   return(result);
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f043 0320 	orr.w	r3, r3, #32
 80074fc:	653b      	str	r3, [r7, #80]	; 0x50
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007506:	623b      	str	r3, [r7, #32]
 8007508:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750a:	69f9      	ldr	r1, [r7, #28]
 800750c:	6a3a      	ldr	r2, [r7, #32]
 800750e:	e841 2300 	strex	r3, r2, [r1]
 8007512:	61bb      	str	r3, [r7, #24]
   return(result);
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1e6      	bne.n	80074e8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	375c      	adds	r7, #92	; 0x5c
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	08007821 	.word	0x08007821
 800752c:	08007679 	.word	0x08007679

08007530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007530:	b480      	push	{r7}
 8007532:	b095      	sub	sp, #84	; 0x54
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007540:	e853 3f00 	ldrex	r3, [r3]
 8007544:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800754c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	461a      	mov	r2, r3
 8007554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007556:	643b      	str	r3, [r7, #64]	; 0x40
 8007558:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800755c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800755e:	e841 2300 	strex	r3, r2, [r1]
 8007562:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1e6      	bne.n	8007538 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3308      	adds	r3, #8
 8007570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	61fb      	str	r3, [r7, #28]
   return(result);
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	f023 0301 	bic.w	r3, r3, #1
 8007580:	64bb      	str	r3, [r7, #72]	; 0x48
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3308      	adds	r3, #8
 8007588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800758a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800758c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e5      	bne.n	800756a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d118      	bne.n	80075d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	e853 3f00 	ldrex	r3, [r3]
 80075b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f023 0310 	bic.w	r3, r3, #16
 80075ba:	647b      	str	r3, [r7, #68]	; 0x44
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	461a      	mov	r2, r3
 80075c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075c4:	61bb      	str	r3, [r7, #24]
 80075c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	6979      	ldr	r1, [r7, #20]
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	613b      	str	r3, [r7, #16]
   return(result);
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e6      	bne.n	80075a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2220      	movs	r2, #32
 80075dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	669a      	str	r2, [r3, #104]	; 0x68
}
 80075ec:	bf00      	nop
 80075ee:	3754      	adds	r7, #84	; 0x54
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f7ff fb28 	bl	8006c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800761c:	bf00      	nop
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b088      	sub	sp, #32
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	60bb      	str	r3, [r7, #8]
   return(result);
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007640:	61fb      	str	r3, [r7, #28]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	61bb      	str	r3, [r7, #24]
 800764c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	6979      	ldr	r1, [r7, #20]
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	e841 2300 	strex	r3, r2, [r1]
 8007656:	613b      	str	r3, [r7, #16]
   return(result);
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1e6      	bne.n	800762c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2220      	movs	r2, #32
 8007662:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7ff faf4 	bl	8006c58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007670:	bf00      	nop
 8007672:	3720      	adds	r7, #32
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b09c      	sub	sp, #112	; 0x70
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007686:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007690:	2b22      	cmp	r3, #34	; 0x22
 8007692:	f040 80b9 	bne.w	8007808 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800769c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80076a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076a4:	b2d9      	uxtb	r1, r3
 80076a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b0:	400a      	ands	r2, r1
 80076b2:	b2d2      	uxtb	r2, r2
 80076b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	3b01      	subs	r3, #1
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f040 809c 	bne.w	8007818 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e8:	e853 3f00 	ldrex	r3, [r3]
 80076ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8007700:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007702:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007704:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007706:	e841 2300 	strex	r3, r2, [r1]
 800770a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800770c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1e6      	bne.n	80076e0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3308      	adds	r3, #8
 8007718:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771c:	e853 3f00 	ldrex	r3, [r3]
 8007720:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007724:	f023 0301 	bic.w	r3, r3, #1
 8007728:	667b      	str	r3, [r7, #100]	; 0x64
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3308      	adds	r3, #8
 8007730:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007732:	647a      	str	r2, [r7, #68]	; 0x44
 8007734:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007736:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007738:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1e5      	bne.n	8007712 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2220      	movs	r2, #32
 800774a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d018      	beq.n	800779a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	623b      	str	r3, [r7, #32]
   return(result);
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800777c:	663b      	str	r3, [r7, #96]	; 0x60
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007786:	633b      	str	r3, [r7, #48]	; 0x30
 8007788:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800778c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e6      	bne.n	8007768 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d12e      	bne.n	8007800 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	e853 3f00 	ldrex	r3, [r3]
 80077b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f023 0310 	bic.w	r3, r3, #16
 80077bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	461a      	mov	r2, r3
 80077c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077c6:	61fb      	str	r3, [r7, #28]
 80077c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ca:	69b9      	ldr	r1, [r7, #24]
 80077cc:	69fa      	ldr	r2, [r7, #28]
 80077ce:	e841 2300 	strex	r3, r2, [r1]
 80077d2:	617b      	str	r3, [r7, #20]
   return(result);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e6      	bne.n	80077a8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	f003 0310 	and.w	r3, r3, #16
 80077e4:	2b10      	cmp	r3, #16
 80077e6:	d103      	bne.n	80077f0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2210      	movs	r2, #16
 80077ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7ff fa41 	bl	8006c80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077fe:	e00b      	b.n	8007818 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7f9 fee9 	bl	80015d8 <HAL_UART_RxCpltCallback>
}
 8007806:	e007      	b.n	8007818 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	699a      	ldr	r2, [r3, #24]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f042 0208 	orr.w	r2, r2, #8
 8007816:	619a      	str	r2, [r3, #24]
}
 8007818:	bf00      	nop
 800781a:	3770      	adds	r7, #112	; 0x70
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b09c      	sub	sp, #112	; 0x70
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800782e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007838:	2b22      	cmp	r3, #34	; 0x22
 800783a:	f040 80b9 	bne.w	80079b0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007844:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800784e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007852:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007856:	4013      	ands	r3, r2
 8007858:	b29a      	uxth	r2, r3
 800785a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800785c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007862:	1c9a      	adds	r2, r3, #2
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800786e:	b29b      	uxth	r3, r3
 8007870:	3b01      	subs	r3, #1
 8007872:	b29a      	uxth	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007880:	b29b      	uxth	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	f040 809c 	bne.w	80079c0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007890:	e853 3f00 	ldrex	r3, [r3]
 8007894:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007898:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800789c:	667b      	str	r3, [r7, #100]	; 0x64
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078a6:	657b      	str	r3, [r7, #84]	; 0x54
 80078a8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80078b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e6      	bne.n	8007888 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3308      	adds	r3, #8
 80078c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	f023 0301 	bic.w	r3, r3, #1
 80078d0:	663b      	str	r3, [r7, #96]	; 0x60
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3308      	adds	r3, #8
 80078d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078da:	643a      	str	r2, [r7, #64]	; 0x40
 80078dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078e2:	e841 2300 	strex	r3, r2, [r1]
 80078e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1e5      	bne.n	80078ba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2220      	movs	r2, #32
 80078f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d018      	beq.n	8007942 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007916:	6a3b      	ldr	r3, [r7, #32]
 8007918:	e853 3f00 	ldrex	r3, [r3]
 800791c:	61fb      	str	r3, [r7, #28]
   return(result);
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007924:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800792e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007930:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007936:	e841 2300 	strex	r3, r2, [r1]
 800793a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1e6      	bne.n	8007910 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007946:	2b01      	cmp	r3, #1
 8007948:	d12e      	bne.n	80079a8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	60bb      	str	r3, [r7, #8]
   return(result);
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	f023 0310 	bic.w	r3, r3, #16
 8007964:	65bb      	str	r3, [r7, #88]	; 0x58
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800796e:	61bb      	str	r3, [r7, #24]
 8007970:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007972:	6979      	ldr	r1, [r7, #20]
 8007974:	69ba      	ldr	r2, [r7, #24]
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	613b      	str	r3, [r7, #16]
   return(result);
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1e6      	bne.n	8007950 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b10      	cmp	r3, #16
 800798e:	d103      	bne.n	8007998 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2210      	movs	r2, #16
 8007996:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7ff f96d 	bl	8006c80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079a6:	e00b      	b.n	80079c0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7f9 fe15 	bl	80015d8 <HAL_UART_RxCpltCallback>
}
 80079ae:	e007      	b.n	80079c0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	699a      	ldr	r2, [r3, #24]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f042 0208 	orr.w	r2, r2, #8
 80079be:	619a      	str	r2, [r3, #24]
}
 80079c0:	bf00      	nop
 80079c2:	3770      	adds	r7, #112	; 0x70
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <__libc_init_array>:
 80079dc:	b570      	push	{r4, r5, r6, lr}
 80079de:	4d0d      	ldr	r5, [pc, #52]	; (8007a14 <__libc_init_array+0x38>)
 80079e0:	4c0d      	ldr	r4, [pc, #52]	; (8007a18 <__libc_init_array+0x3c>)
 80079e2:	1b64      	subs	r4, r4, r5
 80079e4:	10a4      	asrs	r4, r4, #2
 80079e6:	2600      	movs	r6, #0
 80079e8:	42a6      	cmp	r6, r4
 80079ea:	d109      	bne.n	8007a00 <__libc_init_array+0x24>
 80079ec:	4d0b      	ldr	r5, [pc, #44]	; (8007a1c <__libc_init_array+0x40>)
 80079ee:	4c0c      	ldr	r4, [pc, #48]	; (8007a20 <__libc_init_array+0x44>)
 80079f0:	f000 f820 	bl	8007a34 <_init>
 80079f4:	1b64      	subs	r4, r4, r5
 80079f6:	10a4      	asrs	r4, r4, #2
 80079f8:	2600      	movs	r6, #0
 80079fa:	42a6      	cmp	r6, r4
 80079fc:	d105      	bne.n	8007a0a <__libc_init_array+0x2e>
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a04:	4798      	blx	r3
 8007a06:	3601      	adds	r6, #1
 8007a08:	e7ee      	b.n	80079e8 <__libc_init_array+0xc>
 8007a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a0e:	4798      	blx	r3
 8007a10:	3601      	adds	r6, #1
 8007a12:	e7f2      	b.n	80079fa <__libc_init_array+0x1e>
 8007a14:	08007a84 	.word	0x08007a84
 8007a18:	08007a84 	.word	0x08007a84
 8007a1c:	08007a84 	.word	0x08007a84
 8007a20:	08007a88 	.word	0x08007a88

08007a24 <memset>:
 8007a24:	4402      	add	r2, r0
 8007a26:	4603      	mov	r3, r0
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d100      	bne.n	8007a2e <memset+0xa>
 8007a2c:	4770      	bx	lr
 8007a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a32:	e7f9      	b.n	8007a28 <memset+0x4>

08007a34 <_init>:
 8007a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a36:	bf00      	nop
 8007a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3a:	bc08      	pop	{r3}
 8007a3c:	469e      	mov	lr, r3
 8007a3e:	4770      	bx	lr

08007a40 <_fini>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	bf00      	nop
 8007a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a46:	bc08      	pop	{r3}
 8007a48:	469e      	mov	lr, r3
 8007a4a:	4770      	bx	lr
