/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#include "IQS7211A.h"
#include "IQS7211A_init_AZP1189A3_v0.1.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/*Buttons*/
#define MIDDLEBUTTON 128
#define TOPBUTTON 512
#define LEFTBUTTON 256
#define RIGHTBUTTON 64

/*Modes*/
#define MF (uint8_t)* "F"
#define ME (uint8_t)* "E"
#define MM (uint8_t)* "M"

/*Emergency modes*/
#define STROBE 0
#define SOS 1
#define CUSTOM 2

/*Morse*/
#define DOT MORSE_add(0);
#define DASH MORSE_add(1);
#define SPACE MORSE_add(2);

/*Trackpad*/
#define IQS_RDY   2     // Comms Available window
#define IQS_MCLR  3     // Reset pin
#define IQS_ADR   0x56

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

DAC_HandleTypeDef hdac1;

I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
/*Buttons*/
uint16_t buttonPressed = 0;
volatile uint32_t debounceTimer;

/*UART*/
uint8_t UART_RX_Byte[1];
volatile uint8_t UART_RX_Flag;
uint8_t UART_TX_Buffer[100];
uint8_t UART_RX_Buffer[100];
uint8_t UART_RX_State = 0;
uint8_t UART_RX_Parameter_Message[14];
uint8_t UART_RX_Mode;
uint8_t UART_RX_Completed = 0;

/*ADC, tim2 set to 1 khz*/
volatile uint8_t KHZ_TIM_Ready = 0;
volatile uint8_t HZ_TIM_Ready = 0;
uint16_t ADC_Value = 0;
uint16_t prev_ADC_Value = 0;

/*System*/
uint8_t mode = 70; /* MF */
uint8_t prevMode = 0;
uint8_t E_mode = STROBE;
uint8_t prevE_Mode = 0;

/*White LED*/
uint8_t LED_On = 0;
uint8_t LED_flashing_state = 0;
uint16_t LED_Intensity = 0;
uint16_t LED_Intensity_Source = 0;
uint16_t prev_LED_Intensity = 0;
uint32_t LED_DAC_Value = 0;
uint16_t LED_Strobe_Time = 512;
uint16_t Strobe_Timer = 0;
uint8_t Morse_Message[3];
uint8_t Morse_Output[100];
uint8_t SOS_Output[39];
uint16_t morse_builder_pos = 0;
uint16_t morse_playback_pos = 0;

/*Mood LED*/
uint16_t LED_R_Intensity = 128;
uint16_t LED_G_Intensity = 128;
uint16_t LED_B_Intensity = 128;
uint8_t LED_RGB_On = 0;

/*Trackpad*/
volatile uint8_t _deviceAdress = IQS_ADR;
volatile IQS7211A_MEMORY_MAP IQSMemoryMap;
volatile uint8_t IQSReady = 0;
uint16_t IQS_x = 65535;
uint16_t IQS_y = 65535;
uint16_t IQS_x_prev = 65535;
uint16_t IQS_x_init;
uint16_t IQS_y_init;
uint32_t IQS_timer;
uint8_t IQS_swipe;
uint8_t IQS_hold;

HAL_StatusTypeDef errorcheck;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
static void MX_DAC1_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void UART_RX_Handler(void);
void UART_Parameter_Handler(void);
void UART_TX_Mode_Status(void);
void Button_Handler(void);
void num2str(int num, uint8_t *string, int numdigits);
int str2num(uint8_t *string, int numdigits);
void Mode_Handler(void);
void ADC_Handler(void);
void STROBE_Handler(void);
void MORSE_Handler(void);
void MORSE_Output_builder(void);
void MORSE_add(uint8_t type);
void E_Mode_Handler(void);
void Trackpad_Handler(void);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_ADC1_Init();
  MX_TIM2_Init();
  MX_DAC1_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
	/*Start peripherals*/
	HAL_GPIO_WritePin(Trackpad_Reset_GPIO_Port, Trackpad_Reset_Pin, 0);
	HAL_Delay(5);
	HAL_GPIO_WritePin(Trackpad_Reset_GPIO_Port, Trackpad_Reset_Pin, 1);
	HAL_Delay(500);
	HAL_UART_Receive_IT(&huart2, UART_RX_Byte, 1);
	HAL_TIM_Base_Start_IT(&htim2);
	HAL_TIM_Base_Start_IT(&htim4);
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, &LED_DAC_Value, 1);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &LED_DAC_Value, 1,
	DAC_ALIGN_12B_R);
	Morse_Message[0] = (uint8_t) *"S";
	Morse_Message[1] = (uint8_t) *"O";
	Morse_Message[2] = (uint8_t) *"S";
	MORSE_Output_builder();
	memcpy(SOS_Output, Morse_Output, 39);

	ADC_Handler();

	//uint16_t prod_num = IQS7211AgetProductNum(RESTART);

	IQS7211AdisableCommsReqEn(RESTART);

	IQS7211AupdateInfoFlags(RESTART);

	if (IQS7211AcheckReset()) {
		//Serial.println("Software Reset event occured.");
		//If the Show Reset bit is set, acknowledge the reset event
		IQS7211AacknowledgeReset(RESTART);
		//Serial.println("Acknowledge reset.");
	} else {
		//Perform SW Reset
		IQS7211ASW_Reset(RESTART);
		//Serial.println("Software Reset Bit set.");
		HAL_Delay(100);
		// Read the Info flags
		IQS7211AupdateInfoFlags(RESTART);
		//Check if Show Reset bit is set
		if (IQS7211AcheckReset()) {
			//Serial.println("Software Reset event occured.");
			//If the Show Reset bit is set, acknowledge the reset event
			IQS7211AacknowledgeReset(RESTART);
			//Serial.println("Acknowledge reset.");
		}
	}
	//prod_num = IQS7211AgetProductNum(RESTART);

	//uint16_t versionbig = IQS7211AgetSoftwareMajorNum(RESTART);
	//uint16_t versionsmall = IQS7211AgetSoftwareMinorNum(RESTART);

	//Write custom settings from h-file
	IQS7211AwriteMM(RESTART);
	// Clear the Comms Request Enable bit
	IQS7211AdisableCommsReqEn(RESTART);
	// ATI after writing settings from h-file.
	IQS7211ATP_ReATI(STOP);

	//Enable Gesture Events and TP Events
	//IQS7211AenableGestureEvent(RESTART);
	IQS7211AenableTPEvent(RESTART);
	// Enable Event Mode
	//IQS7211AsetEventMode(STOP);
	HAL_UART_Transmit_IT(&huart2, (uint8_t*) "#:22961305:$\n", 13);
//	uint32_t testvar = HAL_GetTick();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (UART_RX_Flag == 1) {
			UART_RX_Handler();
		}
		if (buttonPressed != 0) {
			Button_Handler();
		}
		if (mode != prevMode) {
			Mode_Handler();
		}
		if (IQSReady) {
			Trackpad_Handler();
		}

		if (UART_RX_Completed) {
			UART_Parameter_Handler();
		}
		if (mode == ME) {
			if (E_mode != prevE_Mode) {
				E_Mode_Handler();
			}
		}
		if (KHZ_TIM_Ready) {
			ADC_Handler();
			if ((mode == ME ) && (E_mode == STROBE)) {
				STROBE_Handler();
			}
			KHZ_TIM_Ready = 0;
		}
		if (HZ_TIM_Ready) {
			if ((mode == ME ) && (E_mode >= SOS)) {
				MORSE_Handler();
			}
			HZ_TIM_Ready = 0;
		}
		LED_DAC_Value = LED_On * LED_flashing_state * LED_Intensity * 4095.0
				/ 512.0;
		TIM3->CCR2 = LED_RGB_On * LED_G_Intensity * 4095.0 / 512.0;
		TIM3->CCR3 = LED_RGB_On * LED_B_Intensity * 4095.0 / 512.0;
		TIM3->CCR4 = LED_RGB_On * LED_R_Intensity * 4095.0 / 512.0;

		/*delete this
		 if (LED_DAC_Value == 0) {
		 HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
		 } else {
		 HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
		 }*/
	}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
  {
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 72-1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1000-1;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 4096-1;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 36864-1;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 1000-1;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 57600;
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
  huart2.Init.StopBits = UART_STOPBITS_2;
  huart2.Init.Parity = UART_PARITY_EVEN;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_Pin|D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trackpad_Reset_GPIO_Port, Trackpad_Reset_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D2_Pin|D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Middle_Button_Pin */
  GPIO_InitStruct.Pin = Middle_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(Middle_Button_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : D3_Pin D4_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : Trackpad_Ready_Pin */
  GPIO_InitStruct.Pin = Trackpad_Ready_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Trackpad_Ready_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : Trackpad_Reset_Pin */
  GPIO_InitStruct.Pin = Trackpad_Reset_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Trackpad_Reset_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : D2_Pin D5_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : Trackpad_Ready_Interrupt_Pin */
  GPIO_InitStruct.Pin = Trackpad_Ready_Interrupt_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Trackpad_Ready_Interrupt_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : Bottom_button_Pin Right_Button_Pin Left_Button_Pin Top_Button_Pin */
  GPIO_InitStruct.Pin = Bottom_button_Pin|Right_Button_Pin|Left_Button_Pin|Top_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (GPIO_Pin == 4096) {
		IQSReady = 1;
	} else {
		buttonPressed = GPIO_Pin;
	}

}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	UART_RX_Flag = 1;
	HAL_UART_Receive_IT(&huart2, UART_RX_Byte, 1);
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim == &htim2) {
		KHZ_TIM_Ready = 1;
	}
	if (htim == &htim4) {
		HZ_TIM_Ready = 1;
	}
}

void UART_RX_Handler(void) {
	UART_RX_Flag = 0;
	if (UART_RX_Byte[0] == (uint8_t) *"#") {
		UART_RX_State = 1;

	} else if (UART_RX_State == 1) {
		if (UART_RX_Byte[0] == (uint8_t) *":") {
			UART_RX_State = 2;
		} else {
			UART_RX_State = 0;
		}

	} else if (UART_RX_State == 2) {
		if (UART_RX_Byte[0] == (uint8_t) *"M") {
			UART_RX_State = 3;
		} else {
			UART_RX_State = 0;
		}

	} else if (UART_RX_State == 3) {
		UART_RX_Mode = (char) *UART_RX_Byte;
		UART_RX_State = 4;

	} else if (UART_RX_State == 4) {
		if (UART_RX_Byte[0] == (uint8_t) *":") {
			UART_RX_State = 5;
		} else {
			UART_RX_State = 0;
		}

	} else if ((UART_RX_State >= 5) && (UART_RX_State <= 19)) {
		if (UART_RX_Byte[0] == (uint8_t) *"$") {
			if (UART_RX_State == 5) {
				UART_TX_Mode_Status();
			}
			if (UART_RX_State >= 17) {
				mode = UART_RX_Mode;
				UART_RX_Completed = 1;
			}
			UART_RX_State = 0;
		} else {
			UART_RX_Parameter_Message[UART_RX_State - 5] = UART_RX_Byte[0];
			UART_RX_State += 1;
		}

	} else {
		UART_RX_State = 0;
	}

}
void UART_Parameter_Handler(void) {
	if (mode == MF) {
		if (str2num(&UART_RX_Parameter_Message[0], 3) == 0) {
			LED_On = 0;
		} else {
			LED_Intensity = str2num(&UART_RX_Parameter_Message[0], 3);
			LED_On = 1;
		}
		LED_Intensity_Source = 1;
	}
	if (mode == ME) {
		if (str2num(&UART_RX_Parameter_Message[0], 3) == 0) {
			LED_On = 0;
		} else {
			LED_Intensity = str2num(&UART_RX_Parameter_Message[0], 3);
			LED_On = 1;
		}
		if (str2num(&UART_RX_Parameter_Message[4], 3) == 0) {

			if (str2num(&UART_RX_Parameter_Message[8], 3) != 0) {
				E_mode = CUSTOM;
			} else {
				E_mode = SOS;
			}
		} else {
			E_mode = STROBE;
			LED_Strobe_Time = str2num(&UART_RX_Parameter_Message[4], 3);
		}
		if (str2num(&UART_RX_Parameter_Message[8], 3) != 0) {
			memcpy(Morse_Message, &UART_RX_Parameter_Message[8], 3);

			LED_Intensity_Source = 1;
		}
	}
	if (mode == MM) {
		LED_R_Intensity = str2num(&UART_RX_Parameter_Message[0], 3);
		LED_G_Intensity = str2num(&UART_RX_Parameter_Message[4], 3);
		LED_B_Intensity = str2num(&UART_RX_Parameter_Message[8], 3);
		if ((LED_R_Intensity == 0) && (LED_G_Intensity == 0)
				&& (LED_B_Intensity == 0)) {
			LED_RGB_On = 0;
		} else {
			LED_RGB_On = 1;
		}
	}
	UART_RX_Completed = 0;
}
void UART_TX_Mode_Status(void) {
	strcpy((char*) UART_TX_Buffer, "#:M0:000:000:000:$\n");
	UART_TX_Buffer[3] = UART_RX_Mode;
	if (UART_RX_Mode == MF) {
		if (LED_On) {
			num2str(LED_Intensity, &UART_TX_Buffer[5], 3);
		} else {
			num2str(0, &UART_TX_Buffer[5], 3);
		}
	}
	if (UART_RX_Mode == ME) {
		if (LED_On) {
			num2str(LED_Intensity, &UART_TX_Buffer[5], 3);
		} else {
			num2str(0, &UART_TX_Buffer[5], 3);
		}
		if (E_mode == STROBE) {
			num2str(LED_Strobe_Time, &UART_TX_Buffer[9], 3);
		} else {
			num2str(0, &UART_TX_Buffer[9], 3);
		}

		if (E_mode == CUSTOM) {
			memcpy(&UART_TX_Buffer[13], Morse_Message, 3);
		} else {
			strcpy((char*) &UART_TX_Buffer[13], "SOS:$\n");
		}
	}
	if (UART_RX_Mode == MM) {
		num2str(LED_R_Intensity * LED_RGB_On, &UART_TX_Buffer[5], 3);
		num2str(LED_G_Intensity * LED_RGB_On, &UART_TX_Buffer[9], 3);
		num2str(LED_B_Intensity * LED_RGB_On, &UART_TX_Buffer[13], 3);
	}
	HAL_UART_Transmit_IT(&huart2, UART_TX_Buffer, 19);
}
void Button_Handler(void) {
	if (HAL_GetTick() > debounceTimer + 80) {
		debounceTimer = HAL_GetTick();
		if (buttonPressed == MIDDLEBUTTON) {
			if (mode == MM) {
				if (LED_RGB_On == 1) {
					LED_RGB_On = 0;
				} else if (LED_RGB_On == 0) {
					LED_RGB_On = 1;
				}
			} else {
				if (LED_On == 1) {
					LED_On = 0;
				} else if (LED_On == 0) {
					LED_On = 1;
				}
			}
		}
		if (buttonPressed == LEFTBUTTON) {
			if (mode == MF) {
				mode = ME;
			} else if (mode == ME) {
				mode = MM;
			} else if (mode == MM) {
				mode = MF;
			}
		}
		if (buttonPressed == RIGHTBUTTON) {
			E_mode += 1;
			if (E_mode == 3) {
				E_mode = STROBE;
			}
		}
	}
	buttonPressed = 0;
}
void num2str(int num, uint8_t *string, int numdigits) {
	int unit = 1;
	for (int i = 0; i < numdigits; i++) {
		string[numdigits - i - 1] = (num / unit) % 10 + 48;
		unit = unit * 10;
	}
}
int str2num(uint8_t *string, int numdigits) {
	int unit = 1;
	int num = 0;
	for (int i = 0; i < numdigits; i++) {
		num = num + (string[numdigits - i - 1] - 48) * unit;
		unit = unit * 10;
	}
	return num;
}
void Mode_Handler(void) {
	if (mode == MF) {
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
		LED_flashing_state = 1;
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
	}
	if (mode == ME) {
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
		E_mode = STROBE;
		prevE_Mode = 5;
	}
	if (mode == MM) {
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
		LED_flashing_state = 0;
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
	}
	LED_On = 0;
	LED_RGB_On = 0;
	prevMode = mode;
}
void ADC_Handler(void) {
	HAL_ADC_Start(&hadc1);
	HAL_ADC_PollForConversion(&hadc1, 10);
	ADC_Value = HAL_ADC_GetValue(&hadc1);
	HAL_ADC_Stop(&hadc1);
	if (LED_Intensity_Source == 1) {
		if (abs(ADC_Value - prev_ADC_Value) > 300) {
			LED_Intensity_Source = 0;
		}
	}
	if (LED_Intensity_Source == 0) {
		LED_Intensity = ADC_Value / 4095.0 * 525.0;
		if (LED_Intensity > 512) {
			LED_Intensity = 512;
		}
		prev_ADC_Value = ADC_Value;
	}
}
void STROBE_Handler(void) {
	if ((LED_flashing_state == 1) && (Strobe_Timer >= LED_Strobe_Time)) {
		LED_flashing_state = 0;
	}
	Strobe_Timer++;
	if (Strobe_Timer >= (2 * LED_Strobe_Time)) {
		Strobe_Timer = 0;
		LED_flashing_state = 1;
	}
}
void MORSE_Handler(void) {
	if (Morse_Output[morse_playback_pos] == 0) {
		LED_flashing_state = 0;
	} else if (Morse_Output[morse_playback_pos] == 1) {
		LED_flashing_state = 1;
	}
	morse_playback_pos++;
	if (Morse_Output[morse_playback_pos] == 2) {
		morse_playback_pos = 0;
	}
}

void MORSE_Output_builder(void) {
	morse_builder_pos = 0;
	for (int i = 0; i < 3; i++) {
		if (Morse_Message[i] == (uint8_t) *"A") {
			DOT
			DASH
		} else if (Morse_Message[i] == (uint8_t) *"B") {
			DASH
			DOT
			DOT
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"C") {
			DASH
			DOT
			DASH
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"D") {
			DASH
			DOT
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"E") {
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"F") {
			DOT
			DOT
			DASH
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"G") {
			DASH
			DASH
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"H") {
			DOT
			DOT
			DOT
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"I") {
			DOT
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"J") {
			DOT
			DASH
			DASH
			DASH
		} else if (Morse_Message[i] == (uint8_t) *"K") {
			DASH
			DOT
			DASH
		} else if (Morse_Message[i] == (uint8_t) *"L") {
			DOT
			DASH
			DOT
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"M") {
			DASH
			DASH
		} else if (Morse_Message[i] == (uint8_t) *"N") {
			DASH
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"O") {
			DASH
			DASH
			DASH
		} else if (Morse_Message[i] == (uint8_t) *"P") {
			DOT
			DASH
			DASH
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"Q") {
			DASH
			DASH
			DOT
			DASH
		} else if (Morse_Message[i] == (uint8_t) *"R") {
			DOT
			DASH
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"S") {
			DOT
			DOT
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"T") {
			DASH
		} else if (Morse_Message[i] == (uint8_t) *"U") {
			DOT
			DOT
			DASH
		} else if (Morse_Message[i] == (uint8_t) *"V") {
			DOT
			DOT
			DOT
			DASH
		} else if (Morse_Message[i] == (uint8_t) *"W") {
			DOT
			DASH
			DASH
		} else if (Morse_Message[i] == (uint8_t) *"X") {
			DASH
			DOT
			DOT
			DASH
		} else if (Morse_Message[i] == (uint8_t) *"Y") {
			DASH
			DOT
			DASH
			DASH
		} else if (Morse_Message[i] == (uint8_t) *"Z") {
			DASH
			DASH
			DOT
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"1") {
			DOT
			DASH
			DASH
			DASH
			DASH
		} else if (Morse_Message[i] == (uint8_t) *"2") {
			DOT
			DOT
			DASH
			DASH
			DASH
		} else if (Morse_Message[i] == (uint8_t) *"3") {
			DOT
			DOT
			DOT
			DASH
			DASH
		} else if (Morse_Message[i] == (uint8_t) *"4") {
			DOT
			DOT
			DOT
			DOT
			DASH
		} else if (Morse_Message[i] == (uint8_t) *"5") {
			DOT
			DOT
			DOT
			DOT
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"6") {
			DASH
			DOT
			DOT
			DOT
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"7") {
			DASH
			DASH
			DOT
			DOT
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"8") {
			DASH
			DASH
			DASH
			DOT
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"9") {
			DASH
			DASH
			DASH
			DASH
			DOT
		} else if (Morse_Message[i] == (uint8_t) *"0") {
			DASH
			DASH
			DASH
			DASH
			DASH
		}
		SPACE
	}
	SPACE
	Morse_Output[morse_builder_pos] = 0;
	morse_builder_pos++;
	Morse_Output[morse_builder_pos] = 2;
	morse_playback_pos = 0;
}

void MORSE_add(uint8_t type) {
	if (type == 0) {
		Morse_Output[morse_builder_pos] = 1;
		morse_builder_pos++;
		Morse_Output[morse_builder_pos] = 0;
		morse_builder_pos++;
	}
	if (type == 1) {
		Morse_Output[morse_builder_pos] = 1;
		morse_builder_pos++;
		Morse_Output[morse_builder_pos] = 1;
		morse_builder_pos++;
		Morse_Output[morse_builder_pos] = 1;
		morse_builder_pos++;
		Morse_Output[morse_builder_pos] = 0;
		morse_builder_pos++;
	}
	if (type == 2) {
		Morse_Output[morse_builder_pos] = 0;
		morse_builder_pos++;
		Morse_Output[morse_builder_pos] = 0;
		morse_builder_pos++;
		Morse_Output[morse_builder_pos] = 0;
		morse_builder_pos++;
	}
}
void E_Mode_Handler(void) {
	if (E_mode == SOS) {
		memcpy(Morse_Output, SOS_Output, 39);
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
	}
	if (E_mode == CUSTOM) {
		MORSE_Output_builder();
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
	}
	if (E_mode == STROBE) {
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
	}
	morse_playback_pos = 0;
	LED_flashing_state = 0;
	Strobe_Timer = 0;
	prevE_Mode = E_mode;
}

void Trackpad_Handler(void) {

	IQS7211AupdateAbsCoordinates(RESTART, FINGER_1);
	IQS_x = IQS7211AgetAbsXCoordinate(FINGER_1);
	IQS_y = IQS7211AgetAbsYCoordinate(FINGER_1);

	if (mode == MM) {
		if (IQS_x != 65535) {
			if (IQS_x_prev == 65535) {
				if (IQS_x != 65535) {
					//finger pressed
					IQS_timer = HAL_GetTick();
					IQS_swipe = 0;
					IQS_x_init = IQS_x;
					IQS_y_init = IQS_y;
					IQS_hold = 0;
				}
			} else {
				if ((IQS_swipe == 0) && (IQS_hold == 0)) {
					//not swiping
					if (IQS_x == 65535) {
						//finger released
					} else {
						//check for swipe
						if ((abs(IQS_x - IQS_x_init) > 50)
								|| (abs(IQS_y - IQS_y_init) > 50)) {
							IQS_swipe = 1;
						} else if (HAL_GetTick() - IQS_timer > 300) {
							//Press and hold event
							buttonPressed = MIDDLEBUTTON;
							IQS_hold = 1;
						}
					}
				} else if (IQS_hold == 0) {
					//Swiping
				}
			}

			if (IQS_x < 1778 / 3) {
				LED_R_Intensity = 512 - (512 * (IQS_y - 40)) / (768 - 90);
				if (LED_R_Intensity > 0xEFFF) {
					LED_R_Intensity = 0;
				} else if (LED_R_Intensity > 512) {
					LED_R_Intensity = 512;
				}
			} else if (IQS_x > 1778 * 2 / 3) {
				LED_B_Intensity = 512 - (512 * (IQS_y - 40)) / (768 - 90);
				if (LED_B_Intensity > 0xEFFF) {
					LED_B_Intensity = 0;
				} else if (LED_B_Intensity > 512) {
					LED_B_Intensity = 512;
				}
			} else {
				LED_G_Intensity = 512 - (512 * (IQS_y - 40)) / (768 - 80);
				if (LED_G_Intensity > 0xEFFF) {
					LED_G_Intensity = 0;
				} else if (LED_G_Intensity > 512) {
					LED_G_Intensity = 512;
				}
			}
		}
	}

	else {
		if (IQS_x_prev == 65535) {
			if (IQS_x != 65535) {
				//finger pressed
				IQS_timer = HAL_GetTick();
				IQS_swipe = 0;
				IQS_x_init = IQS_x;
				IQS_hold = 0;
			}
		} else {
			if ((IQS_swipe == 0) && (IQS_hold == 0)) {
				//not swiping
				if (IQS_x == 65535) {
					//finger released
					if (HAL_GetTick() - IQS_timer < 300) {
						//single tap
						buttonPressed = RIGHTBUTTON;
					}
				} else {
					//check for swipe
					if (abs(IQS_x - IQS_x_init) > 50) {
						IQS_swipe = 1;
						LED_Intensity_Source = 1;
					} else if (HAL_GetTick() - IQS_timer > 300) {
						//Press and hold event
						buttonPressed = MIDDLEBUTTON;
						IQS_hold = 1;
					}
				}
			} else if (IQS_hold == 0) {
				//Swiping
				if (IQS_x != 65535) {
					LED_Intensity = LED_Intensity
							+ (IQS_x - IQS_x_prev) * 512.0 / 1500.0;
					if (LED_Intensity > 0xEFFF) {
						LED_Intensity = 0;
					} else if (LED_Intensity > 512) {
						LED_Intensity = 512;
					}
				}
			}
		}
	}

	IQS_x_prev = IQS_x;

	/*


	 IQS7211AupdateGestures(RESTART);
	 IQS7211AupdateAbsCoordinates(RESTART, FINGER_1);
	 IQS7211AupdateAbsCoordinates(STOP, FINGER_2);
	 uint8_t outp = 1;
	 switch (IQSMemoryMap.iqs7211a_gesture_events.iqs7211a_gesture_events_lsb) {
	 case 0:
	 outp = 0;
	 //HAL_UART_Transmit(&huart2, (uint8_t*) "No Gesture  ", 10, 100);
	 //Serial.print("No Gesture  ");
	 break;
	 case 1:
	 // Serial.print("Single Tap  ");
	 HAL_UART_Transmit(&huart2, (uint8_t*) "Single Tap  ", 10, 100);
	 break;
	 case 2:
	 HAL_UART_Transmit(&huart2, (uint8_t*) "Press and Hold", 10, 100);
	 //Serial.print("Press and Hold");
	 break;
	 case 4:
	 HAL_UART_Transmit(&huart2, (uint8_t*) "Swipe X Neg  ", 10, 100);
	 //Serial.print("Swipe X Neg  ");
	 break;
	 case 8:
	 HAL_UART_Transmit(&huart2, (uint8_t*) "Swipe X Pos  ", 10, 100);
	 //Serial.print("Swipe X Pos  ");
	 break;
	 case 16:
	 HAL_UART_Transmit(&huart2, (uint8_t*) "Swipe Y Pos  ", 10, 100);
	 // Serial.print("Swipe Y Pos  ");
	 break;
	 case 32:
	 HAL_UART_Transmit(&huart2, (uint8_t*) "Swipe Y Neg  ", 10, 100);
	 // Serial.print("Swipe Y Neg  ");
	 break;
	 default:
	 outp = 1;
	 break;
	 }*/

//if (1) {
//Note that a value of 65535 means there is no touch
//Serial.print("          ");
//uint8_t outpu[20];
// num2str(IQSMemoryMap.iqs7211a_gesture_events.single_tap, outpu, 5);
// HAL_UART_Transmit(&huart2, outpu, 5, 100);
//HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 100);
// num2str(IQSMemoryMap.iqs7211a_gesture_events.iqs7211a_gesture_events_lsb, outpu, 5);
//HAL_UART_Transmit(&huart2, outpu, 5, 100);
//HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 100);
//num2str(IQS7211AgetAbsXCoordinate(FINGER_1), outpu, 5);
//HAL_UART_Transmit(&huart2, outpu, 5, 100);
//HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 100);
//num2str(LED_R_Intensity, outpu, 5);
//HAL_UART_Transmit(&huart2, outpu, 5, 100);
//HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 100);
//num2str(LED_G_Intensity, outpu, 5);
//HAL_UART_Transmit(&huart2, outpu, 5, 100);
//HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 100);
//num2str(LED_B_Intensity, outpu, 5);
//	HAL_UART_Transmit(&huart2, outpu, 5, 100);
//	HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 100);
//		num2str(LED_DAC_Value, outpu, 5);
//	HAL_UART_Transmit(&huart2, outpu, 5, 100);
//HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 100);
//Serial.print(IQS7211AgetAbsXCoordinate(FINGER_1));
//Serial.print("               ");
//num2str(IQS7211AgetAbsYCoordinate(FINGER_1), outpu, 5);
//HAL_UART_Transmit(&huart2, outpu, 5, 100);
//HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 100);
//Serial.print(iqs7211a.getAbsYCoordinate(FINGER_1));
//Serial.print("               ");
//num2str(IQS7211AgetAbsXCoordinate(FINGER_2), outpu, 5);
//HAL_UART_Transmit(&huart2, outpu, 5, 100);
//HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 100);
//Serial.print(iqs7211a.getAbsXCoordinate(FINGER_2));
//Serial.print("               ");
//num2str(IQS7211AgetAbsYCoordinate(FINGER_2), outpu, 5);
//HAL_UART_Transmit(&huart2, outpu, 5, 100);
//HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 100);
//Serial.println(iqs7211a.getAbsYCoordinate(FINGER_2));
//}
}

/*
 void DMA_Build_profile(void) {
 if (mode == MF) {
 DMA_profile[0] = LED_DAC_Value;
 PWM_DMA_profile[0] = LED_PWM_Value;
 DMA_Length = 1;
 }
 if (mode == ME) {
 if (E_mode == STROBE) {
 DMA_Length = 2 * LED_Strobe_Time;
 for (int i = 0; i < DMA_Length; i++) {
 if (i < LED_Strobe_Time) {
 DMA_profile[i] = LED_DAC_Value;
 PWM_DMA_profile[i] = LED_PWM_Value;
 } else {
 DMA_profile[i] = 0;
 PWM_DMA_profile[i] = 0;
 }
 }
 }
 }

 }
 void DAC_Update(void) {
 if (mode == ME) {
 if (E_mode == STROBE) {
 if (Strobe_Timer <= LED_Strobe_Time) {

 }
 }
 }
 if (mode == ME) {
 if (LED_Strobe_Time != prev_LED_Strobe_Time) {
 SET_DMA_Output();
 prev_LED_Strobe_Time = LED_Strobe_Time;
 }
 }

 }

 void SET_DMA_Output(void) {
 HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DMA_profile, DMA_Length,
 DAC_ALIGN_12B_R);
 HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, PWM_DMA_profile, DMA_Length);
 prev_LED_Strobe_Time = LED_Strobe_Time;
 }*/
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
